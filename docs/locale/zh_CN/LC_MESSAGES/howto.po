# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: DjangoLTS-docs-zh_CN\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-05 16:46+0800\n"
"PO-Revision-Date: 2016-05-06 05:15+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/djangolts-docs-zh_cn/djangolts-docs-zh_cn/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr ""

#: ../../howto/auth-remote-user.txt:5
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your"
" Django applications.  This type of authentication solution is typically "
"seen on intranet sites, with single sign-on solutions such as IIS and "
"Integrated Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, "
"`Cosign`_, `WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

#: ../../howto/auth-remote-user.txt:18
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application."
"  In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make"
" use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and "
":class:`~django.contrib.auth.backends.RemoteUserBackend` classes found in "
":mod:`django.contrib.auth`."
msgstr ""

#: ../../howto/auth-remote-user.txt:27
msgid "Configuration"
msgstr ""

#: ../../howto/auth-remote-user.txt:29
msgid ""
"First, you must add the "
":class:`django.contrib.auth.middleware.RemoteUserMiddleware` to the "
":setting:`MIDDLEWARE_CLASSES` setting **after** the "
":class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

#: ../../howto/auth-remote-user.txt:41
msgid ""
"Next, you must replace the "
":class:`~django.contrib.auth.backends.ModelBackend` with "
":class:`~django.contrib.auth.backends.RemoteUserBackend` in the "
":setting:`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

#: ../../howto/auth-remote-user.txt:49
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the :class:`~django.contrib.auth.backends.RemoteUserBackend`."
msgstr ""

#: ../../howto/auth-remote-user.txt:53
msgid ""
"Be aware that this particular setup disables authentication with the default"
" ``ModelBackend``. This means that if the ``REMOTE_USER`` value is not set "
"then the user is unable to log in, even using Django's admin interface. "
"Adding ``'django.contrib.auth.backends.ModelBackend'`` to the "
"``AUTHENTICATION_BACKENDS`` list will use ``ModelBackend`` as a fallback if "
"``REMOTE_USER`` is absent, which will solve these issues."
msgstr ""

#: ../../howto/auth-remote-user.txt:60
msgid ""
"Django's user management, such as the views in ``contrib.admin`` and the "
":djadmin:`createsuperuser` management command, doesn't integrate with remote"
" users. These interfaces work with users stored in the database regardless "
"of ``AUTHENTICATION_BACKENDS``."
msgstr ""

#: ../../howto/auth-remote-user.txt:66
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""

#: ../../howto/auth-remote-user.txt:70
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

#: ../../howto/auth-remote-user.txt:81
msgid ""
"Be very careful if using a ``RemoteUserMiddleware`` subclass with a custom "
"HTTP header. You must be sure that your front-end web server always sets or "
"strips that header based on the appropriate authentication checks, never "
"permitting an end-user to submit a fake (or \"spoofed\") header value. Since"
" the HTTP headers ``X-Auth-User`` and ``X-Auth_User`` (for example) both "
"normalize to the ``HTTP_X_AUTH_USER`` key in ``request.META``, you must also"
" check that your web server doesn't allow a spoofed header using underscores"
" in place of dashes."
msgstr ""

#: ../../howto/auth-remote-user.txt:90
msgid ""
"This warning doesn't apply to ``RemoteUserMiddleware`` in its default "
"configuration with ``header = 'REMOTE_USER'``, since a key that doesn't "
"start with ``HTTP_`` in ``request.META`` can only be set by your WSGI "
"server, not directly from an HTTP request header."
msgstr ""

#: ../../howto/auth-remote-user.txt:95
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"and override one or more of its attributes and methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:2
msgid "Writing a custom storage system"
msgstr ""

#: ../../howto/custom-file-storage.txt:6
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""

#: ../../howto/custom-file-storage.txt:10
msgid ""
"Your custom storage system must be a subclass of "
"``django.core.files.storage.Storage``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:18
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from "
"``django.conf.settings``::"
msgstr ""

#: ../../howto/custom-file-storage.txt:30
msgid ""
"Your storage class must implement the :meth:`_open()` and :meth:`_save()` "
"methods, along with any other methods appropriate to your storage class. See"
" below for more on these methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:34
msgid ""
"In addition, if your class provides local file storage, it must override the"
" ``path()`` method."
msgstr ""

#: ../../howto/custom-file-storage.txt:37
msgid ""
"Your storage class must be :ref:`deconstructible <custom-deconstruct-"
"method>` so it can be serialized when it's used on a field in a migration. "
"As long as your field has arguments that are themselves :ref:`serializable "
"<migration-serializing>`, you can use the "
"``django.utils.deconstruct.deconstructible`` class decorator for this "
"(that's what Django uses on FileSystemStorage)."
msgstr ""

#: ../../howto/custom-file-storage.txt:44
msgid ""
"By default, the following methods raise `NotImplementedError` and will "
"typically have to be overridden:"
msgstr ""

#: ../../howto/custom-file-storage.txt:47
msgid ":meth:`Storage.delete`"
msgstr ""

#: ../../howto/custom-file-storage.txt:48
msgid ":meth:`Storage.exists`"
msgstr ""

#: ../../howto/custom-file-storage.txt:49
msgid ":meth:`Storage.listdir`"
msgstr ""

#: ../../howto/custom-file-storage.txt:50
msgid ":meth:`Storage.size`"
msgstr ""

#: ../../howto/custom-file-storage.txt:51
msgid ":meth:`Storage.url`"
msgstr ""

#: ../../howto/custom-file-storage.txt:53
msgid ""
"Note however that not all these methods are required and may be deliberately"
" omitted. As it happens, it is possible to leave each method unimplemented "
"and still have a working Storage."
msgstr ""

#: ../../howto/custom-file-storage.txt:57
msgid ""
"By way of example, if listing the contents of certain storage backends turns"
" out to be expensive, you might decide not to implement `Storage.listdir`."
msgstr ""

#: ../../howto/custom-file-storage.txt:60
msgid ""
"Another example would be a backend that only handles writing to files. In "
"this case, you would not need to implement any of the above methods."
msgstr ""

#: ../../howto/custom-file-storage.txt:63
msgid ""
"Ultimately, which of these methods are implemented is up to you. Leaving "
"some methods unimplemented will result in a partial (possibly broken) "
"interface."
msgstr ""

#: ../../howto/custom-file-storage.txt:66
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

#: ../../howto/custom-file-storage.txt:71
msgid "**Required**."
msgstr ""

#: ../../howto/custom-file-storage.txt:73
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class"
" uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

#: ../../howto/custom-file-storage.txt:80
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

#: ../../howto/custom-file-storage.txt:84
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

#: ../../howto/custom-file-storage.txt:90
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is the original filename sent to the"
" server, after having any path information removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

#: ../../howto/custom-file-storage.txt:95
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything "
"else."
msgstr ""

#: ../../howto/custom-file-storage.txt:100
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

#: ../../howto/custom-file-storage.txt:105
msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a"
" free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception is raised."
msgstr ""

#: ../../howto/custom-file-storage.txt:109
msgid ""
"If a file with ``name`` already exists, an underscore plus a random 7 "
"character alphanumeric string is appended to the filename before the "
"extension."
msgstr ""

#: ../../howto/custom-file-storage.txt:114
msgid ""
"Previously, an underscore followed by a number (e.g. ``\"_1\"``, ``\"_2\"``,"
" etc.) was appended to the filename until an available name in the "
"destination directory was found. A malicious user could exploit this "
"deterministic algorithm to create a denial-of-service attack. This change "
"was also made in Django 1.6.6, 1.5.9, and 1.4.14."
msgstr ""

#: ../../howto/custom-file-storage.txt:122
msgid "The ``max_length`` argument was added."
msgstr ""

#: ../../howto/custom-lookups.txt:3
msgid "Custom Lookups"
msgstr ""

#: ../../howto/custom-lookups.txt:9
msgid ""
"Django offers a wide variety of :ref:`built-in lookups <field-lookups>` for "
"filtering (for example, ``exact`` and ``icontains``). This documentation "
"explains how to write custom lookups and how to alter the working of "
"existing lookups. For the API references of lookups, see the "
":doc:`/ref/models/lookups`."
msgstr ""

#: ../../howto/custom-lookups.txt:15
msgid "A simple lookup example"
msgstr ""

#: ../../howto/custom-lookups.txt:17
msgid ""
"Let's start with a simple custom lookup. We will write a custom lookup "
"``ne`` which works opposite to ``exact``. "
"``Author.objects.filter(name__ne='Jack')`` will translate to the SQL::"
msgstr ""

#: ../../howto/custom-lookups.txt:23
msgid ""
"This SQL is backend independent, so we don't need to worry about different "
"databases."
msgstr ""

#: ../../howto/custom-lookups.txt:26
msgid ""
"There are two steps to making this work. Firstly we need to implement the "
"lookup, then we need to tell Django about it. The implementation is quite "
"straightforward::"
msgstr ""

#: ../../howto/custom-lookups.txt:41
msgid ""
"To register the ``NotEqual`` lookup we will just need to call "
"``register_lookup`` on the field class we want the lookup to be available. "
"In this case, the lookup makes sense on all ``Field`` subclasses, so we "
"register it with ``Field`` directly::"
msgstr ""

#: ../../howto/custom-lookups.txt:49
msgid "Lookup registration can also be done using a decorator pattern::"
msgstr ""

#: ../../howto/custom-lookups.txt:59
msgid "The ability to use the decorator pattern was added."
msgstr ""

#: ../../howto/custom-lookups.txt:61
msgid ""
"We can now use ``foo__ne`` for any field ``foo``. You will need to ensure "
"that this registration happens before you try to create any querysets using "
"it. You could place the implementation in a ``models.py`` file, or register "
"the lookup in the ``ready()`` method of an ``AppConfig``."
msgstr ""

#: ../../howto/custom-lookups.txt:66
msgid ""
"Taking a closer look at the implementation, the first required attribute is "
"``lookup_name``. This allows the ORM to understand how to interpret "
"``name__ne`` and use ``NotEqual`` to generate the SQL. By convention, these "
"names are always lowercase strings containing only letters, but the only "
"hard requirement is that it must not contain the string ``__``."
msgstr ""

#: ../../howto/custom-lookups.txt:72
msgid ""
"We then need to define the ``as_sql`` method. This takes a ``SQLCompiler`` "
"object, called ``compiler``,  and the active database connection. "
"``SQLCompiler`` objects are not documented, but the only thing we need to "
"know about them is that they have a ``compile()`` method which returns a "
"tuple containing a SQL string, and the parameters to be interpolated into "
"that string. In most cases, you don't need to use it directly and can pass "
"it on to ``process_lhs()`` and ``process_rhs()``."
msgstr ""

#: ../../howto/custom-lookups.txt:80
msgid ""
"A ``Lookup`` works against two values, ``lhs`` and ``rhs``, standing for "
"left-hand side and right-hand side. The left-hand side is usually a field "
"reference, but it can be anything implementing the :ref:`query expression "
"API <query-expression>`. The right-hand is the value given by the user. In "
"the example ``Author.objects.filter(name__ne='Jack')``, the left-hand side "
"is a reference to the ``name`` field of the ``Author`` model, and ``'Jack'``"
" is the right-hand side."
msgstr ""

#: ../../howto/custom-lookups.txt:88
msgid ""
"We call ``process_lhs`` and ``process_rhs`` to convert them into the values "
"we need for SQL using the ``compiler`` object described before. These "
"methods return tuples containing some SQL and the parameters to be "
"interpolated into that SQL, just as we need to return from our ``as_sql`` "
"method. In the above example, ``process_lhs`` returns "
"``('\"author\".\"name\"', [])`` and ``process_rhs`` returns ``('\"%s\"', "
"['Jack'])``. In this example there were no parameters for the left hand "
"side, but this would depend on the object we have, so we still need to "
"include them in the parameters we return."
msgstr ""

#: ../../howto/custom-lookups.txt:97
msgid ""
"Finally we combine the parts into a SQL expression with ``<>``, and supply "
"all the parameters for the query. We then return a tuple containing the "
"generated SQL string and the parameters."
msgstr ""

#: ../../howto/custom-lookups.txt:102
msgid "A simple transformer example"
msgstr ""

#: ../../howto/custom-lookups.txt:104
msgid ""
"The custom lookup above is great, but in some cases you may want to be able "
"to chain lookups together. For example, let's suppose we are building an "
"application where we want to make use of the ``abs()`` operator. We have an "
"``Experiment`` model which records a start value, end value, and the change "
"(start - end). We would like to find all experiments where the change was "
"equal to a certain amount (``Experiment.objects.filter(change__abs=27)``), "
"or where it did not exceed a certain amount "
"(``Experiment.objects.filter(change__abs__lt=27)``)."
msgstr ""

#: ../../howto/custom-lookups.txt:114
msgid ""
"This example is somewhat contrived, but it nicely demonstrates the range of "
"functionality which is possible in a database backend independent manner, "
"and without duplicating functionality already in Django."
msgstr ""

#: ../../howto/custom-lookups.txt:118
msgid ""
"We will start by writing a ``AbsoluteValue`` transformer. This will use the "
"SQL function ``ABS()`` to transform the value before comparison::"
msgstr ""

#: ../../howto/custom-lookups.txt:130
msgid "Next, let's register it for ``IntegerField``::"
msgstr ""

#: ../../howto/custom-lookups.txt:135
msgid ""
"We can now run the queries we had before. "
"``Experiment.objects.filter(change__abs=27)`` will generate the following "
"SQL::"
msgstr ""

#: ../../howto/custom-lookups.txt:140
msgid ""
"By using ``Transform`` instead of ``Lookup`` it means we are able to chain "
"further lookups afterwards. So "
"``Experiment.objects.filter(change__abs__lt=27)`` will generate the "
"following SQL::"
msgstr ""

#: ../../howto/custom-lookups.txt:147
msgid ""
"Note that in case there is no other lookup specified, Django interprets "
"``change__abs=27`` as ``change__abs__exact=27``."
msgstr ""

#: ../../howto/custom-lookups.txt:150
msgid ""
"When looking for which lookups are allowable after the ``Transform`` has "
"been applied, Django uses the ``output_field`` attribute. We didn't need to "
"specify this here as it didn't change, but supposing we were applying "
"``AbsoluteValue`` to some field which represents a more complex type (for "
"example a point relative to an origin, or a complex number) then we may have"
" wanted to specify that the transform returns a ``FloatField`` type for "
"further lookups. This can be done by adding an ``output_field`` attribute to"
" the transform::"
msgstr ""

#: ../../howto/custom-lookups.txt:171
msgid ""
"This ensures that further lookups like ``abs__lte`` behave as they would for"
" a ``FloatField``."
msgstr ""

#: ../../howto/custom-lookups.txt:175
msgid "Writing an efficient abs__lt lookup"
msgstr ""

#: ../../howto/custom-lookups.txt:177
msgid ""
"When using the above written ``abs`` lookup, the SQL produced will not use "
"indexes efficiently in some cases. In particular, when we use "
"``change__abs__lt=27``, this is equivalent to ``change__gt=-27`` AND "
"``change__lt=27``. (For the ``lte`` case we could use the SQL ``BETWEEN``)."
msgstr ""

#: ../../howto/custom-lookups.txt:182
msgid ""
"So we would like ``Experiment.objects.filter(change__abs__lt=27)`` to "
"generate the following SQL::"
msgstr ""

#: ../../howto/custom-lookups.txt:187
msgid "The implementation is::"
msgstr ""

#: ../../howto/custom-lookups.txt:202
msgid ""
"There are a couple of notable things going on. First, "
"``AbsoluteValueLessThan`` isn't calling ``process_lhs()``. Instead it skips "
"the transformation of the ``lhs`` done by ``AbsoluteValue`` and uses the "
"original ``lhs``. That is, we want to get ``\"experiments\".\"change\"`` not"
" ``ABS(\"experiments\".\"change\")``. Referring directly to ``self.lhs.lhs``"
" is safe as ``AbsoluteValueLessThan`` can be accessed only from the "
"``AbsoluteValue`` lookup, that is the ``lhs`` is always an instance of "
"``AbsoluteValue``."
msgstr ""

#: ../../howto/custom-lookups.txt:210
msgid ""
"Notice also that  as both sides are used multiple times in the query the "
"params need to contain ``lhs_params`` and ``rhs_params`` multiple times."
msgstr ""

#: ../../howto/custom-lookups.txt:213
msgid ""
"The final query does the inversion (``27`` to ``-27``) directly in the "
"database. The reason for doing this is that if the ``self.rhs`` is something"
" else than a plain integer value (for example an ``F()`` reference) we can't"
" do the transformations in Python."
msgstr ""

#: ../../howto/custom-lookups.txt:219
msgid ""
"In fact, most lookups with ``__abs`` could be implemented as range queries "
"like this, and on most database backends it is likely to be more sensible to"
" do so as you can make use of the indexes. However with PostgreSQL you may "
"want to add an index on ``abs(change)`` which would allow these queries to "
"be very efficient."
msgstr ""

#: ../../howto/custom-lookups.txt:226
msgid "A bilateral transformer example"
msgstr ""

#: ../../howto/custom-lookups.txt:228
msgid ""
"The ``AbsoluteValue`` example we discussed previously is a transformation "
"which applies to the left-hand side of the lookup. There may be some cases "
"where you want the transformation to be applied to both the left-hand side "
"and the right-hand side. For instance, if you want to filter a queryset "
"based on the equality of the left and right-hand side insensitively to some "
"SQL function."
msgstr ""

#: ../../howto/custom-lookups.txt:234
msgid ""
"Let's examine the simple example of case-insensitive transformation here. "
"This transformation isn't very useful in practice as Django already comes "
"with a bunch of built-in case-insensitive lookups, but it will be a nice "
"demonstration of bilateral transformations in a database-agnostic way."
msgstr ""

#: ../../howto/custom-lookups.txt:239
msgid ""
"We define an ``UpperCase`` transformer which uses the SQL function "
"``UPPER()`` to transform the values before comparison. We define "
":attr:`bilateral = True <django.db.models.Transform.bilateral>` to indicate "
"that this transformation should apply to both ``lhs`` and ``rhs``::"
msgstr ""

#: ../../howto/custom-lookups.txt:254
msgid "Next, let's register it::"
msgstr ""

#: ../../howto/custom-lookups.txt:260
msgid ""
"Now, the queryset ``Author.objects.filter(name__upper=\"doe\")`` will "
"generate a case insensitive query like this::"
msgstr ""

#: ../../howto/custom-lookups.txt:266
msgid "Writing alternative implementations for existing lookups"
msgstr ""

#: ../../howto/custom-lookups.txt:268
msgid ""
"Sometimes different database vendors require different SQL for the same "
"operation. For this example we will rewrite a custom implementation for "
"MySQL for the NotEqual operator. Instead of ``<>`` we will be using ``!=`` "
"operator. (Note that in reality almost all databases support both, including"
" all the official databases supported by Django)."
msgstr ""

#: ../../howto/custom-lookups.txt:274
msgid ""
"We can change the behavior on a specific backend by creating a subclass of "
"``NotEqual`` with a ``as_mysql`` method::"
msgstr ""

#: ../../howto/custom-lookups.txt:286
msgid ""
"We can then register it with ``Field``. It takes the place of the original "
"``NotEqual`` class as it has the same ``lookup_name``."
msgstr ""

#: ../../howto/custom-lookups.txt:289
msgid ""
"When compiling a query, Django first looks for ``as_%s % connection.vendor``"
" methods, and then falls back to ``as_sql``. The vendor names for the in-"
"built backends are ``sqlite``, ``postgresql``, ``oracle`` and ``mysql``."
msgstr ""

#: ../../howto/custom-lookups.txt:294
msgid "How Django determines the lookups and transforms which are used"
msgstr ""

#: ../../howto/custom-lookups.txt:296
msgid ""
"In some cases you may wish to dynamically change which ``Transform`` or "
"``Lookup`` is returned based on the name passed in, rather than fixing it. "
"As an example, you could have a field which stores coordinates or an "
"arbitrary dimension, and wish to allow a syntax like "
"``.filter(coords__x7=4)`` to return the objects where the 7th coordinate has"
" value 4. In order to do this, you would override ``get_lookup`` with "
"something like::"
msgstr ""

#: ../../howto/custom-lookups.txt:314
msgid ""
"You would then define ``get_coordinate_lookup`` appropriately to return a "
"``Lookup`` subclass which handles the relevant value of ``dimension``."
msgstr ""

#: ../../howto/custom-lookups.txt:317
msgid ""
"There is a similarly named method called ``get_transform()``. "
"``get_lookup()`` should always return a ``Lookup`` subclass, and "
"``get_transform()`` a ``Transform`` subclass. It is important to remember "
"that ``Transform`` objects can be further filtered on, and ``Lookup`` "
"objects cannot."
msgstr ""

#: ../../howto/custom-lookups.txt:322
msgid ""
"When filtering, if there is only one lookup name remaining to be resolved, "
"we will look for a ``Lookup``. If there are multiple names, it will look for"
" a ``Transform``. In the situation where there is only one name and a "
"``Lookup`` is not found, we look for a ``Transform`` and then the ``exact`` "
"lookup on that ``Transform``. All call sequences always end with a "
"``Lookup``. To clarify:"
msgstr ""

#: ../../howto/custom-lookups.txt:328
msgid ""
"``.filter(myfield__mylookup)`` will call ``myfield.get_lookup('mylookup')``."
msgstr ""

#: ../../howto/custom-lookups.txt:329
msgid ""
"``.filter(myfield__mytransform__mylookup)`` will call "
"``myfield.get_transform('mytransform')``, and then "
"``mytransform.get_lookup('mylookup')``."
msgstr ""

#: ../../howto/custom-lookups.txt:332
msgid ""
"``.filter(myfield__mytransform)`` will first call "
"``myfield.get_lookup('mytransform')``, which will fail, so it will fall back"
" to calling ``myfield.get_transform('mytransform')`` and then "
"``mytransform.get_lookup('exact')``."
msgstr ""

#: ../../howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr ""

#: ../../howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example,"
" you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the "
":doc:`tutorial</intro/tutorial01>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:13
msgid ""
"To do this, just add a ``management/commands`` directory to the application."
" Django will register a ``manage.py`` command for each Python module in that"
" directory whose name doesn't begin with an underscore. For example::"
msgstr ""

#: ../../howto/custom-management-commands.txt:29
msgid ""
"On Python 2, be sure to include ``__init__.py`` files in both the "
"``management`` and ``management/commands`` directories as done above or your"
" command will not be detected."
msgstr ""

#: ../../howto/custom-management-commands.txt:33
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in "
":setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/custom-management-commands.txt:36
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:38
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:42
msgid "Standalone scripts"
msgstr ""

#: ../../howto/custom-management-commands.txt:44
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

#: ../../howto/custom-management-commands.txt:48
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to"
" look like this::"
msgstr ""

#: ../../howto/custom-management-commands.txt:74
msgid ""
"Before Django 1.8, management commands were based on the :py:mod:`optparse` "
"module, and positional arguments were passed in ``*args`` while optional "
"arguments were passed in ``**options``. Now that management commands use "
":py:mod:`argparse` for argument parsing, all arguments are passed in "
"``**options`` by default, unless you name your positional arguments to "
"``args`` (compatibility mode). You are encouraged to exclusively use "
"``**options`` for new commands."
msgstr ""

#: ../../howto/custom-management-commands.txt:85
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing"
" to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""

#: ../../howto/custom-management-commands.txt:95
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:98
msgid ""
"The ``handle()`` method takes one or more ``poll_ids`` and sets "
"``poll.opened`` to ``False`` for each one. If the user referenced any "
"nonexistent polls, a :class:`CommandError` is raised. The ``poll.opened`` "
"attribute does not exist in the :doc:`tutorial</intro/tutorial01>` and was "
"added to ``polls.models.Poll`` for this example."
msgstr ""

#: ../../howto/custom-management-commands.txt:107
msgid "Accepting optional arguments"
msgstr ""

#: ../../howto/custom-management-commands.txt:109
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options can be added in the :meth:`~BaseCommand.add_arguments` method"
" like this::"
msgstr ""

#: ../../howto/custom-management-commands.txt:133
msgid ""
"Previously, only the standard :py:mod:`optparse` library was supported and "
"you would have to extend the command ``option_list`` variable with "
"``optparse.make_option()``."
msgstr ""

#: ../../howto/custom-management-commands.txt:137
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`argparse` Python "
"documentation for more about ``add_argument`` usage."
msgstr ""

#: ../../howto/custom-management-commands.txt:141
msgid ""
"In addition to being able to add custom command line options, all "
":doc:`management commands</ref/django-admin>` can accept some default "
"options such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

#: ../../howto/custom-management-commands.txt:148
msgid "Management commands and locales"
msgstr ""

#: ../../howto/custom-management-commands.txt:150
msgid ""
"By default, the :meth:`BaseCommand.execute` method deactivates translations "
"because some commands shipped with Django perform several tasks (for "
"example, user-facing content rendering and database population) that require"
" a project-neutral string language."
msgstr ""

#: ../../howto/custom-management-commands.txt:157
msgid ""
"In previous versions, Django forced the \"en-us\" locale instead of "
"deactivating translations."
msgstr ""

#: ../../howto/custom-management-commands.txt:160
msgid ""
"If, for some reason, your custom management command needs to use a fixed "
"locale, you should manually activate and deactivate it in your "
":meth:`~BaseCommand.handle` method using the functions provided by the I18N "
"support code::"
msgstr ""

#: ../../howto/custom-management-commands.txt:186
msgid ""
"Another need might be that your command simply should use the locale set in "
"settings and Django should be kept from deactivating it. You can achieve it "
"by using the :data:`BaseCommand.leave_locale_alone` option."
msgstr ""

#: ../../howto/custom-management-commands.txt:190
msgid ""
"When working on the scenarios described above though, take into account that"
" system management commands typically have to be very careful about running "
"in non-uniform locales, so you might need to:"
msgstr ""

#: ../../howto/custom-management-commands.txt:194
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is a good example of the potential problems stemming from "
"a dynamic runtime environment that Django commands avoid offhand by "
"deactivating translations)."
msgstr ""

#: ../../howto/custom-management-commands.txt:199
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""

#: ../../howto/custom-management-commands.txt:204
#: ../../howto/static-files/index.txt:143 ../../howto/upgrade-version.txt:69
msgid "Testing"
msgstr ""

#: ../../howto/custom-management-commands.txt:206
msgid ""
"Information on how to test custom management commands can be found in the "
":ref:`testing docs <topics-testing-management-commands>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:210
msgid "Command objects"
msgstr ""

#: ../../howto/custom-management-commands.txt:214
msgid "The base class from which all management commands ultimately derive."
msgstr ""

#: ../../howto/custom-management-commands.txt:216
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its "
":ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:221
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the "
":meth:`~BaseCommand.handle` method."
msgstr ""

#: ../../howto/custom-management-commands.txt:225
msgid "Attributes"
msgstr ""

#: ../../howto/custom-management-commands.txt:227
msgid ""
"All attributes can be set in your derived class and can be used in "
":class:`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:232
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might"
" set this to '<app_label app_label ...>'."
msgstr ""

#: ../../howto/custom-management-commands.txt:239
msgid ""
"This should be done now in the :meth:`~BaseCommand.add_arguments()` method, "
"by calling the ``parser.add_argument()`` method. See the ``closepoll`` "
"example above."
msgstr ""

#: ../../howto/custom-management-commands.txt:245
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""

#: ../../howto/custom-management-commands.txt:252
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""

#: ../../howto/custom-management-commands.txt:260
msgid ""
"If your command defines mandatory positional arguments, you can customize "
"the message error returned in the case of missing arguments. The default is "
"output by :py:mod:`argparse` (\"too few arguments\")."
msgstr ""

#: ../../howto/custom-management-commands.txt:266
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""

#: ../../howto/custom-management-commands.txt:271
msgid ""
"You should now override the :meth:`~BaseCommand.add_arguments` method to add"
" custom arguments accepted by your command. See :ref:`the example above "
"<custom-commands-options>`."
msgstr ""

#: ../../howto/custom-management-commands.txt:277
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:285
msgid ""
"A boolean; if ``True``, the entire Django project will be checked for "
"potential problems prior to executing the command. If "
"``requires_system_checks`` is missing, the value of "
"``requires_model_validation`` is used. If the latter flag is missing as "
"well, the default value (``True``) is used. Defining both "
"``requires_system_checks`` and ``requires_model_validation`` will result in "
"an error."
msgstr ""

#: ../../howto/custom-management-commands.txt:295
msgid "Replaced by ``requires_system_checks``"
msgstr ""

#: ../../howto/custom-management-commands.txt:298
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call "
":meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

#: ../../howto/custom-management-commands.txt:305
msgid ""
"A boolean indicating whether the locale set in settings should be preserved "
"during the execution of the command instead of being forcibly set to 'en-"
"us'."
msgstr ""

#: ../../howto/custom-management-commands.txt:308
msgid "Default value is ``False``."
msgstr ""

#: ../../howto/custom-management-commands.txt:310
msgid ""
"Make sure you know what you are doing if you decide to change the value of "
"this option in your custom command if it creates database content that is "
"locale-sensitive and such content shouldn't contain any translations (like "
"it happens e.g. with django.contrib.auth permissions) as making the locale "
"differ from the de facto default 'en-us' might cause unintended effects. "
"Seethe `Management commands and locales`_ section above for further details."
msgstr ""

#: ../../howto/custom-management-commands.txt:318
msgid ""
"This option can't be ``False`` when the "
":data:`~BaseCommand.can_import_settings` option is set to ``False`` too "
"because attempting to set the locale needs access to settings. This "
"condition will generate a :class:`CommandError`."
msgstr ""

#: ../../howto/custom-management-commands.txt:325
msgid ""
"An instance attribute that helps create colored output when writing to "
"``stdout`` or ``stderr``. For example::"
msgstr ""

#: ../../howto/custom-management-commands.txt:330
msgid ""
"See :ref:`syntax-coloring` to learn how to modify the color palette and to "
"see the available styles (use uppercased versions of the \"roles\" described"
" in that section)."
msgstr ""

#: ../../howto/custom-management-commands.txt:334
msgid ""
"If you pass the :djadminopt:`--no-color` option when running your command, "
"all ``self.style()`` calls will return the original string uncolored."
msgstr ""

#: ../../howto/custom-management-commands.txt:339
msgid "Methods"
msgstr ""

#: ../../howto/custom-management-commands.txt:341
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the "
":meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

#: ../../howto/custom-management-commands.txt:344
msgid "Implementing a constructor in a subclass"
msgstr ""

#: ../../howto/custom-management-commands.txt:346
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``::"
msgstr ""

#: ../../howto/custom-management-commands.txt:358
msgid ""
"Entry point to add parser arguments to handle command line arguments passed "
"to the command. Custom commands should override this method to add both "
"positional and optional arguments accepted by the command. Calling "
"``super()`` is not needed when directly subclassing ``BaseCommand``."
msgstr ""

#: ../../howto/custom-management-commands.txt:365
msgid ""
"Returns the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

#: ../../howto/custom-management-commands.txt:371
msgid ""
"Tries to execute this command, performing system checks if needed (as "
"controlled by the :attr:`requires_system_checks` attribute). If the command "
"raises a :class:`CommandError`, it's intercepted and printed to stderr."
msgstr ""

#: ../../howto/custom-management-commands.txt:375
msgid "Calling a management command in your code"
msgstr ""

#: ../../howto/custom-management-commands.txt:377
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :ref:`call_command <call-command>` instead."
msgstr ""

#: ../../howto/custom-management-commands.txt:382
msgid ""
"The actual logic of the command. Subclasses must implement this method."
msgstr ""

#: ../../howto/custom-management-commands.txt:384
msgid ""
"It may return a Unicode string which will be printed to ``stdout`` (wrapped "
"by ``BEGIN;`` and ``COMMIT;`` if :attr:`output_transaction` is ``True``)."
msgstr ""

#: ../../howto/custom-management-commands.txt:391
msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :class:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr ""

#: ../../howto/custom-management-commands.txt:395
msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr ""

#: ../../howto/custom-management-commands.txt:401
msgid "Replaced with the :djadmin:`check` command"
msgstr ""

#: ../../howto/custom-management-commands.txt:404
msgid "If ``app`` is None, then all installed apps are checked for errors."
msgstr ""

#: ../../howto/custom-management-commands.txt:409
msgid "BaseCommand subclasses"
msgstr ""

#: ../../howto/custom-management-commands.txt:413
msgid ""
"A management command which takes one or more installed application labels as"
" arguments, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:416
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""

#: ../../howto/custom-management-commands.txt:422
msgid ""
"Perform the command's actions for ``app_config``, which will be an "
":class:`~django.apps.AppConfig` instance corresponding to an application "
"label given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:428
msgid ""
"Previously, :class:`AppCommand` subclasses had to implement "
"``handle_app(app, **options)`` where ``app`` was a models module. The new "
"API makes it possible to handle applications without a models module. The "
"fastest way to migrate is as follows::"
msgstr ""

#: ../../howto/custom-management-commands.txt:439
msgid ""
"However, you may be able to simplify the implementation by using directly "
"the attributes of ``app_config``."
msgstr ""

#: ../../howto/custom-management-commands.txt:444
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on"
" the command line, and does something with each of them."
msgstr ""

#: ../../howto/custom-management-commands.txt:447
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

#: ../../howto/custom-management-commands.txt:452
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:459
msgid "Use :class:`BaseCommand` instead, which takes no arguments by default."
msgstr ""

#: ../../howto/custom-management-commands.txt:461
msgid "A command which takes no arguments on the command line."
msgstr ""

#: ../../howto/custom-management-commands.txt:463
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""

#: ../../howto/custom-management-commands.txt:469
msgid "Perform this command's actions"
msgstr ""

#: ../../howto/custom-management-commands.txt:474
msgid "Command exceptions"
msgstr ""

#: ../../howto/custom-management-commands.txt:478
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

#: ../../howto/custom-management-commands.txt:480
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is"
" the preferred way to indicate that something has gone wrong in the "
"execution of a command."
msgstr ""

#: ../../howto/custom-management-commands.txt:486
msgid ""
"If a management command is called from code through :ref:`call_command "
"<call-command>`, it's up to you to catch the exception when needed."
msgstr ""

#: ../../howto/custom-model-fields.txt:3
msgid "Writing custom model fields"
msgstr ""

#: ../../howto/custom-model-fields.txt:8
msgid "Introduction"
msgstr ""

#: ../../howto/custom-model-fields.txt:10
msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to"
" use Django's standard field classes -- "
":class:`~django.db.models.CharField`, :class:`~django.db.models.DateField`, "
"etc. For many purposes, those classes are all you'll need. Sometimes, "
"though, the Django version won't meet your precise requirements, or you'll "
"want to use a field that is entirely different from those shipped with "
"Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:17
msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more"
" obscure column types, such as geographic polygons or even user-created "
"types such as `PostgreSQL custom types`_, you can define your own Django "
"``Field`` subclasses."
msgstr ""

#: ../../howto/custom-model-fields.txt:24
msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case"
" where a ``Field`` subclass will help you use your object with your models."
msgstr ""

#: ../../howto/custom-model-fields.txt:29
msgid "Our example object"
msgstr ""

#: ../../howto/custom-model-fields.txt:31
msgid ""
"Creating custom fields requires a bit of attention to detail. To make things"
" easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have to know how to play Bridge to follow "
"this example. You only need to know that 52 cards are dealt out equally to "
"four players, who are traditionally called *north*, *east*, *south* and "
"*west*.  Our class looks something like this::"
msgstr ""

#: ../../howto/custom-model-fields.txt:53
msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the"
" ``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

#: ../../howto/custom-model-fields.txt:64
msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like"
" any other Python class. The trick is to tell Django how to handle saving "
"and loading such an object."
msgstr ""

#: ../../howto/custom-model-fields.txt:68
msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

#: ../../howto/custom-model-fields.txt:73
msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

#: ../../howto/custom-model-fields.txt:79
msgid "Background theory"
msgstr ""

#: ../../howto/custom-model-fields.txt:82
msgid "Database storage"
msgstr ""

#: ../../howto/custom-model-fields.txt:84
msgid ""
"The simplest way to think of a model field is that it provides a way to take"
" a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr ""

#: ../../howto/custom-model-fields.txt:90
msgid ""
"Fields in a model must somehow be converted to fit into an existing database"
" column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

#: ../../howto/custom-model-fields.txt:96
msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:100
msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order"
" -- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

#: ../../howto/custom-model-fields.txt:106
msgid "What does a field class do?"
msgstr ""

#: ../../howto/custom-model-fields.txt:108
msgid ""
"All of Django's fields (and when we say *fields* in this document, we always"
" mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later"
" on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

#: ../../howto/custom-model-fields.txt:117
msgid ""
"It's important to realize that a Django field class is not what is stored in"
" your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is"
" stored in the database or sent to the :doc:`serializer "
"</topics/serialization>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:126
msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field``"
" subclass you write provides the machinery for converting between your "
"Python instances and the database/serializer values in various ways (there "
"are differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer"
" in the examples below. Just remember that you will often end up creating "
"two classes when you want a custom field:"
msgstr ""

#: ../../howto/custom-model-fields.txt:134
msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying"
" purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

#: ../../howto/custom-model-fields.txt:139
msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how"
" to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

#: ../../howto/custom-model-fields.txt:144
msgid "Writing a field subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:146
msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the "
":class:`~django.db.models.Field` class, from which everything is descended."
msgstr ""

#: ../../howto/custom-model-fields.txt:152
msgid ""
"Initializing your new field is a matter of separating out any arguments that"
" are specific to your case from the common arguments and passing the latter "
"to the ``__init__()`` method of :class:`~django.db.models.Field` (or your "
"parent class)."
msgstr ""

#: ../../howto/custom-model-fields.txt:157
msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so"
" it's easily identifiable as a :class:`~django.db.models.Field` subclass.) "
"It doesn't behave like any existing field, so we'll subclass directly from "
":class:`~django.db.models.Field`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:173
msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

#: ../../howto/custom-model-fields.txt:179
msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both "
":attr:`~django.db.models.Field.editable` and "
":attr:`~django.db.models.DateField.auto_now` to a "
":class:`django.db.models.DateField` and it will simply ignore the "
":attr:`~django.db.models.Field.editable` parameter "
"(:attr:`~django.db.models.DateField.auto_now` being set implies "
"``editable=False``). No error is raised in this case."
msgstr ""

#: ../../howto/custom-model-fields.txt:188
msgid ""
"This behavior simplifies the field classes, because they don't need to check"
" for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:194
msgid "The ``Field.__init__()`` method takes the following parameters:"
msgstr ""

#: ../../howto/custom-model-fields.txt:196
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

#: ../../howto/custom-model-fields.txt:197
msgid "``name``"
msgstr ""

#: ../../howto/custom-model-fields.txt:198
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

#: ../../howto/custom-model-fields.txt:199
msgid ":attr:`~django.db.models.CharField.max_length`"
msgstr ""

#: ../../howto/custom-model-fields.txt:200
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

#: ../../howto/custom-model-fields.txt:201
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

#: ../../howto/custom-model-fields.txt:202
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

#: ../../howto/custom-model-fields.txt:203
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

#: ../../howto/custom-model-fields.txt:204
msgid ""
"``rel``: Used for related fields (like :class:`ForeignKey`). For advanced "
"use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:206
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

#: ../../howto/custom-model-fields.txt:207
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

#: ../../howto/custom-model-fields.txt:208
msgid ""
"``serialize``: If ``False``, the field will not be serialized when the model"
" is passed to Django's :doc:`serializers </topics/serialization>`. Defaults "
"to ``True``."
msgstr ""

#: ../../howto/custom-model-fields.txt:211
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

#: ../../howto/custom-model-fields.txt:212
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

#: ../../howto/custom-model-fields.txt:213
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

#: ../../howto/custom-model-fields.txt:214
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

#: ../../howto/custom-model-fields.txt:215
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

#: ../../howto/custom-model-fields.txt:216
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

#: ../../howto/custom-model-fields.txt:217
msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

#: ../../howto/custom-model-fields.txt:220
msgid ""
":attr:`~django.db.models.Field.auto_created`: ``True`` if the field was "
"automatically created, as for the :class:`~django.db.models.OneToOneField` "
"used by model inheritance. For advanced use only."
msgstr ""

#: ../../howto/custom-model-fields.txt:224
msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

#: ../../howto/custom-model-fields.txt:231
msgid "Field deconstruction"
msgstr ""

#: ../../howto/custom-model-fields.txt:235
msgid ""
"``deconstruct()`` is part of the migrations framework in Django 1.7 and "
"above. If you have custom fields from previous versions they will need this "
"method added before you can use them with migrations."
msgstr ""

#: ../../howto/custom-model-fields.txt:239
msgid ""
"The counterpoint to writing your ``__init__()`` method is writing the "
"``deconstruct()`` method. This method tells Django how to take an instance "
"of your new field and reduce it to a serialized form - in particular, what "
"arguments to pass to ``__init__()`` to re-create it."
msgstr ""

#: ../../howto/custom-model-fields.txt:244
msgid ""
"If you haven't added any extra options on top of the field you inherited "
"from, then there's no need to write a new ``deconstruct()`` method. If, "
"however, you're changing the arguments passed in ``__init__()`` (like we are"
" in ``HandField``), you'll need to supplement the values being passed."
msgstr ""

#: ../../howto/custom-model-fields.txt:249
msgid ""
"The contract of ``deconstruct()`` is simple; it returns a tuple of four "
"items: the field's attribute name, the full import path of the field class, "
"the positional arguments (as a list), and the keyword arguments (as a dict)."
" Note this is different from the ``deconstruct()`` method :ref:`for custom "
"classes <custom-deconstruct-method>` which returns a tuple of three things."
msgstr ""

#: ../../howto/custom-model-fields.txt:255
msgid ""
"As a custom field author, you don't need to care about the first two values;"
" the base ``Field`` class has all the code to work out the field's attribute"
" name and import path. You do, however, have to care about the positional "
"and keyword arguments, as these are likely the things you are changing."
msgstr ""

#: ../../howto/custom-model-fields.txt:260
msgid ""
"For example, in our ``HandField`` class we're always forcibly setting "
"max_length in ``__init__()``. The ``deconstruct()`` method on the base "
"``Field`` class will see this and try to return it in the keyword arguments;"
" thus, we can drop it from the keyword arguments for readability::"
msgstr ""

#: ../../howto/custom-model-fields.txt:278
msgid ""
"If you add a new keyword argument, you need to write code to put its value "
"into ``kwargs`` yourself::"
msgstr ""

#: ../../howto/custom-model-fields.txt:297
msgid ""
"More complex examples are beyond the scope of this document, but remember - "
"for any configuration of your Field instance, ``deconstruct()`` must return "
"arguments that you can pass to ``__init__`` to reconstruct that state."
msgstr ""

#: ../../howto/custom-model-fields.txt:301
msgid ""
"Pay extra attention if you set new default values for arguments in the "
"``Field`` superclass; you want to make sure they're always included, rather "
"than disappearing if they take on the old default value."
msgstr ""

#: ../../howto/custom-model-fields.txt:305
msgid ""
"In addition, try to avoid returning values as positional arguments; where "
"possible, return values as keyword arguments for maximum future "
"compatibility. Of course, if you change the names of things more often than "
"their position in the constructor's argument list, you might prefer "
"positional, but bear in mind that people will be reconstructing your field "
"from the serialized version for quite a while (possibly years), depending "
"how long your migrations live for."
msgstr ""

#: ../../howto/custom-model-fields.txt:312
msgid ""
"You can see the results of deconstruction by looking in migrations that "
"include the field, and you can test deconstruction in unit tests by just "
"deconstructing and reconstructing the field::"
msgstr ""

#: ../../howto/custom-model-fields.txt:321
msgid "Documenting your custom field"
msgstr ""

#: ../../howto/custom-model-fields.txt:323
msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs "
"</ref/contrib/admin/admindocs>` application. To do this simply provide "
"descriptive text in a :attr:`~Field.description` class attribute of your "
"custom field. In the above example, the description displayed by the "
"``admindocs`` application for a ``HandField`` will be 'A hand of cards "
"(bridge style)'."
msgstr ""

#: ../../howto/custom-model-fields.txt:332
msgid ""
"In the :mod:`django.contrib.admindocs` display, the field description is "
"interpolated with ``field.__dict__`` which allows the description to "
"incorporate arguments of the field. For example, the description for "
":class:`~django.db.models.CharField` is::"
msgstr ""

#: ../../howto/custom-model-fields.txt:340
msgid "Useful methods"
msgstr ""

#: ../../howto/custom-model-fields.txt:342
msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass, you "
"might consider overriding a few standard methods, depending on your field's "
"behavior. The list of methods below is in approximately decreasing order of "
"importance, so start from the top."
msgstr ""

#: ../../howto/custom-model-fields.txt:350
msgid "Custom database types"
msgstr ""

#: ../../howto/custom-model-fields.txt:352
msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can "
"subclass ``Field`` and implement the :meth:`~Field.db_type` method, like "
"so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:361
msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

#: ../../howto/custom-model-fields.txt:368
msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type"
" in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a "
":meth:`~Field.db_type` method is to check the "
"``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

#: ../../howto/custom-model-fields.txt:374
#: ../../howto/custom-model-fields.txt:516
#: ../../howto/custom-model-fields.txt:691
msgid "For example::"
msgstr ""

#: ../../howto/custom-model-fields.txt:383
msgid ""
"The :meth:`~Field.db_type` method is called by Django when the framework "
"constructs the ``CREATE TABLE`` statements for your application -- that is, "
"when you first create your tables. It is also called when constructing a "
"``WHERE`` clause that includes the model field -- that is, when you retrieve"
" data using QuerySet methods like ``get()``, ``filter()``, and ``exclude()``"
" and have the model field as an argument. It's not called at any other time,"
" so it can afford to execute slightly complex code, such as the "
"``connection.settings_dict`` check in the above example."
msgstr ""

#: ../../howto/custom-model-fields.txt:392
msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

#: ../../howto/custom-model-fields.txt:408
msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just implement"
" ``Field.__init__()``, like so::"
msgstr ""

#: ../../howto/custom-model-fields.txt:426
msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr ""

#: ../../howto/custom-model-fields.txt:435
msgid "Converting values to Python objects"
msgstr ""

#: ../../howto/custom-model-fields.txt:439
msgid ""
"Historically, Django provided a metaclass called ``SubfieldBase`` which "
"always called :meth:`~Field.to_python` on assignment. This did not play "
"nicely with custom database transformations, aggregation, or values queries,"
" so it has been replaced with :meth:`~Field.from_db_value`."
msgstr ""

#: ../../howto/custom-model-fields.txt:444
msgid ""
"If your custom :class:`~Field` class deals with data structures that are "
"more complex than strings, dates, integers, or floats, then you may need to "
"override :meth:`~Field.from_db_value` and :meth:`~Field.to_python`."
msgstr ""

#: ../../howto/custom-model-fields.txt:448
msgid ""
"If present for the field subclass, ``from_db_value()`` will be called in all"
" circumstances when the data is loaded from the database, including in "
"aggregates and :meth:`~django.db.models.query.QuerySet.values` calls."
msgstr ""

#: ../../howto/custom-model-fields.txt:452
msgid ""
"``to_python()`` is called by deserialization and during the "
":meth:`~django.db.models.Model.clean` method used from forms."
msgstr ""

#: ../../howto/custom-model-fields.txt:455
msgid ""
"As a general rule, ``to_python()`` should deal gracefully with any of the "
"following arguments:"
msgstr ""

#: ../../howto/custom-model-fields.txt:458
msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

#: ../../howto/custom-model-fields.txt:460
msgid "A string"
msgstr ""

#: ../../howto/custom-model-fields.txt:462
msgid "``None`` (if the field allows ``null=True``)"
msgstr ""

#: ../../howto/custom-model-fields.txt:464
msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the"
" database, so we need to be able to process strings and ``None`` in the "
"``from_db_value()``. In ``to_python()``, we need to also handle ``Hand`` "
"instances::"
msgstr ""

#: ../../howto/custom-model-fields.txt:501
msgid ""
"Notice that we always return a ``Hand`` instance from these methods. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""

#: ../../howto/custom-model-fields.txt:504
msgid ""
"For ``to_python()``, if anything goes wrong during value conversion, you "
"should raise a :exc:`~django.core.exceptions.ValidationError` exception."
msgstr ""

#: ../../howto/custom-model-fields.txt:510
msgid "Converting Python objects to query values"
msgstr ""

#: ../../howto/custom-model-fields.txt:512
msgid ""
"Since using a database requires conversion in both ways, if you override "
":meth:`~Field.to_python` you also have to override "
":meth:`~Field.get_prep_value` to convert Python objects back to query "
"values."
msgstr ""

#: ../../howto/custom-model-fields.txt:527
msgid ""
"If your custom field uses the ``CHAR``, ``VARCHAR`` or ``TEXT`` types for "
"MySQL, you must make sure that :meth:`.get_prep_value` always returns a "
"string type. MySQL performs flexible and unexpected matching when a query is"
" performed on these types and the provided value is an integer, which can "
"cause queries to include unexpected objects in their results. This problem "
"cannot occur if you always return a string type from "
":meth:`.get_prep_value`."
msgstr ""

#: ../../howto/custom-model-fields.txt:538
msgid "Converting query values to database values"
msgstr ""

#: ../../howto/custom-model-fields.txt:540
msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`~Field.get_db_prep_value` is "
"the method where those conversions should be made. The specific connection "
"that will be used for the query is passed as the ``connection`` parameter. "
"This allows you to use backend-specific conversion logic if it is required."
msgstr ""

#: ../../howto/custom-model-fields.txt:547
msgid ""
"For example, Django uses the following method for its :class:`BinaryField`::"
msgstr ""

#: ../../howto/custom-model-fields.txt:556
msgid ""
"In case your custom field needs a special conversion when being saved that "
"is not the same as the conversion used for normal query parameters, you can "
"override :meth:`~Field.get_db_prep_save`."
msgstr ""

#: ../../howto/custom-model-fields.txt:563
msgid "Preprocessing values before saving"
msgstr ""

#: ../../howto/custom-model-fields.txt:565
msgid ""
"If you want to preprocess the value just before saving, you can use "
":meth:`~Field.pre_save`. For example, Django's "
":class:`~django.db.models.DateTimeField` uses this method to set the "
"attribute correctly in the case of "
":attr:`~django.db.models.DateField.auto_now` or "
":attr:`~django.db.models.DateField.auto_now_add`."
msgstr ""

#: ../../howto/custom-model-fields.txt:571
msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

#: ../../howto/custom-model-fields.txt:579
msgid "Preparing values for use in database lookups"
msgstr ""

#: ../../howto/custom-model-fields.txt:581
msgid ""
"As with value conversions, preparing a value for database lookups is a two "
"phase process."
msgstr ""

#: ../../howto/custom-model-fields.txt:584
msgid ""
":meth:`.get_prep_lookup` performs the first phase of lookup preparation: "
"type conversion and data validation."
msgstr ""

#: ../../howto/custom-model-fields.txt:587
msgid ""
"Prepares the ``value`` for passing to the database when used in a lookup (a "
"``WHERE`` constraint in SQL). The ``lookup_type`` parameter will be one of "
"the valid Django filter lookups: ``exact``, ``iexact``, ``contains``, "
"``icontains``, ``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, "
"``istartswith``, ``endswith``, ``iendswith``, ``range``, ``year``, "
"``month``, ``day``, ``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

#: ../../howto/custom-model-fields.txt:596
msgid ""
"If you are using :doc:`Custom lookups </howto/custom-lookups>` the "
"``lookup_type`` can be any ``lookup_name`` used by the project's custom "
"lookups."
msgstr ""

#: ../../howto/custom-model-fields.txt:600
msgid ""
"Your method must be prepared to handle all of these ``lookup_type`` values "
"and should raise either a ``ValueError`` if the ``value`` is of the wrong "
"sort (a list when you were expecting an object, for example) or a "
"``TypeError`` if your field does not support that type of lookup. For many "
"fields, you can get by with handling the lookup types that need special "
"handling for your field and pass the rest to the "
":meth:`~Field.get_db_prep_lookup` method of the parent class."
msgstr ""

#: ../../howto/custom-model-fields.txt:608
msgid ""
"If you needed to implement :meth:`.get_db_prep_save`, you will usually need "
"to implement :meth:`.get_prep_lookup`. If you don't, :meth:`.get_prep_value`"
" will be called by the default implementation, to manage ``exact``, ``gt``, "
"``gte``, ``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

#: ../../howto/custom-model-fields.txt:613
msgid ""
"You may also want to implement this method to limit the lookup types that "
"could be used with your custom field type."
msgstr ""

#: ../../howto/custom-model-fields.txt:616
msgid ""
"Note that, for ``\"range\"`` and ``\"in\"`` lookups, ``get_prep_lookup`` "
"will receive a list of objects (presumably of the right type) and will need "
"to convert them to a list of things of the right type for passing to the "
"database. Most of the time, you can reuse ``get_prep_value()``, or at least "
"factor out some common pieces."
msgstr ""

#: ../../howto/custom-model-fields.txt:622
msgid ""
"For example, the following code implements ``get_prep_lookup`` to limit the "
"accepted lookup types to ``exact`` and ``in``::"
msgstr ""

#: ../../howto/custom-model-fields.txt:637
msgid ""
"For performing database-specific data conversions required by a lookup, you "
"can override :meth:`~Field.get_db_prep_lookup`."
msgstr ""

#: ../../howto/custom-model-fields.txt:643
msgid "Specifying the form field for a model field"
msgstr ""

#: ../../howto/custom-model-fields.txt:645
msgid ""
"To customize the form field used by :class:`~django.forms.ModelForm`, you "
"can override :meth:`~Field.formfield`."
msgstr ""

#: ../../howto/custom-model-fields.txt:648
msgid ""
"The form field class can be specified via the ``form_class`` and "
"``choices_form_class`` arguments; the latter is used if the field has "
"choices specified, the former otherwise. If these arguments are not "
"provided, :class:`~django.forms.CharField` or "
":class:`~django.forms.TypedChoiceField` will be used."
msgstr ""

#: ../../howto/custom-model-fields.txt:654
msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's "
"``__init__()`` method. Normally, all you need to do is set up a good default"
" for the ``form_class`` (and maybe ``choices_form_class``) argument and then"
" delegate further handling to the parent class. This might require you to "
"write a custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this."
msgstr ""

#: ../../howto/custom-model-fields.txt:661
msgid ""
"Continuing our ongoing example, we can write the :meth:`~Field.formfield` "
"method as::"
msgstr ""

#: ../../howto/custom-model-fields.txt:674
msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own"
" default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

#: ../../howto/custom-model-fields.txt:684
msgid "Emulating built-in field types"
msgstr ""

#: ../../howto/custom-model-fields.txt:686
msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry about"
" :meth:`.get_internal_type` -- it won't be used much. Sometimes, though, "
"your database storage is similar in type to some other field, so you can use"
" that other field's logic to create the right column."
msgstr ""

#: ../../howto/custom-model-fields.txt:699
msgid ""
"No matter which database backend we are using, this will mean that "
":djadmin:`migrate` and other SQL commands create the right column type for "
"storing a string."
msgstr ""

#: ../../howto/custom-model-fields.txt:703
msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.base.DatabaseWrapper.data_types`` -- the "
"string will still be used by the serializer, but the default "
":meth:`~Field.db_type` method will return ``None``. See the documentation of"
" :meth:`~Field.db_type` for reasons why this might be useful. Putting a "
"descriptive string in as the type of the field for the serializer is a "
"useful idea if you're ever going to be using the serializer output in some "
"other place, outside of Django."
msgstr ""

#: ../../howto/custom-model-fields.txt:715
msgid "Converting field data for serialization"
msgstr ""

#: ../../howto/custom-model-fields.txt:717
msgid ""
"To customize how the values are serialized by a serializer, you can override"
" :meth:`~Field.value_to_string`. Calling ``Field._get_val_from_obj(obj)`` is"
" the best way to get the value serialized. For example, since our "
"``HandField`` uses strings for its data storage anyway, we can reuse some "
"existing conversion code::"
msgstr ""

#: ../../howto/custom-model-fields.txt:730
msgid "Some general advice"
msgstr ""

#: ../../howto/custom-model-fields.txt:732
msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing"
" complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

#: ../../howto/custom-model-fields.txt:737
msgid ""
"Look at the existing Django fields (in "
":file:`django/db/models/fields/__init__.py`) for inspiration. Try to find a "
"field that's similar to what you want and extend it a little bit, instead of"
" creating an entirely new field from scratch."
msgstr ""

#: ../../howto/custom-model-fields.txt:742
msgid ""
"Put a ``__str__()`` (``__unicode__()`` on Python 2) method on the class "
"you're wrapping up as a field. There are a lot of places where the default "
"behavior of the field code is to call "
":func:`~django.utils.encoding.force_text` on the value. (In our examples in "
"this document, ``value`` would be a ``Hand`` instance, not a ``HandField``)."
" So if your ``__str__()`` method (``__unicode__()`` on Python 2) "
"automatically converts to the string form of your Python object, you can "
"save yourself a lot of work."
msgstr ""

#: ../../howto/custom-model-fields.txt:752
msgid "Writing a ``FileField`` subclass"
msgstr ""

#: ../../howto/custom-model-fields.txt:754
msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of"
" the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with"
" the challenge of supporting a particular type of file."
msgstr ""

#: ../../howto/custom-model-fields.txt:760
msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is"
" accessed, and what methods are available. It lives at "
"``django.db.models.fields.files``, and its default behavior is explained in "
"the :doc:`file documentation </ref/files/file>`."
msgstr ""

#: ../../howto/custom-model-fields.txt:766
msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

#: ../../howto/custom-model-fields.txt:771
msgid "A few suggestions"
msgstr ""

#: ../../howto/custom-model-fields.txt:773
msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

#: ../../howto/custom-model-fields.txt:776
msgid ""
"The source for Django's own ``ImageField`` (in "
"``django/db/models/fields/files.py``) is a great example of how to subclass "
"``FileField`` to support a particular type of file, as it incorporates all "
"of the techniques described above."
msgstr ""

#: ../../howto/custom-model-fields.txt:781
msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote"
" storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

#: ../../howto/custom-template-tags.txt:3
msgid "Custom template tags and filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:5
msgid ""
"Django's template language comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing"
" functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using"
" Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:14
msgid "Code layout"
msgstr ""

#: ../../howto/custom-template-tags.txt:16
msgid ""
"Custom template tags and filters must live inside a Django app. If they "
"relate to an existing app it makes sense to bundle them there; otherwise, "
"you should create a new app to hold them."
msgstr ""

#: ../../howto/custom-template-tags.txt:20
msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it -"
" don't forget the ``__init__.py`` file to ensure the directory is treated as"
" a Python package."
msgstr ""

#: ../../howto/custom-template-tags.txt:25
msgid "Development server won't automatically restart"
msgstr ""

#: ../../howto/custom-template-tags.txt:27
msgid ""
"After adding the ``templatetags``  module, you will need to restart your "
"server before you can use the tags or filters in templates."
msgstr ""

#: ../../howto/custom-template-tags.txt:30
msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""

#: ../../howto/custom-template-tags.txt:35
msgid ""
"For example, if your custom tags/filters are in a file called "
"``poll_extras.py``, your app layout might look like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:46
msgid "And in your template you would use the following:"
msgstr ""

#: ../../howto/custom-template-tags.txt:52
msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""

#: ../../howto/custom-template-tags.txt:57
msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""

#: ../../howto/custom-template-tags.txt:61
msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the"
" tags and filters are registered. So, near the top of your module, put the "
"following::"
msgstr ""

#: ../../howto/custom-template-tags.txt:70
msgid "Behind the scenes"
msgstr ""

#: ../../howto/custom-template-tags.txt:72
msgid ""
"For a ton of examples, read the source code for Django's default filters and"
" tags. They're in ``django/template/defaultfilters.py`` and "
"``django/template/defaulttags.py``, respectively."
msgstr ""

#: ../../howto/custom-template-tags.txt:76
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

#: ../../howto/custom-template-tags.txt:81
msgid "Writing custom template filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:83
msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:85
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:86
msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""

#: ../../howto/custom-template-tags.txt:89
msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

#: ../../howto/custom-template-tags.txt:92
msgid ""
"Since the template language doesn't provide exception handling, any "
"exception raised from a template filter will be exposed as a server error. "
"Thus, filter functions should avoid raising exceptions if there is a "
"reasonable fallback value to return. In case of input that represents a "
"clear bug in a template, raising an exception may still be better than "
"silent failure which hides the bug."
msgstr ""

#: ../../howto/custom-template-tags.txt:99
msgid "Here's an example filter definition::"
msgstr ""

#: ../../howto/custom-template-tags.txt:105
msgid "And here's an example of how that filter would be used:"
msgstr ""

#: ../../howto/custom-template-tags.txt:111
msgid ""
"Most filters don't take arguments. In this case, just leave the argument out"
" of your function. Example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:119
msgid "Registering custom filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:123
msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language::"
msgstr ""

#: ../../howto/custom-template-tags.txt:129
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:131
msgid "The name of the filter -- a string."
msgstr ""

#: ../../howto/custom-template-tags.txt:132
#: ../../howto/custom-template-tags.txt:949
msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""

#: ../../howto/custom-template-tags.txt:135
msgid "You can use ``register.filter()`` as a decorator instead::"
msgstr ""

#: ../../howto/custom-template-tags.txt:145
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""

#: ../../howto/custom-template-tags.txt:148
msgid ""
"Finally, ``register.filter()`` also accepts three keyword arguments, "
"``is_safe``, ``needs_autoescape``, and ``expects_localtime``. These "
"arguments are described in :ref:`filters and auto-escaping <filters-auto-"
"escaping>` and :ref:`filters and time zones <filters-timezones>` below."
msgstr ""

#: ../../howto/custom-template-tags.txt:154
msgid "Template filters that expect strings"
msgstr ""

#: ../../howto/custom-template-tags.txt:158
msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function::"
msgstr ""

#: ../../howto/custom-template-tags.txt:172
msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""

#: ../../howto/custom-template-tags.txt:179
msgid "Filters and auto-escaping"
msgstr ""

#: ../../howto/custom-template-tags.txt:181
msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr ""

#: ../../howto/custom-template-tags.txt:185
msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr ""

#: ../../howto/custom-template-tags.txt:189
msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

#: ../../howto/custom-template-tags.txt:194
msgid ""
"Internally, these strings are of type ``SafeBytes`` or ``SafeText``. They "
"share a common base class of ``SafeData``, so you can test for them using "
"code like::"
msgstr ""

#: ../../howto/custom-template-tags.txt:202
msgid ""
"**Strings marked as \"needing escaping\"** are *always* escaped on output, "
"regardless of whether they are in an :ttag:`autoescape` block or not. These "
"strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

#: ../../howto/custom-template-tags.txt:207
msgid ""
"Internally, these strings are of type ``EscapeBytes`` or ``EscapeText``. "
"Generally you don't have to worry about these; they exist for the "
"implementation of the :tfilter:`escape` filter."
msgstr ""

#: ../../howto/custom-template-tags.txt:211
msgid "Template filter code falls into one of two situations:"
msgstr ""

#: ../../howto/custom-template-tags.txt:213
msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you"
" register your filter function, like so::"
msgstr ""

#: ../../howto/custom-template-tags.txt:223
msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter,"
" the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

#: ../../howto/custom-template-tags.txt:227
msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

#: ../../howto/custom-template-tags.txt:230
msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr ""

#: ../../howto/custom-template-tags.txt:236
msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``::"
msgstr ""

#: ../../howto/custom-template-tags.txt:245
msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:249
msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

#: ../../howto/custom-template-tags.txt:252
msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon"
" (``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity"
" and thus needs further escaping. Most cases won't be nearly this tricky, "
"but keep an eye out for any problems like that when reviewing your code."
msgstr ""

#: ../../howto/custom-template-tags.txt:262
msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

#: ../../howto/custom-template-tags.txt:268
msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the"
" result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

#: ../../howto/custom-template-tags.txt:274
msgid ""
"To mark the output as a safe string, use "
":func:`django.utils.safestring.mark_safe`."
msgstr ""

#: ../../howto/custom-template-tags.txt:277
msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters that can operate in"
" templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

#: ../../howto/custom-template-tags.txt:283
msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise. It is recommended to set the default "
"of the ``autoescape`` parameter to ``True``, so that if you call the "
"function from Python code it will have escaping enabled by default."
msgstr ""

#: ../../howto/custom-template-tags.txt:292
msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string::"
msgstr ""

#: ../../howto/custom-template-tags.txt:311
msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the"
" filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except"
" it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

#: ../../howto/custom-template-tags.txt:321
msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

#: ../../howto/custom-template-tags.txt:325
msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

#: ../../howto/custom-template-tags.txt:330
msgid "Avoiding XSS vulnerabilities when reusing built-in filters"
msgstr ""

#: ../../howto/custom-template-tags.txt:334
msgid ""
"Django's built-in filters have ``autoescape=True`` by default in order to "
"get the proper autoescaping behavior and avoid a cross-site script "
"vulnerability."
msgstr ""

#: ../../howto/custom-template-tags.txt:338
msgid ""
"In older versions of Django, be careful when reusing Django's built-in "
"filters as ``autoescape`` defaults to ``None``. You'll need to pass "
"``autoescape=True`` to get autoescaping."
msgstr ""

#: ../../howto/custom-template-tags.txt:342
msgid ""
"For example, if you wanted to write a custom filter called "
"``urlize_and_linebreaks`` that combined the :tfilter:`urlize` and "
":tfilter:`linebreaksbr` filters, the filter would look like::"
msgstr ""

#: ../../howto/custom-template-tags.txt:355
msgid "Then:"
msgstr ""

#: ../../howto/custom-template-tags.txt:361
msgid "would be equivalent to:"
msgstr ""

#: ../../howto/custom-template-tags.txt:370
msgid "Filters and time zones"
msgstr ""

#: ../../howto/custom-template-tags.txt:372
msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``::"
msgstr ""

#: ../../howto/custom-template-tags.txt:383
msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing it to your filter when appropriate, according to :ref:`rules for "
"time zones conversions in templates <time-zones-in-templates>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:391
msgid "Writing custom template tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:393
msgid ""
"Tags are more complex than filters, because tags can do anything. Django "
"provides a number of shortcuts that make writing most types of tags easier. "
"First we'll explore those shortcuts, then explain how to write a tag from "
"scratch for those cases when the shortcuts aren't powerful enough."
msgstr ""

#: ../../howto/custom-template-tags.txt:401
msgid "Simple tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:405
msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a string after doing some processing based solely on"
" the input arguments and some external information. For example, a "
"``current_time`` tag might accept a format string and return the time as a "
"string formatted accordingly."
msgstr ""

#: ../../howto/custom-template-tags.txt:411
msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of "
"``django.template.Library``, takes a function that accepts any number of "
"arguments, wraps it in a ``render`` function and the other necessary bits "
"mentioned above and registers it with the template system."
msgstr ""

#: ../../howto/custom-template-tags.txt:417
msgid "Our ``current_time`` function could thus be written like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:428
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

#: ../../howto/custom-template-tags.txt:430
msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

#: ../../howto/custom-template-tags.txt:432
msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr ""

#: ../../howto/custom-template-tags.txt:434
msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

#: ../../howto/custom-template-tags.txt:437
#: ../../howto/custom-template-tags.txt:640
msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag::"
msgstr ""

#: ../../howto/custom-template-tags.txt:445
msgid "Note that the first argument *must* be called ``context``."
msgstr ""

#: ../../howto/custom-template-tags.txt:447
#: ../../howto/custom-template-tags.txt:650
msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

#: ../../howto/custom-template-tags.txt:450
msgid "If you need to rename your tag, you can provide a custom name for it::"
msgstr ""

#: ../../howto/custom-template-tags.txt:458
msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:468
#: ../../howto/custom-template-tags.txt:604
#: ../../howto/custom-template-tags.txt:663
msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments"
" are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

#: ../../howto/custom-template-tags.txt:480
msgid "Inclusion tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:484
msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the "
"\"add/change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current"
" object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

#: ../../howto/custom-template-tags.txt:492
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

#: ../../howto/custom-template-tags.txt:494
msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write"
" a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:502
msgid "...and the output will be something like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:512
msgid ""
"First, define the function that takes the argument and produces a dictionary"
" of data for the result. The important point here is we only need to return "
"a dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:521
msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr ""

#: ../../howto/custom-template-tags.txt:533
msgid ""
"Now, create and register the inclusion tag by calling the "
"``inclusion_tag()`` method on a ``Library`` object. Following our example, "
"if the above template is in a file called ``results.html`` in a directory "
"that's searched by the template loader, we'd register the tag like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:543
msgid ""
"Alternatively it is possible to register the inclusion tag using a "
":class:`django.template.Template` instance::"
msgstr ""

#: ../../howto/custom-template-tags.txt:550
msgid "...when first creating the function."
msgstr ""

#: ../../howto/custom-template-tags.txt:552
msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

#: ../../howto/custom-template-tags.txt:559
msgid ""
"For example, say you're writing an inclusion tag that will always be used in"
" a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look "
"like::"
msgstr ""

#: ../../howto/custom-template-tags.txt:570
#: ../../howto/custom-template-tags.txt:648
msgid ""
"Note that the first parameter to the function *must* be called ``context``."
msgstr ""

#: ../../howto/custom-template-tags.txt:572
msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

#: ../../howto/custom-template-tags.txt:580
msgid ""
"Then, any time you want to use that custom tag, load its library and call it"
" without any arguments, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:587
msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

#: ../../howto/custom-template-tags.txt:590
msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

#: ../../howto/custom-template-tags.txt:594
msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:616
msgid "Assignment tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:620
msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same"
" way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except "
"that it stores the tag's result in a specified context variable instead of "
"directly outputting it."
msgstr ""

#: ../../howto/custom-template-tags.txt:626
msgid ""
"Our earlier ``current_time`` function could thus be written like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:632
msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see"
" fit:"
msgstr ""

#: ../../howto/custom-template-tags.txt:653
msgid ""
"``assignment_tag`` functions may accept any number of positional or keyword "
"arguments. For example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:673
msgid "Advanced custom template tags"
msgstr ""

#: ../../howto/custom-template-tags.txt:675
msgid ""
"Sometimes the basic features for custom template tag creation aren't enough."
" Don't worry, Django gives you complete access to the internals required to "
"build a template tag from the ground up."
msgstr ""

#: ../../howto/custom-template-tags.txt:680
msgid "A quick overview"
msgstr ""

#: ../../howto/custom-template-tags.txt:682
msgid ""
"The template system works in a two-step process: compiling and rendering. To"
" define a custom template tag, you specify how the compilation works and how"
" the rendering works."
msgstr ""

#: ../../howto/custom-template-tags.txt:686
msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr ""

#: ../../howto/custom-template-tags.txt:693
msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's"
" ``render()`` method does."
msgstr ""

#: ../../howto/custom-template-tags.txt:698
msgid "Writing the compilation function"
msgstr ""

#: ../../howto/custom-template-tags.txt:700
msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:704
msgid ""
"For example, let's write a full implementation of our simple template tag, "
"``{% current_time %}``, that displays the current date/time, formatted "
"according to a parameter given in the tag, in :func:`~time.strftime` syntax."
" It's a good idea to decide the tag syntax before anything else. In our "
"case, let's say the tag should be used like this:"
msgstr ""

#: ../../howto/custom-template-tags.txt:714
msgid ""
"The parser for this function should grab the parameter and create a ``Node``"
" object::"
msgstr ""

#: ../../howto/custom-template-tags.txt:733
#: ../../howto/custom-template-tags.txt:785
msgid "Notes:"
msgstr ""

#: ../../howto/custom-template-tags.txt:735
msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""

#: ../../howto/custom-template-tags.txt:738
msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

#: ../../howto/custom-template-tags.txt:741
msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward "
"``token.contents.split()`` wouldn't be as robust, as it would naively split "
"on *all* spaces, including those within quoted strings. It's a good idea to "
"always use ``token.split_contents()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:747
msgid ""
"This function is responsible for raising "
"``django.template.TemplateSyntaxError``, with helpful messages, for any "
"syntax error."
msgstr ""

#: ../../howto/custom-template-tags.txt:751
msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

#: ../../howto/custom-template-tags.txt:757
msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to"
" know about this tag. In this case, it just passes the argument -- "
"``\"%Y-%m-%d %I:%M %p\"``. The leading and trailing quotes from the template"
" tag are removed in ``format_string[1:-1]``."
msgstr ""

#: ../../howto/custom-template-tags.txt:762
msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

#: ../../howto/custom-template-tags.txt:768
msgid "Writing the renderer"
msgstr ""

#: ../../howto/custom-template-tags.txt:770
msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that"
" has a ``render()`` method."
msgstr ""

#: ../../howto/custom-template-tags.txt:773
msgid "Continuing the above example, we need to define ``CurrentTimeNode``::"
msgstr ""

#: ../../howto/custom-template-tags.txt:787
msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always"
" pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:791
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

#: ../../howto/custom-template-tags.txt:793
msgid ""
"``render()`` should generally fail silently, particularly in a production "
"environment. In some cases however, particularly if "
"``context.template.engine.debug`` is ``True``, this method may raise an "
"exception to make debugging easier. For example, several core tags raise "
"``django.template.TemplateSyntaxError`` if they receive the wrong number or "
"type of arguments."
msgstr ""

#: ../../howto/custom-template-tags.txt:800
msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

#: ../../howto/custom-template-tags.txt:805
msgid "Auto-escaping considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:807
msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters. However, there are still a couple of things you should "
"keep in mind when writing a template tag."
msgstr ""

#: ../../howto/custom-template-tags.txt:811
msgid ""
"If the ``render()`` function of your template stores the result in a context"
" variable (rather than returning the result in a string), it should take "
"care to call ``mark_safe()`` if appropriate. When the variable is ultimately"
" rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr ""

#: ../../howto/custom-template-tags.txt:818
msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The"
" ``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:830
msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:839
msgid ""
"The ``template`` attribute of ``Context`` objects was added in Django 1.8. "
":meth:`context.template.engine.get_template "
"<django.template.Engine.get_template>` must be used instead of "
":func:`django.template.loader.get_template` because the latter now returns a"
" wrapper whose ``render`` method doesn't accept a "
":class:`~django.template.Context`."
msgstr ""

#: ../../howto/custom-template-tags.txt:846
msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template"
" tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

#: ../../howto/custom-template-tags.txt:854
msgid "Thread-safety considerations"
msgstr ""

#: ../../howto/custom-template-tags.txt:856
msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

#: ../../howto/custom-template-tags.txt:862
msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a builtin"
" :ttag:`cycle` template tag that cycles among a list of given strings each "
"time it's rendered:"
msgstr ""

#: ../../howto/custom-template-tags.txt:875
msgid ""
"A naive implementation of ``CycleNode`` might look something like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:887
msgid ""
"But, suppose we have two templates rendering the template snippet from above"
" at the same time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:890
msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:892
msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:894
msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

#: ../../howto/custom-template-tags.txt:896
msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

#: ../../howto/custom-template-tags.txt:899
msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr ""

#: ../../howto/custom-template-tags.txt:903
msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render``"
" method."
msgstr ""

#: ../../howto/custom-template-tags.txt:908
msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``::"
msgstr ""

#: ../../howto/custom-template-tags.txt:920
msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

#: ../../howto/custom-template-tags.txt:929
msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state"
" information. The easiest way to do this is to always use ``self`` as the "
"key into ``render_context``. If you're keeping track of several state "
"variables, make ``render_context[self]`` a dictionary."
msgstr ""

#: ../../howto/custom-template-tags.txt:937
msgid "Registering the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:939
msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in :ref:`writing custom template filters<howto-writing-custom-"
"template-tags>` above. Example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:945
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

#: ../../howto/custom-template-tags.txt:947
msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""

#: ../../howto/custom-template-tags.txt:952
msgid ""
"As with filter registration, it is also possible to use this as a "
"decorator::"
msgstr ""

#: ../../howto/custom-template-tags.txt:962
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

#: ../../howto/custom-template-tags.txt:966
msgid "Passing template variables to the tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:968
msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a"
" template variable) to a template tag as an argument."
msgstr ""

#: ../../howto/custom-template-tags.txt:973
msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a "
":class:`~django.db.models.DateTimeField` from an object and have the "
"template tag format that date-time:"
msgstr ""

#: ../../howto/custom-template-tags.txt:982
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

#: ../../howto/custom-template-tags.txt:984
msgid "The tag name ``format_time``."
msgstr ""

#: ../../howto/custom-template-tags.txt:985
msgid ""
"The string ``'blog_entry.date_updated'`` (without the surrounding quotes)."
msgstr ""

#: ../../howto/custom-template-tags.txt:987
msgid ""
"The formatting string ``'\"%Y-%m-%d %I:%M %p\"'``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string"
" literals like this."
msgstr ""

#: ../../howto/custom-template-tags.txt:991
msgid "Now your tag should begin to look like this::"
msgstr ""

#: ../../howto/custom-template-tags.txt:1009
msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1013
msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example::"
msgstr ""

#: ../../howto/custom-template-tags.txt:1029
msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

#: ../../howto/custom-template-tags.txt:1033
msgid "Setting a variable in the context"
msgstr ""

#: ../../howto/custom-template-tags.txt:1035
msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That"
" way, template authors can reuse the values that your template tags create."
msgstr ""

#: ../../howto/custom-template-tags.txt:1039
msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it::"
msgstr ""

#: ../../howto/custom-template-tags.txt:1054
msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

#: ../../howto/custom-template-tags.txt:1058
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1064
msgid "Variable scope in context"
msgstr ""

#: ../../howto/custom-template-tags.txt:1066
msgid ""
"Any variable set in the context will only be available in the same ``block``"
" of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

#: ../../howto/custom-template-tags.txt:1071
msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1083
msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so::"
msgstr ""

#: ../../howto/custom-template-tags.txt:1115
msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1118
msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, you might want to consider using the :ref:`assignment"
" tag <howto-custom-template-tags-assignment-tags>` shortcut we introduced "
"above."
msgstr ""

#: ../../howto/custom-template-tags.txt:1125
msgid "Parsing until another block tag"
msgstr ""

#: ../../howto/custom-template-tags.txt:1127
msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

#: ../../howto/custom-template-tags.txt:1132
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented::"
msgstr ""

#: ../../howto/custom-template-tags.txt:1144
msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling "
"``parser.skip_past('endcomment')`` instead of "
"``parser.parse(('endcomment',))`` followed by "
"``parser.delete_first_token()``, thus avoiding the generation of a node "
"list."
msgstr ""

#: ../../howto/custom-template-tags.txt:1151
msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

#: ../../howto/custom-template-tags.txt:1156
msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

#: ../../howto/custom-template-tags.txt:1161
msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the "
"``{% endcomment %}`` tag, so the code needs to explicitly call "
"``parser.delete_first_token()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1165
msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between "
"``{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

#: ../../howto/custom-template-tags.txt:1169
msgid "Parsing until another block tag, and saving contents"
msgstr ""

#: ../../howto/custom-template-tags.txt:1171
msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

#: ../../howto/custom-template-tags.txt:1175
msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes"
" everything between itself and ``{% endupper %}``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1178
msgid "Usage:"
msgstr ""

#: ../../howto/custom-template-tags.txt:1184
msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``::"
msgstr ""

#: ../../howto/custom-template-tags.txt:1199
msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

#: ../../howto/custom-template-tags.txt:1202
msgid ""
"For more examples of complex rendering, see the source code of :ttag:`{% for"
" %}<for>` in ``django/template/defaulttags.py`` and :ttag:`{% if %}<if>` in "
"``django/template/smartif.py``."
msgstr ""

#: ../../howto/deployment/checklist.txt:3
msgid "Deployment checklist"
msgstr ""

#: ../../howto/deployment/checklist.txt:5
msgid ""
"The Internet is a hostile environment. Before deploying your Django project,"
" you should take some time to review your settings, with security, "
"performance, and operations in mind."
msgstr ""

#: ../../howto/deployment/checklist.txt:9
msgid ""
"Django includes many :doc:`security features </topics/security>`. Some are "
"built-in and always enabled. Others are optional because they aren't always "
"appropriate, or because they're inconvenient for development. For example, "
"forcing HTTPS may not be suitable for all websites, and it's impractical for"
" local development."
msgstr ""

#: ../../howto/deployment/checklist.txt:15
msgid ""
"Performance optimizations are another category of trade-offs with "
"convenience. For instance, caching is useful in production, less so for "
"local development. Error reporting needs are also widely different."
msgstr ""

#: ../../howto/deployment/checklist.txt:19
msgid "The following checklist includes settings that:"
msgstr ""

#: ../../howto/deployment/checklist.txt:21
msgid ""
"must be set properly for Django to provide the expected level of security;"
msgstr ""

#: ../../howto/deployment/checklist.txt:22
msgid "are expected to be different in each environment;"
msgstr ""

#: ../../howto/deployment/checklist.txt:23
msgid "enable optional security features;"
msgstr ""

#: ../../howto/deployment/checklist.txt:24
msgid "enable performance optimizations;"
msgstr ""

#: ../../howto/deployment/checklist.txt:25
msgid "provide error reporting."
msgstr ""

#: ../../howto/deployment/checklist.txt:27
msgid ""
"Many of these settings are sensitive and should be treated as confidential. "
"If you're releasing the source code for your project, a common practice is "
"to publish suitable settings for development, and to use a private settings "
"module for production."
msgstr ""

#: ../../howto/deployment/checklist.txt:33
msgid "Run ``manage.py check --deploy``"
msgstr ""

#: ../../howto/deployment/checklist.txt:35
msgid ""
"Some of the checks described below can be automated using the "
":djadminopt:`--deploy` option of the :djadmin:`check` command. Be sure to "
"run it against your production settings file as described in the option's "
"documentation."
msgstr ""

#: ../../howto/deployment/checklist.txt:41
msgid "Critical settings"
msgstr ""

#: ../../howto/deployment/checklist.txt:44
msgid ":setting:`SECRET_KEY`"
msgstr ""

#: ../../howto/deployment/checklist.txt:46
msgid ""
"**The secret key must be a large random value and it must be kept secret.**"
msgstr ""

#: ../../howto/deployment/checklist.txt:48
msgid ""
"Make sure that the key used in production isn't used anywhere else and avoid"
" committing it to source control. This reduces the number of vectors from "
"which an attacker may acquire the key."
msgstr ""

#: ../../howto/deployment/checklist.txt:52
msgid ""
"Instead of hardcoding the secret key in your settings module, consider "
"loading it from an environment variable::"
msgstr ""

#: ../../howto/deployment/checklist.txt:58
msgid "or from a file::"
msgstr ""

#: ../../howto/deployment/checklist.txt:64
msgid ":setting:`DEBUG`"
msgstr ""

#: ../../howto/deployment/checklist.txt:66
msgid "**You must never enable debug in production.**"
msgstr ""

#: ../../howto/deployment/checklist.txt:68
msgid ""
"You're certainly developing your project with :setting:`DEBUG = True "
"<DEBUG>`, since this enables handy features like full tracebacks in your "
"browser."
msgstr ""

#: ../../howto/deployment/checklist.txt:71
msgid ""
"For a production environment, though, this is a really bad idea, because it "
"leaks lots of information about your project: excerpts of your source code, "
"local variables, settings, libraries used, etc."
msgstr ""

#: ../../howto/deployment/checklist.txt:76
msgid "Environment-specific settings"
msgstr ""

#: ../../howto/deployment/checklist.txt:79
msgid ":setting:`ALLOWED_HOSTS`"
msgstr ""

#: ../../howto/deployment/checklist.txt:81
msgid ""
"When :setting:`DEBUG = False <DEBUG>`, Django doesn't work at all without a "
"suitable value for :setting:`ALLOWED_HOSTS`."
msgstr ""

#: ../../howto/deployment/checklist.txt:84
msgid ""
"This setting is required to protect your site against some CSRF attacks. If "
"you use a wildcard, you must perform your own validation of the ``Host`` "
"HTTP header, or otherwise ensure that you aren't vulnerable to this category"
" of attacks."
msgstr ""

#: ../../howto/deployment/checklist.txt:89
msgid ""
"You should also configure the Web server that sits in front of Django to "
"validate the host. It should respond with a static error page or ignore "
"requests for incorrect hosts instead of forwarding the request to Django. "
"This way you'll avoid spurious errors in your Django logs (or emails if you "
"have error reporting configured that way). For example, on nginx you might "
"setup a default server to return \"444 No Response\" on an unrecognized "
"host:"
msgstr ""

#: ../../howto/deployment/checklist.txt:104
msgid ":setting:`CACHES`"
msgstr ""

#: ../../howto/deployment/checklist.txt:106
msgid ""
"If you're using a cache, connection parameters may be different in "
"development and in production."
msgstr ""

#: ../../howto/deployment/checklist.txt:109
msgid ""
"Cache servers often have weak authentication. Make sure they only accept "
"connections from your application servers."
msgstr ""

#: ../../howto/deployment/checklist.txt:112
msgid ""
"If you're using Memcached, consider using :ref:`cached sessions <cached-"
"sessions-backend>` to improve performance."
msgstr ""

#: ../../howto/deployment/checklist.txt:116
msgid ":setting:`DATABASES`"
msgstr ""

#: ../../howto/deployment/checklist.txt:118
msgid ""
"Database connection parameters are probably different in development and in "
"production."
msgstr ""

#: ../../howto/deployment/checklist.txt:121
msgid ""
"Database passwords are very sensitive. You should protect them exactly like "
":setting:`SECRET_KEY`."
msgstr ""

#: ../../howto/deployment/checklist.txt:124
msgid ""
"For maximum security, make sure database servers only accept connections "
"from your application servers."
msgstr ""

#: ../../howto/deployment/checklist.txt:127
msgid "If you haven't set up backups for your database, do it right now!"
msgstr ""

#: ../../howto/deployment/checklist.txt:130
msgid ":setting:`EMAIL_BACKEND` and related settings"
msgstr ""

#: ../../howto/deployment/checklist.txt:132
msgid "If your site sends emails, these values need to be set correctly."
msgstr ""

#: ../../howto/deployment/checklist.txt:134
msgid ""
"By default, Django sends email from webmaster@localhost and root@localhost. "
"However, some mail providers reject email from these addresses. To use "
"different sender addresses, modify the :setting:`DEFAULT_FROM_EMAIL` and "
":setting:`SERVER_EMAIL` settings."
msgstr ""

#: ../../howto/deployment/checklist.txt:140
msgid ":setting:`STATIC_ROOT` and :setting:`STATIC_URL`"
msgstr ""

#: ../../howto/deployment/checklist.txt:142
msgid ""
"Static files are automatically served by the development server. In "
"production, you must define a :setting:`STATIC_ROOT` directory where "
":djadmin:`collectstatic` will copy them."
msgstr ""

#: ../../howto/deployment/checklist.txt:146
msgid "See :doc:`/howto/static-files/index` for more information."
msgstr ""

#: ../../howto/deployment/checklist.txt:149
msgid ":setting:`MEDIA_ROOT` and :setting:`MEDIA_URL`"
msgstr ""

#: ../../howto/deployment/checklist.txt:151
msgid ""
"Media files are uploaded by your users. They're untrusted! Make sure your "
"web server never attempt to interpret them. For instance, if a user uploads "
"a ``.php`` file , the web server shouldn't execute it."
msgstr ""

#: ../../howto/deployment/checklist.txt:155
msgid "Now is a good time to check your backup strategy for these files."
msgstr ""

#: ../../howto/deployment/checklist.txt:158
msgid "HTTPS"
msgstr ""

#: ../../howto/deployment/checklist.txt:160
msgid ""
"Any website which allows users to log in should enforce site-wide HTTPS to "
"avoid transmitting access tokens in clear. In Django, access tokens include "
"the login/password, the session cookie, and password reset tokens. (You "
"can't do much to protect password reset tokens if you're sending them by "
"email.)"
msgstr ""

#: ../../howto/deployment/checklist.txt:165
msgid ""
"Protecting sensitive areas such as the user account or the admin isn't "
"sufficient, because the same session cookie is used for HTTP and HTTPS. Your"
" web server must redirect all HTTP traffic to HTTPS, and only transmit HTTPS"
" requests to Django."
msgstr ""

#: ../../howto/deployment/checklist.txt:170
msgid "Once you've set up HTTPS, enable the following settings."
msgstr ""

#: ../../howto/deployment/checklist.txt:173
msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ""

#: ../../howto/deployment/checklist.txt:175
msgid ""
"Set this to ``True`` to avoid transmitting the CSRF cookie over HTTP "
"accidentally."
msgstr ""

#: ../../howto/deployment/checklist.txt:179
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

#: ../../howto/deployment/checklist.txt:181
msgid ""
"Set this to ``True`` to avoid transmitting the session cookie over HTTP "
"accidentally."
msgstr ""

#: ../../howto/deployment/checklist.txt:185
msgid "Performance optimizations"
msgstr ""

#: ../../howto/deployment/checklist.txt:187
msgid ""
"Setting :setting:`DEBUG = False <DEBUG>` disables several features that are "
"only useful in development. In addition, you can tune the following "
"settings."
msgstr ""

#: ../../howto/deployment/checklist.txt:191
msgid ":setting:`CONN_MAX_AGE`"
msgstr ""

#: ../../howto/deployment/checklist.txt:193
msgid ""
"Enabling :ref:`persistent database connections <persistent-database-"
"connections>` can result in a nice speed-up when connecting to the database "
"accounts for a significant part of the request processing time."
msgstr ""

#: ../../howto/deployment/checklist.txt:198
msgid ""
"This helps a lot on virtualized hosts with limited network performance."
msgstr ""

#: ../../howto/deployment/checklist.txt:201
msgid ":setting:`TEMPLATES`"
msgstr ""

#: ../../howto/deployment/checklist.txt:203
msgid ""
"Enabling the cached template loader often improves performance drastically, "
"as it avoids compiling each template every time it needs to be rendered. See"
" the :ref:`template loaders docs <template-loaders>` for more information."
msgstr ""

#: ../../howto/deployment/checklist.txt:208 ../../howto/error-reporting.txt:2
msgid "Error reporting"
msgstr ""

#: ../../howto/deployment/checklist.txt:210
msgid ""
"By the time you push your code to production, it's hopefully robust, but you"
" can't rule out unexpected errors. Thankfully, Django can capture errors and"
" notify you accordingly."
msgstr ""

#: ../../howto/deployment/checklist.txt:215
msgid ":setting:`LOGGING`"
msgstr ""

#: ../../howto/deployment/checklist.txt:217
msgid ""
"Review your logging configuration before putting your website in production,"
" and check that it works as expected as soon as you have received some "
"traffic."
msgstr ""

#: ../../howto/deployment/checklist.txt:220
msgid "See :doc:`/topics/logging` for details on logging."
msgstr ""

#: ../../howto/deployment/checklist.txt:223
msgid ":setting:`ADMINS` and :setting:`MANAGERS`"
msgstr ""

#: ../../howto/deployment/checklist.txt:225
msgid ":setting:`ADMINS` will be notified of 500 errors by email."
msgstr ""

#: ../../howto/deployment/checklist.txt:227
msgid ""
":setting:`MANAGERS` will be notified of 404 errors. "
":setting:`IGNORABLE_404_URLS` can help filter out spurious reports."
msgstr ""

#: ../../howto/deployment/checklist.txt:230
msgid ""
"See :doc:`/howto/error-reporting` for details on error reporting by email."
msgstr ""

#: ../../howto/deployment/checklist.txt:232
msgid "Error reporting by email doesn't scale very well"
msgstr ""

#: ../../howto/deployment/checklist.txt:234
msgid ""
"Consider using an error monitoring system such as Sentry_ before your inbox "
"is flooded by reports. Sentry can also aggregate logs."
msgstr ""

#: ../../howto/deployment/checklist.txt:240
msgid "Customize the default error views"
msgstr ""

#: ../../howto/deployment/checklist.txt:242
msgid ""
"Django includes default views and templates for several HTTP error codes. "
"You may want to override the default templates by creating the following "
"templates in your root template directory: ``404.html``, ``500.html``, "
"``403.html``, and ``400.html``. The default views should suffice for 99% of "
"Web applications, but if you desire to customize them, see these "
"instructions which also contain details about the default templates:"
msgstr ""

#: ../../howto/deployment/checklist.txt:249
msgid ":ref:`http_not_found_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:250
msgid ":ref:`http_internal_server_error_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:251
msgid ":ref:`http_forbidden_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:252
msgid ":ref:`http_bad_request_view`"
msgstr ""

#: ../../howto/deployment/checklist.txt:255
msgid "Python Options"
msgstr ""

#: ../../howto/deployment/checklist.txt:257
msgid ""
"It's strongly recommended that you invoke the Python process running your "
"Django application using the `-R`_ option or with the "
":envvar:`PYTHONHASHSEED` environment variable set to ``random``."
msgstr ""

#: ../../howto/deployment/checklist.txt:261
msgid ""
"These options help protect your site from denial-of-service (DoS) attacks "
"triggered by carefully crafted inputs. Such an attack can drastically "
"increase CPU usage by causing worst-case performance when creating ``dict`` "
"instances. See `oCERT advisory #2011-003 "
"<http://www.ocert.org/advisories/ocert-2011-003.html>`_ for more "
"information."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:3
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:5 ../../howto/deployment/index.txt:15
msgid "FastCGI support is deprecated and will be removed in Django 1.9."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:10
msgid ""
"Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred "
"deployment platform for Django, many people use shared hosting, on which "
"protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:14 ../../howto/deployment/fastcgi.txt:64
#: ../../howto/deployment/fastcgi.txt:338
msgid "Note"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:16
msgid ""
"This document primarily focuses on FastCGI. Other protocols, such as SCGI "
"and AJP, are also supported, through the ``flup`` Python package. See the "
"Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:20
msgid ""
"Essentially, FastCGI is an efficient way of letting an external application "
"serve pages to a Web server. The Web server delegates the incoming Web "
"requests (via a socket) to FastCGI, which executes the code and passes the "
"response back to the Web server, which, in turn, passes it back to the "
"client's Web browser."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:25
msgid ""
"Like WSGI, FastCGI allows code to stay in memory, allowing requests to be "
"served with no startup time. While e.g. "
":doc:`mod_wsgi</howto/deployment/wsgi/modwsgi>` can either be configured "
"embedded in the Apache Web server process or as a separate daemon process, a"
" FastCGI process never runs inside the Web server process, always in a "
"separate, persistent process."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:34
msgid "Why run code in a separate process?"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:36
msgid ""
"The traditional ``mod_*`` arrangements in Apache embed various scripting "
"languages (most notably PHP, Python and Perl) inside the process space of "
"your Web server. Although this lowers startup time -- because code doesn't "
"have to be read off disk for every request -- it comes at the cost of memory"
" use."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:42
msgid ""
"Due to the nature of FastCGI, it's even possible to have processes that run "
"under a different user account than the Web server process. That's a nice "
"security benefit on shared systems, because it means you can secure your "
"code from other users."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:48
msgid "Prerequisite: flup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:50
msgid ""
"Before you can start using FastCGI with Django, you'll need to install "
"flup_, a Python library for dealing with FastCGI. Version 0.5 or newer "
"should work fine."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:56
msgid "Starting your FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:58
msgid ""
"FastCGI operates on a client-server model, and in most cases you'll be "
"starting the FastCGI process on your own. Your Web server (be it Apache, "
"lighttpd, or otherwise) only contacts your Django-FastCGI process when the "
"server needs a dynamic page to be loaded. Because the daemon is already "
"running with the code in memory, it's able to serve the response very "
"quickly."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:66
msgid ""
"If you're on a shared hosting system, you'll probably be forced to use Web "
"server-managed FastCGI processes. See the section below on running Django "
"with Web server-managed processes for more information."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:70
msgid ""
"A Web server can connect to a FastCGI server in one of two ways: It can use "
"either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can "
"use a TCP socket. What you choose is a manner of preference; a TCP socket is"
" usually easier due to permissions issues."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:75
msgid ""
"To start your server, first change into the directory of your project "
"(wherever your :doc:`manage.py </ref/django-admin>` is), and then run the "
":djadmin:`runfcgi` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:81
msgid ""
"If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll "
"display a list of all the available options."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:84
msgid ""
"You'll need to specify either a :djadminopt:`socket`, a "
":djadminopt:`protocol` or both :djadminopt:`host` and :djadminopt:`port`. "
"Then, when you set up your Web server, you'll just need to point it at the "
"host/port or socket you specified when starting the FastCGI server. See the "
"examples_, below."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:90
msgid "Protocols"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:92
msgid ""
"Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ "
"and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your "
"preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> "
"<protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>``"
" may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:106
msgid "Examples"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:108
msgid "Running a threaded server on a TCP port::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:112
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:116
msgid "Socket security"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:118
msgid ""
"Django's default umask requires that the web server and the Django fastcgi "
"process be run with the same group **and** user. For increased security, you"
" can run them under the same group but as different users. If you do this, "
"you will need to set the umask to 0002 using the ``umask`` argument to "
"``runfcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:124
msgid ""
"Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:129
msgid "Stopping the FastCGI daemon"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:131
msgid ""
"If you have the process running in the foreground, it's easy enough to stop "
"it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. "
"However, when you're dealing with background processes, you'll need to "
"resort to the Unix ``kill`` command."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:136
msgid ""
"If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you "
"can kill the running FastCGI daemon like this::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:141
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:143
msgid ""
"To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:163
msgid "Apache setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:165
msgid ""
"To use Django with Apache and FastCGI, you'll need Apache installed and "
"configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache "
"documentation for instructions."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:169
msgid ""
"Once you've got that set up, point Apache at your Django FastCGI instance by"
" editing the ``httpd.conf`` (Apache configuration) file. You'll need to do "
"two things:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:173
msgid ""
"Use the ``FastCGIExternalServer`` directive to specify the location of your "
"FastCGI server."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:175
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:180
msgid "Specifying the location of the FastCGI server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:182
msgid ""
"The ``FastCGIExternalServer`` directive tells Apache how to find your "
"FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can "
"specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:194
msgid ""
"In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't "
"actually have to exist. It's just a URL used by the Web server internally --"
" a hook for signifying which requests at a URL should be handled by FastCGI."
" (More on this in the next section.)"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:202
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:204
msgid ""
"The second step is telling Apache to use FastCGI for URLs that match a "
"certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs "
"to ``mysite.fcgi`` (or whatever you specified in the "
"``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:209
msgid ""
"In this example, we tell Apache to use FastCGI to handle any request that "
"doesn't represent a file on the filesystem and doesn't start with "
"``/media/``. This is probably the most common case, if you're using Django's"
" admin site:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:227
msgid ""
"Django will automatically use the pre-rewrite version of the URL when "
"constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar "
"methods)."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:232
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:234
msgid ""
"Another way to serve applications through FastCGI is by using Apache's "
"`mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI "
"applications differently in that it manages the spawning of worker processes"
" by itself and doesn't offer something like ``FastCGIExternalServer``. This "
"means that the configuration looks slightly different."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:240
msgid ""
"In effect, you have to go the way of adding a script handler similar to what"
" is described later on regarding running Django in a :ref:`shared-hosting "
"environment <apache_shared_hosting>`. For further details please refer to "
"the `mod_fcgid reference`_"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:249
msgid "lighttpd setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:251
msgid ""
"lighttpd_ is a lightweight Web server commonly used for serving static "
"files. It supports FastCGI natively and, thus, is a good choice for serving "
"both static and dynamic pages, if your site doesn't have any Apache-specific"
" needs."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:257
msgid ""
"Make sure ``mod_fastcgi`` is in your modules list, somewhere after "
"``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll "
"probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:261
msgid "Add the following to your lighttpd config file:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:288
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:290
msgid ""
"lighttpd lets you use \"conditional configuration\" to allow configuration "
"to be customized per host. To specify multiple FastCGI sites, just add a "
"conditional block around your FastCGI config for each site::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:312
msgid ""
"You can also run multiple Django installations on the same site simply by "
"specifying multiple entries in the ``fastcgi.server`` directive. Add one "
"FastCGI host for each."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:317
msgid "Cherokee setup"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:319
msgid ""
"Cherokee is a very fast, flexible and easy to configure Web Server. It "
"supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI,"
" TLS and SSL encrypted connections, Virtual hosts, Authentication, on the "
"fly encoding, Load Balancing, Apache compatible log files, Data Base "
"Balancer, Reverse HTTP Proxy and much more."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:325
msgid ""
"The Cherokee project provides a documentation to `setting up Django`_ with "
"Cherokee."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:332
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:334
msgid ""
"Many shared-hosting providers don't allow you to run your own server daemons"
" or edit the ``httpd.conf`` file. In these cases, it's still possible to run"
" Django using Web server-spawned processes."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:340
msgid ""
"If you're using Web server-spawned processes, as explained in this section, "
"there's no need for you to start the FastCGI server on your own. Apache will"
" spawn a number of processes, scaling as it needs to."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:344
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:353
msgid ""
"Then, create a small script that tells Apache how to spawn your FastCGI "
"program. Create a file ``mysite.fcgi`` and place it in your Web directory, "
"and be sure to make it executable::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:372
msgid ""
"This works if your server uses mod_fastcgi. If, on the other hand, you are "
"using mod_fcgid the setup is mostly the same except for a slight change in "
"the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have"
" to add a fcgid-handler:"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:385
msgid "Restarting the spawned server"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:387
msgid ""
"If you change any Python code on your site, you'll need to tell FastCGI the "
"code has changed. But there's no need to restart Apache in this case. "
"Rather, just reupload ``mysite.fcgi``, or edit the file, so that the "
"timestamp on the file will change. When Apache sees the file has been "
"updated, it will restart your Django application for you."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:393
msgid ""
"If you have access to a command shell on a Unix system, you can accomplish "
"this easily by using the ``touch`` command::"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:399
msgid "Serving admin media files"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:401
msgid ""
"Regardless of the server and configuration you eventually decide to use, you"
" will also need to give some thought to how to serve the admin media files. "
"The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` "
"documentation is also applicable in the setups detailed above."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:407
msgid "Forcing the URL prefix to a particular value"
msgstr ""

#: ../../howto/deployment/fastcgi.txt:409
msgid ""
"Because many of these fastcgi-based solutions require rewriting the URL at "
"some point inside the Web server, the path information that Django sees may "
"not resemble the original URL that was passed in. This is a problem if the "
"Django application is being served from under a particular prefix and you "
"want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, "
"rather than the rewritten version, which might contain, for example, "
"``mysite.fcgi``."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:416
msgid ""
"Django makes a good attempt to work out what the real script name prefix "
"should be. In particular, if the Web server sets the ``SCRIPT_URL`` "
"(specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few "
"servers, including Apache + mod_rewrite in some situations), Django will "
"work out the original prefix automatically."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:422
msgid ""
"In the cases where Django cannot work out the prefix correctly and where you"
" want the original value to be used in URLs, you can set the "
":setting:`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This "
"sets the script name uniformly for every URL served via that settings file. "
"Thus you'll need to use different settings files if you want different sets "
"of URLs to have different script names in this case, but that is a rare "
"situation."
msgstr ""

#: ../../howto/deployment/fastcgi.txt:429
msgid ""
"As an example of how to use it, if your Django configuration is serving all "
"of the URLs under ``'/'`` and you wanted to use this setting, you would set "
"``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

#: ../../howto/deployment/index.txt:2
msgid "Deploying Django"
msgstr ""

#: ../../howto/deployment/index.txt:4
msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal. There's a "
"number of good ways to easily deploy Django:"
msgstr ""

#: ../../howto/deployment/index.txt:22
msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try "
":doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll "
"be the easiest, fastest, and most stable deployment choice."
msgstr ""

#: ../../howto/deployment/index.txt:28
msgid ""
"`Chapter 12 of the Django Book (second edition)`_ discusses deployment and "
"especially scaling in more detail. However, note that this edition was "
"written against Django version 1.1 and has not been updated since "
"``mod_python`` was first deprecated, then completely removed in Django 1.5."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:3
#: ../../howto/deployment/wsgi/modwsgi.txt:233
msgid "Authenticating against Django's user database from Apache"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:5
msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configure Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth/index>` directly. This "
"requires Apache version >= 2.2 and mod_wsgi >= 2.0. For example, you could:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:10
msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:12
msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:15
msgid ""
"Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:18
msgid ""
"If you have installed a :ref:`custom User model <auth-custom-user>` and want"
" to use this default auth handler, it must support an ``is_active`` "
"attribute. If you want to use group based authorization, your custom user "
"must have a relation named 'groups', referring to a related object that has "
"a 'name' field. You can also specify your own custom mod_wsgi auth handler "
"if your custom cannot conform to these requirements."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:29
msgid "Authentication with mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:33
msgid ""
"The use of ``WSGIApplicationGroup %{GLOBAL}`` in the configurations below "
"presumes that your Apache instance is running only one Django application. "
"If you are running more than one Django application, please refer to the "
"`Defining Application Groups`_ section of the mod_wsgi docs for more "
"information about this setting."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:39
msgid ""
"Make sure that mod_wsgi is installed and activated and that you have "
"followed the steps to setup :doc:`Apache with mod_wsgi "
"</howto/deployment/wsgi/modwsgi>`."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:43
msgid ""
"Next, edit your Apache configuration to add a location that you want only "
"authenticated users to be able to view:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:62
msgid ""
"The ``WSGIAuthUserScript`` directive tells mod_wsgi to execute the "
"``check_password`` function in specified wsgi script, passing the user name "
"and password that it receives from the prompt. In this example, the "
"``WSGIAuthUserScript`` is the same as the ``WSGIScriptAlias`` that defines "
"your application :doc:`that is created by django-admin startproject "
"</howto/deployment/wsgi/index>`."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:69
msgid "Using Apache 2.2 with authentication"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:71
msgid "Make sure that ``mod_auth_basic`` and ``mod_authz_user`` are loaded."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:73
msgid ""
"These might be compiled statically into Apache, or you might need to use "
"LoadModule to load them dynamically in your ``httpd.conf``:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:81
msgid ""
"Finally, edit your WSGI script ``mysite.wsgi`` to tie Apache's "
"authentication to your site's authentication mechanisms by importing the "
"``check_password`` function::"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:95
msgid ""
"Requests beginning with ``/secret/`` will now require a user to "
"authenticate."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:97
msgid ""
"The mod_wsgi `access control mechanisms documentation`_ provides additional "
"details and information about alternative methods of authentication."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:104
msgid "Authorization with mod_wsgi and Django groups"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:106
msgid ""
"mod_wsgi also provides functionality to restrict a particular location to "
"members of a group."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:109
msgid "In this case, the Apache configuration should look like this:"
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:128
msgid ""
"To support the ``WSGIAuthGroupScript`` directive, the same WSGI script "
"``mysite.wsgi`` must also import the ``groups_for_user`` function which "
"returns a list groups the given user belongs to."
msgstr ""

#: ../../howto/deployment/wsgi/apache-auth.txt:136
msgid ""
"Requests for ``/secret/`` will now also require user to be a member of the "
"\"secret-agents\" group."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:3
msgid "How to use Django with Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:7
msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no"
" dependencies and is easy to install and use."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:13
msgid "Installing Gunicorn"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:15
msgid ""
"Installing gunicorn is as easy as ``pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:21
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:23
msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts"
" the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with the location of a module containing a WSGI application object "
"named `application`. So for a typical Django project, invoking gunicorn "
"would look like::"
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:31
msgid ""
"This will start one process running one thread listening on "
"``127.0.0.1:8000``. It requires that your project be on the Python path; the"
" simplest way to ensure that is to run this command from the same directory "
"as your ``manage.py`` file."
msgstr ""

#: ../../howto/deployment/wsgi/gunicorn.txt:35
msgid "See Gunicorn's `deployment documentation`_ for additional tips."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:3
msgid "How to deploy with WSGI"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:5
msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:10
msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default"
" WSGI configuration for you, which you can tweak as needed for your project,"
" and direct any WSGI-compliant application server to use."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:14
msgid ""
"Django includes getting-started documentation for the following WSGI "
"servers:"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:25
msgid "The ``application`` object"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:27
msgid ""
"The key concept of deploying with WSGI is the ``application`` callable which"
" the application server uses to communicate with your code. It's commonly "
"provided as an object named ``application`` in a Python module accessible to"
" the server."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:32
msgid ""
"The :djadmin:`startproject` command creates a file "
":file:`<project_name>/wsgi.py` that contains such an ``application`` "
"callable."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:35
msgid ""
"It's used both by Django's development server and in production WSGI "
"deployments."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:38
msgid ""
"WSGI servers obtain the path to the ``application`` callable from their "
"configuration. Django's built-in servers, namely the :djadmin:`runserver` "
"and :djadmin:`runfcgi` commands, read it from the "
":setting:`WSGI_APPLICATION` setting. By default, it's set to "
"``<project_name>.wsgi.application``, which points to the ``application`` "
"callable in :file:`<project_name>/wsgi.py`."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:45
msgid "Configuring the settings module"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:47
msgid ""
"When the WSGI server loads your application, Django needs to import the "
"settings module — that's where your entire application is defined."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:50
msgid ""
"Django uses the :envvar:`DJANGO_SETTINGS_MODULE` environment variable to "
"locate the appropriate settings module. It must contain the dotted path to "
"the settings module. You can use a different value for development and "
"production; it all depends on how you organize your settings."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:55
msgid ""
"If this variable isn't set, the default :file:`wsgi.py` sets it to "
"``mysite.settings``, where ``mysite`` is the name of your project. That's "
"how :djadmin:`runserver` discovers the default settings file by default."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:61
msgid ""
"Since environment variables are process-wide, this doesn't work when you run"
" multiple Django sites in the same process. This happens with mod_wsgi."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:64
msgid ""
"To avoid this problem, use mod_wsgi's daemon mode with each site in its own "
"daemon process, or override the value from the environment by enforcing "
"``os.environ[\"DJANGO_SETTINGS_MODULE\"] = \"mysite.settings\"`` in your "
":file:`wsgi.py`."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:71
msgid "Applying WSGI middleware"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:73
msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object. For "
"instance you could add these lines at the bottom of :file:`wsgi.py`::"
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:79
msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want"
" to combine a Django application with a WSGI application of another "
"framework."
msgstr ""

#: ../../howto/deployment/wsgi/index.txt:87
msgid ""
"Some third-party WSGI middleware do not call ``close`` on the response "
"object after handling a request. In those cases the "
":data:`~django.core.signals.request_finished` signal isn't sent. This can "
"result in idle connections to database and memcache servers."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:3
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:5
msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:11
msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports"
" mod_wsgi."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:17
msgid ""
"The `official mod_wsgi documentation`_ is fantastic; it's your source for "
"all the details about how to use mod_wsgi. You'll probably want to start "
"with the `installation and configuration documentation`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:25
msgid "Basic configuration"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:27
msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"``httpd.conf`` file and add the following. If you are using a version of "
"Apache older than 2.4, replace ``Require all granted`` with ``Allow from "
"all`` and also add the line ``Order deny,allow`` above it."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:43
msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:50
msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:53
msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your "
":file:`wsgi.py` file."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:56
msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI"
" overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:64
msgid ""
"If multiple Django sites are run in a single mod_wsgi process, all of them "
"will use the settings of whichever one happens to run first. This can be "
"solved by changing::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:70
msgid "in ``wsgi.py``, to::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:74
msgid ""
"or by :ref:`using mod_wsgi daemon mode<daemon-mode>` and ensuring that each "
"site runs in its own daemon process."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:77
#: ../../howto/deployment/wsgi/uwsgi.txt:111
msgid "Fixing ``UnicodeEncodeError`` for file uploads"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:79
msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure Apache is configured to accept "
"non-ASCII file names::"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:86
msgid ""
"A common location to put this configuration is ``/etc/apache2/envvars``."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:88
#: ../../howto/deployment/wsgi/uwsgi.txt:119
msgid ""
"See the :ref:`unicode-files` section of the Unicode reference guide for "
"details."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:92
msgid "Using a virtualenv"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:94
msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"you'll need to add the path to this virtualenv's ``site-packages`` directory"
" to your Python path as well. To do this, add an additional path to your "
"``WSGIPythonPath`` directive, with multiple paths separated by a colon "
"(``:``) if using a UNIX-like system, or a semicolon (``;``) if using "
"Windows. If any part of a directory path contains a space character, the "
"complete argument string to ``WSGIPythonPath`` must be quoted:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:106
msgid ""
"Make sure you give the correct path to your virtualenv, and replace "
"``python3.X`` with the correct Python version (e.g. ``python3.4``)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:114
msgid "Using mod_wsgi daemon mode"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:116
msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows"
" platforms). To create the required daemon process group and delegate the "
"Django instance to run in it, you will need to add appropriate "
"``WSGIDaemonProcess`` and ``WSGIProcessGroup`` directives. A further change "
"required to the above configuration if you use daemon mode is that you can't"
" use ``WSGIPythonPath``; instead you should use the ``python-path`` option "
"to ``WSGIDaemonProcess``, for example:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:129
msgid ""
"If you want to serve your project in a subdirectory "
"(``http://example.com/mysite`` in this example), you can add "
"``WSGIScriptAlias`` to the configuration above:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:137
msgid ""
"See the official mod_wsgi documentation for `details on setting up daemon "
"mode`_."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:145
msgid "Serving files"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:147
msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:150
msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:153
#: ../../howto/static-files/deployment.txt:73
msgid "Nginx_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:154
#: ../../howto/static-files/deployment.txt:74
msgid "A stripped-down version of Apache_"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:156
msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:160
msgid ""
"This example sets up Django at the site root, but serves ``robots.txt``, "
"``favicon.ico``, and anything in the ``/static/`` and ``/media/`` URL space "
"as a static file. All other URLs will be served using mod_wsgi:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:188
msgid ""
"If you are using a version of Apache older than 2.4, replace ``Require all "
"granted`` with ``Allow from all`` and also add the line ``Order deny,allow``"
" above it."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:203
msgid "Serving the admin files"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:205
msgid ""
"When :mod:`django.contrib.staticfiles` is in :setting:`INSTALLED_APPS`, the "
"Django development server automatically serves the static files of the admin"
" app (and any other installed apps). This is however not the case when you "
"use any other server arrangement. You're responsible for setting up Apache, "
"or whichever Web server you're using, to serve the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:211
msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:214
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to"
" collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:221
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:225
msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + ``admin/``) to the actual location of "
"the admin files."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:229
msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""

#: ../../howto/deployment/wsgi/modwsgi.txt:235
msgid ""
"Django provides a handler to allow Apache to authenticate users directly "
"against Django's authentication backends. See the :doc:`mod_wsgi "
"authentication documentation </howto/deployment/wsgi/apache-auth>`."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:3
msgid "How to use Django with uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:7
msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:14
msgid ""
"The uWSGI docs offer a `tutorial`_ covering Django, nginx, and uWSGI (one "
"possible deployment setup of many). The docs below are focused on how to "
"integrate Django with uWSGI."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:21
msgid "Prerequisite: uWSGI"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:23
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:39
msgid ""
"Some distributions, including Debian and Ubuntu, ship an outdated version of"
" uWSGI that does not conform to the WSGI specification. Versions prior to "
"1.2.6 do not call ``close`` on the response object after handling a request."
" In those cases the :data:`~django.core.signals.request_finished` signal "
"isn't sent. This can result in idle connections to database and memcache "
"servers."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:47
msgid "uWSGI model"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:49
msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic"
" content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:56
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:58
msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_ and `examples`_."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:64
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:79
msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:87
msgid "The Django-specific options here are:"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:89
msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:91
msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:93
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:94
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:96
msgid "Example ini configuration file::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:107
msgid "Example ini configuration file usage::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:113
msgid ""
"If you get a ``UnicodeEncodeError`` when uploading files with file names "
"that contain non-ASCII characters, make sure uWSGI is configured to accept "
"non-ASCII file names by adding this to your ``uwsgi.ini``::"
msgstr ""

#: ../../howto/deployment/wsgi/uwsgi.txt:122
msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stopping and reloading the uWSGI workers."
msgstr ""

#: ../../howto/error-reporting.txt:4
msgid ""
"When you're running a public site you should always turn off the "
":setting:`DEBUG` setting. That will make your server run much faster, and "
"will also prevent malicious users from seeing details of your application "
"that can be revealed by the error pages."
msgstr ""

#: ../../howto/error-reporting.txt:9
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

#: ../../howto/error-reporting.txt:15
msgid "Email reports"
msgstr ""

#: ../../howto/error-reporting.txt:18
msgid "Server errors"
msgstr ""

#: ../../howto/error-reporting.txt:20
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The "
":setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

#: ../../howto/error-reporting.txt:29
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify "
":setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and "
":setting:`EMAIL_HOST_PASSWORD`, though other settings may be also required "
"depending on your mail server's configuration. Consult :doc:`the Django "
"settings documentation </ref/settings>` for a full list of email-related "
"settings."
msgstr ""

#: ../../howto/error-reporting.txt:38
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

#: ../../howto/error-reporting.txt:42
msgid ""
"To activate this behavior, put the email addresses of the recipients in the "
":setting:`ADMINS` setting."
msgstr ""

#: ../../howto/error-reporting.txt:47
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration "
"</topics/logging>`."
msgstr ""

#: ../../howto/error-reporting.txt:52
msgid "404 errors"
msgstr ""

#: ../../howto/error-reporting.txt:54
msgid ""
"Django can also be configured to email errors about broken links (404 \"page"
" not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

#: ../../howto/error-reporting.txt:57
msgid ":setting:`DEBUG` is ``False``;"
msgstr ""

#: ../../howto/error-reporting.txt:59
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware`."
msgstr ""

#: ../../howto/error-reporting.txt:62
msgid ""
"If those conditions are met, Django will email the users listed in the "
":setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. (It doesn't bother to email for 404s that don't have a "
"referer -- those are usually just people typing in broken URLs or broken Web"
" 'bots)."
msgstr ""

#: ../../howto/error-reporting.txt:69
msgid ""
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` must appear "
"before other middleware that intercepts 404 errors, such as "
":class:`~django.middleware.locale.LocaleMiddleware` or "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`. "
"Put it towards the top of your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../howto/error-reporting.txt:75
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the "
":setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled "
"regular expression objects. For example::"
msgstr ""

#: ../../howto/error-reporting.txt:85
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

#: ../../howto/error-reporting.txt:88
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

#: ../../howto/error-reporting.txt:98
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

#: ../../howto/error-reporting.txt:101
msgid ""
"If you'd like to customize the behavior of "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware` further (for "
"example to ignore requests coming from web crawlers), you should subclass it"
" and override its methods."
msgstr ""

#: ../../howto/error-reporting.txt:108
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

#: ../../howto/error-reporting.txt:115
msgid "Filtering error reports"
msgstr ""

#: ../../howto/error-reporting.txt:119
msgid ""
"Filtering sensitive data is a hard problem, and it's nearly impossible to "
"guarantee that sensitive won't leak into an error report. Therefore, error "
"reports should only be available to trusted team members and you should "
"avoid transmitting error reports unencrypted over the Internet (such as "
"through email)."
msgstr ""

#: ../../howto/error-reporting.txt:126
msgid "Filtering sensitive information"
msgstr ""

#: ../../howto/error-reporting.txt:130
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_’s local variables, and the "
":class:`~django.http.HttpRequest`’s :ref:`attributes<httprequest-"
"attributes>`."
msgstr ""

#: ../../howto/error-reporting.txt:136
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and "
":func:`sensitive_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:148
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:162
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error"
" reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:167
msgid ""
"To systematically hide all local variables of a function from error logs, do"
" not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:174
msgid "When using multiple decorators"
msgstr ""

#: ../../howto/error-reporting.txt:176
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``’ in the following example), and if the decorated function has "
"multiple decorators, then make sure to place ``@sensitive_variables`` at the"
" top of the decorator chain. This way it will also hide the function "
"argument as it gets passed through the other decorators::"
msgstr ""

#: ../../howto/error-reporting.txt:190
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:206
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

#: ../../howto/error-reporting.txt:211
msgid ""
"To systematically hide all POST parameters of a request in error reports, do"
" not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

#: ../../howto/error-reporting.txt:218
msgid ""
"All POST parameters are systematically filtered out of error reports for "
"certain :mod:`django.contrib.auth.views` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

#: ../../howto/error-reporting.txt:227
msgid "Custom error reports"
msgstr ""

#: ../../howto/error-reporting.txt:229
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is,"
" respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: "
":class:`django.views.debug.SafeExceptionReporterFilter`. This filter uses "
"the decorators' annotations to replace the corresponding values with stars "
"(`**********`) when the error reports are produced. If you wish to override "
"or customize this default behavior for your entire site, you need to define "
"your own filter class and tell Django to use it via the "
":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` setting::"
msgstr ""

#: ../../howto/error-reporting.txt:244
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``’s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

#: ../../howto/error-reporting.txt:255
msgid ""
"Your custom filter class needs to inherit from "
":class:`django.views.debug.SafeExceptionReporterFilter` and may override the"
" following methods:"
msgstr ""

#: ../../howto/error-reporting.txt:263
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By"
" default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/error-reporting.txt:268
msgid ""
"Returns the representation string of the request object, that is, the value "
"that would be returned by ``repr(request)``, except it uses the filtered "
"dictionary of POST parameters as determined by "
":meth:`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

#: ../../howto/error-reporting.txt:275
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:280
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

#: ../../howto/error-reporting.txt:286
msgid ""
"You can also set up custom error reporting by writing a custom piece of "
":ref:`exception middleware <exception-middleware>`. If you do write custom "
"error handling, it's a good idea to emulate Django's built-in error handling"
" and only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

#: ../../howto/index.txt:2
msgid "\"How-to\" guides"
msgstr ""

#: ../../howto/index.txt:4
msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material"
" in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these "
"guides will help you quickly accomplish common tasks."
msgstr ""

#: ../../howto/index.txt:33
msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

#: ../../howto/initial-data.txt:3
msgid "Providing initial data for models"
msgstr ""

#: ../../howto/initial-data.txt:5
msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. There's a couple of ways you can have "
"Django automatically create this data: you can provide `initial data via "
"fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

#: ../../howto/initial-data.txt:10
msgid ""
"In general, using a fixture is a cleaner method since it's database-"
"agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

#: ../../howto/initial-data.txt:19
msgid "Providing initial data with fixtures"
msgstr ""

#: ../../howto/initial-data.txt:21
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>`"
" command. Or, you can write fixtures by hand; fixtures can be written as "
"JSON, XML or YAML (with PyYAML_ installed) documents. The "
":doc:`serialization documentation </topics/serialization>` has more details "
"about each of these supported :ref:`serialization formats <serialization-"
"formats>`."
msgstr ""

#: ../../howto/initial-data.txt:31
msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr ""

#: ../../howto/initial-data.txt:55
msgid "And here's that same fixture as YAML:"
msgstr ""

#: ../../howto/initial-data.txt:70
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

#: ../../howto/initial-data.txt:72
msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <loaddata>` "
"``<fixturename>``, where ``<fixturename>`` is the name of the fixture file "
"you've created. Each time you run :djadmin:`loaddata`, the data will be read"
" from the fixture and re-loaded into the database. Note this means that if "
"you change one of the rows created by a fixture and then run "
":djadmin:`loaddata` again, you'll wipe out any changes you've made."
msgstr ""

#: ../../howto/initial-data.txt:80
msgid "Automatically loading initial data fixtures"
msgstr ""

#: ../../howto/initial-data.txt:84
msgid ""
"If an application uses migrations, there is no automatic loading of "
"fixtures. Since migrations will be required for applications in Django 1.9, "
"this behavior is considered deprecated. If you want to load initial data for"
" an app, consider doing it in a :ref:`data migration <data-migrations>`."
msgstr ""

#: ../../howto/initial-data.txt:89
msgid ""
"If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture"
" will be loaded every time you run :djadmin:`migrate`. This is extremely "
"convenient, but be careful: remember that the data will be refreshed *every "
"time* you run :djadmin:`migrate`. So don't use ``initial_data`` for data "
"you'll want to edit."
msgstr ""

#: ../../howto/initial-data.txt:95
msgid "Where Django finds fixture files"
msgstr ""

#: ../../howto/initial-data.txt:97
msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

#: ../../howto/initial-data.txt:101
msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"a path to a fixture file, which overrides searching the usual directories."
msgstr ""

#: ../../howto/initial-data.txt:107
msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

#: ../../howto/initial-data.txt:113
msgid "Providing initial SQL data"
msgstr ""

#: ../../howto/initial-data.txt:117
msgid ""
"If an application uses migrations, there is no loading of initial SQL data "
"(including backend-specific SQL data). Since migrations will be required for"
" applications in Django 1.9, this behavior is considered deprecated. If you "
"want to use initial SQL for an app, consider doing it in a :ref:`data "
"migration <data-migrations>`."
msgstr ""

#: ../../howto/initial-data.txt:123
msgid ""
"Django provides a hook for passing the database arbitrary SQL that's "
"executed just after the CREATE TABLE statements when you run "
":djadmin:`migrate`. You can use this hook to populate default records, or "
"you could also create SQL functions, views, triggers, etc."
msgstr ""

#: ../../howto/initial-data.txt:128
msgid ""
"The hook is simple: Django just looks for a file called "
"``sql/<modelname>.sql``, in your app directory, where ``<modelname>`` is the"
" model's name in lowercase."
msgstr ""

#: ../../howto/initial-data.txt:131
msgid ""
"So, if you had a ``Person`` model in an app called ``myapp``, you could add "
"arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` "
"directory. Here's an example of what the file might contain:"
msgstr ""

#: ../../howto/initial-data.txt:140
msgid ""
"Each SQL file, if given, is expected to contain valid SQL statements which "
"will insert the desired data (e.g., properly-formatted ``INSERT`` statements"
" separated by semicolons)."
msgstr ""

#: ../../howto/initial-data.txt:144
msgid ""
"The SQL files are read by the :djadmin:`sqlcustom` and :djadmin:`sqlall` "
"commands in :doc:`manage.py </ref/django-admin>`. Refer to the "
":doc:`manage.py documentation </ref/django-admin>` for more information."
msgstr ""

#: ../../howto/initial-data.txt:148
msgid ""
"Note that if you have multiple SQL data files, there's no guarantee of the "
"order in which they're executed. The only thing you can assume is that, by "
"the time your custom data files are executed, all the database tables "
"already will have been created."
msgstr ""

#: ../../howto/initial-data.txt:153
msgid "Initial SQL data and testing"
msgstr ""

#: ../../howto/initial-data.txt:155
msgid ""
"This technique *cannot* be used to provide initial data for testing "
"purposes. Django's test framework flushes the contents of the test database "
"after each test; as a result, any data added using the custom SQL hook will "
"be lost."
msgstr ""

#: ../../howto/initial-data.txt:160
msgid ""
"If you require data for a test case, you should add it using either a "
":ref:`test fixture <topics-testing-fixtures>`, or programmatically add it "
"during the ``setUp()`` of your test case."
msgstr ""

#: ../../howto/initial-data.txt:165
msgid "Database-backend-specific SQL data"
msgstr ""

#: ../../howto/initial-data.txt:167
msgid ""
"There's also a hook for backend-specific SQL data. For example, you can have"
" separate initial-data files for PostgreSQL and SQLite. For each app, Django"
" looks for a file called ``<app_label>/sql/<modelname>.<backend>.sql``, "
"where ``<app_label>`` is your app directory, ``<modelname>`` is the model's "
"name in lowercase and ``<backend>`` is the last part of the module name "
"provided for the :setting:`ENGINE <DATABASE-ENGINE>` in your settings file "
"(e.g., if you have defined a database with an :setting:`ENGINE <DATABASE-"
"ENGINE>` value of ``django.db.backends.sqlite3``, Django will look for "
"``<app_label>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

#: ../../howto/initial-data.txt:178
msgid ""
"Backend-specific SQL data is executed before non-backend-specific SQL data. "
"For example, if your app contains the files ``sql/person.sql`` and "
"``sql/person.sqlite3.sql`` and you're installing the app on SQLite, Django "
"will execute the contents of ``sql/person.sqlite3.sql`` first, then "
"``sql/person.sql``."
msgstr ""

#: ../../howto/jython.txt:3
msgid "Running Django on Jython"
msgstr ""

#: ../../howto/jython.txt:7
msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM)."
" This document will get you up and running with Django on top of Jython."
msgstr ""

#: ../../howto/jython.txt:11
msgid "Installing Jython"
msgstr ""

#: ../../howto/jython.txt:13
msgid ""
"Django works with Jython versions 2.7b2 and higher. See the Jython_ Web site"
" for download and installation instructions."
msgstr ""

#: ../../howto/jython.txt:19
msgid "Creating a servlet container"
msgstr ""

#: ../../howto/jython.txt:21
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr ""

#: ../../howto/jython.txt:25
msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they"
" include."
msgstr ""

#: ../../howto/jython.txt:34
msgid "Installing Django"
msgstr ""

#: ../../howto/jython.txt:36
msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr ""

#: ../../howto/jython.txt:42
msgid "Installing Jython platform support libraries"
msgstr ""

#: ../../howto/jython.txt:44
msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr ""

#: ../../howto/jython.txt:50
msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

#: ../../howto/jython.txt:57
msgid "Differences with Django on Jython"
msgstr ""

#: ../../howto/jython.txt:61
msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

#: ../../howto/jython.txt:64
msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr ""

#: ../../howto/jython.txt:69
msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr ""

#: ../../howto/jython.txt:72
msgid "Any part of Django that requires `Pillow`_ will not work."
msgstr ""

#: ../../howto/legacy-databases.txt:3
msgid "Integrating Django with a legacy database"
msgstr ""

#: ../../howto/legacy-databases.txt:5
msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""

#: ../../howto/legacy-databases.txt:9
msgid ""
"This document assumes you know the Django basics, as covered in the "
":doc:`tutorial </intro/tutorial01>`."
msgstr ""

#: ../../howto/legacy-databases.txt:12
msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""

#: ../../howto/legacy-databases.txt:16
msgid "Give Django your database parameters"
msgstr ""

#: ../../howto/legacy-databases.txt:18
msgid ""
"You'll need to tell Django what your database connection parameters are, and"
" what the name of the database is. Do that by editing the "
":setting:`DATABASES` setting and assigning values to the following keys for "
"the ``'default'`` connection:"
msgstr ""

#: ../../howto/legacy-databases.txt:23
msgid ":setting:`NAME`"
msgstr ""

#: ../../howto/legacy-databases.txt:24
msgid ":setting:`ENGINE <DATABASE-ENGINE>`"
msgstr ""

#: ../../howto/legacy-databases.txt:25
msgid ":setting:`USER`"
msgstr ""

#: ../../howto/legacy-databases.txt:26
msgid ":setting:`PASSWORD`"
msgstr ""

#: ../../howto/legacy-databases.txt:27
msgid ":setting:`HOST`"
msgstr ""

#: ../../howto/legacy-databases.txt:28
msgid ":setting:`PORT`"
msgstr ""

#: ../../howto/legacy-databases.txt:31
msgid "Auto-generate the models"
msgstr ""

#: ../../howto/legacy-databases.txt:35
msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

#: ../../howto/legacy-databases.txt:41
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

#: ../../howto/legacy-databases.txt:45
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See"
" the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

#: ../../howto/legacy-databases.txt:48
msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your "
":setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../howto/legacy-databases.txt:52
msgid ""
"By default, :djadmin:`inspectdb` creates unmanaged models. That is, "
"``managed = False`` in the model's ``Meta`` class tells Django not to manage"
" each table's creation, modification, and deletion::"
msgstr ""

#: ../../howto/legacy-databases.txt:63
msgid ""
"If you do want to allow Django to manage the table's lifecycle, you'll need "
"to change the :attr:`~django.db.models.Options.managed` option above to "
"``True`` (or simply remove it because ``True`` is its default value)."
msgstr ""

#: ../../howto/legacy-databases.txt:68
msgid "Install the core Django tables"
msgstr ""

#: ../../howto/legacy-databases.txt:70
msgid ""
"Next, run the :djadmin:`migrate` command to install any extra needed "
"database records such as admin permissions and content types::"
msgstr ""

#: ../../howto/legacy-databases.txt:76
msgid "Test and tweak"
msgstr ""

#: ../../howto/legacy-databases.txt:78
msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data"
" via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

#: ../../howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr ""

#: ../../howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""

#: ../../howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr ""

#: ../../howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django"
" is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""

#: ../../howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr ""

#: ../../howto/outputting-csv.txt:32 ../../howto/outputting-pdf.txt:69
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a"
" mention:"
msgstr ""

#: ../../howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""

#: ../../howto/outputting-csv.txt:44
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a "
"file-like object, and :class:`~django.http.HttpResponse` objects fit the "
"bill."
msgstr ""

#: ../../howto/outputting-csv.txt:49
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""

#: ../../howto/outputting-csv.txt:52
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass "
"``writerow()`` your raw strings, and it'll do the right thing."
msgstr ""

#: ../../howto/outputting-csv.txt:56
msgid "Handling Unicode on Python 2"
msgstr ""

#: ../../howto/outputting-csv.txt:58
msgid ""
"Python 2's :mod:`csv` module does not support Unicode input. Since Django "
"uses Unicode internally this means strings read from sources such as "
":class:`~django.http.HttpRequest` are potentially problematic. There are a "
"few options for handling this:"
msgstr ""

#: ../../howto/outputting-csv.txt:63
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

#: ../../howto/outputting-csv.txt:65
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr ""

#: ../../howto/outputting-csv.txt:68
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr ""

#: ../../howto/outputting-csv.txt:71
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

#: ../../howto/outputting-csv.txt:79
msgid "Streaming large CSV files"
msgstr ""

#: ../../howto/outputting-csv.txt:81
msgid ""
"When dealing with views that generate very large responses, you might want "
"to consider using Django's :class:`~django.http.StreamingHttpResponse` "
"instead. For example, by streaming a file that takes a long time to generate"
" you can avoid a load balancer dropping a connection that might have "
"otherwise timed out while the server was generating the response."
msgstr ""

#: ../../howto/outputting-csv.txt:87
msgid ""
"In this example, we make full use of Python generators to efficiently handle"
" the assembly and transmission of a large CSV file::"
msgstr ""

#: ../../howto/outputting-csv.txt:117
msgid "Using the template system"
msgstr ""

#: ../../howto/outputting-csv.txt:119
msgid ""
"Alternatively, you can use the :doc:`Django template system "
"</topics/templates>` to generate CSV. This is lower-level than using the "
"convenient Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""

#: ../../howto/outputting-csv.txt:123
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""

#: ../../howto/outputting-csv.txt:126
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

#: ../../howto/outputting-csv.txt:150
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``content_type='text/csv'`` -- is the same."
msgstr ""

#: ../../howto/outputting-csv.txt:154
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

#: ../../howto/outputting-csv.txt:161
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""

#: ../../howto/outputting-csv.txt:166
msgid "Other text-based formats"
msgstr ""

#: ../../howto/outputting-csv.txt:168
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""

#: ../../howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr ""

#: ../../howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python"
" PDF library."
msgstr ""

#: ../../howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

#: ../../howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

#: ../../howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr ""

#: ../../howto/outputting-pdf.txt:23
msgid ""
"The ReportLab library is `available on PyPI`_. A `user guide`_ (not "
"coincidentally, a PDF file) is also available for download. You can install "
"ReportLab with ``pip``:"
msgstr ""

#: ../../howto/outputting-pdf.txt:31
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

#: ../../howto/outputting-pdf.txt:35
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

#: ../../howto/outputting-pdf.txt:41
msgid "Write your view"
msgstr ""

#: ../../howto/outputting-pdf.txt:43
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API"
" acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

#: ../../howto/outputting-pdf.txt:47
msgid "Here's a \"Hello World\" example::"
msgstr ""

#: ../../howto/outputting-pdf.txt:72
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If"
" you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

#: ../../howto/outputting-pdf.txt:78
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialog, "
"etc."
msgstr ""

#: ../../howto/outputting-pdf.txt:82
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box "
"prompting/confirming how to handle the document even if a default is set on "
"the machine. If you leave off ``'attachment;'``, browsers will handle the "
"PDF using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

#: ../../howto/outputting-pdf.txt:91
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

#: ../../howto/outputting-pdf.txt:96
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object"
" (in this case, ``p``) -- not on ``response``."
msgstr ""

#: ../../howto/outputting-pdf.txt:99
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

#: ../../howto/outputting-pdf.txt:104
msgid ""
"ReportLab is not thread-safe. Some of our users have reported odd issues "
"with building PDF-generating Django views that are accessed by many people "
"at the same time."
msgstr ""

#: ../../howto/outputting-pdf.txt:109
msgid "Complex PDFs"
msgstr ""

#: ../../howto/outputting-pdf.txt:111
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using the"
" :mod:`io` library as a temporary holding place for your PDF file. This "
"library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use "
":mod:`io`::"
msgstr ""

#: ../../howto/outputting-pdf.txt:145
msgid "Further resources"
msgstr ""

#: ../../howto/outputting-pdf.txt:147
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr ""

#: ../../howto/outputting-pdf.txt:149
msgid ""
"`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an "
"example of how to integrate Pisa with Django."
msgstr ""

#: ../../howto/outputting-pdf.txt:151
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

#: ../../howto/outputting-pdf.txt:160
msgid "Other formats"
msgstr ""

#: ../../howto/outputting-pdf.txt:162
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see "
":doc:`/howto/outputting-csv` for another example and some techniques you can"
" use when generated text-based formats."
msgstr ""

#: ../../howto/static-files/deployment.txt:3
msgid "Deploying static files"
msgstr ""

#: ../../howto/static-files/deployment.txt:7
msgid ""
"For an introduction to the use of :mod:`django.contrib.staticfiles`, see "
":doc:`/howto/static-files/index`."
msgstr ""

#: ../../howto/static-files/deployment.txt:13
msgid "Serving static files in production"
msgstr ""

#: ../../howto/static-files/deployment.txt:15
msgid ""
"The basic outline of putting static files into production is simple: run the"
" :djadmin:`collectstatic` command when static files change, then arrange for"
" the collected static files directory (:setting:`STATIC_ROOT`) to be moved "
"to the static file server and served. Depending on "
":setting:`STATICFILES_STORAGE`, files may need to be moved to a new location"
" manually or the :func:`post_process "
"<django.contrib.staticfiles.storage.StaticFilesStorage.post_process>` method"
" of the ``Storage`` class might take care of that."
msgstr ""

#: ../../howto/static-files/deployment.txt:23
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

#: ../../howto/static-files/deployment.txt:28
msgid "Serving the site and your static files from the same server"
msgstr ""

#: ../../howto/static-files/deployment.txt:30
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the process may look something like:"
msgstr ""

#: ../../howto/static-files/deployment.txt:33
msgid "Push your code up to the deployment server."
msgstr ""

#: ../../howto/static-files/deployment.txt:34
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files/deployment.txt:36
msgid ""
"Configure your web server to serve the files in :setting:`STATIC_ROOT` under"
" the URL :setting:`STATIC_URL`. For example, here's :ref:`how to do this "
"with Apache and mod_wsgi <serving-files>`."
msgstr ""

#: ../../howto/static-files/deployment.txt:40
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric "
"<http://fabfile.org/>`_."
msgstr ""

#: ../../howto/static-files/deployment.txt:45
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation <http://docs.fabfile.org/>`_, for a complete"
" explanation of the syntax."
msgstr ""

#: ../../howto/static-files/deployment.txt:51
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""

#: ../../howto/static-files/deployment.txt:67
msgid "Serving static files from a dedicated server"
msgstr ""

#: ../../howto/static-files/deployment.txt:69
msgid ""
"Most larger Django sites use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some common "
"choices are:"
msgstr ""

#: ../../howto/static-files/deployment.txt:79
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

#: ../../howto/static-files/deployment.txt:82
msgid ""
"Since your static file server won't be running Django, you'll need to modify"
" the deployment strategy to look something like:"
msgstr ""

#: ../../howto/static-files/deployment.txt:85
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

#: ../../howto/static-files/deployment.txt:87
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the"
" directory that's being served. `rsync <https://rsync.samba.org/>`_ is a "
"common choice for this step since it only needs to transfer the bits of "
"static files that have changed."
msgstr ""

#: ../../howto/static-files/deployment.txt:92
msgid "Here's how this might look in a fabfile::"
msgstr ""

#: ../../howto/static-files/deployment.txt:115
msgid "Serving static files from a cloud service or CDN"
msgstr ""

#: ../../howto/static-files/deployment.txt:117
msgid ""
"Another common tactic is to serve static files from a cloud storage provider"
" like Amazon's S3 and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr ""

#: ../../howto/static-files/deployment.txt:122
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

#: ../../howto/static-files/deployment.txt:126
msgid ""
"There's any number of ways you might do this, but if the provider has an API"
" a :doc:`custom file storage backend </howto/custom-file-storage>` will make"
" the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

#: ../../howto/static-files/deployment.txt:132
msgid ""
"For example, if you've written an S3 storage backend in "
"``myproject.storage.S3Storage`` you could use it with::"
msgstr ""

#: ../../howto/static-files/deployment.txt:137
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

#: ../../howto/static-files/deployment.txt:142
msgid ""
"For details on how you'd write one of these backends, see :doc:`/howto"
"/custom-file-storage`. There are 3rd party apps available that provide "
"storage backends for many common file storage APIs. A good starting point is"
" the `overview at djangopackages.com <https://www.djangopackages.com/grids/g"
"/storage-backends/>`_."
msgstr ""

#: ../../howto/static-files/deployment.txt:149
#: ../../howto/static-files/index.txt:190
msgid "Learn more"
msgstr ""

#: ../../howto/static-files/deployment.txt:151
msgid ""
"For complete details on all the settings, commands, template tags, and other"
" pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

#: ../../howto/static-files/index.txt:3
msgid "Managing static files (e.g. images, JavaScript, CSS)"
msgstr ""

#: ../../howto/static-files/index.txt:5
msgid ""
"Websites generally need to serve additional files such as images, "
"JavaScript, or CSS. In Django, we refer to these files as \"static files\"."
"  Django provides :mod:`django.contrib.staticfiles` to help you manage them."
msgstr ""

#: ../../howto/static-files/index.txt:9
msgid "This page describes how you can serve these static files."
msgstr ""

#: ../../howto/static-files/index.txt:12
msgid "Configuring static files"
msgstr ""

#: ../../howto/static-files/index.txt:14
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your "
":setting:`INSTALLED_APPS`."
msgstr ""

#: ../../howto/static-files/index.txt:17
msgid "In your settings file, define :setting:`STATIC_URL`, for example::"
msgstr ""

#: ../../howto/static-files/index.txt:21
msgid ""
"In your templates, either hardcode the url like "
"``/static/my_app/myexample.jpg`` or, preferably, use the :ttag:`static"
"<staticfiles-static>` template tag to build the URL for the given relative "
"path by using the configured :setting:`STATICFILES_STORAGE` storage (this "
"makes it much easier when you want to switch to a content delivery network "
"(CDN) for serving static files)."
msgstr ""

#: ../../howto/static-files/index.txt:35
msgid ""
"Store your static files in a folder called ``static`` in your app. For "
"example ``my_app/static/my_app/myimage.jpg``."
msgstr ""

#: ../../howto/static-files/index.txt:38
msgid "Serving the files"
msgstr ""

#: ../../howto/static-files/index.txt:40
msgid ""
"In addition to these configuration steps, you'll also need to actually serve"
" the static files."
msgstr ""

#: ../../howto/static-files/index.txt:43
msgid ""
"During development, if you use :mod:`django.contrib.staticfiles`, this will "
"be done automatically by :djadmin:`runserver` when :setting:`DEBUG` is set "
"to ``True`` (see :func:`django.contrib.staticfiles.views.serve`)."
msgstr ""

#: ../../howto/static-files/index.txt:47
msgid ""
"This method is **grossly inefficient** and probably **insecure**, so it is "
"**unsuitable for production**."
msgstr ""

#: ../../howto/static-files/index.txt:50
msgid ""
"See :doc:`/howto/static-files/deployment` for proper strategies to serve "
"static files in production environments."
msgstr ""

#: ../../howto/static-files/index.txt:53
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. In addition to using a ``static/`` directory inside your "
"apps, you can define a list of directories (:setting:`STATICFILES_DIRS`) in "
"your settings file where Django will also look for static files. For "
"example::"
msgstr ""

#: ../../howto/static-files/index.txt:63
msgid ""
"See the documentation for the :setting:`STATICFILES_FINDERS` setting for "
"details on how ``staticfiles`` finds your files."
msgstr ""

#: ../../howto/static-files/index.txt:66
msgid "Static file namespacing"
msgstr ""

#: ../../howto/static-files/index.txt:68
msgid ""
"Now we *might* be able to get away with putting our static files directly in"
" ``my_app/static/`` (rather than creating another ``my_app`` subdirectory), "
"but it would actually be a bad idea. Django will use the first static file "
"it finds whose name matches, and if you had a static file with the same name"
" in a *different* application, Django would be unable to distinguish between"
" them. We need to be able to point Django at the right one, and the easiest "
"way to ensure this is by *namespacing* them. That is, by putting those "
"static files inside *another* directory named for the application itself."
msgstr ""

#: ../../howto/static-files/index.txt:81
msgid "Serving static files during development."
msgstr ""

#: ../../howto/static-files/index.txt:83
msgid ""
"If you use :mod:`django.contrib.staticfiles` as explained above, "
":djadmin:`runserver` will do this automatically when :setting:`DEBUG` is set"
" to ``True``. If you don't have ``django.contrib.staticfiles`` in "
":setting:`INSTALLED_APPS`, you can still manually serve static files using "
"the :func:`django.contrib.staticfiles.views.serve` view."
msgstr ""

#: ../../howto/static-files/index.txt:89
#: ../../howto/static-files/index.txt:121
msgid ""
"This is not suitable for production use! For some common deployment "
"strategies, see :doc:`/howto/static-files/deployment`."
msgstr ""

#: ../../howto/static-files/index.txt:92
msgid ""
"For example, if your :setting:`STATIC_URL` is defined as ``/static/``, you "
"can do this by adding the following snippet to your urls.py::"
msgstr ""

#: ../../howto/static-files/index.txt:104
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/static/``) and not a URL (e.g. "
"``http://static.example.com/``)."
msgstr ""

#: ../../howto/static-files/index.txt:108
msgid ""
"Also this helper function only serves the actual :setting:`STATIC_ROOT` "
"folder; it doesn't perform static files discovery like "
":mod:`django.contrib.staticfiles`."
msgstr ""

#: ../../howto/static-files/index.txt:115
msgid "Serving files uploaded by a user during development."
msgstr ""

#: ../../howto/static-files/index.txt:117
msgid ""
"During development, you can serve user-uploaded media files from "
":setting:`MEDIA_ROOT` using the "
":func:`django.contrib.staticfiles.views.serve` view."
msgstr ""

#: ../../howto/static-files/index.txt:124
msgid ""
"For example, if your :setting:`MEDIA_URL` is defined as ``/media/``, you can"
" do this by adding the following snippet to your urls.py::"
msgstr ""

#: ../../howto/static-files/index.txt:136
msgid ""
"This helper function works only in debug mode and only if the given prefix "
"is local (e.g. ``/media/``) and not a URL (e.g. "
"``http://media.example.com/``)."
msgstr ""

#: ../../howto/static-files/index.txt:145
msgid ""
"When running tests that use actual HTTP requests instead of the built-in "
"testing client (i.e. when using the built-in :class:`LiveServerTestCase "
"<django.test.LiveServerTestCase>`) the static assets need to be served along"
" the rest of the content so the test environment reproduces the real one as "
"faithfully as possible, but ``LiveServerTestCase`` has only very basic "
"static file-serving functionality: It doesn't know about the finders feature"
" of the ``staticfiles`` application and assumes the static content has "
"already been collected under :setting:`STATIC_ROOT`."
msgstr ""

#: ../../howto/static-files/index.txt:154
msgid ""
"Because of this, ``staticfiles`` ships its own "
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase`, a "
"subclass of the built-in one that has the ability to transparently serve all"
" the assets during execution of these tests in a way very similar to what we"
" get at development time with ``DEBUG = True``, i.e. without having to "
"collect them using :djadmin:`collectstatic` first."
msgstr ""

#: ../../howto/static-files/index.txt:163
msgid ""
":class:`django.contrib.staticfiles.testing.StaticLiveServerTestCase` is new "
"in Django 1.7. Previously its functionality was provided by "
":class:`django.test.LiveServerTestCase`."
msgstr ""

#: ../../howto/static-files/index.txt:168 ../../howto/upgrade-version.txt:87
msgid "Deployment"
msgstr ""

#: ../../howto/static-files/index.txt:170
msgid ""
":mod:`django.contrib.staticfiles` provides a convenience management command "
"for gathering static files in a single directory so you can serve them "
"easily."
msgstr ""

#: ../../howto/static-files/index.txt:173
msgid ""
"Set the :setting:`STATIC_ROOT` setting to the directory from which you'd "
"like to serve these files, for example::"
msgstr ""

#: ../../howto/static-files/index.txt:178
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

#: ../../howto/static-files/index.txt:182
msgid ""
"This will copy all files from your static folders into the "
":setting:`STATIC_ROOT` directory."
msgstr ""

#: ../../howto/static-files/index.txt:185
msgid ""
"Use a web server of your choice to serve the files. :doc:`/howto/static-"
"files/deployment` covers some common deployment strategies for static files."
msgstr ""

#: ../../howto/static-files/index.txt:192
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces included in :mod:`django.contrib.staticfiles`, see :doc:`the "
"staticfiles reference </ref/contrib/staticfiles>`."
msgstr ""

#: ../../howto/upgrade-version.txt:3
msgid "Upgrading Django to a newer version"
msgstr ""

#: ../../howto/upgrade-version.txt:5
msgid ""
"While it can be a complex process at times, upgrading to the latest Django "
"version has several benefits:"
msgstr ""

#: ../../howto/upgrade-version.txt:8
msgid "New features and improvements are added."
msgstr ""

#: ../../howto/upgrade-version.txt:9
msgid "Bugs are fixed."
msgstr ""

#: ../../howto/upgrade-version.txt:10
msgid ""
"Older version of Django will eventually no longer receive security updates. "
"(see :ref:`backwards-compatibility-policy`)."
msgstr ""

#: ../../howto/upgrade-version.txt:12
msgid ""
"Upgrading as each new Django release is available makes future upgrades less"
" painful by keeping your code base up to date."
msgstr ""

#: ../../howto/upgrade-version.txt:15
msgid ""
"Here are some things to consider to help make your upgrade process as smooth"
" as possible."
msgstr ""

#: ../../howto/upgrade-version.txt:19
msgid "Required Reading"
msgstr ""

#: ../../howto/upgrade-version.txt:21
msgid ""
"If it's your first time doing an upgrade, it is useful to read the "
":doc:`guide on the different release processes </internals/release-"
"process>`."
msgstr ""

#: ../../howto/upgrade-version.txt:24
msgid ""
"Afterwards, you should familiarize yourself with the changes that were made "
"in the new Django version(s):"
msgstr ""

#: ../../howto/upgrade-version.txt:27
msgid ""
"Read the :doc:`release notes </releases/index>` for each 'final' release "
"from the one after your current Django version, up to and including the "
"version to which you plan to upgrade."
msgstr ""

#: ../../howto/upgrade-version.txt:30
msgid ""
"Look at the :doc:`deprecation timeline</internals/deprecation>` for the "
"relevant versions."
msgstr ""

#: ../../howto/upgrade-version.txt:33
msgid ""
"Pay particular attention to backwards incompatible changes to get a clear "
"idea of what will be needed for a successful upgrade."
msgstr ""

#: ../../howto/upgrade-version.txt:37
msgid "Dependencies"
msgstr ""

#: ../../howto/upgrade-version.txt:39
msgid ""
"In most cases it will be necessary to upgrade to the latest version of your "
"Django-related dependencies as well. If the Django version was recently "
"released or if some of your dependencies are not well-maintained, some of "
"your dependencies may not yet support the new Django version. In these cases"
" you may have to wait until new versions of your dependencies are released."
msgstr ""

#: ../../howto/upgrade-version.txt:46
msgid "Installation"
msgstr ""

#: ../../howto/upgrade-version.txt:48
msgid ""
"Once you're ready, it is time to :doc:`install the new Django version "
"</topics/install>`. If you are using virtualenv_ and it is a major upgrade, "
"you might want to set up a new environment with all the dependencies first."
msgstr ""

#: ../../howto/upgrade-version.txt:52
msgid ""
"Exactly which steps you will need to take depends on your installation "
"process. The most convenient way is to use pip_ with the ``--upgrade`` or "
"``-U`` flag:"
msgstr ""

#: ../../howto/upgrade-version.txt:59
msgid "pip_ also automatically uninstalls the previous version of Django."
msgstr ""

#: ../../howto/upgrade-version.txt:61
msgid ""
"If you use some other installation process, you might have to manually "
":ref:`uninstall the old Django version <removing-old-versions-of-django>` "
"and should look at the complete installation instructions."
msgstr ""

#: ../../howto/upgrade-version.txt:71
msgid ""
"When the new environment is set up, :doc:`run the full test suite "
"</topics/testing/overview>` for your application. In Python 2.7+, "
"deprecation warnings are silenced by default. It is useful to turn the "
"warnings on so they are shown in the test output (you can also use the flag "
"if you test your app manually using ``manage.py runserver``):"
msgstr ""

#: ../../howto/upgrade-version.txt:81
msgid ""
"After you have run the tests, fix any failures. While you have the release "
"notes fresh in your mind, it may also be a good time to take advantage of "
"new features in Django by refactoring your code to eliminate any deprecation"
" warnings."
msgstr ""

#: ../../howto/upgrade-version.txt:89
msgid ""
"When you are sufficiently confident your app works with the new version of "
"Django, you're ready to go ahead and :doc:`deploy </howto/deployment/index>`"
" your upgraded Django project."
msgstr ""

#: ../../howto/upgrade-version.txt:93
msgid ""
"If you are using caching provided by Django, you should consider clearing "
"your cache after upgrading. Otherwise you may run into problems, for "
"example, if you are caching pickled objects as these objects are not "
"guaranteed to be pickle-compatible across Django versions. A past instance "
"of incompatibility was caching pickled :class:`~django.http.HttpResponse` "
"objects, either directly or indirectly via the "
":func:`~django.views.decorators.cache.cache_page` decorator."
msgstr ""

#: ../../howto/windows.txt:3
msgid "How to install Django on Windows"
msgstr ""

#: ../../howto/windows.txt:5
msgid ""
"This document will guide you through installing Python and Django for basic "
"usage on Windows. This is meant as a beginner's guide for users working on "
"Django projects and does not reflect how Django should be installed when "
"developing patches for Django itself."
msgstr ""

#: ../../howto/windows.txt:10
msgid ""
"The steps in this guide have been tested with Windows 7 and 8. In other "
"versions, the steps would be similar."
msgstr ""

#: ../../howto/windows.txt:14
msgid "Install Python"
msgstr ""

#: ../../howto/windows.txt:16
msgid ""
"Django is a Python web framework, thus requiring Python to be installed on "
"your machine."
msgstr ""

#: ../../howto/windows.txt:19
msgid ""
"To install Python on your machine go to https://python.org/download/, and "
"download a Windows MSI installer for Python. Once downloaded, run the MSI "
"installer and follow the on-screen instructions."
msgstr ""

#: ../../howto/windows.txt:23
msgid ""
"After installation, open the command prompt and check the Python version by "
"executing ``python --version``. If you encounter a problem, make sure you "
"have set the ``PATH`` variable correctly. You might need to adjust your "
"``PATH`` environment variable to include paths to the Python executable and "
"additional scripts. For example, if your Python is installed in "
"``C:\\Python34\\``, the following paths need to be added to ``PATH``::"
msgstr ""

#: ../../howto/windows.txt:33
msgid "Install Setuptools"
msgstr ""

#: ../../howto/windows.txt:35
msgid ""
"To install Python packages on your computer, Setuptools is needed. Download "
"the latest version of `Setuptools "
"<https://pypi.python.org/pypi/setuptools>`_ for your Python version and "
"follow the installation instructions given there."
msgstr ""

#: ../../howto/windows.txt:40
msgid "Install PIP"
msgstr ""

#: ../../howto/windows.txt:42
msgid ""
"`PIP <http://www.pip-installer.org/>`_ is a package manager for Python that "
"uses the `Python Package Index <https://pypi.python.org>`_ to install Python"
" packages. PIP will later be used to install Django from PyPI. If you've "
"installed Python 3.4, ``pip`` is included so you may skip this section."
msgstr ""

#: ../../howto/windows.txt:47
msgid ""
"Open a command prompt and execute ``easy_install pip``. This will install "
"``pip`` on your system. This command will work if you have successfully "
"installed Setuptools."
msgstr ""

#: ../../howto/windows.txt:51
msgid ""
"Alternatively, go to `<http://www.pip-"
"installer.org/en/latest/installing.html>`_ for installing/upgrading "
"instructions."
msgstr ""

#: ../../howto/windows.txt:55
msgid "Install Django"
msgstr ""

#: ../../howto/windows.txt:57
msgid "Django can be installed easily using ``pip``."
msgstr ""

#: ../../howto/windows.txt:59
msgid ""
"In the command prompt, execute the following command: ``pip install "
"django``. This will download and install Django."
msgstr ""

#: ../../howto/windows.txt:62
msgid ""
"After the installation has completed, you can verify your Django "
"installation by executing ``django-admin --version`` in the command prompt."
msgstr ""

#: ../../howto/windows.txt:67
msgid ""
"In Django 1.7, a ``.exe`` has been introduced, so just use ``django-admin`` "
"in place of ``django-admin.py`` in the command prompt."
msgstr ""

#: ../../howto/windows.txt:70
msgid ""
"See :ref:`database-installation` for information on database installation "
"with Django."
msgstr ""

#: ../../howto/windows.txt:74
msgid "Common pitfalls"
msgstr ""

#: ../../howto/windows.txt:76
msgid ""
"If ``django-admin`` only displays the help text no matter what arguments it "
"is given, there is probably a problem with the file association in Windows. "
"Check if there is more than one environment variable set for running Python "
"scripts in ``PATH``. This usually occurs when there is more than one Python "
"version installed."
msgstr ""

#: ../../howto/windows.txt:82
msgid ""
"If you are connecting to the internet behind a proxy, there might be problem"
" in running the commands ``easy_install pip`` and ``pip install django``. "
"Set the environment variables for proxy configuration in the command prompt "
"as follows::"
msgstr ""

#: ../../howto/writing-migrations.txt:3
msgid "Writing database migrations"
msgstr ""

#: ../../howto/writing-migrations.txt:5
msgid ""
"This document explains how to structure and write database migrations for "
"different scenarios you might encounter. For introductory material on "
"migrations, see :doc:`the topic guide </topics/migrations>`."
msgstr ""

#: ../../howto/writing-migrations.txt:12
msgid "Data migrations and multiple databases"
msgstr ""

#: ../../howto/writing-migrations.txt:14
msgid ""
"When using multiple databases, you may need to figure out whether or not to "
"run a migration against a particular database. For example, you may want to "
"**only** run a migration on a particular database."
msgstr ""

#: ../../howto/writing-migrations.txt:18
msgid ""
"In order to do that you can check the database connection's alias inside a "
"``RunPython`` operation by looking at the ``schema_editor.connection.alias``"
" attribute::"
msgstr ""

#: ../../howto/writing-migrations.txt:41
msgid ""
"You can also provide hints that will be passed to the "
":meth:`allow_migrate()` method of database routers as ``**hints``:"
msgstr ""

#: ../../howto/writing-migrations.txt:54
msgid "Then, to leverage this in your migrations, do the following::"
msgstr ""

#: ../../howto/writing-migrations.txt:72
msgid ""
"If your ``RunPython`` or ``RunSQL`` operation only affects one model, it's "
"good practice to pass ``model_name`` as a hint to make it as transparent as "
"possible to the router. This is especially important for reusable and third-"
"party apps."
msgstr ""

#: ../../howto/writing-migrations.txt:77
msgid "Migrations that add unique fields"
msgstr ""

#: ../../howto/writing-migrations.txt:79
msgid ""
"Applying a \"plain\" migration that adds a unique non-nullable field to a "
"table with existing rows will raise an error because the value used to "
"populate existing rows is generated only once, thus breaking the unique "
"constraint."
msgstr ""

#: ../../howto/writing-migrations.txt:83
msgid ""
"Therefore, the following steps should be taken. In this example, we'll add a"
" non-nullable :class:`~django.db.models.UUIDField` with a default value. "
"Modify the respective field according to your needs."
msgstr ""

#: ../../howto/writing-migrations.txt:87
msgid ""
"Add the field on your model with ``default=uuid.uuid4`` and ``unique=True`` "
"arguments (choose an appropriate default for the type of the field you're "
"adding)."
msgstr ""

#: ../../howto/writing-migrations.txt:91
msgid ""
"Run the :djadmin:`makemigrations` command. This should generate a migration "
"with an ``AddField`` operation."
msgstr ""

#: ../../howto/writing-migrations.txt:94
msgid ""
"Generate two empty migration files for the same app by running "
"``makemigrations myapp --empty`` twice. We've renamed the migration files to"
" give them meaningful names in the examples below."
msgstr ""

#: ../../howto/writing-migrations.txt:98
msgid ""
"Copy the ``AddField`` operation from the auto-generated migration (the first"
" of the three new files) to the last migration and change ``AddField`` to "
"``AlterField``. For example:"
msgstr ""

#: ../../howto/writing-migrations.txt:126
msgid ""
"Edit the first migration file. The generated migration class should look "
"similar to this:"
msgstr ""

#: ../../howto/writing-migrations.txt:146
msgid ""
"Change ``unique=True`` to ``null=True`` -- this will create the intermediary"
" null field and defer creating the unique constraint until we've populated "
"unique values on all the rows."
msgstr ""

#: ../../howto/writing-migrations.txt:150
msgid ""
"In the first empty migration file, add a "
":class:`~django.db.migrations.operations.RunPython` or "
":class:`~django.db.migrations.operations.RunSQL` operation to generate a "
"unique value (UUID in the example) for each existing row. For example:"
msgstr ""

#: ../../howto/writing-migrations.txt:181
msgid ""
"Now you can apply the migrations as usual with the :djadmin:`migrate` "
"command."
msgstr ""

#: ../../howto/writing-migrations.txt:183
msgid ""
"Note there is a race condition if you allow objects to be created while this"
" migration is running. Objects created after the ``AddField`` and before "
"``RunPython`` will have their original ``uuid``’s overwritten."
msgstr ""

#: ../../howto/writing-migrations.txt:188
msgid "Controlling the order of migrations"
msgstr ""

#: ../../howto/writing-migrations.txt:190
msgid ""
"Django determines the order in which migrations should be applied not by the"
" filename of each migration, but by building a graph using two properties on"
" the ``Migration`` class: ``dependencies`` and ``run_before``."
msgstr ""

#: ../../howto/writing-migrations.txt:194
msgid ""
"If you've used the :djadmin:`makemigrations` command you've probably already"
" seen ``dependencies`` in action because auto-created migrations have this "
"defined as part of their creation process."
msgstr ""

#: ../../howto/writing-migrations.txt:198
msgid "The ``dependencies`` property is declared like this::"
msgstr ""

#: ../../howto/writing-migrations.txt:208
msgid ""
"Usually this will be enough, but from time to time you may need to ensure "
"that your migration runs *before* other migrations. This is useful, for "
"example, to make third-party apps' migrations run *after* your "
":setting:`AUTH_USER_MODEL` replacement."
msgstr ""

#: ../../howto/writing-migrations.txt:213
msgid ""
"To achieve this, place all migrations that should depend on yours in the "
"``run_before`` attribute on your ``Migration`` class::"
msgstr ""

#: ../../howto/writing-migrations.txt:223
msgid ""
"Prefer using ``dependencies`` over ``run_before`` when possible. You should "
"only use ``run_before`` if it is undesirable or impractical to specify "
"``dependencies`` in the migration which you want to run after the one you "
"are writing."
msgstr ""

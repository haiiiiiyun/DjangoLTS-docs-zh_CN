# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: DjangoLTS-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-05 16:46+0800\n"
"PO-Revision-Date: 2016-05-10 06:36+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/djangolts-docs/djangolts-docs/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../internals/contributing/bugs-and-features.txt:3
msgid "Reporting bugs and requesting features"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:7
#: ../../internals/mailing-lists.txt:7
msgid ""
"Please report security issues **only** to security@djangoproject.com.  This "
"is a private list only open to long-time, highly trusted Django developers, "
"and its archives are not public. For further details, please see :doc:`our "
"security policies </internals/security>`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:14
msgid ""
"Otherwise, before reporting a bug or requesting a new feature, please "
"consider these general points:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:17
msgid ""
"Check that someone hasn't already filed the bug or feature request by "
"`searching`_ or running `custom queries`_ in the ticket tracker."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:20
msgid ""
"Don't use the ticket system to ask support questions. Use the |django-users|"
" list or the `#django`_ IRC channel for that."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:23
msgid ""
"Don't reopen issues that have been marked \"wontfix\" by a core developer. "
"This mark means that the decision has been made that we can't or won't fix "
"this particular issue. If you're not sure why, please ask on |django-"
"developers|."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:28
msgid ""
"Don't use the ticket tracker for lengthy discussions, because they're likely"
" to get lost. If a particular ticket is controversial, please move the "
"discussion to |django-developers|."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:35
msgid "Reporting bugs"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:37
msgid ""
"Well-written bug reports are *incredibly* helpful. However, there's a "
"certain amount of overhead involved in working with any bug tracking system "
"so your help in keeping our ticket tracker as useful as possible is "
"appreciated. In particular:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:42
msgid ""
"**Do** read the :doc:`FAQ </faq/index>` to see if your issue might be a "
"well-known question."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:45
msgid ""
"**Do** ask on |django-users| or `#django`_ *first* if you're not sure if "
"what you're seeing is a bug."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:48
msgid ""
"**Do** write complete, reproducible, specific bug reports. You must include "
"a clear, concise description of the problem, and a set of instructions for "
"replicating it. Add as much debug information as you can: code snippets, "
"test cases, exception backtraces, screenshots, etc. A nice small test case "
"is the best way to report a bug, as it gives us an easy way to confirm the "
"bug quickly."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:55
msgid ""
"**Don't** post to |django-developers| just to announce that you have filed a"
" bug report. All the tickets are mailed to another list, |django-updates|, "
"which is tracked by developers and interested community members; we see them"
" as they are filed."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:60
msgid ""
"To understand the lifecycle of your ticket once you have created it, refer "
"to :doc:`triaging-tickets`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:64
msgid "Reporting user interface bugs and features"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:66
msgid ""
"If your bug or feature request touches on anything visual in nature, there "
"are a few additional guidelines to follow:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:69
msgid ""
"Include screenshots in your ticket which are the visual equivalent of a "
"minimal testcase. Show off the issue, not the crazy customizations you've "
"made to your browser."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:73
msgid ""
"If the issue is difficult to show off using a still image, consider "
"capturing a *brief* screencast. If your software permits it, capture only "
"the relevant area of the screen."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:77
msgid ""
"If you're offering a patch which changes the look or behavior of Django's "
"UI, you **must** attach before *and* after screenshots/screencasts. Tickets "
"lacking these are difficult for triagers and core developers to assess "
"quickly."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:82
msgid ""
"Screenshots don't absolve you of other good reporting practices. Make sure "
"to include URLs, code snippets, and step-by-step instructions on how to "
"reproduce the behavior visible in the screenshots."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:86
msgid ""
"Make sure to set the UI/UX flag on the ticket so interested parties can find"
" your ticket."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:90
msgid "Requesting features"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:92
msgid ""
"We're always trying to make Django better, and your feature requests are a "
"key part of that. Here are some tips on how to make a request most "
"effectively:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:95
msgid ""
"Make sure the feature actually requires changes in Django's core. If your "
"idea can be developed as an independent application or module — for "
"instance, you want to support another database engine — we'll probably "
"suggest that you to develop it independently. Then, if your project gathers "
"sufficient community support, we may consider it for inclusion in Django."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:102
msgid ""
"First request the feature on the |django-developers| list, not in the ticket"
" tracker. It'll get read more closely if it's on the mailing list. This is "
"even more important for large-scale feature requests. We like to discuss any"
" big changes to Django's core on the mailing list before actually working on"
" them."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:108
msgid ""
"Describe clearly and concisely what the missing feature is and how you'd "
"like to see it implemented. Include example code (non-functional is OK) if "
"possible."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:112
msgid ""
"Explain *why* you'd like the feature. In some cases this is obvious, but "
"since Django is designed to help real developers get real work done, you'll "
"need to explain it, if it isn't obvious why the feature would be useful."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:117
msgid ""
"If core developers agree on the feature, then it's appropriate to create a "
"ticket. Include a link the discussion on |django-developers| in the ticket "
"description."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:121
msgid ""
"As with most open-source projects, code talks. If you are willing to write "
"the code for the feature yourself or, even better, if you've already written"
" it, it's much more likely to be accepted. Just fork Django on GitHub, "
"create a feature branch, and show us your work!"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:126
msgid "See also: :ref:`documenting-new-features`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:131
msgid "How we make decisions"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:133
msgid ""
"Whenever possible, we strive for a rough consensus. To that end, we'll often"
" have informal votes on |django-developers| about a feature. In these votes "
"we follow the voting style invented by Apache and used on Python itself, "
"where votes are given as +1, +0, -0, or -1. Roughly translated, these votes "
"mean:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:138
msgid "+1: \"I love the idea and I'm strongly committed to it.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:140
msgid "+0: \"Sounds OK to me.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:142
msgid "-0: \"I'm not thrilled, but I won't stand in the way.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:144
msgid ""
"-1: \"I strongly disagree and would be very unhappy to see the idea turn "
"into reality.\""
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:147
msgid ""
"Although these votes on |django-developers| are informal, they'll be taken "
"very seriously. After a suitable voting period, if an obvious consensus "
"arises we'll follow the votes."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:151
msgid ""
"However, consensus is not always possible. If consensus cannot be reached, "
"or if the discussion towards a consensus fizzles out without a concrete "
"decision, any :ref:`core team member <core-team>` may defer the decision to "
"the :ref:`technical board <technical-board>`."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:156
msgid ""
"Internally, the technical board will use the same voting mechanism. A "
"proposition will be considered carried if:"
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:159
msgid "There are at least three \"+1\" votes from members of the technical board."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:161
msgid "There is no \"-1\" vote from any member of the technical board."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:163
msgid "Votes should be submitted within a week."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:165
msgid ""
"Since this process allows any technical board member to veto a proposal, a "
"\"-1\" vote should be accompanied by an explanation of what it would take to"
" convert that \"-1\" into at least a \"+0\"."
msgstr ""

#: ../../internals/contributing/bugs-and-features.txt:169
msgid ""
"Votes on technical matters should be announced and held in public on the "
"|django-developers| mailing list."
msgstr ""

#: ../../internals/contributing/committing-code.txt:3
msgid "Committing code"
msgstr ""

#: ../../internals/contributing/committing-code.txt:5
msgid ""
"This section is addressed to the :ref:`committers` and to anyone interested "
"in knowing how code gets committed into Django core. If you're a community "
"member who wants to contribute code to Django, have a look at :doc:`writing-"
"code/working-with-git` instead."
msgstr ""

#: ../../internals/contributing/committing-code.txt:13
msgid "Handling pull requests"
msgstr ""

#: ../../internals/contributing/committing-code.txt:15
msgid ""
"Since Django is now hosted at GitHub, many patches are provided in the form "
"of pull requests."
msgstr ""

#: ../../internals/contributing/committing-code.txt:18
msgid ""
"When committing a pull request, make sure each individual commit matches the"
" commit guidelines described below. Contributors are expected to provide the"
" best pull requests possible. In practice however, committers - who will "
"likely be more familiar with the commit guidelines - may decide to bring a "
"commit up to standard themselves."
msgstr ""

#: ../../internals/contributing/committing-code.txt:26
msgid ""
"Before merging, but after reviewing, have Jenkins test the pull request by "
"commenting \"buildbot, test this please\" on the PR. See our `Jenkins wiki "
"page`_ for more details."
msgstr ""

#: ../../internals/contributing/committing-code.txt:32
msgid "Here is one way to commit a pull request::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:41
msgid ""
"At this point, you can work on the code. Use ``git rebase -i`` and ``git "
"commit --amend`` to make sure the commits have the expected level of "
"quality. Once you're ready::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:58
msgid ""
"An alternative is to add the contributor's repository as a new remote, "
"checkout the branch and work from there::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:64
msgid ""
"Yet another alternative is to fetch the branch without adding the "
"contributor's repository as a remote::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:70
msgid "At this point, you can work on the code and continue as above."
msgstr ""

#: ../../internals/contributing/committing-code.txt:72
msgid ""
"GitHub provides a one-click merge functionality for pull requests. This "
"should only be used if the pull request is 100% ready, and you have checked "
"it for errors (or trust the request maker enough to skip checks). Currently,"
" it isn't possible to check that the tests pass and that the docs build "
"without downloading the changes to your development environment."
msgstr ""

#: ../../internals/contributing/committing-code.txt:78
msgid ""
"When rewriting the commit history of a pull request, the goal is to make "
"Django's commit history as usable as possible:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:81
msgid ""
"If a patch contains back-and-forth commits, then rewrite those into one. "
"Typically, a commit can add some code, and a second commit can fix stylistic"
" issues introduced in the first commit."
msgstr ""

#: ../../internals/contributing/committing-code.txt:85
msgid ""
"Separate changes to different commits by logical grouping: if you do a "
"stylistic cleanup at the same time as you do other changes to a file, "
"separating the changes into two different commits will make reviewing "
"history easier."
msgstr ""

#: ../../internals/contributing/committing-code.txt:90
msgid "Beware of merges of upstream branches in the pull requests."
msgstr ""

#: ../../internals/contributing/committing-code.txt:92
msgid ""
"Tests should pass and docs should build after each commit. Neither the tests"
" nor the docs should emit warnings."
msgstr ""

#: ../../internals/contributing/committing-code.txt:95
msgid ""
"Trivial and small patches usually are best done in one commit. Medium to "
"large work should be split into multiple commits if possible."
msgstr ""

#: ../../internals/contributing/committing-code.txt:98
msgid ""
"Practicality beats purity, so it is up to each committer to decide how much "
"history mangling to do for a pull request. The main points are engaging the "
"community, getting work done, and having a usable commit history."
msgstr ""

#: ../../internals/contributing/committing-code.txt:105
msgid "Committing guidelines"
msgstr ""

#: ../../internals/contributing/committing-code.txt:107
msgid ""
"In addition, please follow the following guidelines when committing code to "
"Django's Git repository:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:110
msgid ""
"Never change the published history of django/django branches! **Never force-"
" push your changes to django/django.** If you absolutely must (for security "
"reasons for example) first discuss the situation with the core team."
msgstr ""

#: ../../internals/contributing/committing-code.txt:114
msgid ""
"For any medium-to-big changes, where \"medium-to-big\" is according to your "
"judgment, please bring things up on the |django-developers| mailing list "
"before making the change."
msgstr ""

#: ../../internals/contributing/committing-code.txt:118
msgid ""
"If you bring something up on |django-developers| and nobody responds, please"
" don't take that to mean your idea is great and should be implemented "
"immediately because nobody contested it. Django's core developers don't have"
" a lot of time to read mailing-list discussions immediately, so you may have"
" to wait a couple of days before getting a response."
msgstr ""

#: ../../internals/contributing/committing-code.txt:125
msgid "Write detailed commit messages in the past tense, not present tense."
msgstr ""

#: ../../internals/contributing/committing-code.txt:127
msgid "Good: \"Fixed Unicode bug in RSS API.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:128
msgid "Bad: \"Fixes Unicode bug in RSS API.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:129
msgid "Bad: \"Fixing Unicode bug in RSS API.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:131
msgid ""
"The commit message should be in lines of 72 chars maximum. There should be a"
" subject line, separated by a blank line and then paragraphs of 72 char "
"lines. The limits are soft. For the subject line, shorter is better. In the "
"body of the commit message more detail is better than less::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:142
msgid ""
"If the patch wasn't a pull request, you should credit the contributors in "
"the commit message: \"Thanks A for report, B for the patch and C for the "
"review.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:146
msgid ""
"For commits to a branch, prefix the commit message with the branch name. For"
" example: \"[1.4.x] Fixed #xxxxx -- Added support for mind reading.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:149
msgid ""
"Limit commits to the most granular change that makes sense. This means, use "
"frequent small commits rather than infrequent large commits. For example, if"
" implementing feature X requires a small change to library Y, first commit "
"the change to library Y, then commit feature X in a separate commit. This "
"goes a *long way* in helping all Django core developers follow your changes."
msgstr ""

#: ../../internals/contributing/committing-code.txt:156
msgid ""
"Separate bug fixes from feature changes. Bugfixes may need to be backported "
"to the stable branch, according to the :ref:`backwards-compatibility policy "
"<backwards-compatibility-policy>`."
msgstr ""

#: ../../internals/contributing/committing-code.txt:160
msgid ""
"If your commit closes a ticket in the Django `ticket tracker`_, begin your "
"commit message with the text \"Fixed #xxxxx\", where \"xxxxx\" is the number"
" of the ticket your commit fixes. Example: \"Fixed #123 -- Added whizbang "
"feature.\". We've rigged Trac so that any commit message in that format will"
" automatically close the referenced ticket and post a comment to it with the"
" full commit message."
msgstr ""

#: ../../internals/contributing/committing-code.txt:167
msgid ""
"If your commit closes a ticket and is in a branch, use the branch name "
"first, then the \"Fixed #xxxxx.\" For example: \"[1.4.x] Fixed #123 -- Added"
" whizbang feature.\""
msgstr ""

#: ../../internals/contributing/committing-code.txt:171
msgid "For the curious, we're using a `Trac plugin`_ for this."
msgstr ""

#: ../../internals/contributing/committing-code.txt:175
msgid ""
"Note that the Trac integration doesn't know anything about pull requests. So"
" if you try to close a pull request with the phrase \"closes #400\" in your "
"commit message, GitHub will close the pull request, but the Trac plugin will"
" also close the same numbered ticket in Trac."
msgstr ""

#: ../../internals/contributing/committing-code.txt:182
msgid ""
"If your commit references a ticket in the Django `ticket tracker`_ but does "
"*not* close the ticket, include the phrase \"Refs #xxxxx\", where \"xxxxx\" "
"is the number of the ticket your commit references. This will automatically "
"post a comment to the appropriate ticket."
msgstr ""

#: ../../internals/contributing/committing-code.txt:187
msgid "Write commit messages for backports using this pattern::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:193
msgid "For example::"
msgstr ""

#: ../../internals/contributing/committing-code.txt:200
msgid "Reverting commits"
msgstr ""

#: ../../internals/contributing/committing-code.txt:202
msgid "Nobody's perfect; mistakes will be committed."
msgstr ""

#: ../../internals/contributing/committing-code.txt:204
msgid ""
"But try very hard to ensure that mistakes don't happen. Just because we have"
" a reversion policy doesn't relax your responsibility to aim for the highest"
" quality possible. Really: double-check your work, or have it checked by "
"another committer, **before** you commit it in the first place!"
msgstr ""

#: ../../internals/contributing/committing-code.txt:209
msgid "When a mistaken commit is discovered, please follow these guidelines:"
msgstr ""

#: ../../internals/contributing/committing-code.txt:211
msgid "If possible, have the original author revert their own commit."
msgstr ""

#: ../../internals/contributing/committing-code.txt:213
msgid ""
"Don't revert another author's changes without permission from the original "
"author."
msgstr ""

#: ../../internals/contributing/committing-code.txt:216
msgid ""
"Use git revert -- this will make a reverse commit, but the original commit "
"will still be part of the commit history."
msgstr ""

#: ../../internals/contributing/committing-code.txt:219
msgid ""
"If the original author can't be reached (within a reasonable amount of time "
"-- a day or so) and the problem is severe -- crashing bug, major test "
"failures, etc -- then ask for objections on the |django-developers| mailing "
"list then revert if there are none."
msgstr ""

#: ../../internals/contributing/committing-code.txt:224
msgid ""
"If the problem is small (a feature commit after feature freeze, say), wait "
"it out."
msgstr ""

#: ../../internals/contributing/committing-code.txt:227
msgid ""
"If there's a disagreement between the committer and the reverter-to-be then "
"try to work it out on the |django-developers| mailing list. If an agreement "
"can't be reached then it should be put to a vote."
msgstr ""

#: ../../internals/contributing/committing-code.txt:232
msgid ""
"If the commit introduced a confirmed, disclosed security vulnerability then "
"the commit may be reverted immediately without permission from anyone."
msgstr ""

#: ../../internals/contributing/committing-code.txt:236
msgid ""
"The release branch maintainer may back out commits to the release branch "
"without permission if the commit breaks the release branch."
msgstr ""

#: ../../internals/contributing/committing-code.txt:239
msgid ""
"If you mistakenly push a topic branch to django/django, just delete it. For "
"instance, if you did: ``git push upstream feature_antigravity``, just do a "
"reverse push: ``git push upstream :feature_antigravity``."
msgstr ""

#: ../../internals/contributing/index.txt:3
msgid "Contributing to Django"
msgstr ""

#: ../../internals/contributing/index.txt:5
msgid ""
"Django is a community that lives on its volunteers. As it keeps growing, we "
"always need more people to help others. As soon as you learn Django, you can"
" contribute in many ways:"
msgstr ""

#: ../../internals/contributing/index.txt:9
msgid ""
"Join the |django-users| mailing list and answer questions. This mailing list"
" has a huge audience, and we really want to maintain a friendly and helpful "
"atmosphere. If you're new to the Django community, you should read the "
"`posting guidelines`_."
msgstr ""

#: ../../internals/contributing/index.txt:14
msgid ""
"Join the `#django IRC channel`_ on Freenode and answer questions. By "
"explaining Django to other users, you're going to learn a lot about the "
"framework yourself."
msgstr ""

#: ../../internals/contributing/index.txt:18
msgid ""
"Blog about Django. We syndicate all the Django blogs we know about on the "
"`community page`_; if you'd like to see your blog on that page you can "
"`register it here`_."
msgstr ""

#: ../../internals/contributing/index.txt:22
msgid ""
"Contribute to open-source Django projects, write some documentation, or "
"release your own code as an open-source pluggable application. The ecosystem"
" of pluggable applications is a big strength of Django, help us build it!"
msgstr ""

#: ../../internals/contributing/index.txt:27
msgid ""
"If you think working *with* Django is fun, wait until you start working *on*"
" it. We're passionate about helping Django users make the jump to "
"contributing members of the community, so there are several ways you can "
"help Django's development:"
msgstr ""

#: ../../internals/contributing/index.txt:32
msgid ":doc:`Report bugs <bugs-and-features>` in our `ticket tracker`_."
msgstr ""

#: ../../internals/contributing/index.txt:34
msgid ""
"Join the |django-developers| mailing list and share your ideas for how to "
"improve Django. We're always open to suggestions."
msgstr ""

#: ../../internals/contributing/index.txt:37
msgid ""
":doc:`Submit patches <writing-code/submitting-patches>` for new and/or fixed"
" behavior. If you're looking for an easy way to start contributing to Django"
" read the :doc:`/intro/contributing` tutorial and have a look at the `easy "
"pickings`_ tickets. The :ref:`patch-review-checklist` will also be helpful."
msgstr ""

#: ../../internals/contributing/index.txt:43
msgid ""
":doc:`Improve the documentation <writing-documentation>` or :doc:`write unit"
" tests <writing-code/unit-tests>`."
msgstr ""

#: ../../internals/contributing/index.txt:46
msgid ""
":doc:`Triage tickets and review patches <triaging-tickets>` created by other"
" users."
msgstr ""

#: ../../internals/contributing/index.txt:49
msgid ""
"Really, **ANYONE** can do something to help make Django better and greater!"
msgstr ""

#: ../../internals/contributing/index.txt:51
msgid "Browse the following sections to find out how:"
msgstr ""

#: ../../internals/contributing/localizing.txt:3
msgid "Localizing Django"
msgstr ""

#: ../../internals/contributing/localizing.txt:5
msgid ""
"Various parts of Django, such as the admin site and validation error "
"messages, are internationalized. This means they display differently "
"depending on each user's language or country. For this, Django uses the same"
" internationalization and localization infrastructure available to Django "
"applications, described in the :doc:`i18n documentation "
"</topics/i18n/index>`."
msgstr ""

#: ../../internals/contributing/localizing.txt:12
msgid "Translations"
msgstr ""

#: ../../internals/contributing/localizing.txt:14
msgid ""
"Translations are contributed by Django users worldwide. The translation work"
" is coordinated at `Transifex`_."
msgstr ""

#: ../../internals/contributing/localizing.txt:17
msgid ""
"If you find an incorrect translation or want to discuss specific "
"translations, go to the `Django project page`_. If you would like to help "
"out with translating or add a language that isn't yet translated, here's "
"what to do:"
msgstr ""

#: ../../internals/contributing/localizing.txt:21
msgid ""
"Join the :ref:`Django i18n mailing list <django-i18n-mailing-list>` and "
"introduce yourself."
msgstr ""

#: ../../internals/contributing/localizing.txt:24
msgid "Make sure you read the notes about :ref:`specialties-of-django-i18n`."
msgstr ""

#: ../../internals/contributing/localizing.txt:26
msgid "Sign up at `Transifex`_ and visit the `Django project page`_."
msgstr ""

#: ../../internals/contributing/localizing.txt:28
msgid ""
"On the `Django project page`_, choose the language you want to work on, "
"**or** -- in case the language doesn't exist yet -- request a new language "
"team by clicking on the \"Request language\" link and selecting the "
"appropriate language."
msgstr ""

#: ../../internals/contributing/localizing.txt:33
msgid ""
"Then, click the \"Join this Team\" button to become a member of this team. "
"Every team has at least one coordinator who is responsible to review your "
"membership request. You can of course also contact the team coordinator to "
"clarify procedural problems and handle the actual translation process."
msgstr ""

#: ../../internals/contributing/localizing.txt:39
msgid ""
"Once you are a member of a team choose the translation resource you want to "
"update on the team page. For example the \"core\" resource refers to the "
"translation catalog that contains all non-contrib translations. Each of the "
"contrib apps also have a resource (prefixed with \"contrib\")."
msgstr ""

#: ../../internals/contributing/localizing.txt:45
msgid ""
"For more information about how to use Transifex, read the `Transifex User "
"Guide`_."
msgstr ""

#: ../../internals/contributing/localizing.txt:49
msgid "Formats"
msgstr ""

#: ../../internals/contributing/localizing.txt:51
msgid ""
"You can also review ``conf/locale/<locale>/formats.py``. This file describes"
" the date, time and numbers formatting particularities of your locale. See "
":ref:`format-localization` for details."
msgstr ""

#: ../../internals/contributing/localizing.txt:55
msgid ""
"The format files aren't managed by the use of Transifex. To change them, you"
" must :doc:`create a patch<writing-code/submitting-patches>` against the "
"Django source tree, as for any code change:"
msgstr ""

#: ../../internals/contributing/localizing.txt:59
msgid "Create a diff against the current Git master branch."
msgstr ""

#: ../../internals/contributing/localizing.txt:61
msgid ""
"Open a ticket in Django's ticket system, set its ``Component`` field to "
"``Translations``, and attach the patch to it."
msgstr ""

#: ../../internals/contributing/localizing.txt:71
#: ../../internals/contributing/writing-code/submitting-patches.txt:304
msgid "Documentation"
msgstr ""

#: ../../internals/contributing/localizing.txt:73
msgid ""
"There is also an opportunity to translate the documentation, though this is "
"a huge undertaking to complete entirely (you have been warned!). We use the "
"same `Transifex tool <https://www.transifex.com/django/django-docs/>`_. The "
"translations will appear at "
"``https://docs.djangoproject.com/<language_code>/`` when at least the "
"``docs/intro/*`` files are fully translated in your language."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:3
msgid "Advice for new contributors"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:5
msgid ""
"New contributor and not sure what to do? Want to help but just don't know "
"how to get started? This is the section for you."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:9
msgid "First steps"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:11
msgid "Start with these easy tasks to discover Django's development process."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:13
msgid "**Sign the Contributor License Agreement**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:15
msgid ""
"The code that you write belongs to you or your employer. If your "
"contribution is more than one or two lines of code, you need to sign the "
"`CLA`_. See the `Contributor License Agreement FAQ`_ for a more thorough "
"explanation."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:20
msgid "**Triage tickets**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:22
msgid ""
"If an `unreviewed ticket`_ reports a bug, try and reproduce it. If you can "
"reproduce it and it seems valid, make a note that you confirmed the bug and "
"accept the ticket. Make sure the ticket is filed under the correct component"
" area. Consider writing a patch that adds a test for the bug's behavior, "
"even if you don't fix the bug itself. See more at :ref:`how-can-i-help-with-"
"triaging`"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:29
msgid ""
"**Look for tickets that are accepted and review patches to build familiarity"
" with the codebase and the process**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:32
msgid ""
"Mark the appropriate flags if a patch needs docs or tests. Look through the "
"changes a patch makes, and keep an eye out for syntax that is incompatible "
"with older but still supported versions of Python. Run the tests and make "
"sure they pass on your system.  Where possible and relevant, try them out on"
" a database other than SQLite. Leave comments and feedback!"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:38
msgid "**Keep old patches up to date**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:40
msgid ""
"Oftentimes the codebase will change between a patch being submitted and the "
"time it gets reviewed. Make sure it still applies cleanly and functions as "
"expected. Simply updating a patch is both useful and important! See more on "
":doc:`writing-code/submitting-patches`."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:45
msgid "**Write some documentation**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:47
msgid ""
"Django's documentation is great but it can always be improved. Did you find "
"a typo? Do you think that something should be clarified? Go ahead and "
"suggest a documentation patch! See also the guide on :doc:`writing-"
"documentation`, in particular the tips for :ref:`improving-the-"
"documentation`."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:55
msgid ""
"The `reports page`_ contains links to many useful Trac queries, including "
"several that are useful for triaging tickets and reviewing patches as "
"suggested above."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:67
msgid "Guidelines"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:69
msgid ""
"As a newcomer on a large project, it's easy to experience frustration. "
"Here's some advice to make your work on Django more useful and rewarding."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:72
msgid ""
"**Pick a subject area that you care about, that you are familiar with, or "
"that you want to learn about**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:75
msgid ""
"You don't already have to be an expert on the area you want to work on; you "
"become an expert through your ongoing contributions to the code."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:78
msgid "**Analyze tickets' context and history**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:80
msgid ""
"Trac isn't an absolute; the context is just as important as the words. When "
"reading Trac, you need to take into account who says things, and when they "
"were said. Support for an idea two years ago doesn't necessarily mean that "
"the idea will still have support. You also need to pay attention to who "
"*hasn't* spoken -- for example, if a core team member hasn't been recently "
"involved in a discussion, then a ticket may not have the support required to"
" get into trunk."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:88
msgid "**Start small**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:90
msgid ""
"It's easier to get feedback on a little issue than on a big one. See the "
"`easy pickings`_."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:93
msgid ""
"**If you're going to engage in a big task, make sure that your idea has "
"support first**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:96
msgid ""
"This means getting someone else to confirm that a bug is real before you fix"
" the issue, and ensuring that the core team supports a proposed feature "
"before you go implementing it."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:100
msgid "**Be bold! Leave feedback!**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:102
msgid ""
"Sometimes it can be scary to put your opinion out to the world and say "
"\"this ticket is correct\" or \"this patch needs work\", but it's the only "
"way the project moves forward. The contributions of the broad Django "
"community ultimately have a much greater impact than that of the core team. "
"We can't do it without **you**!"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:108
msgid "**Err on the side of caution when marking things Ready For Check-in**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:110
msgid ""
"If you're really not certain if a ticket is ready, don't mark it as such. "
"Leave a comment instead, letting others know your thoughts.  If you're "
"mostly certain, but not completely certain, you might also try asking on IRC"
" to see if someone else can confirm your suspicions."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:115
msgid "**Wait for feedback, and respond to feedback that you receive**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:117
msgid ""
"Focus on one or two tickets, see them through from start to finish, and "
"repeat. The shotgun approach of taking on lots of tickets and letting some "
"fall by the wayside ends up doing more harm than good."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:121
msgid "**Be rigorous**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:123
msgid ""
"When we say \":pep:`8`, and must have docs and tests\", we mean it. If a "
"patch doesn't have docs and tests, there had better be a good reason. "
"Arguments like \"I couldn't find any existing tests of this feature\" don't "
"carry much weight--while it may be true, that means you have the extra-"
"important job of writing the very first tests for that feature, not that you"
" get a pass from writing tests altogether."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:135
msgid "FAQ"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:137
msgid ""
"**This ticket I care about has been ignored for days/weeks/months! What can "
"I do to get it committed?**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:140
msgid ""
"First off, it's not personal. Django is entirely developed by volunteers "
"(even the core team), and sometimes folks just don't have time. The best "
"thing to do is to send a gentle reminder to the |django-developers| mailing "
"list asking for review on the ticket, or to bring it up in the #django-dev "
"IRC channel."
msgstr ""

#: ../../internals/contributing/new-contributors.txt:146
msgid ""
"**I'm sure my ticket is absolutely 100% perfect, can I mark it as RFC "
"myself?**"
msgstr ""

#: ../../internals/contributing/new-contributors.txt:149
msgid ""
"Short answer: No. It's always better to get another set of eyes on a ticket."
" If you're having trouble getting that second set of eyes, see question 1, "
"above."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:3
#: ../../internals/organization.txt:92
msgid "Triaging tickets"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:5
msgid ""
"Django uses Trac_ for managing the work on the code base. Trac is a "
"community-tended garden of the bugs people have found and the features "
"people would like to see added. As in any garden, sometimes there are weeds "
"to be pulled and sometimes there are flowers and vegetables that need "
"picking. We need your help to sort out one from the other, and in the end we"
" all benefit together."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:12
msgid ""
"Like all gardens, we can aspire to perfection but in reality there's no such"
" thing. Even in the most pristine garden there are still snails and insects."
" In a community garden there are also helpful people who -- with the best of"
" intentions -- fertilize the weeds and poison the roses. It's the job of the"
" community as a whole to self-manage, keep the problems to a minimum, and "
"educate those coming into the community so that they can become valuable "
"contributing members."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:20
msgid ""
"Similarly, while we aim for Trac to be a perfect representation of the state"
" of Django's progress, we acknowledge that this simply will not happen. By "
"distributing the load of Trac maintenance to the community, we accept that "
"there will be mistakes. Trac is \"mostly accurate\", and we give allowances "
"for the fact that sometimes it will be wrong. That's okay. We're "
"perfectionists with deadlines."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:27
msgid ""
"We rely on the community to keep participating, keep tickets as accurate as "
"possible, and raise issues for discussion on our mailing lists when there is"
" confusion or disagreement."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:31
msgid ""
"Django is a community project, and every contribution helps. We can't do "
"this without **you**!"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:35
msgid "Triage workflow"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:37
msgid ""
"Unfortunately, not all bug reports and feature requests in the ticket "
"tracker provide all the :doc:`required details<bugs-and-features>`. A number"
" of tickets have patches, but those patches don't meet all the requirements "
"of a :ref:`good patch<patch-style>`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:42
msgid ""
"One way to help out is to *triage* tickets that have been created by other "
"users. The core team and several community members work on this regularly, "
"but more help is always appreciated."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:46
msgid ""
"Most of the workflow is based around the concept of a ticket's :ref:`triage "
"stages <triage-stages>`. Each stage describes where in its lifetime a given "
"ticket is at any time. Along with a handful of flags, this attribute easily "
"tells us what and who each ticket is waiting on."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:51
msgid "Since a picture is worth a thousand words, let's start there:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:58
msgid "We've got two roles in this diagram:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:60
msgid ""
"Committers (also called core developers): people with commit access who are "
"responsible for making decisions and integrating the contributions of the "
"community."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:64
msgid ""
"Ticket triagers: anyone in the Django community who chooses to become "
"involved in Django's development process. Our Trac installation is "
"intentionally left open to the public, and anyone can triage tickets. Django"
" is a community project, and we encourage :ref:`triage by the community<how-"
"can-i-help-with-triaging>`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:70
msgid "By way of example, here we see the lifecycle of an average ticket:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:72
msgid ""
"Alice creates a ticket, and uploads an incomplete patch (no tests, incorrect"
" implementation)."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:75
msgid ""
"Bob reviews the patch, marks it \"Accepted\", \"needs tests\", and \"patch "
"needs improvement\", and leaves a comment telling Alice how the patch could "
"be improved."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:79
msgid ""
"Alice updates the patch, adding tests (but not changing the implementation)."
" She removes the two flags."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:82
msgid ""
"Charlie reviews the patch and resets the \"patch needs improvement\" flag "
"with another comment about improving the implementation."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:85
msgid ""
"Alice updates the patch, fixing the implementation. She removes the \"patch "
"needs improvement\" flag."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:88
msgid "Daisy reviews the patch, and marks it RFC."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:90
msgid ""
"Jacob, a core developer, reviews the RFC patch, applies it to his checkout, "
"and commits it."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:93
msgid ""
"Some tickets require much less feedback than this, but then again some "
"tickets require much much more."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:99
msgid "Triage stages"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:101
msgid ""
"Below we describe in more detail the various stages that a ticket may flow "
"through during its lifetime."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:105
msgid "Unreviewed"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:107
msgid ""
"The ticket has not been reviewed by anyone who felt qualified to make a "
"judgment about whether the ticket contained a valid issue, a viable feature,"
" or ought to be closed for any of the various reasons."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:112
msgid "Accepted"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:114
msgid ""
"The big gray area! The absolute meaning of \"accepted\" is that the issue "
"described in the ticket is valid and is in some stage of being worked on. "
"Beyond that there are several considerations:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:118
msgid "**Accepted + No Flags**"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:120
msgid ""
"The ticket is valid, but no one has submitted a patch for it yet. Often this"
" means you could safely start writing a patch for it. This is generally more"
" true for the case of accepted bugs than accepted features. A ticket for a "
"bug that has been accepted means that the issue has been verified by at "
"least one triager as a legitimate bug - and should probably be fixed if "
"possible. An accepted new feature may only mean that one triager thought the"
" feature would be good to have, but this alone does not represent a "
"consensus view or imply with any certainty that a patch will be accepted for"
" that feature. Seek more feedback before writing an extensive patch if you "
"are in doubt."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:130
msgid "**Accepted + Has Patch**"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:132
msgid ""
"The ticket is waiting for people to review the supplied patch. This means "
"downloading the patch and trying it out, verifying that it contains tests "
"and docs, running the test suite with the included patch, and leaving "
"feedback on the ticket."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:137
msgid "**Accepted + Has Patch + Needs ...**"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:139
msgid ""
"This means the ticket has been reviewed, and has been found to need further "
"work. \"Needs tests\" and \"Needs documentation\" are self-explanatory. "
"\"Patch needs improvement\" will generally be accompanied by a comment on "
"the ticket explaining what is needed to improve the code."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:145
msgid "Ready For Checkin"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:147
msgid ""
"The ticket was reviewed by any member of the community other than the person"
" who supplied the patch and found to meet all the requirements for a commit-"
"ready patch. A committer now needs to give the patch a final review prior to"
" being committed. See the :ref:`New contributors' FAQ<new-contributors-faq>`"
" for \"My ticket has been in RFC forever! What should I do?\""
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:155
msgid "Someday/Maybe"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:157
msgid ""
"This stage isn't shown on the diagram. It's only used by core developers to "
"keep track of high-level ideas or long term feature requests."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:160
msgid ""
"These tickets are uncommon and overall less useful since they don't describe"
" concrete actionable issues. They are enhancement requests that we might "
"consider adding someday to the framework if an excellent patch is submitted."
" They are not a high priority."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:166
msgid "Other triage attributes"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:168
msgid ""
"A number of flags, appearing as checkboxes in Trac, can be set on a ticket:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:171
msgid "Has patch"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:173
msgid ""
"This means the ticket has an associated :doc:`patch<writing-code/submitting-"
"patches>`. These will be reviewed to see if the patch is \"good\"."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:177
msgid ""
"The following three fields (Needs documentation, Needs tests, Patch needs "
"improvement) apply only if a patch has been supplied."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:181
msgid "Needs documentation"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:183
msgid ""
"This flag is used for tickets with patches that need associated "
"documentation. Complete documentation of features is a prerequisite before "
"we can check them into the codebase."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:188
msgid "Needs tests"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:190
msgid ""
"This flags the patch as needing associated unit tests. Again, this is a "
"required part of a valid patch."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:194
msgid "Patch needs improvement"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:196
msgid ""
"This flag means that although the ticket *has* a patch, it's not quite ready"
" for checkin. This could mean the patch no longer applies cleanly, there is "
"a flaw in the implementation, or that the code doesn't meet our standards."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:202
msgid "Easy pickings"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:204
msgid "Tickets that would require small, easy, patches."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:207
msgid "Type"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:209
msgid "Tickets should be categorized by *type* between:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:212
msgid "New Feature"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:212
msgid "For adding something new."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:215
msgid "Bug"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:215
msgid "For when an existing thing is broken or not behaving as expected."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:219
msgid "Cleanup/optimization"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:218
msgid ""
"For when nothing is broken but something could be made cleaner, better, "
"faster, stronger."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:222
msgid "Component"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:224
msgid ""
"Tickets should be classified into *components* indicating which area of the "
"Django codebase they belong to. This makes tickets better organized and "
"easier to find."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:229
msgid "Severity"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:231
msgid ""
"The *severity* attribute is used to identify blockers, that is, issues which"
" should get fixed before releasing the next version of Django. Typically "
"those issues are bugs causing regressions from earlier versions or "
"potentially causing severe data losses. This attribute is quite rarely used "
"and the vast majority of tickets have a severity of \"Normal\"."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:238
msgid "Version"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:240
msgid ""
"It is possible to use the *version* attribute to indicate in which version "
"the reported bug was identified."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:244
msgid "UI/UX"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:246
msgid ""
"This flag is used for tickets that relate to User Interface and User "
"Experiences questions. For example, this flag would be appropriate for user-"
"facing features in forms or the admin interface."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:251
msgid "Cc"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:253
msgid ""
"You may add your username or email address to this field to be notified when"
" new contributions are made to the ticket."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:257
msgid "Keywords"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:259
msgid ""
"With this field you may label a ticket with multiple keywords. This can be "
"useful, for example, to group several tickets of a same theme. Keywords can "
"either be comma or space separated. Keyword search finds the keyword string "
"anywhere in the keywords. For example, clicking on a ticket with the keyword"
" \"form\" will yield similar tickets tagged with keywords containing strings"
" such as \"formset\", \"modelformset\", and \"ManagementForm\"."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:269
msgid "Closing Tickets"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:271
msgid ""
"When a ticket has completed its useful lifecycle, it's time for it to be "
"closed. Closing a ticket is a big responsibility, though. You have to be "
"sure that the issue is really resolved, and you need to keep in mind that "
"the reporter of the ticket may not be happy to have their ticket closed "
"(unless it's fixed, of course). If you're not certain about closing a "
"ticket, just leave a comment with your thoughts instead."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:278
msgid ""
"If you do close a ticket, you should always make sure of the following:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:280
msgid "Be certain that the issue is resolved."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:282
msgid "Leave a comment explaining the decision to close the ticket."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:284
msgid ""
"If there is a way they can improve the ticket to reopen it, let them know."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:286
msgid ""
"If the ticket is a duplicate, reference the original ticket. Also cross-"
"reference the closed ticket by leaving a comment in the original one -- this"
" allows to access more related information about the reported bug or "
"requested feature."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:291
msgid ""
"**Be polite.** No one likes having their ticket closed. It can be "
"frustrating or even discouraging. The best way to avoid turning people off "
"from contributing to Django is to be polite and friendly and to offer "
"suggestions for how they could improve this ticket and other tickets in the "
"future."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:297
msgid "A ticket can be resolved in a number of ways:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:301
msgid "fixed"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:300
msgid ""
"Used by the core developers once a patch has been rolled into Django and the"
" issue is fixed."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:308
msgid "invalid"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:304
msgid ""
"Used if the ticket is found to be incorrect. This means that the issue in "
"the ticket is actually the result of a user error, or describes a problem "
"with something other than Django, or isn't a bug report or feature request "
"at all (for example, some new users submit support queries as tickets)."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:316
msgid "wontfix"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:311
msgid ""
"Used when a core developer decides that this request is not appropriate for "
"consideration in Django. This is usually chosen after discussion in the "
"|django-developers| mailing list. Feel free to start or join in discussions "
"of \"wontfix\" tickets on the |django-developers| mailing list, but please "
"do not reopen tickets closed as \"wontfix\" by a :doc:`core "
"developer</internals/team>`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:321
msgid "duplicate"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:319
msgid ""
"Used when another ticket covers the same issue. By closing duplicate "
"tickets, we keep all the discussion in one place, which helps everyone."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:325
msgid "worksforme"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:324
msgid ""
"Used when the ticket doesn't contain enough detail to replicate the original"
" bug."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:330
msgid "needsinfo"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:328
msgid ""
"Used when the ticket does not contain enough information to replicate the "
"reported issue but is potentially still valid. The ticket should be reopened"
" when more information is supplied."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:332
msgid ""
"If you believe that the ticket was closed in error -- because you're still "
"having the issue, or it's popped up somewhere else, or the triagers have "
"made a mistake -- please reopen the ticket and provide further information. "
"Again, please do not reopen tickets that have been marked as \"wontfix\" by "
"core developers and bring the issue to |django-developers| instead."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:341
msgid "How can I help with triaging?"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:343
msgid ""
"The triage process is primarily driven by community members. Really, "
"**ANYONE** can help."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:346
msgid ""
"Core developers may provide feedback on issues they're familiar with, or "
"make decisions on controversial ones, but they aren't responsible for "
"triaging tickets in general."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:350
msgid ""
"To get involved, start by `creating an account on Trac`_. If you have an "
"account but have forgotten your password, you can reset it using the "
"`password reset page`_."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:354
msgid "Then, you can help out by:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:356
msgid "Closing \"Unreviewed\" tickets as \"invalid\", \"worksforme\" or \"duplicate.\""
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:358
msgid ""
"Closing \"Unreviewed\" tickets as \"needsinfo\" when the description is too "
"sparse to be actionable, or when they're feature requests requiring a "
"discussion on |django-developers|."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:362
msgid ""
"Correcting the \"Needs tests\", \"Needs documentation\", or \"Has patch\" "
"flags for tickets where they are incorrectly set."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:365
msgid ""
"Setting the \"`Easy pickings`_\" flag for tickets that are small and "
"relatively straightforward."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:368
msgid "Set the *type* of tickets that are still uncategorized."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:370
msgid ""
"Checking that old tickets are still valid. If a ticket hasn't seen any "
"activity in a long time, it's possible that the problem has been fixed but "
"the ticket hasn't yet been closed."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:374
msgid ""
"Identifying trends and themes in the tickets. If there are a lot of bug "
"reports about a particular part of Django, it may indicate we should "
"consider refactoring that part of the code. If a trend is emerging, you "
"should raise it for discussion (referencing the relevant tickets) on "
"|django-developers|."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:380
msgid ""
"Verify if patches submitted by other users are correct. If they are correct "
"and also contain appropriate documentation and tests then move them to the "
"\"Ready for Checkin\" stage. If they are not correct then leave a comment to"
" explain why and set the corresponding flags (\"Patch needs improvement\", "
"\"Needs tests\" etc.)."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:388
msgid ""
"The `Reports page`_ contains links to many useful Trac queries, including "
"several that are useful for triaging tickets and reviewing patches as "
"suggested above."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:392
msgid "You can also find more :doc:`new-contributors`."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:396
msgid ""
"However, we do ask the following of all general community members working in"
" the ticket database:"
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:399
msgid ""
"Please **don't** close tickets as \"wontfix.\" The core developers will make"
" the final determination of the fate of a ticket, usually after consultation"
" with the community."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:403
msgid ""
"Please **don't** promote your own tickets to \"Ready for checkin\". You may "
"mark other people's tickets which you've reviewed as \"Ready for checkin\", "
"but you should get at minimum one other community member to review a patch "
"that you submit."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:408
msgid ""
"Please **don't** reverse a decision that has been made by a :doc:`core "
"developer</internals/team>`. If you disagree with a decision that has been "
"made, please post a message to |django-developers|."
msgstr ""

#: ../../internals/contributing/triaging-tickets.txt:412
msgid ""
"If you're unsure if you should be making a change, don't make the change but"
" instead leave a comment with your concerns on the ticket, or post a message"
" to |django-developers|. It's okay to be unsure, but your input is still "
"valuable."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:3
msgid "Coding style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:5
msgid ""
"Please follow these coding standards when writing code for inclusion in "
"Django."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:8
msgid "Python style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:10
msgid "Unless otherwise specified, follow :pep:`8`."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:12
msgid ""
"Use `flake8`_ to check for problems in this area. Note that our "
"``setup.cfg`` file contains some excluded files (deprecated modules we don't"
" care about cleaning up and some third-party code that Django vendors) as "
"well as some excluded errors that we don't consider as gross violations. "
"Remember that :pep:`8` is only a guide, so respect the style of the "
"surrounding code as a primary goal."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:19
msgid ""
"An exception to :pep:`8` is our rules on line lengths. Don't limit lines of "
"code to 79 characters if it means the code looks significantly uglier or is "
"harder to read. We allow up to 119 characters as this is the width of GitHub"
" code review; anything longer requires horizontal scrolling which makes "
"review more difficult. This check is included when you run ``flake8``. "
"Documentation, comments, and docstrings should be wrapped at 79 characters, "
"even though :pep:`8` suggests 72."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:27
msgid "Use four spaces for indentation."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:29
msgid ""
"Use underscores, not camelCase, for variable, function and method names "
"(i.e. ``poll.get_unique_voters()``, not ``poll.getUniqueVoters``)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:32
msgid ""
"Use ``InitialCaps`` for class names (or for factory functions that return "
"classes)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:35
msgid "Use convenience imports whenever available. For example, do this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:39
#: ../../internals/contributing/writing-code/coding-style.txt:88
#: ../../internals/contributing/writing-code/coding-style.txt:105
#: ../../internals/contributing/writing-code/coding-style.txt:123
msgid "Don't do this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:43
msgid "In docstrings, use \"action words\" such as::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:51
msgid "Here's an example of what not to do::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:60
msgid "Template style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:62
msgid ""
"In Django template code, put one (and only one) space between the curly "
"brackets and the tag contents."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:65
msgid "Do this:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:71
msgid "Don't do this:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:78
msgid "View style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:80
msgid ""
"In Django views, the first parameter in a view function should be called "
"``request``."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:83
#: ../../internals/contributing/writing-code/coding-style.txt:99
#: ../../internals/contributing/writing-code/coding-style.txt:114
msgid "Do this::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:94
msgid "Model style"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:96
msgid ""
"Field names should be all lowercase, using underscores instead of camelCase."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:111
msgid ""
"The ``class Meta`` should appear *after* the fields are defined, with a "
"single blank line separating the fields and the class definition."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:131
msgid "Don't do this, either::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:140
msgid ""
"If you define a ``__str__`` method (previously ``__unicode__`` before Python"
" 3 was supported), decorate the model class with "
":func:`~django.utils.encoding.python_2_unicode_compatible`."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:144
msgid ""
"The order of model inner classes and standard methods should be as follows "
"(noting that these are not all required):"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:147
msgid "All database fields"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:148
msgid "Custom manager attributes"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:149
msgid "``class Meta``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:150
msgid "``def __str__()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:151
msgid "``def save()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:152
msgid "``def get_absolute_url()``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:153
msgid "Any custom methods"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:155
msgid ""
"If ``choices`` is defined for a given model field, define each choice as a "
"tuple of tuples, with an all-uppercase name as a class attribute on the "
"model. Example::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:168
msgid "Use of ``django.conf.settings``"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:170
msgid ""
"Modules should not in general use settings stored in "
"``django.conf.settings`` at the top level (i.e. evaluated when the module is"
" imported). The explanation for this is as follows:"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:174
msgid ""
"Manual configuration of settings (i.e. not relying on the "
"``DJANGO_SETTINGS_MODULE`` environment variable) is allowed and possible as "
"follows::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:182
msgid ""
"However, if any setting is accessed before the ``settings.configure`` line, "
"this will not work. (Internally, ``settings`` is a ``LazyObject`` which "
"configures itself automatically when the settings are accessed if it has not"
" already been configured)."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:187
msgid "So, if there is a module containing some code as follows::"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:194
msgid ""
"...then importing this module will cause the settings object to be "
"configured. That means that the ability for third parties to import the "
"module at the top level is incompatible with the ability to configure the "
"settings object manually, or makes it very difficult in some circumstances."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:199
msgid ""
"Instead of the above code, a level of laziness or indirection must be used, "
"such as ``django.utils.functional.LazyObject``, "
"``django.utils.functional.lazy()`` or ``lambda``."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:204
msgid "Miscellaneous"
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:206
msgid ""
"Mark all strings for internationalization; see the :doc:`i18n documentation "
"</topics/i18n/index>` for details."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:209
msgid ""
"Remove ``import`` statements that are no longer used when you change code. "
"`flake8`_ will identify these imports for you. If an unused import needs to "
"remain for backwards-compatibility, mark the end of with ``# NOQA`` to "
"silence the flake8 warning."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:214
msgid ""
"Systematically remove all trailing whitespaces from your code as those add "
"unnecessary bytes, add visual clutter to the patches and can also "
"occasionally cause unnecessary merge conflicts. Some IDE's can be configured"
" to automatically remove them and most VCS tools can be set to highlight "
"them in diff outputs."
msgstr ""

#: ../../internals/contributing/writing-code/coding-style.txt:220
msgid ""
"Please don't put your name in the code you contribute. Our policy is to keep"
" contributors' names in the ``AUTHORS`` file distributed with Django -- not "
"scattered throughout the codebase itself. Feel free to include a change to "
"the ``AUTHORS`` file in your patch if you make more than a single trivial "
"change."
msgstr ""

#: ../../internals/contributing/writing-code/index.txt:3
msgid "Writing code"
msgstr ""

#: ../../internals/contributing/writing-code/index.txt:5
msgid ""
"So you'd like to write some code to improve Django. Awesome! Browse the "
"following sections to find out how to give your code patches the best "
"chances to be included in Django core:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:3
msgid "Submitting patches"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:5
msgid ""
"We're always grateful for patches to Django's code. Indeed, bug reports with"
" associated patches will get fixed *far* more quickly than those without "
"patches."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:10
msgid "Typo fixes and trivial documentation changes"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:12
msgid ""
"If you are fixing a really trivial issue, for example changing a word in the"
" documentation, the preferred way to provide the patch is using GitHub pull "
"requests without a Trac ticket. Trac tickets are still acceptable."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:16
msgid ""
"See the :doc:`working-with-git` for more details on how to use pull "
"requests."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:19
msgid "\"Claiming\" tickets"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:21
msgid ""
"In an open-source project with hundreds of contributors around the world, "
"it's important to manage communication efficiently so that work doesn't get "
"duplicated and contributors can be as effective as possible."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:25
msgid ""
"Hence, our policy is for contributors to \"claim\" tickets in order to let "
"other developers know that a particular bug or feature is being worked on."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:28
msgid ""
"If you have identified a contribution you want to make and you're capable of"
" fixing it (as measured by your coding ability, knowledge of Django "
"internals and time availability), claim it by following these steps:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:32
msgid ""
"`Create an account`_ to use in our ticket system. If you have an account but"
" have forgotten your password, you can reset it using the `password reset "
"page`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:36
msgid ""
"If a ticket for this issue doesn't exist yet, create one in our `ticket "
"tracker`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:39
msgid ""
"If a ticket for this issue already exists, make sure nobody else has claimed"
" it. To do this, look at the \"Owned by\" section of the ticket. If it's "
"assigned to \"nobody,\" then it's available to be claimed. Otherwise, "
"somebody else is working on this ticket, and you either find another "
"bug/feature to work on, or contact the developer working on the ticket to "
"offer your help."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:46
msgid ""
"Log into your account, if you haven't already, by clicking \"Login\" in the "
"upper right of the ticket page."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:49
msgid "Claim the ticket:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:51
msgid ""
"click the \"assign to myself\" radio button under \"Action\" near the bottom"
" of the page,"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:53
msgid "then click \"Submit changes.\""
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:56
msgid ""
"The Django software foundation requests that anyone contributing more than a"
" trivial patch to Django sign and submit a `Contributor License Agreement`_,"
" this ensures that the Django Software Foundation has clear license to all "
"contributions allowing for a clear license for all users."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:66
msgid "Ticket claimers' responsibility"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:68
msgid ""
"Once you've claimed a ticket, you have a responsibility to work on that "
"ticket in a reasonably timely fashion. If you don't have time to work on it,"
" either unclaim it or don't claim it in the first place!"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:72
msgid ""
"If there's no sign of progress on a particular claimed ticket for a week or "
"two, another developer may ask you to relinquish the ticket claim so that "
"it's no longer monopolized and somebody else can claim it."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:76
msgid ""
"If you've claimed a ticket and it's taking a long time (days or weeks) to "
"code, keep everybody updated by posting comments on the ticket. If you don't"
" provide regular updates, and you don't respond to a request for a progress "
"report, your claim on the ticket may be revoked."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:81
msgid "As always, more communication is better than less communication!"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:84
msgid "Which tickets should be claimed?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:86
msgid ""
"Of course, going through the steps of claiming tickets is overkill in some "
"cases."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:89
msgid ""
"In the case of small changes, such as typos in the documentation or small "
"bugs that will only take a few minutes to fix, you don't need to jump "
"through the hoops of claiming tickets. Just submit your patch and be done "
"with it."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:94
msgid ""
"Of course, it is *always* acceptable, regardless whether someone has claimed"
" it or not, to submit patches to a ticket if you happen to have a patch "
"ready."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:100
msgid "Patch style"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:102
msgid ""
"Make sure that any contribution you do fulfills at least the following "
"requirements:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:105
msgid ""
"The code required to fix a problem or add a feature is an essential part of "
"a patch, but it is not the only part. A good patch should also include a "
":doc:`regression test <unit-tests>` to validate the behavior that has been "
"fixed and to prevent the problem from arising again. Also, if some tickets "
"are relevant to the code that you've written, mention the ticket numbers in "
"some comments in the test so that one can easily trace back the relevant "
"discussions after your patch gets committed, and the tickets get closed."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:113
msgid ""
"If the code associated with a patch adds a new feature, or modifies behavior"
" of an existing feature, the patch should also contain documentation."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:117
msgid ""
"You can use either GitHub branches and pull requests or direct patches to "
"publish your work. If you use the Git workflow, then you should announce "
"your branch in the ticket by including a link to your branch. When you think"
" your work is ready to be merged in create a pull request."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:122
msgid "See the :doc:`working-with-git` documentation for more details."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:124
msgid ""
"You can also use patches in Trac. When using this style, follow these "
"guidelines."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:127
msgid ""
"Submit patches in the format returned by the ``git diff`` command. An "
"exception is for code changes that are described more clearly in plain "
"English than in code. Indentation is the most common example; it's hard to "
"read patches when the only difference in code is that it's indented."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:133
msgid ""
"Attach patches to a ticket in the `ticket tracker`_, using the \"attach "
"file\" button. Please *don't* put the patch in the ticket description or "
"comment unless it's a single line patch."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:137
msgid ""
"Name the patch file with a ``.diff`` extension; this will let the ticket "
"tracker apply correct syntax highlighting, which is quite helpful."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:140
msgid "Regardless of the way you submit your work, follow these steps."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:142
msgid "Make sure your code matches our :doc:`coding-style`."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:144
msgid ""
"Check the \"Has patch\" box on the ticket details. This will make it obvious"
" that the ticket includes a patch, and it will add the ticket to the `list "
"of tickets with patches`_."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:150
msgid "Non-trivial patches"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:152
msgid ""
"A \"non-trivial\" patch is one that is more than a simple bug fix. It's a "
"patch that introduces Django functionality and makes some sort of design "
"decision."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:155
msgid ""
"If you provide a non-trivial patch, include evidence that alternatives have "
"been discussed on |django-developers|."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:158
msgid ""
"If you're not sure whether your patch should be considered non-trivial, just"
" ask."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:164
#: ../../internals/contributing/writing-code/submitting-patches.txt:328
msgid "Deprecating a feature"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:166
msgid "There are a couple reasons that code in Django might be deprecated:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:168
msgid ""
"If a feature has been improved or modified in a backwards-incompatible way, "
"the old feature or behavior will be deprecated."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:171
msgid ""
"Sometimes Django will include a backport of a Python library that's not "
"included in a version of Python that Django currently supports. When Django "
"no longer needs to support the older version of Python that doesn't include "
"the library, the library will be deprecated in Django."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:176
msgid ""
"As the :ref:`deprecation policy<internal-release-deprecation-policy>` "
"describes, the first release of Django that deprecates a feature (``A.B``) "
"should raise a ``RemovedInDjangoXXWarning`` (where XX is the Django version "
"where the feature will be removed) when the deprecated feature is invoked. "
"Assuming we have good test coverage, these warnings are converted to errors "
"when :ref:`running the test suite <running-unit-tests>` with warnings "
"enabled: ``python -Wall runtests.py``. Thus, when adding a "
"``RemovedInDjangoXXWarning`` you need to eliminate or silence any warnings "
"generated when running the tests."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:185
msgid ""
"The first step is to remove any use of the deprecated behavior by Django "
"itself. Next you can silence warnings in tests that actually test the "
"deprecated behavior by using the ``ignore_warnings`` decorator, either at "
"the test or class level:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:190
msgid "In a particular test::"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:199
msgid "For an entire test case::"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:210
msgid ""
"Previous versions of Django had some ``Ignore*DeprecationWarningsMixin`` "
"classes to prevent warnings from appearing. These have been replaced by the "
"``ignore_warnings`` decorator."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:214
msgid ""
"You can also add a test for the deprecation warning. You'll have to disable "
"the \"warning as error\" behavior in your test by doing::"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:228
msgid ""
"Finally, there are a couple of updates to Django's documentation to make:"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:230
msgid ""
"If the existing feature is documented, mark it deprecated in documentation "
"using the ``.. deprecated:: A.B`` annotation. Include a short description "
"and a note about the upgrade path if applicable."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:234
msgid ""
"Add a description of the deprecated behavior, and the upgrade path if "
"applicable, to the current release notes (``docs/releases/A.B.txt``) under "
"the \"Features deprecated in A.B\" heading."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:238
msgid ""
"Add an entry in the deprecation timeline "
"(``docs/internals/deprecation.txt``) under the ``A.B+2`` version describing "
"what code will be removed."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:241
msgid ""
"Once you have completed these steps, you are finished with the deprecation. "
"In each major release, all ``RemovedInDjangoXXWarning``\\s matching the new "
"version are removed."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:246
msgid "JavaScript patches"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:248
msgid ""
"Django's admin system leverages the jQuery framework to increase the "
"capabilities of the admin interface. In conjunction, there is an emphasis on"
" admin JavaScript performance and minimizing overall admin media file size. "
"Serving compressed or \"minified\" versions of JavaScript files is "
"considered best practice in this regard."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:254
msgid ""
"To that end, patches for JavaScript files should include both the original "
"code for future development (e.g. ``foo.js``), and a compressed version for "
"production use (e.g. ``foo.min.js``). Any links to the file in the codebase "
"should point to the compressed version."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:260
msgid "Compressing JavaScript"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:262
msgid ""
"To simplify the process of providing optimized JavaScript code, Django "
"includes a handy Python script which should be used to create a \"minified\""
" version. To run it::"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:268
msgid ""
"Behind the scenes, ``compress.py`` is a front-end for Google's `Closure "
"Compiler`_ which is written in Java. However, the Closure Compiler library "
"is not bundled with Django directly, so those wishing to contribute complete"
" JavaScript patches will need to download and install the library "
"independently. The Closure Compiler library requires `Java`_ 7 or higher."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:274
msgid ""
"Please don't forget to run ``compress.py`` and include the ``diff`` of the "
"minified scripts when submitting patches for Django's JavaScript."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:285
msgid "Patch review checklist"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:287
msgid ""
"Use this checklist to review a pull request. If you are reviewing a pull "
"request that is not your own and it passes all the criteria below, please "
"set the \"Triage Stage\" on the corresponding Trac ticket to \"Ready for "
"checkin\". If you've left comments for improvement on the pull request, "
"please tick the appropriate flags on the Trac ticket based on the results of"
" your review: \"Patch needs improvement\", \"Needs documentation\", and/or "
"\"Needs tests\". As time and interest permits, core developers do final "
"reviews of \"Ready for checkin\" tickets and will either commit the patch or"
" bump it back to \"Accepted\" if further works need to be done. If you're "
"looking to become a core developer, doing thorough reviews of patches is a "
"great way to earn trust."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:298
msgid ""
"Looking for a patch to review? Check out the \"Patches needing review\" "
"section of the `Django Development Dashboard "
"<https://dashboard.djangoproject.com/>`_. Looking to get your patch "
"reviewed? Ensure the Trac flags on the ticket are set so that the ticket "
"appears in that queue."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:306
msgid ""
"Does the documentation build without any errors (``make html``, or "
"``make.bat html`` on Windows, from the ``docs`` directory)?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:308
msgid ""
"Does the documentation follow the writing style guidelines in "
":doc:`/internals/contributing/writing-documentation`?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:310
msgid "Are there any :ref:`spelling errors <documentation-spelling-check>`?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:313
msgid "Bugs"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:315
msgid ""
"Is there a proper regression test (the test should fail before the fix is "
"applied)?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:319
msgid "New Features"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:321
msgid "Are there tests to \"exercise\" all of the new code?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:322
msgid "Is there a release note in ``docs/releases/A.B.txt``?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:323
msgid ""
"Is there documentation for the feature and is it :ref:`annotated "
"appropriately <documenting-new-features>` with ``.. versionadded:: A.B`` or "
"``.. versionchanged:: A.B``?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:330
msgid "See the :ref:`deprecating-a-feature` guide."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:333
msgid "All code changes"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:335
msgid ""
"Does the :doc:`coding style </internals/contributing/writing-code/coding-"
"style>` conform to our guidelines? Are there any ``flake8`` errors?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:338
msgid ""
"If the change is backwards incompatible in any way, is there a note in the "
"release notes (``docs/releases/A.B.txt``)?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:340
msgid ""
"Is Django's test suite passing? Ask in ``#django-dev`` for a core dev to "
"build the pull request against our continuous integration server."
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:344
msgid "All tickets"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:346
msgid ""
"Is the pull request a single squashed commit with a message that follows our"
" :ref:`commit message format <committing-guidelines>`?"
msgstr ""

#: ../../internals/contributing/writing-code/submitting-patches.txt:348
msgid ""
"Are you the patch author and a new contributor? Please add yourself to the "
"``AUTHORS`` file and submit a `Contributor License Agreement`_."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:3
msgid "Unit tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:5
msgid ""
"Django comes with a test suite of its own, in the ``tests`` directory of the"
" code base. It's our policy to make sure all tests pass at all times."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:8
msgid "We appreciate any and all contributions to the test suite!"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:10
msgid ""
"The Django tests all use the testing infrastructure that ships with Django "
"for testing applications. See :doc:`/topics/testing/overview` for an "
"explanation of how to write new tests."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:17
msgid "Running the unit tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:20
msgid "Quickstart"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:22
msgid ""
"If you are on Python < 3.3, you'll first need to install a backport of the "
"``unittest.mock`` module that's available in Python 3.3+. See :ref:`running-"
"unit-tests-dependencies` for details on installing `mock`_ and the other "
"optional test dependencies."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:27
msgid ""
"Running the tests requires a Django settings module that defines the "
"databases to use. To make it easy to get started, Django provides and uses a"
" sample settings module that uses the SQLite database. To run the tests:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:39
msgid "Older versions of Django required specifying a settings file:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:45
msgid ""
"``runtests.py`` now uses ``test_sqlite`` by default if settings aren't "
"provided through either ``--settings`` or :envvar:`DJANGO_SETTINGS_MODULE`."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:48
msgid ""
"You can avoid typing the ``PYTHONPATH`` bit each time by adding your Django "
"checkout to your ``PYTHONPATH`` or by installing the source checkout using "
"pip. See :ref:`installing-development-version`."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:52
msgid ""
"Having problems? See :ref:`troubleshooting-unit-tests` for some common "
"issues."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:57
msgid "Using another ``settings`` module"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:59
msgid ""
"The included settings module allows you to run the test suite using SQLite. "
"If you want to test behavior using a different database (and if you're "
"proposing patches for Django, it's a good idea to test across databases), "
"you may need to define your own settings file."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:64
msgid ""
"To run the tests with different settings, ensure that the module is on your "
"``PYTHONPATH`` and pass the module with ``--settings``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:67
msgid ""
"The :setting:`DATABASES` setting in any test settings module needs to define"
" two databases:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:70
msgid ""
"A ``default`` database. This database should use the backend that you want "
"to use for primary testing."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:73
msgid ""
"A database with the alias ``other``. The ``other`` database is used to "
"establish that queries can be directed to different databases. As a result, "
"this database can use any backend you want. It doesn't need to use the same "
"backend as the ``default`` database (although it can use the same backend if"
" you want to). It cannot be the same database as the ``default``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:79
msgid ""
"If you're using a backend that isn't SQLite, you will need to provide other "
"details for each database:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:82
msgid ""
"The :setting:`USER` option needs to specify an existing user account for the"
" database. That user needs permission to execute ``CREATE DATABASE`` so that"
" the test database can be created."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:86
msgid ""
"The :setting:`PASSWORD` option needs to provide the password for the "
":setting:`USER` that has been specified."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:89
msgid ""
"Test databases get their names by prepending ``test_`` to the value of the "
":setting:`NAME` settings for the databases defined in :setting:`DATABASES`. "
"These test databases are deleted when the tests are finished."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:95
msgid ""
"Before Django 1.7, the :setting:`NAME` setting was mandatory and had to be "
"the name of an existing database to which the given user had permission to "
"connect."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:99
msgid ""
"You will also need to ensure that your database uses UTF-8 as the default "
"character set. If your database server doesn't use UTF-8 as a default "
"charset, you will need to include a value for :setting:`CHARSET "
"<TEST_CHARSET>` in the test settings dictionary for the applicable database."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:107
msgid "Running only some of the tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:109
msgid ""
"Django's entire test suite takes a while to run, and running every single "
"test could be redundant if, say, you just added a test to Django that you "
"want to run quickly without running everything else. You can run a subset of"
" the unit tests by appending the names of the test modules to "
"``runtests.py`` on the command line."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:115
msgid ""
"For example, if you'd like to run tests only for generic relations and "
"internationalization, type:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:122
msgid ""
"How do you find out the names of individual tests? Look in ``tests/`` — each"
" directory name there is the name of a test."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:125
msgid ""
"If you just want to run a particular class of tests, you can specify a list "
"of paths to individual test classes. For example, to run the "
"``TranslationTests`` of the ``i18n`` module, type:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:133
msgid ""
"Going beyond that, you can specify an individual test method like this:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:140
msgid "Running the Selenium tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:142
msgid ""
"Some admin tests require Selenium 2, Firefox and Python >= 2.6 to work via a"
" real Web browser. To allow those tests to run and not be skipped, you must "
"install the selenium_ package (version > 2.13) into your Python path and run"
" the tests with the ``--selenium`` option:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:155
msgid "Running all the tests"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:157
msgid ""
"If you want to run the full suite of tests, you'll need to install a number "
"of dependencies:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:160
msgid "bcrypt_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:161
msgid "docutils_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:162
msgid "jinja2_ 2.7+"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:163
msgid "numpy_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:164
msgid "Pillow_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:165
msgid "PyYAML_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:166
msgid "pytz_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:167
msgid "setuptools_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:168
msgid "memcached_, plus a :ref:`supported Python binding <memcached>`"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:169
msgid "mock_ (for Python < 3.3)"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:170
msgid "gettext_ (:ref:`gettext_on_windows`)"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:171
msgid "selenium_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:172
msgid "sqlparse_"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:174
msgid ""
"You can find these dependencies in `pip requirements files`_ inside the "
"``tests/requirements`` directory of the Django source tree and install them "
"like so:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:182
msgid ""
"You can also install the database adapter(s) of your choice using "
"``oracle.txt``, ``mysql.txt``, or ``postgres.txt``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:185
msgid ""
"If you want to test the memcached cache backend, you'll also need to define "
"a :setting:`CACHES` setting that points at your memcached instance."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:188
msgid ""
"To run the GeoDjango tests, you will need to :doc:`setup a spatial database "
"and install the Geospatial libraries</ref/contrib/gis/install/index>`."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:191
msgid ""
"Each of these dependencies is optional. If you're missing any of them, the "
"associated tests will be skipped."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:210
msgid "Code coverage"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:212
msgid ""
"Contributors are encouraged to run coverage on the test suite to identify "
"areas that need additional tests. The coverage tool installation and use is "
"described in :ref:`testing code coverage<topics-testing-code-coverage>`."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:216
msgid ""
"To run coverage on the Django test suite using the standard test settings:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:222
msgid "After running coverage, generate the html report by running:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:228
msgid ""
"When running coverage for the Django tests, the included ``.coveragerc`` "
"settings file  defines ``coverage_html`` as the output directory for the "
"report and also excludes several directories not relevant to the results "
"(test code or external code included in Django)."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:236
msgid "Contrib apps"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:238
msgid ""
"Tests for contrib apps can be found in the ``tests/`` directory, typically "
"under ``<app_name>_tests``. For example, tests for ``contrib.auth`` are "
"located in ``tests/auth_tests``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:245
msgid "Troubleshooting"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:248
msgid "Many test failures with ``UnicodeEncodeError``"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:250
msgid ""
"If the ``locales`` package is not installed, some tests will fail with a "
"``UnicodeEncodeError``."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:253
msgid "You can resolve this on Debian-based systems, for example, by running:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:261
msgid "Tests that only fail in combination"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:263
msgid ""
"In case a test passes when run in isolation but fails within the whole "
"suite, we have some tools to help analyze the problem."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:266
msgid ""
"The ``--bisect`` option of ``runtests.py`` will run the failing test while "
"halving the test set it is run together with on each iteration, often making"
" it possible to identify a small number of tests that may be related to the "
"failure."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:271
msgid ""
"For example, suppose that the failing test that works on its own is "
"``ModelTest.test_eq``, then using:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:278
msgid ""
"will try to determine a test that interferes with the given one. First, the "
"test is run with the first half of the test suite. If a failure occurs, the "
"first half of the test suite is split in two groups and each group is then "
"run with the specified test. If there is no failure with the first half of "
"the test suite, the second half of the test suite is run with the specified "
"test and split appropriately as described earlier. The process repeats until"
" the set of failing tests is minimized."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:286
msgid ""
"The ``--pair`` option runs the given test alongside every other test from "
"the suite, letting you check if another test has side-effects that cause the"
" failure. So:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:294
msgid "will pair ``test_eq`` with every test label."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:296
msgid ""
"With both ``--bisect`` and ``--pair``, if you already suspect which cases "
"might be responsible for the failure, you may limit tests to be cross-"
"analyzed by :ref:`specifying further test labels <runtests-specifying-"
"labels>` after the first one:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:305
msgid ""
"You can also try running any set of tests in reverse using the ``--reverse``"
" option in order to verify that executing tests in a different order does "
"not cause any trouble:"
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:313
msgid ""
"If you wish to examine the SQL being run in failing tests, you can turn on "
":ref:`SQL logging <django-db-logger>` using the ``--debug-sql`` option. If "
"you combine this with ``--verbosity=2``, all SQL queries will be output."
msgstr ""

#: ../../internals/contributing/writing-code/unit-tests.txt:323
msgid "The ``--reverse`` and ``--debug-sql`` options were added."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:2
msgid "Working with Git and GitHub"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:4
msgid ""
"This section explains how the community can contribute code to Django via "
"pull requests. If you're interested in how core developers handle them, see "
":doc:`../committing-code`."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:8
msgid ""
"Below, we are going to show how to create a GitHub pull request containing "
"the changes for Trac ticket #xxxxx. By creating a fully-ready pull request "
"you will make the reviewer's job easier, meaning that your work is more "
"likely to be merged into Django."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:13
msgid ""
"You could also upload a traditional patch to Trac, but it's less practical "
"for reviews."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:17
msgid "Installing Git"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:19
msgid ""
"Django uses `Git`_ for its source control. You can `download <http://git-"
"scm.com/download>`_ Git, but it's often easier to install with your "
"operating system's package manager."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:23
msgid ""
"Django's `Git repository`_ is hosted on `GitHub`_, and it is recommended "
"that you also work using GitHub."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:26
msgid ""
"After installing Git the first thing you should do is setup your name and "
"email::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:32
msgid ""
"Note that ``user.name`` should be your real name, not your GitHub nick. "
"GitHub should know the email you use in the ``user.email`` field, as this "
"will be used to associate your commits with your GitHub account."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:41
msgid "Setting up local repository"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:43
msgid ""
"When you have created your GitHub account, with the nick \"github_nick\", "
"and forked Django's repository, create a local copy of your fork::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:48
msgid ""
"This will create a new directory \"django\", containing a clone of your "
"GitHub repository. The rest of the git commands on this page need to be run "
"within the cloned directory so switch to it now::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:54
msgid "Your GitHub repository will be called \"origin\" in Git."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:56
msgid ""
"You should also setup django/django as an \"upstream\" remote (that is, tell"
" git that the reference Django repository was the source of your fork of "
"it)::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:62
msgid "You can add other remotes similarly, for example::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:67
msgid "Working on a ticket"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:69
msgid ""
"When working on a ticket create a new branch for the work, and base that "
"work on upstream/master::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:74
msgid ""
"The -b flag creates a new branch for you locally. Don't hesitate to create "
"new branches even for the smallest things - that's what they are there for."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:77
msgid ""
"If instead you were working for a fix on the 1.4 branch, you would do::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:81
msgid ""
"Assume the work is carried on ticket_xxxxx branch. Make some changes and "
"commit them::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:86
msgid ""
"When writing the commit message, follow the :ref:`commit message guidelines "
"<committing-guidelines>` to ease the work of the committer. If you're "
"uncomfortable with English, try at least to describe precisely what the "
"commit does."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:91
msgid ""
"If you need to do additional work on your branch, commit as often as "
"necessary::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:97
msgid "Publishing work"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:99
msgid "You can publish your work on GitHub just by doing::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:103
msgid ""
"When you go to your GitHub page you will notice a new branch has been "
"created."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:105
msgid ""
"If you are working on a Trac ticket, you should mention in the ticket that "
"your work is available from branch ticket_xxxxx of your github repo. Include"
" a link to your branch."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:109
msgid ""
"Note that the above branch is called a \"topic branch\" in Git parlance. You"
" are free to rewrite the history of this branch, by using ``git rebase`` for"
" example. Other people shouldn't base their work on such a branch, because "
"their clone would become corrupt when you edit commits."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:114
msgid ""
"There are also \"public branches\". These are branches other people are "
"supposed to fork, so the history of these branches should never change. Good"
" examples of public branches are the ``master`` and ``stable/A.B.x`` "
"branches in the django/django repository."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:119
msgid ""
"When you think your work is ready to be pulled into Django, you should "
"create a pull request at GitHub. A good pull request means:"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:122
msgid ""
"commits with one logical change in each, following the :doc:`coding style "
"<coding-style>`,"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:125
msgid ""
"well-formed messages for each commit: a summary line and then paragraphs "
"wrapped at 72 characters thereafter -- see the :ref:`committing guidelines "
"<committing-guidelines>` for more details,"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:129
msgid ""
"documentation and tests, if needed -- actually tests are always needed, "
"except for documentation changes."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:132
msgid ""
"The test suite must pass and the documentation must build without warnings."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:134
msgid ""
"Once you have created your pull request, you should add a comment in the "
"related Trac ticket explaining what you've done. In particular you should "
"note the environment in which you ran the tests, for instance: \"all tests "
"pass under SQLite and MySQL\"."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:139
msgid ""
"Pull requests at GitHub have only two states: open and closed. The committer"
" who will deal with your pull request has only two options: merge it or "
"close it. For this reason, it isn't useful to make a pull request until the "
"code is ready for merging -- or sufficiently close that a committer will "
"finish it himself."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:146
msgid "Rebasing branches"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:148
msgid ""
"In the example above you created two commits, the \"Fixed ticket_xxxxx\" "
"commit and \"Added two more tests\" commit."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:151
msgid ""
"We do not want to have the entire history of your working process in your "
"repository. Your commit \"Added two more tests\" would be unhelpful noise. "
"Instead, we would rather only have one commit containing all your work."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:155
msgid ""
"To rework the history of your branch you can squash the commits into one by "
"using interactive rebase::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:160
msgid ""
"The HEAD~2 above is shorthand for two latest commits. The above command will"
" open an editor showing the two commits, prefixed with the word \"pick\"."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:163
msgid ""
"Change \"pick\" on the second line to \"squash\" instead. This will keep the"
" first commit, and squash the second commit into the first one. Save and "
"quit the editor. A second editor window should open, so you can reword the "
"commit message for the commit now that it includes both your steps."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:168
msgid ""
"You can also use the \"edit\" option in rebase. This way you can change a "
"single commit, for example to fix a typo in a docstring::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:180
msgid ""
"If your topic branch is already published at GitHub, for example if you're "
"making minor changes to take into account a review, you will need to force- "
"push the changes::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:186
msgid ""
"Note that this will rewrite history of ticket_xxxxx - if you check the "
"commit hashes before and after the operation at GitHub you will notice that "
"the commit hashes do not match any more. This is acceptable, as the branch "
"is merely a topic branch, and nobody should be basing their work on it."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:192
msgid "After upstream has changed"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:194
msgid ""
"When upstream (django/django) has changed, you should rebase your work. To "
"do this, use::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:200
msgid ""
"The work is automatically rebased using the branch you forked on, in the "
"example case using upstream/master."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:203
msgid ""
"The rebase command removes all your local commits temporarily, applies the "
"upstream commits, and then applies your local commits again on the work."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:206
msgid ""
"If there are merge conflicts you will need to resolve them and then use "
"``git rebase --continue``. At any point you can use ``git rebase --abort`` "
"to return to the original state."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:210
msgid "Note that you want to *rebase* on upstream, not *merge* the upstream."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:212
msgid ""
"The reason for this is that by rebasing, your commits will always be *on top"
" of* the upstream's work, not *mixed in with* the changes in the upstream. "
"This way your branch will contain only commits related to its topic, which "
"makes squashing easier."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:218
msgid "After review"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:220
msgid ""
"It is unusual to get any non-trivial amount of code into core without "
"changes requested by reviewers. In this case, it is often a good idea to add"
" the changes as one incremental commit to your work. This allows the "
"reviewer to easily check what changes you have done."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:225
msgid ""
"In this case, do the changes required by the reviewer. Commit as often as "
"necessary. Before publishing the changes, rebase your work. If you added two"
" commits, you would run::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:231
msgid ""
"Squash the second commit into the first. Write a commit message along the "
"lines of::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:239
msgid ""
"Finally push your work back to your GitHub repository. Since you didn't "
"touch the public commits during the rebase, you should not need to force-"
"push::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:244
msgid "Your pull request should now contain the new commit too."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:246
msgid ""
"Note that the committer is likely to squash the review commit into the "
"previous commit when committing the code."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:250
msgid "Working on a patch"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:252
msgid ""
"One of the ways that developers can contribute to Django is by reviewing "
"patches. Those patches will typically exist as pull requests on GitHub and "
"can be easily integrated into your local repository::"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:259
msgid ""
"This will create a new branch and then apply the changes from the pull "
"request to it. At this point you can run the tests or do anything else you "
"need to do to investigate the quality of the patch."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:263
msgid ""
"For more detail on working with pull requests see the :ref:`guidelines for "
"committers <handling-pull-requests>`."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:267
msgid "Summary"
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:269
msgid "Work on GitHub if you can."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:270
msgid ""
"Announce your work on the Trac ticket by linking to your GitHub branch."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:271
msgid "When you have something ready, make a pull request."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:272
msgid "Make your pull requests as good as you can."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:273
msgid ""
"When doing fixes to your work, use ``git rebase -i`` to squash the commits."
msgstr ""

#: ../../internals/contributing/writing-code/working-with-git.txt:274
msgid "When upstream has changed, do ``git fetch upstream; git rebase``."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:3
msgid "Writing documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:5
msgid ""
"We place a high importance on consistency and readability of documentation. "
"After all, Django was created in a journalism environment! So we treat our "
"documentation like we treat our code: we aim to improve it as often as "
"possible."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:10
msgid "Documentation changes generally come in two forms:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:12
msgid ""
"General improvements: typo corrections, error fixes and better explanations "
"through clearer writing and more examples."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:15
msgid ""
"New features: documentation of features that have been added to the "
"framework since the last release."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:18
msgid ""
"This section explains how writers can craft their documentation changes in "
"the most useful and least error-prone ways."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:22
msgid "Getting the raw documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:24
msgid ""
"Though Django's documentation is intended to be read as HTML at "
"https://docs.djangoproject.com/, we edit it as a collection of text files "
"for maximum flexibility. These files live in the top-level ``docs/`` "
"directory of a Django release."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:29
msgid ""
"If you'd like to start contributing to our docs, get the development version"
" of Django from the source code repository (see :ref:`installing-"
"development-version`). The development version has the latest-and-greatest "
"documentation, just as it has latest-and-greatest code. We also backport "
"documentation fixes and improvements, at the discretion of the committer, to"
" the last release branch. That's because it's highly advantageous to have "
"the docs for the last release be up-to-date and correct (see :ref"
":`differences-between-doc-versions`)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:39
msgid "Getting started with Sphinx"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:41
msgid ""
"Django's documentation uses the Sphinx__ documentation system, which in turn"
" is based on docutils__. The basic idea is that lightly-formatted plain-text"
" documentation is transformed into HTML, PDF, and any other output format."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:48
msgid ""
"To actually build the documentation locally, you'll currently need to "
"install Sphinx -- ``pip install Sphinx`` should do the trick."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:53
msgid ""
"Building the Django documentation requires Sphinx 1.0.2 or newer. Sphinx "
"also requires the Pygments__ library for syntax highlighting; building the "
"Django documentation requires Pygments 1.1 or newer (a new-enough version "
"should automatically be installed along with Sphinx)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:60
msgid ""
"Then, building the HTML is easy; just ``make html`` (or ``make.bat html`` on"
" Windows) from the ``docs`` directory."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:63
msgid ""
"To get started contributing, you'll want to read the :ref:`reStructuredText "
"Primer <sphinx:rst-primer>`. After that, you'll want to read about the :ref"
":`Sphinx-specific markup <sphinx:sphinxmarkup>` that's used to manage "
"metadata, indexing, and cross-references."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:69
msgid "Writing style"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:71
msgid ""
"When using pronouns in reference to a hypothetical person, such as \"a user "
"with a session cookie\", gender neutral pronouns (they/their/them) should be"
" used. Instead of:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:75
msgid "he or she... use they."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:76
msgid "him or her... use them."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:77
msgid "his or her... use their."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:78
msgid "his or hers... use theirs."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:79
msgid "himself or herself... use themselves."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:82
msgid "Commonly used terms"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:84
msgid ""
"Here are some style guidelines on commonly used terms throughout the "
"documentation:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:87
msgid ""
"**Django** -- when referring to the framework, capitalize Django. It is "
"lowercase only in Python code and in the djangoproject.com logo."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:90
msgid "**email** -- no hyphen."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:92
msgid "**MySQL**, **PostgreSQL**, **SQLite**"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:94
msgid ""
"**SQL** -- when referring to SQL, the expected pronunciation should be \"Ess"
" Queue Ell\" and not \"sequel\". Thus in a phrase like \"Returns an SQL "
"expression\", \"SQL\" should be preceded by \"an\" and not \"a\"."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:98
msgid "**Python** -- when referring to the language, capitalize Python."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:100
msgid ""
"**realize**, **customize**, **initialize**, etc. -- use the American \"ize\""
" suffix, not \"ise.\""
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:103
msgid ""
"**subclass** -- it's a single word without a hyphen, both as a verb "
"(\"subclass that model\") and as a noun (\"create a subclass\")."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:106
msgid ""
"**Web**, **World Wide Web**, **the Web** -- note Web is always capitalized "
"when referring to the World Wide Web."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:109
msgid "**Web site** -- use two words, with Web capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:112
msgid "Django-specific terminology"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:114
msgid "**model** -- it's not capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:116
msgid "**template** -- it's not capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:118
msgid ""
"**URLconf** -- use three capitalized letters, with no space before \"conf.\""
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:121
msgid "**view** -- it's not capitalized."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:124
msgid "Guidelines for reStructuredText files"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:126
msgid ""
"These guidelines regulate the format of our reST (reStructuredText) "
"documentation:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:129
msgid "In section titles, capitalize only initial words and proper nouns."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:131
msgid ""
"Wrap the documentation at 80 characters wide, unless a code example is "
"significantly less readable when split over two lines, or for another good "
"reason."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:135
msgid ""
"The main thing to keep in mind as you write and edit docs is that the more "
"semantic markup you can add the better. So::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:140
msgid "Isn't nearly as helpful as::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:144
msgid ""
"This is because Sphinx will generate proper links for the latter, which "
"greatly helps readers. There's basically no limit to the amount of useful "
"markup you can add."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:148
msgid ""
"Use :mod:`~sphinx.ext.intersphinx` to reference Python's and Sphinx' "
"documentation."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:152
msgid "Django-specific markup"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:154
msgid ""
"Besides the :ref:`Sphinx built-in markup <sphinx:sphinxmarkup>`, Django's "
"docs defines some extra description units:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:157
msgid "Settings::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:161
msgid "To link to a setting, use ``:setting:`INSTALLED_APPS```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:163
msgid "Template tags::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:167
msgid "To link, use ``:ttag:`regroup```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:169
msgid "Template filters::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:173
msgid "To link, use ``:tfilter:`linebreaksbr```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:175
msgid "Field lookups (i.e. ``Foo.objects.filter(bar__exact=whatever)``)::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:179
msgid "To link, use ``:lookup:`exact```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:181
msgid "``django-admin`` commands::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:185
msgid "To link, use ``:djadmin:`migrate```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:187
msgid "``django-admin`` command-line options::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:191
msgid "To link, use ``:djadminopt:`--traceback```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:193
msgid "Links to Trac tickets (typically reserved for minor release notes)::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:200
msgid "Documenting new features"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:202
msgid "Our policy for new features is:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:204
msgid ""
"All documentation of new features should be written in a way that clearly "
"designates the features are only available in the Django development "
"version. Assume documentation readers are using the latest release, not the "
"development version."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:209
msgid ""
"Our preferred way for marking new features is by prefacing the features' "
"documentation with: \"``.. versionadded:: X.Y``\", followed by a mandatory "
"blank line and an optional content (indented)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:213
msgid ""
"General improvements, or other changes to the APIs that should be emphasized"
" should use the \"``.. versionchanged:: X.Y``\" directive (with the same "
"format as the ``versionadded`` mentioned above."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:217
msgid ""
"These ``versionadded`` and ``versionchanged`` blocks should be \"self-"
"contained.\" In other words, since we only keep these annotations around for"
" two releases, it's nice to be able to remove the annotation and its "
"contents without having to reflow, reindent, or edit the surrounding text. "
"For example, instead of putting the entire description of a new or changed "
"feature in a block, do something like this::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:238
msgid ""
"Put the changed annotation notes at the bottom of a section, not the top."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:240
msgid ""
"Also, avoid referring to a specific version of Django outside a "
"``versionadded`` or ``versionchanged`` block. Even inside a block, it's "
"often redundant to do so as these annotations render as \"New in Django "
"A.B:\" and \"Changed in Django A.B\", respectively."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:245
msgid ""
"If a function, attribute, etc. is added, it's also okay to use a "
"``versionadded`` annotation like this::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:254
msgid ""
"We can simply remove the ``.. versionadded:: A.B`` annotation without any "
"indentation changes when the time comes."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:258
msgid "An example"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:260
msgid ""
"For a quick example of how it all fits together, consider this hypothetical "
"example:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:263
msgid ""
"First, the ``ref/settings.txt`` document could have an overall layout like "
"this:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:288
msgid ""
"Next, the ``topics/settings.txt`` document could contain something like "
"this:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:300
msgid ""
"We use the Sphinx :rst:role:`doc` cross reference element when we want to "
"link to another document as a whole and the :rst:role:`ref` element when we "
"want to link to an arbitrary location in a document."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:304
msgid "Next, notice how the settings are annotated:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:325
msgid ""
"This marks up the following header as the \"canonical\" target for the "
"setting ``ADMINS``. This means any time I talk about ``ADMINS``, I can "
"reference it using ``:setting:`ADMINS```."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:329
msgid "That's basically how everything fits together."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:334
msgid "Improving the documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:336
msgid ""
"A few small improvements can be made to make the documentation read and look"
" better:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:339
msgid ""
"Most of the various ``index.txt`` documents have *very* short or even non-"
"existent intro text. Each of those documents needs a good short intro the "
"content below that point."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:343
msgid "The glossary is very perfunctory. It needs to be filled out."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:345
msgid "Add more metadata targets. Lots of places look like::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:350
msgid "\\... these should be::"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:354
msgid "That is, use metadata instead of titles."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:356
msgid ""
"Whenever possible, use links. So, use ``:setting:`ADMINS``` instead of "
"````ADMINS````."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:359
msgid ""
"Use directives where appropriate. Some directives (e.g. ``.. setting::``) "
"are prefix-style directives; they go *before* the unit they're describing. "
"These are known as \"crossref\" directives. Others (e.g. ``.. class::``) "
"generate their own markup; these should go inside the section they're "
"describing. These are called \"description units\"."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:366
msgid ""
"You can tell which are which by looking at in :file:`_ext/djangodocs.py`; it"
" registers roles as one of the other."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:369
msgid ""
"Add ``.. code-block:: <lang>`` to literal blocks so that they get "
"highlighted."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:372
msgid ""
"When referring to classes/functions/modules, etc., you'll want to use the "
"fully-qualified name of the target "
"(``:class:`django.contrib.contenttypes.models.ContentType```)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:376
msgid ""
"Since this doesn't look all that awesome in the output -- it shows the "
"entire path to the object -- you can prefix the target with a ``~`` (that's "
"a tilde) to get just the \"last bit\" of that path. So "
"``:class:`~django.contrib.contenttypes.models.ContentType``` will just "
"display a link with the title \"ContentType\"."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:385
msgid "Spelling check"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:387
msgid ""
"Before you commit your docs, it's a good idea to run the spelling checker. "
"You'll need to install a couple packages first:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:390
msgid ""
"`pyenchant <https://pypi.python.org/pypi/pyenchant/>`_ (which requires "
"`enchant <http://www.abisource.com/projects/enchant/>`_)"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:393
msgid ""
"`sphinxcontrib-spelling <https://pypi.python.org/pypi/sphinxcontrib-"
"spelling/>`_"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:396
msgid ""
"Then from the ``docs`` directory, run ``make spelling``. Wrong words (if "
"any) along with the file and line number where they occur will be saved to "
"``_build/spelling/output.txt``."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:400
msgid ""
"If you encounter false-positives (error output that actually is correct), do"
" one of the following:"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:403
msgid "Surround inline code or brand/technology names with grave accents (`)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:404
msgid "Find synonyms that the spell checker recognizes."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:405
msgid ""
"If, and only if, you are sure the word you are using is correct - add it to "
"``docs/spelling_wordlist`` (please keep the list in alphabetical order)."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:409
msgid "Translating documentation"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:411
msgid ""
"See :ref:`Localizing the Django documentation <translating-documentation>` "
"if you'd like to help translate the documentation into another language."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:417
msgid "``django-admin`` man page"
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:419
msgid ""
"Sphinx can generate a manual page for the :doc:`django-admin </ref/django-"
"admin>` command. This is configured in ``docs/conf.py``. Unlike other "
"documentation output, this man page should be included in the Django "
"repository and the releases as ``docs/man/django-admin.1``. There isn't a "
"need to update this file when updating the documentation, as it's updated "
"once as part of the release process."
msgstr ""

#: ../../internals/contributing/writing-documentation.txt:426
msgid ""
"To generate an updated version of the man page, run ``make man`` in the "
"``docs`` directory. The new man page will be written in ``docs/_build/man"
"/django-admin.1``."
msgstr ""

#: ../../internals/deprecation.txt:3
msgid "Django Deprecation Timeline"
msgstr ""

#: ../../internals/deprecation.txt:5
msgid ""
"This document outlines when various pieces of Django will be removed or "
"altered in a backward incompatible way, following their deprecation, as per "
"the :ref:`deprecation policy <internal-release-deprecation-policy>`. More "
"details about each item can often be found in the release notes of two "
"versions prior."
msgstr ""

#: ../../internals/deprecation.txt:13
msgid "1.10"
msgstr ""

#: ../../internals/deprecation.txt:15
msgid ""
"See the :ref:`Django 1.8 release notes<deprecated-features-1.8>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:18
msgid ""
"Support for calling a ``SQLCompiler`` directly as an alias for calling its "
"``quote_name_unless_alias`` method will be removed."
msgstr ""

#: ../../internals/deprecation.txt:21
msgid ""
"``cycle`` and ``firstof`` template tags will be removed from the ``future`` "
"template tag library (used during the 1.6/1.7 deprecation period)."
msgstr ""

#: ../../internals/deprecation.txt:24
msgid "``django.conf.urls.patterns()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:26
msgid ""
"Support for the ``prefix`` argument to "
"``django.conf.urls.i18n.i18n_patterns()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:29
msgid "``SimpleTestCase.urls`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:31
msgid ""
"Using an incorrect count of unpacked values in the ``for`` template tag will"
" raise an exception rather than fail silently."
msgstr ""

#: ../../internals/deprecation.txt:34
msgid ""
"The ability to :func:`~django.core.urlresolvers.reverse` URLs using a dotted"
" Python path will be removed."
msgstr ""

#: ../../internals/deprecation.txt:37
msgid ""
"The ability to use a dotted Python path for the ``LOGIN_URL`` and "
"``LOGIN_REDIRECT_URL`` settings will be removed."
msgstr ""

#: ../../internals/deprecation.txt:40
msgid ""
"Support for :py:mod:`optparse` will be dropped for custom management "
"commands (replaced by :py:mod:`argparse`)."
msgstr ""

#: ../../internals/deprecation.txt:43
msgid ""
"The class :class:`~django.core.management.NoArgsCommand` will be removed. "
"Use :class:`~django.core.management.BaseCommand` instead, which takes no "
"arguments by default."
msgstr ""

#: ../../internals/deprecation.txt:47
msgid "``django.core.context_processors`` module will be removed."
msgstr ""

#: ../../internals/deprecation.txt:49
msgid "``django.db.models.sql.aggregates`` module will be removed."
msgstr ""

#: ../../internals/deprecation.txt:51
msgid ""
"``django.contrib.gis.db.models.sql.aggregates`` module will be removed."
msgstr ""

#: ../../internals/deprecation.txt:53
msgid ""
"The following methods and properties of ``django.db.sql.query.Query`` will "
"be removed:"
msgstr ""

#: ../../internals/deprecation.txt:56
msgid "Properties: ``aggregates`` and ``aggregate_select``"
msgstr ""

#: ../../internals/deprecation.txt:57
msgid ""
"Methods: ``add_aggregate``, ``set_aggregate_mask``, and "
"``append_aggregate_mask``."
msgstr ""

#: ../../internals/deprecation.txt:60
msgid "``django.template.resolve_variable`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:62
msgid ""
"The following private APIs will be removed from "
":class:`django.db.models.options.Options` (``Model._meta``):"
msgstr ""

#: ../../internals/deprecation.txt:65
msgid "``get_field_by_name()``"
msgstr ""

#: ../../internals/deprecation.txt:66
msgid "``get_all_field_names()``"
msgstr ""

#: ../../internals/deprecation.txt:67
msgid "``get_fields_with_model()``"
msgstr ""

#: ../../internals/deprecation.txt:68
msgid "``get_concrete_fields_with_model()``"
msgstr ""

#: ../../internals/deprecation.txt:69
msgid "``get_m2m_with_model()``"
msgstr ""

#: ../../internals/deprecation.txt:70
msgid "``get_all_related_objects()``"
msgstr ""

#: ../../internals/deprecation.txt:71
msgid "``get_all_related_objects_with_model()``"
msgstr ""

#: ../../internals/deprecation.txt:72
msgid "``get_all_related_many_to_many_objects()``"
msgstr ""

#: ../../internals/deprecation.txt:73
msgid "``get_all_related_m2m_objects_with_model()``"
msgstr ""

#: ../../internals/deprecation.txt:75
msgid ""
"The ``error_message`` argument of ``django.forms.RegexField`` will be "
"removed."
msgstr ""

#: ../../internals/deprecation.txt:77
msgid "The ``unordered_list`` filter will no longer support old style lists."
msgstr ""

#: ../../internals/deprecation.txt:79
msgid "Support for string ``view`` arguments to ``url()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:81
msgid ""
"The backward compatible shim  to rename ``django.forms.Form._has_changed()``"
" to ``has_changed()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:84
msgid "The ``removetags`` template filter will be removed."
msgstr ""

#: ../../internals/deprecation.txt:86
msgid ""
"The ``remove_tags()`` and ``strip_entities()`` functions in "
"``django.utils.html`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:89
msgid ""
"The ``is_admin_site`` argument to "
"``django.contrib.auth.views.password_reset()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:92
msgid "``django.db.models.field.subclassing.SubfieldBase`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:94
msgid ""
"``django.utils.checksums`` will be removed; its functionality is included in"
" django-localflavor 1.1+."
msgstr ""

#: ../../internals/deprecation.txt:97
msgid ""
"The ``original_content_type_id`` attribute on "
"``django.contrib.admin.helpers.InlineAdminForm`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:100
msgid ""
"The backwards compatibility shim to allow ``FormMixin.get_form()`` to be "
"defined with no default value for its ``form_class`` argument will be "
"removed."
msgstr ""

#: ../../internals/deprecation.txt:103
msgid "The following settings will be removed:"
msgstr ""

#: ../../internals/deprecation.txt:105
msgid "``ALLOWED_INCLUDE_ROOTS``"
msgstr ""

#: ../../internals/deprecation.txt:106
msgid "``TEMPLATE_CONTEXT_PROCESSORS``"
msgstr ""

#: ../../internals/deprecation.txt:107
msgid "``TEMPLATE_DEBUG``"
msgstr ""

#: ../../internals/deprecation.txt:108
msgid "``TEMPLATE_DIRS``"
msgstr ""

#: ../../internals/deprecation.txt:109
msgid "``TEMPLATE_LOADERS``"
msgstr ""

#: ../../internals/deprecation.txt:110
msgid "``TEMPLATE_STRING_IF_INVALID``"
msgstr ""

#: ../../internals/deprecation.txt:112
msgid ""
"The backwards compatibility alias ``django.template.loader.BaseLoader`` will"
" be removed."
msgstr ""

#: ../../internals/deprecation.txt:115
msgid ""
"Django template objects returned by "
":func:`~django.template.loader.get_template` and "
":func:`~django.template.loader.select_template` won't accept a "
":class:`~django.template.Context` in their "
":meth:`~django.template.backends.base.Template.render()` method anymore."
msgstr ""

#: ../../internals/deprecation.txt:121
msgid ""
":doc:`Template response APIs </ref/template-response>` will enforce the use "
"of :class:`dict` and backend-dependent template objects instead of "
":class:`~django.template.Context` and :class:`~django.template.Template` "
"respectively."
msgstr ""

#: ../../internals/deprecation.txt:126
msgid ""
"The ``current_app`` parameter for the following function and classes will be"
" removed:"
msgstr ""

#: ../../internals/deprecation.txt:129 ../../internals/deprecation.txt:137
#: ../../internals/deprecation.txt:145
msgid "``django.shortcuts.render()``"
msgstr ""

#: ../../internals/deprecation.txt:130
msgid "``django.template.Context()``"
msgstr ""

#: ../../internals/deprecation.txt:131
msgid "``django.template.RequestContext()``"
msgstr ""

#: ../../internals/deprecation.txt:132
msgid "``django.template.response.TemplateResponse()``"
msgstr ""

#: ../../internals/deprecation.txt:134
msgid ""
"The ``dictionary`` and ``context_instance`` parameters for the following "
"functions will be removed:"
msgstr ""

#: ../../internals/deprecation.txt:138 ../../internals/deprecation.txt:146
msgid "``django.shortcuts.render_to_response()``"
msgstr ""

#: ../../internals/deprecation.txt:139
msgid "``django.template.loader.render_to_string()``"
msgstr ""

#: ../../internals/deprecation.txt:141
msgid "The ``dirs`` parameter for the following functions will be removed:"
msgstr ""

#: ../../internals/deprecation.txt:143
msgid "``django.template.loader.get_template()``"
msgstr ""

#: ../../internals/deprecation.txt:144
msgid "``django.template.loader.select_template()``"
msgstr ""

#: ../../internals/deprecation.txt:148
msgid ""
"Session verification will be enabled regardless of whether or not "
"``'django.contrib.auth.middleware.SessionAuthenticationMiddleware'`` is in "
"``MIDDLEWARE_CLASSES``."
msgstr ""

#: ../../internals/deprecation.txt:152
msgid "Private attribute ``django.db.models.Field.related`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:154
msgid ""
"The ``--list`` option of the ``migrate`` management command will be removed."
msgstr ""

#: ../../internals/deprecation.txt:156
msgid "The ``ssi`` template tag will be removed."
msgstr ""

#: ../../internals/deprecation.txt:158
msgid ""
"Support for the ``=`` comparison operator in the ``if`` template tag will be"
" removed."
msgstr ""

#: ../../internals/deprecation.txt:161
msgid ""
"The backwards compatibility shims to allow ``Storage.get_available_name()`` "
"and ``Storage.save()`` to be defined without a ``max_length`` argument will "
"be removed."
msgstr ""

#: ../../internals/deprecation.txt:165
msgid ""
"Support for the legacy ``%(<foo>)s`` syntax in "
"``ModelFormMixin.success_url`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:168
msgid ""
"``GeoQuerySet`` aggregate methods ``collect()``, ``extent()``, "
"``extent3d()``, ``make_line()``, and ``unionagg()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:171
msgid ""
"Ability to specify ``ContentType.name`` when creating a content type "
"instance will be removed."
msgstr ""

#: ../../internals/deprecation.txt:174
msgid ""
"Support for the old signature of ``allow_migrate`` will be removed. It "
"changed from ``allow_migrate(self, db, model)`` to ``allow_migrate(self, db,"
" app_label, model_name=None, **hints)``."
msgstr ""

#: ../../internals/deprecation.txt:181
msgid "1.9"
msgstr ""

#: ../../internals/deprecation.txt:183
msgid ""
"See the :ref:`Django 1.7 release notes<deprecated-features-1.7>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:186
msgid "``django.utils.dictconfig`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:188
msgid "``django.utils.importlib`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:190
msgid "``django.utils.tzinfo`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:192
msgid "``django.utils.unittest`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:194
msgid "The ``syncdb`` command will be removed."
msgstr ""

#: ../../internals/deprecation.txt:196
msgid ""
"``django.db.models.signals.pre_syncdb`` and "
"``django.db.models.signals.post_syncdb`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:199
msgid ""
"``allow_syncdb`` on database routers will no longer automatically become "
"``allow_migrate``."
msgstr ""

#: ../../internals/deprecation.txt:202
msgid ""
"Automatic syncing of apps without migrations will be removed. Migrations "
"will become compulsory for all apps unless you pass the ``--run-syncdb`` "
"option to ``migrate``."
msgstr ""

#: ../../internals/deprecation.txt:206
msgid ""
"Support for automatic loading of ``initial_data`` fixtures and initial SQL "
"data will be removed."
msgstr ""

#: ../../internals/deprecation.txt:209
msgid ""
"All models will need to be defined inside an installed application or "
"declare an explicit :attr:`~django.db.models.Options.app_label`. "
"Furthermore, it won't be possible to import them before their application is"
" loaded. In particular, it won't be possible to import models inside the "
"root package of their application."
msgstr ""

#: ../../internals/deprecation.txt:215
msgid ""
"The model and form ``IPAddressField`` will be removed. A stub field will "
"remain for compatibility with historical migrations."
msgstr ""

#: ../../internals/deprecation.txt:218
msgid "``AppCommand.handle_app()`` will no longer be supported."
msgstr ""

#: ../../internals/deprecation.txt:220
msgid ""
"``RequestSite`` and ``get_current_site()`` will no longer be importable from"
" ``django.contrib.sites.models``."
msgstr ""

#: ../../internals/deprecation.txt:223
msgid ""
"FastCGI support via the ``runfcgi`` management command will be removed. "
"Please deploy your project using WSGI."
msgstr ""

#: ../../internals/deprecation.txt:226
msgid ""
"``django.utils.datastructures.SortedDict`` will be removed. Use "
":class:`collections.OrderedDict` from the Python standard library instead."
msgstr ""

#: ../../internals/deprecation.txt:229
msgid "``ModelAdmin.declared_fieldsets`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:231
msgid ""
"Instances of ``util.py`` in the Django codebase have been renamed to "
"``utils.py`` in an effort to unify all util and utils references. The "
"modules that provided backwards compatibility will be removed:"
msgstr ""

#: ../../internals/deprecation.txt:235
msgid "``django.contrib.admin.util``"
msgstr ""

#: ../../internals/deprecation.txt:236
msgid "``django.contrib.gis.db.backends.util``"
msgstr ""

#: ../../internals/deprecation.txt:237
msgid "``django.db.backends.util``"
msgstr ""

#: ../../internals/deprecation.txt:238
msgid "``django.forms.util``"
msgstr ""

#: ../../internals/deprecation.txt:240
msgid "``ModelAdmin.get_formsets`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:242
msgid ""
"The backward compatibility shim introduced to rename the "
"``BaseMemcachedCache._get_memcache_timeout()`` method to "
"``get_backend_timeout()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:246
msgid ""
"The ``--natural`` and ``-n`` options for :djadmin:`dumpdata` will be "
"removed. Use :djadminopt:`--natural-foreign` instead."
msgstr ""

#: ../../internals/deprecation.txt:249
msgid ""
"The ``use_natural_keys`` argument for ``serializers.serialize()`` will be "
"removed. Use ``use_natural_foreign_keys`` instead."
msgstr ""

#: ../../internals/deprecation.txt:252
msgid ""
"Private API ``django.forms.forms.get_declared_fields()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:254
msgid ""
"The ability to use a ``SplitDateTimeWidget`` with ``DateTimeField`` will be "
"removed."
msgstr ""

#: ../../internals/deprecation.txt:257
msgid "The ``WSGIRequest.REQUEST`` property will be removed."
msgstr ""

#: ../../internals/deprecation.txt:259
msgid "The class ``django.utils.datastructures.MergeDict`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:261
msgid ""
"The ``zh-cn`` and ``zh-tw`` language codes will be removed and have been "
"replaced by the ``zh-hans`` and ``zh-hant`` language code respectively."
msgstr ""

#: ../../internals/deprecation.txt:264
msgid "The internal ``django.utils.functional.memoize`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:266
msgid ""
"``django.core.cache.get_cache`` will be removed. Add suitable entries to "
":setting:`CACHES` and use :data:`django.core.cache.caches` instead."
msgstr ""

#: ../../internals/deprecation.txt:269
msgid "``django.db.models.loading`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:271
msgid "Passing callable arguments to querysets will no longer be possible."
msgstr ""

#: ../../internals/deprecation.txt:273
msgid ""
"``BaseCommand.requires_model_validation`` will be removed in favor of "
"``requires_system_checks``. Admin validators will be replaced by admin "
"checks."
msgstr ""

#: ../../internals/deprecation.txt:277
msgid ""
"The ``ModelAdmin.validator_class`` and ``default_validator_class`` "
"attributes will be removed."
msgstr ""

#: ../../internals/deprecation.txt:280
msgid "``ModelAdmin.validate()`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:282
msgid ""
"``django.db.backends.DatabaseValidation.validate_field`` will be removed in "
"favor of the ``check_field`` method."
msgstr ""

#: ../../internals/deprecation.txt:285
msgid "The ``validate`` management command will be removed."
msgstr ""

#: ../../internals/deprecation.txt:287
msgid ""
"``django.utils.module_loading.import_by_path`` will be removed in favor of "
"``django.utils.module_loading.import_string``."
msgstr ""

#: ../../internals/deprecation.txt:290
msgid ""
"``ssi`` and ``url`` template tags will be removed from the ``future`` "
"template tag library (used during the 1.3/1.4 deprecation period)."
msgstr ""

#: ../../internals/deprecation.txt:293
msgid "``django.utils.text.javascript_quote`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:295
msgid ""
"Database test settings as independent entries in the database settings, "
"prefixed by ``TEST_``, will no longer be supported."
msgstr ""

#: ../../internals/deprecation.txt:298
msgid ""
"The `cache_choices` option to :class:`~django.forms.ModelChoiceField` and "
":class:`~django.forms.ModelMultipleChoiceField` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:301
msgid ""
"The default value of the :attr:`RedirectView.permanent "
"<django.views.generic.base.RedirectView.permanent>` attribute will change "
"from ``True`` to ``False``."
msgstr ""

#: ../../internals/deprecation.txt:305
msgid ""
"``django.contrib.sitemaps.FlatPageSitemap`` will be removed in favor of "
"``django.contrib.flatpages.sitemaps.FlatPageSitemap``."
msgstr ""

#: ../../internals/deprecation.txt:308
msgid "Private API ``django.test.utils.TestTemplateLoader`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:310
msgid "The ``django.contrib.contenttypes.generic`` module will be removed."
msgstr ""

#: ../../internals/deprecation.txt:312
msgid ""
"Private APIs ``django.db.models.sql.where.WhereNode.make_atom()`` and "
"``django.db.models.sql.where.Constraint`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:318
msgid "1.8"
msgstr ""

#: ../../internals/deprecation.txt:320
msgid ""
"See the :ref:`Django 1.6 release notes<deprecated-features-1.6>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:323
msgid "``django.contrib.comments`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:325
msgid "The following transaction management APIs will be removed:"
msgstr ""

#: ../../internals/deprecation.txt:327
msgid "``TransactionMiddleware``,"
msgstr ""

#: ../../internals/deprecation.txt:328
msgid ""
"the decorators and context managers ``autocommit``, ``commit_on_success``, "
"and ``commit_manually``, defined in ``django.db.transaction``,"
msgstr ""

#: ../../internals/deprecation.txt:330
msgid ""
"the functions ``commit_unless_managed`` and ``rollback_unless_managed``, "
"also defined in ``django.db.transaction``,"
msgstr ""

#: ../../internals/deprecation.txt:332
msgid "the ``TRANSACTIONS_MANAGED`` setting."
msgstr ""

#: ../../internals/deprecation.txt:334
msgid ""
"The :ttag:`cycle` and :ttag:`firstof` template tags will auto-escape their "
"arguments. In 1.6 and 1.7, this behavior is provided by the version of these"
" tags in the ``future`` template tag library."
msgstr ""

#: ../../internals/deprecation.txt:338
msgid ""
"The ``SEND_BROKEN_LINK_EMAILS`` setting will be removed. Add the "
":class:`django.middleware.common.BrokenLinkEmailsMiddleware` middleware to "
"your :setting:`MIDDLEWARE_CLASSES` setting instead."
msgstr ""

#: ../../internals/deprecation.txt:342
msgid ""
"``django.middleware.doc.XViewMiddleware`` will be removed. Use "
"``django.contrib.admindocs.middleware.XViewMiddleware`` instead."
msgstr ""

#: ../../internals/deprecation.txt:345
msgid "``Model._meta.module_name`` was renamed to ``model_name``."
msgstr ""

#: ../../internals/deprecation.txt:347
msgid ""
"Remove the backward compatible shims introduced to rename ``get_query_set`` "
"and similar queryset methods. This affects the following classes: "
"``BaseModelAdmin``, ``ChangeList``, ``BaseCommentNode``, "
"``GenericForeignKey``, ``Manager``, ``SingleRelatedObjectDescriptor`` and "
"``ReverseSingleRelatedObjectDescriptor``."
msgstr ""

#: ../../internals/deprecation.txt:353
msgid ""
"Remove the backward compatible shims introduced to rename the attributes "
"``ChangeList.root_query_set`` and ``ChangeList.query_set``."
msgstr ""

#: ../../internals/deprecation.txt:356
msgid ""
"``django.views.defaults.shortcut`` will be removed, as part of the goal of "
"removing all ``django.contrib`` references from the core Django codebase. "
"Instead use ``django.contrib.contenttypes.views.shortcut``. "
"``django.conf.urls.shortcut`` will also be removed."
msgstr ""

#: ../../internals/deprecation.txt:362
msgid ""
"Support for the Python Imaging Library (PIL) module will be removed, as it "
"no longer appears to be actively maintained & does not work on Python 3. You"
" are advised to install `Pillow`_, which should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:368
msgid "The following private APIs will be removed:"
msgstr ""

#: ../../internals/deprecation.txt:370
msgid "``django.db.backend``"
msgstr ""

#: ../../internals/deprecation.txt:371
msgid "``django.db.close_connection()``"
msgstr ""

#: ../../internals/deprecation.txt:372
msgid "``django.db.backends.creation.BaseDatabaseCreation.set_autocommit()``"
msgstr ""

#: ../../internals/deprecation.txt:373
msgid "``django.db.transaction.is_managed()``"
msgstr ""

#: ../../internals/deprecation.txt:374
msgid "``django.db.transaction.managed()``"
msgstr ""

#: ../../internals/deprecation.txt:376
msgid ""
"``django.forms.widgets.RadioInput`` will be removed in favor of "
"``django.forms.widgets.RadioChoiceInput``."
msgstr ""

#: ../../internals/deprecation.txt:379
msgid ""
"The module ``django.test.simple`` and the class "
"``django.test.simple.DjangoTestSuiteRunner`` will be removed. Instead use "
"``django.test.runner.DiscoverRunner``."
msgstr ""

#: ../../internals/deprecation.txt:383
msgid ""
"The module ``django.test._doctest`` will be removed. Instead use the doctest"
" module from the Python standard library."
msgstr ""

#: ../../internals/deprecation.txt:386
msgid "The ``CACHE_MIDDLEWARE_ANONYMOUS_ONLY`` setting will be removed."
msgstr ""

#: ../../internals/deprecation.txt:388
msgid ""
"Usage of the hard-coded *Hold down \"Control\", or \"Command\" on a Mac, to "
"select more than one.* string to override or append to user-provided "
"``help_text`` in forms for ManyToMany model fields will not be performed by "
"Django anymore either at the model or forms layer."
msgstr ""

#: ../../internals/deprecation.txt:393
msgid ""
"The ``Model._meta.get_(add|change|delete)_permission`` methods will be "
"removed."
msgstr ""

#: ../../internals/deprecation.txt:396
msgid ""
"The session key ``django_language`` will no longer be read for backwards "
"compatibility."
msgstr ""

#: ../../internals/deprecation.txt:399
msgid ""
"Geographic Sitemaps will be removed "
"(``django.contrib.gis.sitemaps.views.index`` and "
"``django.contrib.gis.sitemaps.views.sitemap``)."
msgstr ""

#: ../../internals/deprecation.txt:403
msgid ""
"``django.utils.html.fix_ampersands``, the ``fix_ampersands`` template filter"
" and ``django.utils.html.clean_html`` will be removed following an "
"accelerated deprecation."
msgstr ""

#: ../../internals/deprecation.txt:409
msgid "1.7"
msgstr ""

#: ../../internals/deprecation.txt:411
msgid ""
"See the :ref:`Django 1.5 release notes<deprecated-features-1.5>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:414
msgid ""
"The module ``django.utils.simplejson`` will be removed. The standard library"
" provides :mod:`json` which should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:417
msgid ""
"The function ``django.utils.itercompat.product`` will be removed. The Python"
" builtin version should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:420
msgid ""
"Auto-correction of INSTALLED_APPS and TEMPLATE_DIRS settings when they are "
"specified as a plain string instead of a tuple will be removed and raise an "
"exception."
msgstr ""

#: ../../internals/deprecation.txt:424
msgid ""
"The ``mimetype`` argument to the ``__init__`` methods of "
":class:`~django.http.HttpResponse`, "
":class:`~django.template.response.SimpleTemplateResponse`, and "
":class:`~django.template.response.TemplateResponse`, will be removed. "
"``content_type`` should be used instead. This also applies to the "
":func:`~django.shortcuts.render_to_response` shortcut and the sitemap views,"
" :func:`~django.contrib.sitemaps.views.index` and "
":func:`~django.contrib.sitemaps.views.sitemap`."
msgstr ""

#: ../../internals/deprecation.txt:433
msgid ""
"When :class:`~django.http.HttpResponse` is instantiated with an iterator, or"
" when :attr:`~django.http.HttpResponse.content` is set to an iterator, that "
"iterator will be immediately consumed."
msgstr ""

#: ../../internals/deprecation.txt:437
msgid ""
"The ``AUTH_PROFILE_MODULE`` setting, and the ``get_profile()`` method on the"
" User model, will be removed."
msgstr ""

#: ../../internals/deprecation.txt:440
msgid ""
"The ``cleanup`` management command will be removed. It's replaced by "
"``clearsessions``."
msgstr ""

#: ../../internals/deprecation.txt:443
msgid "The ``daily_cleanup.py`` script will be removed."
msgstr ""

#: ../../internals/deprecation.txt:445
msgid ""
"The ``depth`` keyword argument will be removed from "
":meth:`~django.db.models.query.QuerySet.select_related`."
msgstr ""

#: ../../internals/deprecation.txt:448
msgid ""
"The undocumented ``get_warnings_state()``/``restore_warnings_state()`` "
"functions from :mod:`django.test.utils` and the ``save_warnings_state()``/ "
"``restore_warnings_state()`` :ref:`django.test.*TestCase <django-testcase-"
"subclasses>` methods are deprecated. Use the "
":class:`warnings.catch_warnings` context manager available starting with "
"Python 2.6 instead."
msgstr ""

#: ../../internals/deprecation.txt:455
msgid ""
"The undocumented ``check_for_test_cookie`` method in "
":class:`~django.contrib.auth.forms.AuthenticationForm` will be removed "
"following an accelerated deprecation. Users subclassing this form should "
"remove calls to this method, and instead ensure that their auth related "
"views are CSRF protected, which ensures that cookies are enabled."
msgstr ""

#: ../../internals/deprecation.txt:461
msgid ""
"The version of :func:`django.contrib.auth.views.password_reset_confirm` that"
" supports base36 encoded user IDs "
"(``django.contrib.auth.views.password_reset_confirm_uidb36``) will be "
"removed. If your site has been running Django 1.6 for more than "
":setting:`PASSWORD_RESET_TIMEOUT_DAYS`, this change will have no effect. If "
"not, then any password reset links generated before you upgrade to Django "
"1.7 won't work after the upgrade."
msgstr ""

#: ../../internals/deprecation.txt:469
msgid ""
"The ``django.utils.encoding.StrAndUnicode`` mix-in will be removed. Define a"
" ``__str__`` method and apply the "
":func:`~django.utils.encoding.python_2_unicode_compatible` decorator "
"instead."
msgstr ""

#: ../../internals/deprecation.txt:476
msgid "1.6"
msgstr ""

#: ../../internals/deprecation.txt:478
msgid ""
"See the :ref:`Django 1.4 release notes<deprecated-features-1.4>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:481
msgid "``django.contrib.databrowse`` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:483
msgid ""
"``django.contrib.localflavor`` will be removed following an accelerated "
"deprecation."
msgstr ""

#: ../../internals/deprecation.txt:486
msgid ""
"``django.contrib.markup`` will be removed following an accelerated "
"deprecation."
msgstr ""

#: ../../internals/deprecation.txt:489
msgid ""
"The compatibility modules ``django.utils.copycompat`` and "
"``django.utils.hashcompat`` as well as the functions "
"``django.utils.itercompat.all`` and ``django.utils.itercompat.any`` will be "
"removed. The Python builtin versions should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:494
msgid ""
"The ``csrf_response_exempt`` and ``csrf_view_exempt`` decorators will be "
"removed. Since 1.4 ``csrf_response_exempt`` has been a no-op (it returns the"
" same function), and ``csrf_view_exempt`` has been a synonym for "
"``django.views.decorators.csrf.csrf_exempt``, which should be used to "
"replace it."
msgstr ""

#: ../../internals/deprecation.txt:500
msgid ""
"The ``django.core.cache.backends.memcached.CacheClass`` backend was split "
"into two in Django 1.3 in order to introduce support for PyLibMC. The "
"historical ``CacheClass`` will be removed in favor of "
"``django.core.cache.backends.memcached.MemcachedCache``."
msgstr ""

#: ../../internals/deprecation.txt:505
msgid ""
"The UK-prefixed objects of ``django.contrib.localflavor.uk`` will only be "
"accessible through their GB-prefixed names (GB is the correct ISO 3166 code "
"for United Kingdom)."
msgstr ""

#: ../../internals/deprecation.txt:509
msgid ""
"The ``IGNORABLE_404_STARTS`` and ``IGNORABLE_404_ENDS`` settings have been "
"superseded by :setting:`IGNORABLE_404_URLS` in the 1.4 release. They will be"
" removed."
msgstr ""

#: ../../internals/deprecation.txt:513
msgid ""
"The form wizard has been refactored to use class-based views with pluggable "
"backends in 1.4. The previous implementation will be removed."
msgstr ""

#: ../../internals/deprecation.txt:516
msgid ""
"Legacy ways of calling :func:`~django.views.decorators.cache.cache_page` "
"will be removed."
msgstr ""

#: ../../internals/deprecation.txt:519
msgid ""
"The backward-compatibility shim to automatically add a debug-false filter to"
" the ``'mail_admins'`` logging handler will be removed. The "
":setting:`LOGGING` setting should include this filter explicitly if it is "
"desired."
msgstr ""

#: ../../internals/deprecation.txt:524
msgid ""
"The builtin truncation functions ``django.utils.text.truncate_words()`` and "
"``django.utils.text.truncate_html_words()`` will be removed in favor of the "
"``django.utils.text.Truncator`` class."
msgstr ""

#: ../../internals/deprecation.txt:528
msgid ""
"The :class:`~django.contrib.gis.geoip.GeoIP` class was moved to "
":mod:`django.contrib.gis.geoip` in 1.4 -- the shortcut in "
":mod:`django.contrib.gis.utils` will be removed."
msgstr ""

#: ../../internals/deprecation.txt:532
msgid ""
"``django.conf.urls.defaults`` will be removed. The functions "
":func:`~django.conf.urls.include`, :func:`~django.conf.urls.patterns` and "
":func:`~django.conf.urls.url` plus :data:`~django.conf.urls.handler404`, "
":data:`~django.conf.urls.handler500`, are now available through "
":mod:`django.conf.urls` ."
msgstr ""

#: ../../internals/deprecation.txt:538
msgid ""
"The functions ``setup_environ()`` and ``execute_manager()`` will be removed "
"from :mod:`django.core.management`. This also means that the old (pre-1.4) "
"style of :file:`manage.py` file will no longer work."
msgstr ""

#: ../../internals/deprecation.txt:542
msgid ""
"Setting the ``is_safe`` and ``needs_autoescape`` flags as attributes of "
"template filter functions will no longer be supported."
msgstr ""

#: ../../internals/deprecation.txt:545
msgid ""
"The attribute ``HttpRequest.raw_post_data`` was renamed to "
"``HttpRequest.body`` in 1.4. The backward compatibility will be removed -- "
"``HttpRequest.raw_post_data`` will no longer work."
msgstr ""

#: ../../internals/deprecation.txt:549
msgid ""
"The value for the ``post_url_continue`` parameter in "
"``ModelAdmin.response_add()`` will have to be either ``None`` (to redirect "
"to the newly created object's edit page) or a pre-formatted url. String "
"formats, such as the previous default ``'../%s/'``, will not be accepted any"
" more."
msgstr ""

#: ../../internals/deprecation.txt:558
msgid "1.5"
msgstr ""

#: ../../internals/deprecation.txt:560
msgid ""
"See the :ref:`Django 1.3 release notes<deprecated-features-1.3>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:563
msgid ""
"Starting Django without a :setting:`SECRET_KEY` will result in an exception "
"rather than a ``DeprecationWarning``. (This is accelerated from the usual "
"deprecation path; see the :doc:`Django 1.4 release notes</releases/1.4>`.)"
msgstr ""

#: ../../internals/deprecation.txt:567
msgid ""
"The ``mod_python`` request handler will be removed. The ``mod_wsgi`` handler"
" should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:570
msgid ""
"The ``template`` attribute on ``django.test.client.Response`` objects "
"returned by the :ref:`test client <test-client>` will be removed. The "
":attr:`~django.test.Response.templates` attribute should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:575
msgid ""
"The ``django.test.simple.DjangoTestRunner`` will be removed. Instead use a "
"unittest-native class.  The features of the "
"``django.test.simple.DjangoTestRunner`` (including fail-fast and Ctrl-C test"
" termination) can currently be provided by the unittest-native "
":class:`~unittest.TextTestRunner`."
msgstr ""

#: ../../internals/deprecation.txt:581
msgid ""
"The undocumented function ``django.contrib.formtools.utils.security_hash`` "
"will be removed, instead use ``django.contrib.formtools.utils.form_hmac``"
msgstr ""

#: ../../internals/deprecation.txt:585
msgid ""
"The function-based generic view modules will be removed in favor of their "
"class-based equivalents, outlined :doc:`here </topics/class-based-"
"views/index>`."
msgstr ""

#: ../../internals/deprecation.txt:589
msgid ""
"The ``django.core.servers.basehttp.AdminMediaHandler`` will be removed.  In "
"its place use ``django.contrib.staticfiles.handlers.StaticFilesHandler``."
msgstr ""

#: ../../internals/deprecation.txt:593
msgid ""
"The template tags library ``adminmedia`` and the template tag ``{% "
"admin_media_prefix %}`` will be removed in favor of the generic static files"
" handling. (This is faster than the usual deprecation path; see the "
":doc:`Django 1.4 release notes</releases/1.4>`.)"
msgstr ""

#: ../../internals/deprecation.txt:598
msgid ""
"The :ttag:`url` and :ttag:`ssi` template tags will be modified so that the "
"first argument to each tag is a template variable, not an implied string. In"
" 1.4, this behavior is provided by a version of the tag in the ``future`` "
"template tag library."
msgstr ""

#: ../../internals/deprecation.txt:603
msgid "The ``reset`` and ``sqlreset`` management commands will be removed."
msgstr ""

#: ../../internals/deprecation.txt:605
msgid ""
"Authentication backends will need to support an inactive user being passed "
"to all methods dealing with permissions. The ``supports_inactive_user`` "
"attribute will no longer be checked and can be removed from custom backends."
msgstr ""

#: ../../internals/deprecation.txt:610
msgid ""
":meth:`~django.contrib.gis.geos.GEOSGeometry.transform` will raise a "
":class:`~django.contrib.gis.geos.GEOSException` when called on a geometry "
"with no SRID value."
msgstr ""

#: ../../internals/deprecation.txt:614
msgid ""
"``django.http.CompatCookie`` will be removed in favor of "
"``django.http.SimpleCookie``."
msgstr ""

#: ../../internals/deprecation.txt:617
msgid ""
"``django.core.context_processors.PermWrapper`` and "
"``django.core.context_processors.PermLookupDict`` will be removed in favor "
"of the corresponding ``django.contrib.auth.context_processors.PermWrapper`` "
"and ``django.contrib.auth.context_processors.PermLookupDict``, respectively."
msgstr ""

#: ../../internals/deprecation.txt:623
msgid ""
"The :setting:`MEDIA_URL` or :setting:`STATIC_URL` settings will be required "
"to end with a trailing slash to ensure there is a consistent way to combine "
"paths in templates."
msgstr ""

#: ../../internals/deprecation.txt:627
msgid ""
"``django.db.models.fields.URLField.verify_exists`` will be removed. The "
"feature was deprecated in 1.3.1 due to intractable security and performance "
"issues and will follow a slightly accelerated deprecation timeframe."
msgstr ""

#: ../../internals/deprecation.txt:632
msgid ""
"Translations located under the so-called *project path* will be ignored "
"during the translation building process performed at runtime. The "
":setting:`LOCALE_PATHS` setting can be used for the same task by including "
"the filesystem path to a ``locale`` directory containing non-app-specific "
"translations in its value."
msgstr ""

#: ../../internals/deprecation.txt:638
msgid ""
"The Markup contrib app will no longer support versions of Python-Markdown "
"library earlier than 2.1. An accelerated timeline was used as this was a "
"security related deprecation."
msgstr ""

#: ../../internals/deprecation.txt:642
msgid ""
"The ``CACHE_BACKEND`` setting will be removed. The cache backend(s) should "
"be specified in the :setting:`CACHES` setting."
msgstr ""

#: ../../internals/deprecation.txt:648
msgid "1.4"
msgstr ""

#: ../../internals/deprecation.txt:650
msgid ""
"See the :ref:`Django 1.2 release notes<deprecated-features-1.2>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:653
msgid ""
"``CsrfResponseMiddleware`` and ``CsrfMiddleware`` will be removed.  Use the "
"``{% csrf_token %}`` template tag inside forms to enable CSRF protection. "
"``CsrfViewMiddleware`` remains and is enabled by default."
msgstr ""

#: ../../internals/deprecation.txt:657
msgid ""
"The old imports for CSRF functionality (``django.contrib.csrf.*``), which "
"moved to core in 1.2, will be removed."
msgstr ""

#: ../../internals/deprecation.txt:660
msgid ""
"The ``django.contrib.gis.db.backend`` module will be removed in favor of the"
" specific backends."
msgstr ""

#: ../../internals/deprecation.txt:663
msgid ""
"``SMTPConnection`` will be removed in favor of a generic Email backend API."
msgstr ""

#: ../../internals/deprecation.txt:665
msgid ""
"The many to many SQL generation functions on the database backends will be "
"removed."
msgstr ""

#: ../../internals/deprecation.txt:668
msgid ""
"The ability to use the ``DATABASE_*`` family of top-level settings to define"
" database connections will be removed."
msgstr ""

#: ../../internals/deprecation.txt:671
msgid ""
"The ability to use shorthand notation to specify a database backend (i.e., "
"``sqlite3`` instead of ``django.db.backends.sqlite3``) will be removed."
msgstr ""

#: ../../internals/deprecation.txt:675
msgid ""
"The ``get_db_prep_save``, ``get_db_prep_value`` and ``get_db_prep_lookup`` "
"methods will have to support multiple databases."
msgstr ""

#: ../../internals/deprecation.txt:678
msgid ""
"The ``Message`` model (in ``django.contrib.auth``), its related manager in "
"the ``User`` model (``user.message_set``), and the associated methods "
"(``user.message_set.create()`` and ``user.get_and_delete_messages()``), will"
" be removed.  The :doc:`messages framework </ref/contrib/messages>` should "
"be used instead. The related ``messages`` variable returned by the auth "
"context processor will also be removed. Note that this means that the admin "
"application will depend on the messages context processor."
msgstr ""

#: ../../internals/deprecation.txt:688
msgid ""
"Authentication backends will need to support the ``obj`` parameter for "
"permission checking. The ``supports_object_permissions`` attribute will no "
"longer be checked and can be removed from custom backends."
msgstr ""

#: ../../internals/deprecation.txt:692
msgid ""
"Authentication backends will need to support the ``AnonymousUser`` class "
"being passed to all methods dealing with permissions.  The "
"``supports_anonymous_user`` variable will no longer be checked and can be "
"removed from custom backends."
msgstr ""

#: ../../internals/deprecation.txt:697
msgid ""
"The ability to specify a callable template loader rather than a ``Loader`` "
"class will be removed, as will the ``load_template_source`` functions that "
"are included with the built in template loaders for backwards compatibility."
msgstr ""

#: ../../internals/deprecation.txt:702
msgid ""
"``django.utils.translation.get_date_formats()`` and "
"``django.utils.translation.get_partial_date_formats()``. These functions "
"will be removed; use the locale-aware ``django.utils.formats.get_format()`` "
"to get the appropriate formats."
msgstr ""

#: ../../internals/deprecation.txt:707
msgid ""
"In ``django.forms.fields``, the constants: ``DEFAULT_DATE_INPUT_FORMATS``, "
"``DEFAULT_TIME_INPUT_FORMATS`` and ``DEFAULT_DATETIME_INPUT_FORMATS`` will "
"be removed. Use ``django.utils.formats.get_format()`` to get the appropriate"
" formats."
msgstr ""

#: ../../internals/deprecation.txt:713
msgid ""
"The ability to use a function-based test runner will be removed, along with "
"the ``django.test.simple.run_tests()`` test runner."
msgstr ""

#: ../../internals/deprecation.txt:716
msgid ""
"The ``views.feed()`` view and ``feeds.Feed`` class in "
"``django.contrib.syndication`` will be removed. The class-based view "
"``views.Feed`` should be used instead."
msgstr ""

#: ../../internals/deprecation.txt:720
msgid ""
"``django.core.context_processors.auth``.  This release will remove the old "
"method in favor of the new method in "
"``django.contrib.auth.context_processors.auth``."
msgstr ""

#: ../../internals/deprecation.txt:724
msgid ""
"The ``postgresql`` database backend will be removed, use the "
"``postgresql_psycopg2`` backend instead."
msgstr ""

#: ../../internals/deprecation.txt:727
msgid ""
"The ``no`` language code will be removed and has been replaced by the ``nb``"
" language code."
msgstr ""

#: ../../internals/deprecation.txt:730
msgid ""
"Authentication backends will need to define the boolean attribute "
"``supports_inactive_user`` until version 1.5 when it will be assumed that "
"all backends will handle inactive users."
msgstr ""

#: ../../internals/deprecation.txt:734
msgid ""
"``django.db.models.fields.XMLField`` will be removed. This was deprecated as"
" part of the 1.3 release. An accelerated deprecation schedule has been used "
"because the field hasn't performed any role beyond that of a simple "
"``TextField`` since the removal of ``oldforms``. All uses of ``XMLField`` "
"can be replaced with ``TextField``."
msgstr ""

#: ../../internals/deprecation.txt:740
msgid ""
"The undocumented ``mixin`` parameter to the ``open()`` method of "
"``django.core.files.storage.Storage`` (and subclasses) will be removed."
msgstr ""

#: ../../internals/deprecation.txt:746
msgid "1.3"
msgstr ""

#: ../../internals/deprecation.txt:748
msgid ""
"See the :ref:`Django 1.1 release notes<deprecated-features-1.1>` for more "
"details on these changes."
msgstr ""

#: ../../internals/deprecation.txt:751
msgid ""
"``AdminSite.root()``.  This method of hooking up the admin URLs will be "
"removed in favor of including ``admin.site.urls``."
msgstr ""

#: ../../internals/deprecation.txt:754
msgid ""
"Authentication backends need to define the boolean attributes "
"``supports_object_permissions`` and ``supports_anonymous_user`` until "
"version 1.4, at which point it will be assumed that all backends will "
"support these options."
msgstr ""

#: ../../internals/git.txt:3
msgid "The Django source code repository"
msgstr ""

#: ../../internals/git.txt:5
msgid ""
"When deploying a Django application into a real production environment, you "
"will almost always want to use `an official packaged release of Django`_."
msgstr ""

#: ../../internals/git.txt:8
msgid ""
"However, if you'd like to try out in-development code from an upcoming "
"release or contribute to the development of Django, you'll need to obtain a "
"clone of Django's source code repository."
msgstr ""

#: ../../internals/git.txt:12
msgid ""
"This document covers the way the code repository is laid out and how to work"
" with and find things in it."
msgstr ""

#: ../../internals/git.txt:18
msgid "High-level overview"
msgstr ""

#: ../../internals/git.txt:20
msgid ""
"The Django source code repository uses `Git`_ to track changes to the code "
"over time, so you'll need a copy of the Git client (a program called "
"``git``) on your computer, and you'll want to familiarize yourself with the "
"basics of how Git works."
msgstr ""

#: ../../internals/git.txt:25
msgid ""
"Git's web site offers downloads for various operating systems. The site also"
" contains vast amounts of `documentation`_."
msgstr ""

#: ../../internals/git.txt:28
msgid ""
"The Django Git repository is located online at `github.com/django/django "
"<https://github.com/django/django>`_. It contains the full source code for "
"all Django releases, which you can browse online."
msgstr ""

#: ../../internals/git.txt:32
msgid "The Git repository includes several `branches`_:"
msgstr ""

#: ../../internals/git.txt:34
msgid ""
"``master`` contains the main in-development code which will become the next "
"packaged release of Django. This is where most development activity is "
"focused."
msgstr ""

#: ../../internals/git.txt:38
msgid ""
"``stable/A.B.x`` are the branches where release preparation work happens. "
"They are also used for support and bugfix releases which occur as necessary "
"after the initial release of a major or minor version."
msgstr ""

#: ../../internals/git.txt:42
msgid ""
"``soc20XX/<project>`` branches were used by students who worked on Django "
"during the 2009 and 2010 Google Summer of Code programs."
msgstr ""

#: ../../internals/git.txt:45
msgid ""
"``attic/<project>`` branches were used to develop major or experimental new "
"features without affecting the rest of Django's code."
msgstr ""

#: ../../internals/git.txt:48
msgid ""
"The Git repository also contains `tags`_. These are the exact revisions from"
" which packaged Django releases were produced, since version 1.0."
msgstr ""

#: ../../internals/git.txt:51
msgid ""
"The source code for the `Djangoproject.com "
"<https://www.djangoproject.com/>`_ web site can be found at "
"`github.com/django/djangoproject.com "
"<https://github.com/django/djangoproject.com>`_."
msgstr ""

#: ../../internals/git.txt:61
msgid "The master branch"
msgstr ""

#: ../../internals/git.txt:63
msgid ""
"If you'd like to try out the in-development code for the next release of "
"Django, or if you'd like to contribute to Django by fixing bugs or "
"developing new features, you'll want to get the code from the master branch."
msgstr ""

#: ../../internals/git.txt:67
msgid ""
"Note that this will get *all* of Django: in addition to the top-level "
"``django`` module containing Python code, you'll also get a copy of Django's"
" documentation, test suite, packaging scripts and other miscellaneous bits. "
"Django's code will be present in your clone as a directory named ``django``."
msgstr ""

#: ../../internals/git.txt:73
msgid ""
"To try out the in-development code with your own applications, simply place "
"the directory containing your clone on your Python import path. Then "
"``import`` statements which look for Django will find the ``django`` module "
"within your clone."
msgstr ""

#: ../../internals/git.txt:78
msgid ""
"If you're going to be working on Django's code (say, to fix a bug or develop"
" a new feature), you can probably stop reading here and move over to "
":doc:`the documentation for contributing to Django "
"</internals/contributing/index>`, which covers things like the preferred "
"coding style and how to generate and submit a patch."
msgstr ""

#: ../../internals/git.txt:85
msgid "Other branches"
msgstr ""

#: ../../internals/git.txt:87
msgid ""
"Django uses branches to prepare for releases of Django (whether they be "
":term:`major <Major release>` or :term:`minor <Minor release>`)."
msgstr ""

#: ../../internals/git.txt:90
msgid ""
"In the past when Django was hosted on Subversion, branches were also used "
"for feature development. Now Django is hosted on Git and feature development"
" is done on contributor's forks, but the Subversion feature branches remain "
"in Git for historical reference."
msgstr ""

#: ../../internals/git.txt:96
msgid "Stable branches"
msgstr ""

#: ../../internals/git.txt:98
msgid ""
"These branches can be found in the repository as ``stable/A.B.x`` branches "
"and will be created right after the first alpha is tagged."
msgstr ""

#: ../../internals/git.txt:101
msgid ""
"For example, immediately after *Django 1.5 alpha 1* was tagged, the branch "
"``stable/1.5.x`` was created and all further work on preparing the code for "
"the final 1.5 release was done there."
msgstr ""

#: ../../internals/git.txt:105
msgid ""
"These branches also provide limited bugfix support for the most recent "
"released version of Django and security support for the two most recently-"
"released versions of Django."
msgstr ""

#: ../../internals/git.txt:109
msgid ""
"For example, after the release of Django 1.5, the branch ``stable/1.5.x`` "
"receives only fixes for security and critical stability bugs, which are "
"eventually released as Django 1.5.1 and so on, ``stable/1.4.x`` receives "
"only security fixes, and ``stable/1.3.x`` no longer receives any updates."
msgstr ""

#: ../../internals/git.txt:114 ../../internals/git.txt:134
msgid "Historical information"
msgstr ""

#: ../../internals/git.txt:116
msgid ""
"This policy for handling ``stable/A.B.x`` branches was adopted starting with"
" the Django 1.5 release cycle."
msgstr ""

#: ../../internals/git.txt:119
msgid ""
"Previously, these branches weren't created until right after the releases "
"and the stabilization work occurred on the main repository branch. Thus, no "
"new features development work for the next release of Django could be "
"committed until the final release happened."
msgstr ""

#: ../../internals/git.txt:124
msgid ""
"For example, shortly after the release of Django 1.3 the branch "
"``stable/1.3.x`` was created. Official support for that release has expired,"
" and so it no longer receives direct maintenance from the Django project. "
"However, that and all other similarly named branches continue to exist and "
"interested community members have occasionally used them to provide "
"unofficial support for old Django releases."
msgstr ""

#: ../../internals/git.txt:132
msgid "Feature-development branches"
msgstr ""

#: ../../internals/git.txt:136
msgid ""
"Since Django moved to Git in 2012, anyone can clone the repository and "
"create their own branches, alleviating the need for official branches in the"
" source code repository."
msgstr ""

#: ../../internals/git.txt:140
msgid ""
"The following section is mostly useful if you're exploring the repository's "
"history, for example if you're trying to understand how some features were "
"designed."
msgstr ""

#: ../../internals/git.txt:144
msgid ""
"Feature-development branches tend by their nature to be temporary. Some "
"produce successful features which are merged back into Django's master to "
"become part of an official release, but others do not; in either case there "
"comes a time when the branch is no longer being actively worked on by any "
"developer. At this point the branch is considered closed."
msgstr ""

#: ../../internals/git.txt:150
msgid ""
"Unfortunately, Django used to be maintained with the Subversion revision "
"control system, that has no standard way of indicating this. As a "
"workaround, branches of Django which are closed and no longer maintained "
"were moved into ``attic``."
msgstr ""

#: ../../internals/git.txt:155
msgid ""
"For reference, the following are branches whose code eventually became part "
"of Django itself, and so are no longer separately maintained:"
msgstr ""

#: ../../internals/git.txt:158
msgid ""
"``boulder-oracle-sprint``: Added support for Oracle databases to Django's "
"object-relational mapper. This has been part of Django since the 1.0 "
"release."
msgstr ""

#: ../../internals/git.txt:162
msgid ""
"``gis``: Added support for geographic/spatial queries to Django's object-"
"relational mapper. This has been part of Django since the 1.0 release, as "
"the bundled application ``django.contrib.gis``."
msgstr ""

#: ../../internals/git.txt:166
msgid ""
"``i18n``: Added :doc:`internationalization support </topics/i18n/index>` to "
"Django. This has been part of Django since the 0.90 release."
msgstr ""

#: ../../internals/git.txt:169
msgid ""
"``magic-removal``: A major refactoring of both the internals and public APIs"
" of Django's object-relational mapper. This has been part of Django since "
"the 0.95 release."
msgstr ""

#: ../../internals/git.txt:173
msgid ""
"``multi-auth``: A refactoring of :doc:`Django's bundled authentication "
"framework </topics/auth/index>` which added support for :ref:`authentication"
" backends <authentication-backends>`. This has been part of Django since the"
" 0.95 release."
msgstr ""

#: ../../internals/git.txt:178
msgid ""
"``new-admin``: A refactoring of :doc:`Django's bundled administrative "
"application </ref/contrib/admin/index>`. This became part of Django as of "
"the 0.91 release, but was superseded by another refactoring (see next "
"listing) prior to the Django 1.0 release."
msgstr ""

#: ../../internals/git.txt:183
msgid ""
"``newforms-admin``: The second refactoring of Django's bundled "
"administrative application. This became part of Django as of the 1.0 "
"release, and is the basis of the current incarnation of "
"``django.contrib.admin``."
msgstr ""

#: ../../internals/git.txt:188
msgid ""
"``queryset-refactor``: A refactoring of the internals of Django's object-"
"relational mapper. This became part of Django as of the 1.0 release."
msgstr ""

#: ../../internals/git.txt:192
msgid ""
"``unicode``: A refactoring of Django's internals to consistently use "
"Unicode-based strings in most places within Django and Django applications. "
"This became part of Django as of the 1.0 release."
msgstr ""

#: ../../internals/git.txt:196
msgid ""
"When Django moved from SVN to Git, the information about branch merges "
"wasn't preserved in the source code repository. This means that the "
"``master`` branch of Django doesn't contain merge commits for the above "
"branches."
msgstr ""

#: ../../internals/git.txt:200
msgid ""
"However, this information is `available as a grafts file`_. You can restore "
"it by putting the following lines in ``.git/info/grafts`` in your local "
"clone::"
msgstr ""

#: ../../internals/git.txt:218
msgid ""
"Additionally, the following branches are closed, but their code was never "
"merged into Django and the features they aimed to implement were never "
"finished:"
msgstr ""

#: ../../internals/git.txt:222
msgid "``full-history``"
msgstr ""

#: ../../internals/git.txt:224
msgid "``generic-auth``"
msgstr ""

#: ../../internals/git.txt:226
msgid "``multiple-db-support``"
msgstr ""

#: ../../internals/git.txt:228
msgid "``per-object-permissions``"
msgstr ""

#: ../../internals/git.txt:230
msgid "``schema-evolution``"
msgstr ""

#: ../../internals/git.txt:232
msgid "``schema-evolution-ng``"
msgstr ""

#: ../../internals/git.txt:234
msgid "``search-api``"
msgstr ""

#: ../../internals/git.txt:236
msgid "``sqlalchemy``"
msgstr ""

#: ../../internals/git.txt:238
msgid "All of the above-mentioned branches now reside in ``attic``."
msgstr ""

#: ../../internals/git.txt:240
msgid ""
"Finally, the repository contains ``soc2009/xxx`` and ``soc2010/xxx`` feature"
" branches, used for Google Summer of Code projects."
msgstr ""

#: ../../internals/git.txt:244
msgid "Tags"
msgstr ""

#: ../../internals/git.txt:246
msgid ""
"Each Django release is tagged and signed by a :ref:`releaser <releasers-"
"list>`."
msgstr ""

#: ../../internals/git.txt:249
msgid "The tags can be found on GitHub's `tags`_ page."
msgstr ""

#: ../../internals/howto-release-django.txt:3
msgid "How is Django Formed?"
msgstr ""

#: ../../internals/howto-release-django.txt:5
msgid "This document explains how to release Django."
msgstr ""

#: ../../internals/howto-release-django.txt:7
msgid ""
"**Please, keep these instructions up-to-date if you make changes!** The "
"point here is to be descriptive, not prescriptive, so feel free to "
"streamline or otherwise make changes, but **update this document "
"accordingly!**"
msgstr ""

#: ../../internals/howto-release-django.txt:12
msgid "Overview"
msgstr ""

#: ../../internals/howto-release-django.txt:14
msgid "There are three types of releases that you might need to make:"
msgstr ""

#: ../../internals/howto-release-django.txt:16
msgid ""
"Security releases: disclosing and fixing a vulnerability. This'll generally "
"involve two or three simultaneous releases -- e.g. 1.5.x, 1.6.x, and, "
"depending on timing, perhaps a 1.7 alpha/beta/rc."
msgstr ""

#: ../../internals/howto-release-django.txt:20
msgid ""
"Regular version releases: either a final release (e.g. 1.5) or a bugfix "
"update (e.g. 1.5.1)."
msgstr ""

#: ../../internals/howto-release-django.txt:23
msgid "Pre-releases: e.g. 1.6 alpha, beta, or rc."
msgstr ""

#: ../../internals/howto-release-django.txt:25
msgid "The short version of the steps involved is:"
msgstr ""

#: ../../internals/howto-release-django.txt:27
msgid ""
"If this is a security release, pre-notify the security distribution list one"
" week before the actual release."
msgstr ""

#: ../../internals/howto-release-django.txt:30
msgid ""
"Proofread the release notes, looking for organization and writing errors. "
"Draft a blog post and email announcement."
msgstr ""

#: ../../internals/howto-release-django.txt:33
msgid "Update version numbers and create the release package(s)."
msgstr ""

#: ../../internals/howto-release-django.txt:35
msgid "Upload the package(s) to the ``djangoproject.com`` server."
msgstr ""

#: ../../internals/howto-release-django.txt:37
msgid "Unless this is a pre-release, add the new version(s) to PyPI."
msgstr ""

#: ../../internals/howto-release-django.txt:39
msgid "Declare the new version in the admin on ``djangoproject.com``."
msgstr ""

#: ../../internals/howto-release-django.txt:41
msgid "Post the blog entry and send out the email announcements."
msgstr ""

#: ../../internals/howto-release-django.txt:43
msgid "Update version numbers post-release."
msgstr ""

#: ../../internals/howto-release-django.txt:45
msgid "There are a lot of details, so please read on."
msgstr ""

#: ../../internals/howto-release-django.txt:48
msgid "Prerequisites"
msgstr ""

#: ../../internals/howto-release-django.txt:50
msgid "You'll need a few things before getting started:"
msgstr ""

#: ../../internals/howto-release-django.txt:52
msgid ""
"A GPG key. If the key you want to use is not your default signing key, "
"you'll need to add ``-u you@example.com`` to every GPG signing command "
"below, where ``you@example.com`` is the email address associated with the "
"key you want to use."
msgstr ""

#: ../../internals/howto-release-django.txt:57
msgid "An install of some required Python packages:"
msgstr ""

#: ../../internals/howto-release-django.txt:63
msgid ""
"Access to Django's record on PyPI. Create a file with your credentials:"
msgstr ""

#: ../../internals/howto-release-django.txt:72
msgid "Access to the ``djangoproject.com`` server to upload files."
msgstr ""

#: ../../internals/howto-release-django.txt:74
msgid "Access to the admin on ``djangoproject.com`` as a \"Site maintainer\"."
msgstr ""

#: ../../internals/howto-release-django.txt:76
msgid "Access to post to ``django-announce``."
msgstr ""

#: ../../internals/howto-release-django.txt:78
msgid ""
"If this is a security release, access to the pre-notification distribution "
"list."
msgstr ""

#: ../../internals/howto-release-django.txt:81
msgid ""
"If this is your first release, you'll need to coordinate with James and/or "
"Jacob to get all these things lined up."
msgstr ""

#: ../../internals/howto-release-django.txt:85
msgid "Pre-release tasks"
msgstr ""

#: ../../internals/howto-release-django.txt:87
msgid ""
"A few items need to be taken care of before even beginning the release "
"process. This stuff starts about a week before the release; most of it can "
"be done any time leading up to the actual release:"
msgstr ""

#: ../../internals/howto-release-django.txt:91
msgid ""
"If this is a security release, send out pre-notification **one week** before"
" the release. We maintain a list of who gets these pre-notification emails "
"in the private ``django-core`` repository. Send the mail to "
"``security@djangoproject.com`` and BCC the pre-notification recipients. This"
" email should be signed by the key you'll use for the release, and should "
"include patches for each issue being fixed."
msgstr ""

#: ../../internals/howto-release-django.txt:98
msgid ""
"As the release approaches, watch Trac to make sure no release blockers are "
"left for the upcoming release."
msgstr ""

#: ../../internals/howto-release-django.txt:101
msgid ""
"Check with the other committers to make sure they don't have any uncommitted"
" changes for the release."
msgstr ""

#: ../../internals/howto-release-django.txt:104
msgid ""
"Proofread the release notes, including looking at the online version to "
"catch any broken links or reST errors, and make sure the release notes "
"contain the correct date."
msgstr ""

#: ../../internals/howto-release-django.txt:108
msgid ""
"Double-check that the release notes mention deprecation timelines for any "
"APIs noted as deprecated, and that they mention any changes in Python "
"version support."
msgstr ""

#: ../../internals/howto-release-django.txt:112
msgid ""
"Double-check that the release notes index has a link to the notes for the "
"new release; this will be in ``docs/releases/index.txt``."
msgstr ""

#: ../../internals/howto-release-django.txt:116
msgid "Preparing for release"
msgstr ""

#: ../../internals/howto-release-django.txt:118
msgid ""
"Write the announcement blog post for the release. You can enter it into the "
"admin at any time and mark it as inactive. Here are a few examples: `example"
" security release announcement`__, `example regular release announcement`__,"
" `example pre-release announcement`__."
msgstr ""

#: ../../internals/howto-release-django.txt:128
msgid "Actually rolling the release"
msgstr ""

#: ../../internals/howto-release-django.txt:130
msgid "OK, this is the fun part, where we actually push out a release!"
msgstr ""

#: ../../internals/howto-release-django.txt:132
msgid ""
"Check `Jenkins`__ is green for the version(s) you're putting out. You "
"probably shouldn't issue a release until it's green."
msgstr ""

#: ../../internals/howto-release-django.txt:137
msgid ""
"A release always begins from a release branch, so you should make sure "
"you're on a stable branch and up-to-date. For example::"
msgstr ""

#: ../../internals/howto-release-django.txt:143
msgid ""
"If this is a security release, merge the appropriate patches from ``django-"
"private``. Rebase these patches as necessary to make each one a simple "
"commit on the release branch rather than a merge commit. To ensure this, "
"merge them with the ``--ff-only`` flag; for example::"
msgstr ""

#: ../../internals/howto-release-django.txt:151
msgid ""
"(This assumes ``security/1.5.x`` is a branch in the ``django-private`` repo "
"containing the necessary security patches for the next release in the 1.5 "
"series.)"
msgstr ""

#: ../../internals/howto-release-django.txt:155
msgid ""
"If git refuses to merge with ``--ff-only``, switch to the security-patch "
"branch and rebase it on the branch you are about to merge it into (``git "
"checkout security/1.5.x; git rebase stable/1.5.x``) and then switch back and"
" do the merge. Make sure the commit message for each security fix explains "
"that the commit is a security fix and that an announcement will follow "
"(`example security commit`__)."
msgstr ""

#: ../../internals/howto-release-django.txt:164
msgid ""
"For a major version release, remove the ``UNDER DEVELOPMENT`` header at the "
"top of the release notes and add the release date on the next line. For a "
"minor release, replace ``*Under Development*`` with the release date. Make "
"this change on all branches where the release notes for a particular version"
" are located."
msgstr ""

#: ../../internals/howto-release-django.txt:170
msgid ""
"Update the version number in ``django/__init__.py`` for the release. Please "
"see `notes on setting the VERSION tuple`_ below for details on ``VERSION``."
msgstr ""

#: ../../internals/howto-release-django.txt:174
msgid ""
"In 1.4, the version number in ``docs/conf.py`` and ``setup.py`` should also "
"be updated. Here's `an example commit updating version numbers`__ for that."
msgstr ""

#: ../../internals/howto-release-django.txt:179
msgid ""
"If this is a pre-release package, update the \"Development Status\" trove "
"classifier in ``setup.py`` to reflect this. Otherwise, make sure the "
"classifier is set to ``Development Status :: 5 - Production/Stable``."
msgstr ""

#: ../../internals/howto-release-django.txt:183
msgid "Tag the release using ``git tag``. For example::"
msgstr ""

#: ../../internals/howto-release-django.txt:187
msgid "You can check your work by running ``git tag --verify <tag>``."
msgstr ""

#: ../../internals/howto-release-django.txt:189
msgid "Push your work, including the tag: ``git push --tags``."
msgstr ""

#: ../../internals/howto-release-django.txt:191
msgid ""
"Make sure you have an absolutely clean tree by running ``git clean -dfx``."
msgstr ""

#: ../../internals/howto-release-django.txt:193
msgid ""
"Run ``make -f extras/Makefile`` to generate the release packages. This will "
"create the release packages in a ``dist/`` directory. Note that we don't "
"publish wheel files for 1.4."
msgstr ""

#: ../../internals/howto-release-django.txt:197
msgid "Generate the hashes of the release packages:"
msgstr ""

#: ../../internals/howto-release-django.txt:206
msgid ""
"Create a \"checksums\" file, ``Django-<<VERSION>>.checksum.txt`` containing "
"the hashes and release information. Start with this template and insert the "
"correct version, date, GPG key ID (from ``gpg --list-keys --keyid-format "
"LONG``), release URL, and checksums::"
msgstr ""

#: ../../internals/howto-release-django.txt:255
msgid ""
"Sign the checksum file (``gpg --clearsign --digest-algo SHA256 "
"Django-<version>.checksum.txt``). This generates a signed document, "
"``Django-<version>.checksum.txt.asc`` which you can then verify using ``gpg "
"--verify Django-<version>.checksum.txt.asc``."
msgstr ""

#: ../../internals/howto-release-django.txt:260
msgid ""
"If you're issuing multiple releases, repeat these steps for each release."
msgstr ""

#: ../../internals/howto-release-django.txt:263
msgid "Making the release(s) available to the public"
msgstr ""

#: ../../internals/howto-release-django.txt:265
msgid "Now you're ready to actually put the release out there. To do this:"
msgstr ""

#: ../../internals/howto-release-django.txt:267
msgid ""
"Upload the release package(s) to the djangoproject server, replacing A.B. "
"with the appropriate version number, e.g. 1.5 for a 1.5.x release:"
msgstr ""

#: ../../internals/howto-release-django.txt:274
msgid "Upload the checksum file(s):"
msgstr ""

#: ../../internals/howto-release-django.txt:280
msgid ""
"Test that the release packages install correctly using ``easy_install`` and "
"``pip``. Here's one method (which requires `virtualenvwrapper`__):"
msgstr ""

#: ../../internals/howto-release-django.txt:298
msgid ""
"This just tests that the tarballs are available (i.e. redirects are up) and "
"that they install correctly, but it'll catch silly mistakes."
msgstr ""

#: ../../internals/howto-release-django.txt:303
msgid ""
"Ask a few people on IRC to verify the checksums by visiting the checksums "
"file (e.g. https://www.djangoproject.com/m/pgp/Django-1.5b1.checksum.txt) "
"and following the instructions in it. For bonus points, they can also unpack"
" the downloaded release tarball and verify that its contents appear to be "
"correct (proper version numbers, no stray ``.pyc`` or other undesirable "
"files)."
msgstr ""

#: ../../internals/howto-release-django.txt:310
msgid "Upload the release packages to PyPI:"
msgstr ""

#: ../../internals/howto-release-django.txt:316
msgid ""
"Go to the `Add release page in the admin`__, enter the new release number "
"exactly as it appears in the name of the tarball (Django-<version>.tar.gz). "
"So for example enter \"1.5.1\" or \"1.4-rc-2\", etc. If the release is part "
"of an LTS branch, mark it so."
msgstr ""

#: ../../internals/howto-release-django.txt:323
msgid "Make the blog post announcing the release live."
msgstr ""

#: ../../internals/howto-release-django.txt:325
msgid ""
"For a new version release (e.g. 1.5, 1.6), update the default stable version"
" of the docs by flipping the ``is_default`` flag to ``True`` on the "
"appropriate ``DocumentRelease`` object in the ``docs.djangoproject.com`` "
"database (this will automatically flip it to ``False`` for all others); you "
"can do this using the site's admin."
msgstr ""

#: ../../internals/howto-release-django.txt:331
msgid ""
"Post the release announcement to the |django-announce|, |django-developers|,"
" and |django-users| mailing lists. This should include links to the "
"announcement blog post."
msgstr ""

#: ../../internals/howto-release-django.txt:336
msgid "Post-release"
msgstr ""

#: ../../internals/howto-release-django.txt:338
msgid "You're almost done! All that's left to do now is:"
msgstr ""

#: ../../internals/howto-release-django.txt:340
msgid ""
"Update the ``VERSION`` tuple in ``django/__init__.py`` again, incrementing "
"to whatever the next expected release will be. For example, after releasing "
"1.5.1, update ``VERSION`` to ``VERSION = (1, 5, 2, 'alpha', 0)``."
msgstr ""

#: ../../internals/howto-release-django.txt:345
msgid ""
"Add the release in `Trac's versions list`_ if necessary (and make it the "
"default if it's a final release). Not all versions are declared; take "
"example on previous releases."
msgstr ""

#: ../../internals/howto-release-django.txt:349
msgid ""
"If this was a security release, update :doc:`/releases/security` with "
"details of the issues addressed."
msgstr ""

#: ../../internals/howto-release-django.txt:355
msgid "New stable branch tasks"
msgstr ""

#: ../../internals/howto-release-django.txt:357
msgid ""
"There are several items to do in the time following a the creation of a new "
"stable branch (often following an alpha release). Some of these tasks don't "
"need to be done by the releaser."
msgstr ""

#: ../../internals/howto-release-django.txt:361
msgid ""
"Create a new ``DocumentRelease`` object in the ``docs.djangoproject.com`` "
"database for the new version's docs, and update the "
"``docs/fixtures/doc_releases.json`` JSON fixture, so people without access "
"to the production DB can still run an up-to-date copy of the docs site."
msgstr ""

#: ../../internals/howto-release-django.txt:366
msgid ""
"Create a stub release note for the new major version. Use the stub from the "
"previous major version or use the previous major version and delete most of "
"the contents leaving only section headings."
msgstr ""

#: ../../internals/howto-release-django.txt:370
msgid ""
"Increase the default PBKDF2 iterations in "
"``django.contrib.auth.hashers.PBKDF2PasswordHasher`` by about 20% (pick a "
"round number). Run the tests, and update the 3 failing hasher tests with the"
" new values. Make sure this gets noted in the release notes (see the 1.8 "
"release notes for an example)."
msgstr ""

#: ../../internals/howto-release-django.txt:376
msgid ""
"Remove features that have reached the end of their deprecation cycle. Each "
"removal should be done in a separate commit for clarity. In the commit "
"message, add a \"refs #XXXX\" to the original ticket where the deprecation "
"began if possible."
msgstr ""

#: ../../internals/howto-release-django.txt:381
msgid ""
"Remove ``.. versionadded::``, ``.. versionadded::``, and ``.. deprecated::``"
" annotations in the documentation from two releases ago. For example, in "
"Django 1.9, notes for 1.7 will be removed."
msgstr ""

#: ../../internals/howto-release-django.txt:386
msgid "Notes on setting the VERSION tuple"
msgstr ""

#: ../../internals/howto-release-django.txt:388
msgid ""
"Django's version reporting is controlled by the ``VERSION`` tuple in "
"``django/__init__.py``. This is a five-element tuple, whose elements are:"
msgstr ""

#: ../../internals/howto-release-django.txt:392
msgid "Major version."
msgstr ""

#: ../../internals/howto-release-django.txt:393
msgid "Minor version."
msgstr ""

#: ../../internals/howto-release-django.txt:394
msgid "Micro version."
msgstr ""

#: ../../internals/howto-release-django.txt:395
msgid "Status -- can be one of \"alpha\", \"beta\", \"rc\" or \"final\"."
msgstr ""

#: ../../internals/howto-release-django.txt:396
msgid ""
"Series number, for alpha/beta/RC packages which run in sequence (allowing, "
"for example, \"beta 1\", \"beta 2\", etc.)."
msgstr ""

#: ../../internals/howto-release-django.txt:399
msgid ""
"For a final release, the status is always \"final\" and the series number is"
" always 0. A series number of 0 with an \"alpha\" status will be reported as"
" \"pre-alpha\"."
msgstr ""

#: ../../internals/howto-release-django.txt:403
msgid "Some examples:"
msgstr ""

#: ../../internals/howto-release-django.txt:405
msgid "``(1, 2, 1, 'final', 0)`` → \"1.2.1\""
msgstr ""

#: ../../internals/howto-release-django.txt:407
msgid "``(1, 3, 0, 'alpha', 0)`` → \"1.3 pre-alpha\""
msgstr ""

#: ../../internals/howto-release-django.txt:409
msgid "``(1, 3, 0, 'beta', 2)`` → \"1.3 beta 2\""
msgstr ""

#: ../../internals/index.txt:2
msgid "Django internals"
msgstr ""

#: ../../internals/index.txt:4
msgid ""
"Documentation for people hacking on Django itself. This is the place to go "
"if you'd like to help improve Django or learn about how Django is managed."
msgstr ""

#: ../../internals/mailing-lists.txt:3
msgid "Mailing lists"
msgstr ""

#: ../../internals/mailing-lists.txt:13
msgid ""
"Django has several official mailing lists on Google Groups that are open to "
"anyone."
msgstr ""

#: ../../internals/mailing-lists.txt:19
msgid "``django-users``"
msgstr ""

#: ../../internals/mailing-lists.txt:21
msgid ""
"This is the right place if you are looking to ask any question regarding the"
" installation, usage, or debugging of Django."
msgstr ""

#: ../../internals/mailing-lists.txt:26
msgid ""
"If it's the first time you send an email to this list, your email must be "
"accepted first so don't worry if :ref:`your message does not appear "
"<message-does-not-appear-on-django-users>` instantly."
msgstr ""

#: ../../internals/mailing-lists.txt:30
msgid "`django-users mailing archive`_"
msgstr ""

#: ../../internals/mailing-lists.txt:31
msgid "`django-users subscription email address`_"
msgstr ""

#: ../../internals/mailing-lists.txt:32
msgid "`django-users posting email`_"
msgstr ""

#: ../../internals/mailing-lists.txt:41
msgid "``django-core-mentorship``"
msgstr ""

#: ../../internals/mailing-lists.txt:43
msgid ""
"The Django Core Mentorship list is intended to provide a welcoming "
"introductory environment for community members interested in contributing to"
" the Django Project."
msgstr ""

#: ../../internals/mailing-lists.txt:47
msgid "`django-core-mentorship mailing archive`_"
msgstr ""

#: ../../internals/mailing-lists.txt:48
msgid "`django-core-mentorship subscription email address`_"
msgstr ""

#: ../../internals/mailing-lists.txt:49
msgid "`django-core-mentorship posting email`_"
msgstr ""

#: ../../internals/mailing-lists.txt:58
msgid "``django-developers``"
msgstr ""

#: ../../internals/mailing-lists.txt:60
msgid ""
"The discussion about the development of Django itself takes place here."
msgstr ""

#: ../../internals/mailing-lists.txt:64
msgid ""
"Please make use of :ref:`django-users mailing list <django-users-mailing-"
"list>` if you want to ask for tech support, doing so in this list is "
"inappropriate."
msgstr ""

#: ../../internals/mailing-lists.txt:68
msgid "`django-developers mailing archive`_"
msgstr ""

#: ../../internals/mailing-lists.txt:69
msgid "`django-developers subscription email address`_"
msgstr ""

#: ../../internals/mailing-lists.txt:70
msgid "`django-developers posting email`_"
msgstr ""

#: ../../internals/mailing-lists.txt:79
msgid "``django-i18n``"
msgstr ""

#: ../../internals/mailing-lists.txt:81
msgid ""
"This is the place to discuss the internationalization and localization of "
"Django's components."
msgstr ""

#: ../../internals/mailing-lists.txt:84
msgid "`django-i18n mailing archive`_"
msgstr ""

#: ../../internals/mailing-lists.txt:85
msgid "`django-i18n subscription email address`_"
msgstr ""

#: ../../internals/mailing-lists.txt:86
msgid "`django-i18n posting email`_"
msgstr ""

#: ../../internals/mailing-lists.txt:95
msgid "``django-announce``"
msgstr ""

#: ../../internals/mailing-lists.txt:97
msgid ""
"A (very) low-traffic list for announcing new releases of Django and "
"important bugfixes."
msgstr ""

#: ../../internals/mailing-lists.txt:100
msgid "`django-announce mailing archive`_"
msgstr ""

#: ../../internals/mailing-lists.txt:101
msgid "`django-announce subscription email address`_"
msgstr ""

#: ../../internals/mailing-lists.txt:102
msgid "`django-announce posting email`_"
msgstr ""

#: ../../internals/mailing-lists.txt:111
msgid "``django-updates``"
msgstr ""

#: ../../internals/mailing-lists.txt:113
msgid ""
"All the ticket updates are mailed automatically to this list, which is "
"tracked by developers and interested community members."
msgstr ""

#: ../../internals/mailing-lists.txt:116
msgid "`django-updates mailing archive`_"
msgstr ""

#: ../../internals/mailing-lists.txt:117
msgid "`django-updates subscription email address`_"
msgstr ""

#: ../../internals/mailing-lists.txt:118
msgid "`django-updates posting email`_"
msgstr ""

#: ../../internals/organization.txt:3
msgid "Organization of the Django Project"
msgstr ""

#: ../../internals/organization.txt:6
msgid "Principles"
msgstr ""

#: ../../internals/organization.txt:8
msgid ""
"The Django Project is managed by a team of volunteers pursuing three goals:"
msgstr ""

#: ../../internals/organization.txt:10
msgid "Driving the development of the Django Web Framework,"
msgstr ""

#: ../../internals/organization.txt:11
msgid "Fostering the ecosystem of Django-related software,"
msgstr ""

#: ../../internals/organization.txt:12
msgid ""
"Leading the Django community in accordance with the values described in the "
"`Django Code of Conduct`_."
msgstr ""

#: ../../internals/organization.txt:15
msgid ""
"The Django Project isn't a legal entity. The `Django Software Foundation`_, "
"a non-profit organization, handles financial and legal matters related to "
"the Django Project. Other than that, the Django Software Foundation lets the"
" Django Project manage the development of the Django framework, its "
"ecosystem and its community."
msgstr ""

#: ../../internals/organization.txt:24
msgid ""
"The Django core team makes the decisions, nominates its new members, and "
"elects its technical board. While it holds decision power in theory, it aims"
" at using it as rarely as possible in practice. Rough consensus should be "
"the norm and formal voting an exception."
msgstr ""

#: ../../internals/organization.txt:32
msgid "Core team"
msgstr ""

#: ../../internals/organization.txt:35 ../../internals/organization.txt:134
msgid "Role"
msgstr ""

#: ../../internals/organization.txt:37
msgid ""
"The core team is the group of trusted volunteers who manage the Django "
"Project. They assume many roles required to achieve the project's goals, "
"especially those that require a high level of trust. They make the decisions"
" that shape the future of the project."
msgstr ""

#: ../../internals/organization.txt:42
msgid ""
"Core team members are expected to act as role models for the community and "
"custodians of the project, on behalf of the community and all those who rely"
" on Django."
msgstr ""

#: ../../internals/organization.txt:46
msgid ""
"They will intervene, where necessary, in online discussions or at official "
"Django events on the rare occasions that a situation arises that requires "
"intervention."
msgstr ""

#: ../../internals/organization.txt:50
msgid ""
"They have authority over the Django Project infrastructure, including the "
"Django Project website itself, the Django GitHub organization and "
"repositories, the Trac bug tracker, the mailing lists, IRC channels, etc."
msgstr ""

#: ../../internals/organization.txt:55 ../../internals/organization.txt:141
msgid "Prerogatives"
msgstr ""

#: ../../internals/organization.txt:57
msgid ""
"Core team members may participate in formal votes, typically to nominate new"
" team members and to elect the technical board."
msgstr ""

#: ../../internals/organization.txt:60
msgid ""
"Some contributions don't require commit access. Depending on the reasons why"
" a contributor joins the team, they may or may not have commit permissions "
"to the Django code repository."
msgstr ""

#: ../../internals/organization.txt:64
msgid ""
"However, should the need arise, any team member may ask for commit access by"
" writing to the core team's mailing list. Access will be granted unless the "
"person withdraws their request or the technical board vetoes the proposal."
msgstr ""

#: ../../internals/organization.txt:68
msgid ""
"Core team members who have commit access are referred to as \"committers\" "
"or \"core developers\"."
msgstr ""

#: ../../internals/organization.txt:71
msgid ""
"Other permissions, such as access to the servers, are granted to those who "
"need them through the same process."
msgstr ""

#: ../../internals/organization.txt:75 ../../internals/organization.txt:163
msgid "Membership"
msgstr ""

#: ../../internals/organization.txt:77
msgid ""
"The core team finds its origins with the :ref:`four people <original-team-"
"list>` who created Django. It has grown to :ref:`a few dozen people <core-"
"team-list>` by co-opting volunteers who demonstrate:"
msgstr ""

#: ../../internals/organization.txt:81
msgid "a good grasp of the philosophy of the Django Project"
msgstr ""

#: ../../internals/organization.txt:82
msgid "a solid track record of being constructive and helpful"
msgstr ""

#: ../../internals/organization.txt:83
msgid "significant contributions to the project's goals, in any form"
msgstr ""

#: ../../internals/organization.txt:84
msgid "willingness to dedicate some time to improving Django"
msgstr ""

#: ../../internals/organization.txt:86
msgid ""
"As the project matures, contributions go way beyond code. Here's an "
"incomplete list of areas where contributions may be considered for joining "
"the core team, in no particular order:"
msgstr ""

#: ../../internals/organization.txt:90
msgid "Working on community management and outreach"
msgstr ""

#: ../../internals/organization.txt:91
msgid "Providing support on the mailing-lists and on IRC"
msgstr ""

#: ../../internals/organization.txt:93
msgid "Writing patches (code, docs, or tests)"
msgstr ""

#: ../../internals/organization.txt:94
msgid "Reviewing patches (code, docs, or tests)"
msgstr ""

#: ../../internals/organization.txt:95
msgid "Participating in design decisions"
msgstr ""

#: ../../internals/organization.txt:96
msgid "Providing expertise in a particular domain (security, i18n, etc.)"
msgstr ""

#: ../../internals/organization.txt:97
msgid "Managing the continuous integration infrastructure"
msgstr ""

#: ../../internals/organization.txt:98
msgid "Managing the servers (website, tracker, documentation, etc.)"
msgstr ""

#: ../../internals/organization.txt:99
msgid ""
"Maintaining related projects (djangoproject.com site, ex-contrib apps, etc.)"
msgstr ""

#: ../../internals/organization.txt:100
msgid "Creating visual designs"
msgstr ""

#: ../../internals/organization.txt:102
msgid "Very few areas are reserved to core team members:"
msgstr ""

#: ../../internals/organization.txt:104
msgid "Reviewing security reports"
msgstr ""

#: ../../internals/organization.txt:105
msgid "Merging patches (code, docs, or tests)"
msgstr ""

#: ../../internals/organization.txt:106
msgid "Packaging releases"
msgstr ""

#: ../../internals/organization.txt:108
msgid ""
"Core team membership acknowledges sustained and valuable efforts that align "
"well with the philosophy and the goals of the Django Project."
msgstr ""

#: ../../internals/organization.txt:111
msgid ""
"It is granted by a four fifths majority of votes cast in a core team vote "
"and no veto by the technical board."
msgstr ""

#: ../../internals/organization.txt:114
msgid ""
"Core team members are always looking for promising contributors, teaching "
"them how the project is managed, and submitting their names to the core "
"team's vote when they're ready. If you would like to join the core team, you"
" can contact a core team member privately or ask for guidance on the "
":ref:`Django Core Mentorship mailing-list <django-core-mentorship-mailing-"
"list>`."
msgstr ""

#: ../../internals/organization.txt:120
msgid ""
"There's no time limit on core team membership. However, in order to provide "
"the general public with a reasonable idea of how many people maintain "
"Django, core team members who have stopped contributing are encouraged to "
"declare themselves as \"past team members\". Those who haven't made any non-"
"trivial contribution in two years may be asked to move themselves to this "
"category, and moved there if they don't respond. Past team members lose "
"their privileges such as voting rights and commit access."
msgstr ""

#: ../../internals/organization.txt:131 ../../internals/roles.txt:8
msgid "Technical board"
msgstr ""

#: ../../internals/organization.txt:136
msgid ""
"The technical board is a group of experienced and active committers who "
"steer technical choices. Their main concern is to maintain the quality and "
"stability of the Django Web Framework."
msgstr ""

#: ../../internals/organization.txt:143
msgid "The technical board holds two prerogatives:"
msgstr ""

#: ../../internals/organization.txt:145
msgid ""
"Making major technical decisions when no consensus is found otherwise. This "
"happens on the |django-developers| mailing-list."
msgstr ""

#: ../../internals/organization.txt:147
msgid ""
"Veto a grant of commit access or remove commit access. This happens on the "
"django-core mailing-list."
msgstr ""

#: ../../internals/organization.txt:150
msgid ""
"In both cases, the technical board is a last resort. In these matters, it "
"fulfills a similar function to the former Benevolent Dictators For Life."
msgstr ""

#: ../../internals/organization.txt:153
msgid ""
"When the board wants to exercise one of these prerogatives, it must hold a "
"private, simple majority vote on the resolution. The quorum is the full "
"committee — each member must cast a vote or abstain explicitly. Then the "
"board communicates the result, and if possible the reasons, on the "
"appropriate mailing-list. There's no appeal for such decisions."
msgstr ""

#: ../../internals/organization.txt:159
msgid ""
"In addition, at its discretion, the technical board may act in an advisory "
"capacity on non-technical decisions."
msgstr ""

#: ../../internals/organization.txt:165
msgid ""
"The technical board is an elected group of five committers. They're expected"
" to be experienced but there's no formal seniority requirement. Its current "
"composition is published :ref:`here <technical-board-list>`."
msgstr ""

#: ../../internals/organization.txt:169
msgid ""
"A new board is elected after each major release of Django. The election "
"process is managed by a returns officer nominated by the outgoing technical "
"board. The election process works as follows:"
msgstr ""

#: ../../internals/organization.txt:173
msgid ""
"Candidates advertise their application for the technical board to the team."
msgstr ""

#: ../../internals/organization.txt:175
msgid ""
"They must be committers already. There's no term limit for technical board "
"members."
msgstr ""

#: ../../internals/organization.txt:178
msgid ""
"Each team member can vote for zero to five people among the candidates. "
"Candidates are ranked by the total number of votes they received."
msgstr ""

#: ../../internals/organization.txt:181
msgid "In case of a tie, the person who joined the core team earlier wins."
msgstr ""

#: ../../internals/organization.txt:183
msgid ""
"Both the application and the voting period last between one and two weeks, "
"at the outgoing board's discretion."
msgstr ""

#: ../../internals/organization.txt:187
msgid "Changing the organization"
msgstr ""

#: ../../internals/organization.txt:189
msgid ""
"Changes to this document require a four fifths majority of votes cast in a "
"core team vote and no veto by the technical board."
msgstr ""

#: ../../internals/release-process.txt:3
msgid "Django's release process"
msgstr ""

#: ../../internals/release-process.txt:8
msgid "Official releases"
msgstr ""

#: ../../internals/release-process.txt:10
msgid "Since version 1.0, Django's release numbering works as follows:"
msgstr ""

#: ../../internals/release-process.txt:12
msgid "Versions are numbered in the form ``A.B`` or ``A.B.C``."
msgstr ""

#: ../../internals/release-process.txt:14
msgid ""
"``A.B`` is the *major version* number. Each version will be mostly backwards"
" compatible with the previous release. Exceptions to this rule will be "
"listed in the release notes. When ``B == 9``, the next major release will be"
" ``A+1.0``. For example, Django 2.0 will follow Django 1.9. There won't be "
"anything special about \"dot zero\" releases."
msgstr ""

#: ../../internals/release-process.txt:20
msgid ""
"``C`` is the *minor version* number, which is incremented for bug and "
"security fixes. A new minor release will be 100% backwards-compatible with "
"the previous minor release. The only exception is when a security or data "
"loss issue can't be fixed without breaking backwards-compatibility. If this "
"happens, the release notes will provide detailed upgrade instructions."
msgstr ""

#: ../../internals/release-process.txt:26
msgid ""
"Before a new major release, we'll make alpha, beta, and release candidate "
"releases. These are of the form ``A.B alpha/beta/rc N``, which means the "
"``Nth`` alpha/beta/release candidate of version ``A.B``."
msgstr ""

#: ../../internals/release-process.txt:30
msgid ""
"In git, each Django release will have a tag indicating its version number, "
"signed with the Django release key. Additionally, each release series has "
"its own branch, called ``stable/A.B.x``, and bugfix/security releases will "
"be issued from those branches."
msgstr ""

#: ../../internals/release-process.txt:35
msgid ""
"For more information about how the Django project issues new releases for "
"security purposes, please see :doc:`our security policies <security>`."
msgstr ""

#: ../../internals/release-process.txt:39
msgid "Major release"
msgstr ""

#: ../../internals/release-process.txt:41
msgid ""
"Major releases (A.B, A.B+1, etc.) will happen roughly every nine months -- "
"see `release process`_, below for details. These releases will contain new "
"features, improvements to existing features, and such."
msgstr ""

#: ../../internals/release-process.txt:47
msgid ""
"A major release may deprecate certain features from previous releases. If a "
"feature is deprecated in version ``A.B``, it will continue to work in "
"versions ``A.B`` and  ``A.B+1`` but raise warnings. It will be removed in "
"version ``A.B+2``."
msgstr ""

#: ../../internals/release-process.txt:52
msgid ""
"So, for example, if we decided to start the deprecation of a function in "
"Django 1.7:"
msgstr ""

#: ../../internals/release-process.txt:55
msgid ""
"Django 1.7 will contain a backwards-compatible replica of the function which"
" will raise a ``RemovedInDjango19Warning``. This warning is silent by "
"default; you can turn on display of these warnings with the ``-Wd`` option "
"of Python."
msgstr ""

#: ../../internals/release-process.txt:60
msgid ""
"Django 1.8 will still contain the backwards-compatible replica. This warning"
" becomes *loud* by default, and will likely be quite annoying."
msgstr ""

#: ../../internals/release-process.txt:63
msgid "Django 1.9 will remove the feature outright."
msgstr ""

#: ../../internals/release-process.txt:64
msgid "Minor release"
msgstr ""

#: ../../internals/release-process.txt:66
msgid ""
"Minor releases (A.B.C, etc.) will be issued as needed, often to fix security"
" issues."
msgstr ""

#: ../../internals/release-process.txt:69
msgid ""
"These releases will be 100% compatible with the associated major release, "
"unless this is impossible for security reasons or to prevent data loss. So "
"the answer to \"should I upgrade to the latest minor release?\" will always "
"be \"yes.\""
msgstr ""

#: ../../internals/release-process.txt:77 ../../internals/security.txt:48
msgid "Supported versions"
msgstr ""

#: ../../internals/release-process.txt:79
msgid ""
"At any moment in time, Django's developer team will support a set of "
"releases to varying levels. See `the supported versions section "
"<https://www.djangoproject.com/download/#supported-versions>`_ of the "
"download page for the current state of support for each version."
msgstr ""

#: ../../internals/release-process.txt:84
msgid ""
"The current development master will get new features and bug fixes requiring"
" major refactoring."
msgstr ""

#: ../../internals/release-process.txt:87
msgid ""
"Patches applied to the master branch must also be applied to the last major "
"release, to be released as the next minor release, when they fix critical "
"problems:"
msgstr ""

#: ../../internals/release-process.txt:91
msgid "Security issues."
msgstr ""

#: ../../internals/release-process.txt:93
msgid "Data loss bugs."
msgstr ""

#: ../../internals/release-process.txt:95
msgid "Crashing bugs."
msgstr ""

#: ../../internals/release-process.txt:97
msgid "Major functionality bugs in newly-introduced features."
msgstr ""

#: ../../internals/release-process.txt:99
msgid ""
"The rule of thumb is that fixes will be backported to the last major release"
" for bugs that would have prevented a release in the first place (release "
"blockers)."
msgstr ""

#: ../../internals/release-process.txt:103
msgid ""
"Security fixes and data loss bugs will be applied to the current master, the"
" last two major releases, and the current :ref:`LTS release <lts-releases>`."
msgstr ""

#: ../../internals/release-process.txt:106
msgid ""
"Documentation fixes generally will be more freely backported to the last "
"release branch. That's because it's highly advantageous to have the docs for"
" the last release be up-to-date and correct, and the risk of introducing "
"regressions is much less of a concern."
msgstr ""

#: ../../internals/release-process.txt:111
msgid ""
"As a concrete example, consider a moment in time halfway between the release"
" of Django 1.7 and 1.8. At this point in time:"
msgstr ""

#: ../../internals/release-process.txt:114
msgid ""
"Features will be added to development master, to be released as Django 1.8."
msgstr ""

#: ../../internals/release-process.txt:116
msgid ""
"Critical bug fixes will be applied to the ``stable/1.7.x`` branch, and "
"released as 1.7.1, 1.7.2, etc."
msgstr ""

#: ../../internals/release-process.txt:119
msgid ""
"Security fixes and bug fixes for data loss issues will be applied to "
"``master`` and to the ``stable/1.7.x``, ``stable/1.6.x``, and "
"``stable/1.4.x`` (LTS) branches. They will trigger the release of ``1.7.1``,"
" ``1.6.1``, ``1.4.1``, etc."
msgstr ""

#: ../../internals/release-process.txt:124
msgid ""
"Documentation fixes will be applied to master, and, if easily backported, to"
" the ``1.7.x`` and ``1.6.x`` branches."
msgstr ""

#: ../../internals/release-process.txt:130
msgid "Long-term support (LTS) releases"
msgstr ""

#: ../../internals/release-process.txt:132
msgid ""
"Additionally, the Django team will occasionally designate certain releases "
"to be \"Long-term support\" (LTS) releases. LTS releases will get security "
"and data loss fixes applied for a guaranteed period of time, typically 3+ "
"years, regardless of the pace of releases afterwards."
msgstr ""

#: ../../internals/release-process.txt:137
msgid ""
"See `the download page`_ for the releases that have been designated for "
"long-term support."
msgstr ""

#: ../../internals/release-process.txt:145
msgid "Release process"
msgstr ""

#: ../../internals/release-process.txt:147
msgid ""
"Django uses a time-based release schedule, with major (i.e. 1.8, 1.9, 2.0, "
"etc.) releases every nine months, or more, depending on features."
msgstr ""

#: ../../internals/release-process.txt:150
msgid ""
"After each release, and after a suitable cooling-off period of a few weeks, "
"core developers will examine the landscape and announce a timeline for the "
"next release. Most releases will be scheduled in the 6-9 month range, but if"
" we have bigger features to develop we might schedule a longer period to "
"allow for more ambitious work."
msgstr ""

#: ../../internals/release-process.txt:157
msgid "Release cycle"
msgstr ""

#: ../../internals/release-process.txt:159
msgid ""
"Each release cycle will be split into three periods, each lasting roughly "
"one-third of the cycle:"
msgstr ""

#: ../../internals/release-process.txt:163
msgid "Phase one: feature proposal"
msgstr ""

#: ../../internals/release-process.txt:165
msgid ""
"The first phase of the release process will be devoted to figuring out what "
"features to include in the next version. This should include a good deal of "
"preliminary work on those features -- working code trumps grand design."
msgstr ""

#: ../../internals/release-process.txt:169
msgid ""
"At the end of part one, the core developers will propose a feature list for "
"the upcoming release. This will be broken into:"
msgstr ""

#: ../../internals/release-process.txt:172
msgid ""
"\"Must-have\": critical features that will delay the release if not finished"
msgstr ""

#: ../../internals/release-process.txt:173
msgid ""
"\"Maybe\" features: that will be pushed to the next release if not finished"
msgstr ""

#: ../../internals/release-process.txt:174
msgid "\"Not going to happen\": features explicitly deferred to a later release."
msgstr ""

#: ../../internals/release-process.txt:176
msgid ""
"Anything that hasn't got at least some work done by the end of the first "
"third isn't eligible for the next release; a design alone isn't sufficient."
msgstr ""

#: ../../internals/release-process.txt:180
msgid "Phase two: development"
msgstr ""

#: ../../internals/release-process.txt:182
msgid ""
"The second third of the release schedule is the \"heads-down\" working "
"period. Using the roadmap produced at the end of phase one, we'll all work "
"very hard to get everything on it done."
msgstr ""

#: ../../internals/release-process.txt:186
msgid ""
"Longer release schedules will likely spend more than a third of the time in "
"this phase."
msgstr ""

#: ../../internals/release-process.txt:189
msgid ""
"At the end of phase two, any unfinished \"maybe\" features will be postponed"
" until the next release. Though it shouldn't happen, any \"must-have\" "
"features will extend phase two, and thus postpone the final release."
msgstr ""

#: ../../internals/release-process.txt:193
msgid ""
"Phase two will culminate with an alpha release. At this point, the "
"``stable/A.B.x`` branch will be forked from ``master``."
msgstr ""

#: ../../internals/release-process.txt:197
msgid "Phase three: bugfixes"
msgstr ""

#: ../../internals/release-process.txt:199
msgid ""
"The last third of a release cycle is spent fixing bugs -- no new features "
"will be accepted during this time. We'll try to release a beta release after"
" one month and a release candidate after two months."
msgstr ""

#: ../../internals/release-process.txt:203
msgid ""
"The release candidate marks the string freeze, and it happens at least two "
"weeks before the final release. After this point, new translatable strings "
"must not be added."
msgstr ""

#: ../../internals/release-process.txt:207
msgid ""
"During this phase, committers will be more and more conservative with "
"backports, to avoid introducing regressions. After the release candidate, "
"only release blockers and documentation fixes should be backported."
msgstr ""

#: ../../internals/release-process.txt:211
msgid ""
"In parallel to this phase, ``master`` can receive new features, to be "
"released in the ``A.B+1`` cycle."
msgstr ""

#: ../../internals/release-process.txt:215
msgid "Bug-fix releases"
msgstr ""

#: ../../internals/release-process.txt:217
msgid ""
"After a major release (e.g. A.B), the previous release will go into bugfix "
"mode."
msgstr ""

#: ../../internals/release-process.txt:220
msgid ""
"The branch for the previous major release (e.g. ``stable/A.B-1.x``) will "
"include bugfixes. Critical bugs fixed on master must *also* be fixed on the "
"bugfix branch; this means that commits need to cleanly separate bug fixes "
"from feature additions. The developer who commits a fix to master will be "
"responsible for also applying the fix to the current bugfix branch."
msgstr ""

#: ../../internals/roles.txt:3
msgid "Roles"
msgstr ""

#: ../../internals/roles.txt:10
msgid "The technical board for the 1.8 release cycle is:"
msgstr ""

#: ../../internals/roles.txt:12 ../../internals/roles.txt:68
msgid "Aymeric Augustin"
msgstr ""

#: ../../internals/roles.txt:13
msgid "Andrew Godwin"
msgstr ""

#: ../../internals/roles.txt:14 ../../internals/roles.txt:43
msgid "Russell Keith-Magee"
msgstr ""

#: ../../internals/roles.txt:15 ../../internals/roles.txt:70
msgid "Jannis Leidel"
msgstr ""

#: ../../internals/roles.txt:16 ../../internals/roles.txt:45
msgid "Carl Meyer"
msgstr ""

#: ../../internals/roles.txt:21
msgid "Committers"
msgstr ""

#: ../../internals/roles.txt:23
msgid ""
"Most :ref:`core team <core-team>` members have commit access. They're called"
" \"committers\" or \"core developers\"."
msgstr ""

#: ../../internals/roles.txt:26
msgid ""
"Being part of the core team is a pre-requisite for having commit access."
msgstr ""

#: ../../internals/roles.txt:31
msgid "Security team"
msgstr ""

#: ../../internals/roles.txt:33
msgid ""
"The security team is responsible for :doc:`Django's security policies "
"</internals/security>`. It handles private reports of security issues."
msgstr ""

#: ../../internals/roles.txt:36
msgid "The current security team members are:"
msgstr ""

#: ../../internals/roles.txt:38 ../../internals/roles.txt:67
#: ../../internals/team.txt:306
msgid "Florian Apolloner"
msgstr ""

#: ../../internals/roles.txt:39 ../../internals/roles.txt:58
msgid "James Bennett"
msgstr ""

#: ../../internals/roles.txt:40 ../../internals/team.txt:320
msgid "Jeremy Dunck"
msgstr ""

#: ../../internals/roles.txt:41
msgid "Adrian Holovaty"
msgstr ""

#: ../../internals/roles.txt:42 ../../internals/roles.txt:59
msgid "Jacob Kaplan-Moss"
msgstr ""

#: ../../internals/roles.txt:44 ../../internals/team.txt:245
msgid "Paul McMillan"
msgstr ""

#: ../../internals/roles.txt:46 ../../internals/team.txt:375
msgid "Donald Stufft"
msgstr ""

#: ../../internals/roles.txt:51
msgid "Releasers"
msgstr ""

#: ../../internals/roles.txt:53
msgid ""
"Releasers take care of :doc:`building Django releases </internals/howto-"
"release-django>`."
msgstr ""

#: ../../internals/roles.txt:56
msgid "The current releasers are:"
msgstr ""

#: ../../internals/roles.txt:62
msgid "Ops team"
msgstr ""

#: ../../internals/roles.txt:64
msgid ""
"The ops team maintains Django's infrastructure like the Django Project "
"server, Trac instance, and continuous integration infrastructure."
msgstr ""

#: ../../internals/roles.txt:69 ../../internals/team.txt:220
msgid "Tim Graham"
msgstr ""

#: ../../internals/security.txt:5
msgid "Django's security policies"
msgstr ""

#: ../../internals/security.txt:7
msgid ""
"Django's development team is strongly committed to responsible reporting and"
" disclosure of security-related issues. As such, we've adopted and follow a "
"set of policies which conform to that ideal and are geared toward allowing "
"us to deliver timely security updates to the official distribution of "
"Django, as well as to third-party distributions."
msgstr ""

#: ../../internals/security.txt:17
msgid "Reporting security issues"
msgstr ""

#: ../../internals/security.txt:19
msgid ""
"**Short version: please report security issues by emailing "
"security@djangoproject.com**."
msgstr ""

#: ../../internals/security.txt:22
msgid ""
"Most normal bugs in Django are reported to `our public Trac instance`_, but "
"due to the sensitive nature of security issues, we ask that they **not** be "
"publicly reported in this fashion."
msgstr ""

#: ../../internals/security.txt:26
msgid ""
"Instead, if you believe you've found something in Django which has security "
"implications, please send a description of the issue via email to "
"``security@djangoproject.com``. Mail sent to that address reaches a "
":ref:`subset of the core team <security-team-list>`, who can forward "
"security issues into the private committers' mailing list for broader "
"discussion if needed."
msgstr ""

#: ../../internals/security.txt:33
msgid ""
"Once you've submitted an issue via email, you should receive an "
"acknowledgment from a member of the security team within 48 hours, and "
"depending on the action to be taken, you may receive further followup "
"emails."
msgstr ""

#: ../../internals/security.txt:39
msgid ""
"If you want to send an encrypted email (*optional*), the public key ID for "
"``security@djangoproject.com`` is ``0xfcb84b8d1d17f80b``, and this public "
"key is available from most commonly-used keyservers."
msgstr ""

#: ../../internals/security.txt:50
msgid ""
"At any given time, the Django team provides official security support for "
"several versions of Django:"
msgstr ""

#: ../../internals/security.txt:53
msgid ""
"The `master development branch`_, hosted on GitHub, which will become the "
"next release of Django, receives security support."
msgstr ""

#: ../../internals/security.txt:56
msgid ""
"The two most recent Django release series receive security support. For "
"example, during the development cycle leading to the release of Django 1.5, "
"support will be provided for Django 1.4 and Django 1.3. Upon the release of "
"Django 1.5, Django 1.3's security support will end."
msgstr ""

#: ../../internals/security.txt:62
msgid ""
":ref:`Long-term support (LTS) releases <lts-releases>` will receive security"
" updates for a specified period."
msgstr ""

#: ../../internals/security.txt:65
msgid ""
"When new releases are issued for security reasons, the accompanying notice "
"will include a list of affected versions. This list is comprised solely of "
"*supported* versions of Django: older versions may also be affected, but we "
"do not investigate to determine that, and will not issue patches or new "
"releases for those versions."
msgstr ""

#: ../../internals/security.txt:76
msgid "How Django discloses security issues"
msgstr ""

#: ../../internals/security.txt:78
msgid ""
"Our process for taking a security issue from private discussion to public "
"disclosure involves multiple steps."
msgstr ""

#: ../../internals/security.txt:81
msgid ""
"Approximately one week before full public disclosure, we will send advance "
"notification of the issue to a list of people and organizations, primarily "
"composed of operating-system vendors and other distributors of Django. This "
"notification will consist of an email message, signed with the Django "
"release key, containing:"
msgstr ""

#: ../../internals/security.txt:87
msgid "A full description of the issue and the affected versions of Django."
msgstr ""

#: ../../internals/security.txt:89
msgid "The steps we will be taking to remedy the issue."
msgstr ""

#: ../../internals/security.txt:91
msgid "The patch(es), if any, that will be applied to Django."
msgstr ""

#: ../../internals/security.txt:93
msgid ""
"The date on which the Django team will apply these patches, issue new "
"releases and publicly disclose the issue."
msgstr ""

#: ../../internals/security.txt:96
msgid ""
"Simultaneously, the reporter of the issue will receive notification of the "
"date on which we plan to take the issue public."
msgstr ""

#: ../../internals/security.txt:99
msgid "On the day of disclosure, we will take the following steps:"
msgstr ""

#: ../../internals/security.txt:101
msgid ""
"Apply the relevant patch(es) to Django's codebase. The commit messages for "
"these patches will indicate that they are for security issues, but will not "
"describe the issue in any detail; instead, they will warn of upcoming "
"disclosure."
msgstr ""

#: ../../internals/security.txt:106
msgid ""
"Issue the relevant release(s), by placing new packages on `the Python "
"Package Index`_ and on the Django website, and tagging the new release(s) in"
" Django's git repository."
msgstr ""

#: ../../internals/security.txt:110
msgid ""
"Post a public entry on `the official Django development blog`_, describing "
"the issue and its resolution in detail, pointing to the relevant patches and"
" new releases, and crediting the reporter of the issue (if the reporter "
"wishes to be publicly identified)."
msgstr ""

#: ../../internals/security.txt:115
msgid ""
"Post a notice to the |django-announce| mailing list that links to the blog "
"post."
msgstr ""

#: ../../internals/security.txt:121
msgid ""
"If a reported issue is believed to be particularly time-sensitive -- due to "
"a known exploit in the wild, for example -- the time between advance "
"notification and public disclosure may be shortened considerably."
msgstr ""

#: ../../internals/security.txt:126
msgid ""
"Additionally, if we have reason to believe that an issue reported to us "
"affects other frameworks or tools in the Python/web ecosystem, we may "
"privately contact and discuss those issues with the appropriate maintainers,"
" and coordinate our own disclosure and resolution with theirs."
msgstr ""

#: ../../internals/security.txt:132
msgid ""
"The Django team also maintains an :doc:`archive of security issues disclosed"
" in Django</releases/security>`."
msgstr ""

#: ../../internals/security.txt:139
msgid "Who receives advance notification"
msgstr ""

#: ../../internals/security.txt:141
msgid ""
"The full list of people and organizations who receive advance notification "
"of security issues is not and will not be made public."
msgstr ""

#: ../../internals/security.txt:144
msgid ""
"We also aim to keep this list as small as effectively possible, in order to "
"better manage the flow of confidential information prior to disclosure. As "
"such, our notification list is *not* simply a list of users of Django, and "
"merely being a user of Django is not sufficient reason to be placed on the "
"notification list."
msgstr ""

#: ../../internals/security.txt:150
msgid ""
"In broad terms, recipients of security notifications fall into three groups:"
msgstr ""

#: ../../internals/security.txt:153
msgid ""
"Operating-system vendors and other distributors of Django who provide a "
"suitably-generic (i.e., *not* an individual's personal email address) "
"contact address for reporting issues with their Django package, or for "
"general security reporting. In either case, such addresses **must not** "
"forward to public mailing lists or bug trackers. Addresses which forward to "
"the private email of an individual maintainer or security-response contact "
"are acceptable, although private security trackers or security-response "
"groups are strongly preferred."
msgstr ""

#: ../../internals/security.txt:163
msgid ""
"On a case-by-case basis, individual package maintainers who have "
"demonstrated a commitment to responding to and responsibly acting on these "
"notifications."
msgstr ""

#: ../../internals/security.txt:167
msgid ""
"On a case-by-case basis, other entities who, in the judgment of the Django "
"development team, need to be made aware of a pending security issue. "
"Typically, membership in this group will consist of some of the largest "
"and/or most likely to be severely impacted known users or distributors of "
"Django, and will require a demonstrated ability to responsibly receive, keep"
" confidential and act on these notifications."
msgstr ""

#: ../../internals/security.txt:175
msgid ""
"Additionally, a maximum of six days prior to disclosure, notification will "
"be sent to the ``distros@vs.openwall.org`` mailing list, whose membership "
"includes representatives of most major open-source operating system vendors."
msgstr ""

#: ../../internals/security.txt:181
msgid "Requesting notifications"
msgstr ""

#: ../../internals/security.txt:183
msgid ""
"If you believe that you, or an organization you are authorized to represent,"
" fall into one of the groups listed above, you can ask to be added to "
"Django's notification list by emailing ``security@djangoproject.com``. "
"Please use the subject line \"Security notification request\"."
msgstr ""

#: ../../internals/security.txt:189
msgid "Your request **must** include the following information:"
msgstr ""

#: ../../internals/security.txt:191
msgid ""
"Your full, real name and the name of the organization you represent, if "
"applicable, as well as your role within that organization."
msgstr ""

#: ../../internals/security.txt:194
msgid ""
"A detailed explanation of how you or your organization fit at least one set "
"of criteria listed above."
msgstr ""

#: ../../internals/security.txt:197
msgid ""
"A detailed explanation of why you are requesting security notifications. "
"Again, please keep in mind that this is *not* simply a list for users of "
"Django, and the overwhelming majority of users of Django should not request "
"notifications and will not be added to our notification list if they do."
msgstr ""

#: ../../internals/security.txt:203
msgid ""
"The email address you would like to have added to our notification list."
msgstr ""

#: ../../internals/security.txt:206
msgid ""
"An explanation of who will be receiving/reviewing mail sent to that address,"
" as well as information regarding any automated actions that will be taken "
"(i.e., filing of a confidential issue in a bug tracker)."
msgstr ""

#: ../../internals/security.txt:211
msgid ""
"For individuals, the ID of a public key associated with your address which "
"can be used to verify email received from you and encrypt email sent to you,"
" as needed."
msgstr ""

#: ../../internals/security.txt:215
msgid ""
"Once submitted, your request will be considered by the Django development "
"team; you will receive a reply notifying you of the result of your request "
"within 30 days."
msgstr ""

#: ../../internals/security.txt:219
msgid ""
"Please also bear in mind that for any individual or organization, receiving "
"security notifications is a privilege granted at the sole discretion of the "
"Django development team, and that this privilege can be revoked at any time,"
" with or without explanation."
msgstr ""

#: ../../internals/security.txt:224
msgid ""
"If you are added to the notification list, security-related emails will be "
"sent to you by Django's release team, and all notification emails will be "
"signed with a key authorized to issue Django releases. The list of "
"authorized keys is in `the Django releasers file`_."
msgstr ""

#: ../../internals/team.txt:3
msgid "Django team"
msgstr ""

#: ../../internals/team.txt:8
msgid "The original team"
msgstr ""

#: ../../internals/team.txt:10
msgid ""
"Django originally started at World Online, the Web department of the "
"`Lawrence Journal-World`_ of Lawrence, Kansas, USA."
msgstr ""

#: ../../internals/team.txt:23
msgid "`Adrian Holovaty`_"
msgstr ""

#: ../../internals/team.txt:14
msgid ""
"Adrian is a Web developer with a background in journalism. He's known in "
"journalism circles as one of the pioneers of \"journalism via computer "
"programming\", and in technical circles as \"the guy who invented Django.\""
msgstr ""

#: ../../internals/team.txt:18
msgid ""
"He was lead developer at World Online for 2.5 years, during which time "
"Django was developed and implemented on World Online's sites. He was the "
"leader and founder of EveryBlock_, a \"news feed for your block.\" He now "
"develops Soundslice_."
msgstr ""

#: ../../internals/team.txt:23
msgid "Adrian lives in Chicago, USA."
msgstr ""

#: ../../internals/team.txt:32
msgid "`Simon Willison`_"
msgstr ""

#: ../../internals/team.txt:26
msgid ""
"Simon is a well-respected Web developer from England. He had a one-year "
"internship at World Online, during which time he and Adrian developed Django"
" from scratch. The most enthusiastic Brit you'll ever meet, he's passionate "
"about best practices in Web development and maintains a well-read `web-"
"development blog`_."
msgstr ""

#: ../../internals/team.txt:32
msgid "Simon lives in Brighton, England."
msgstr ""

#: ../../internals/team.txt:38
msgid "`Jacob Kaplan-Moss`_"
msgstr ""

#: ../../internals/team.txt:35
msgid ""
"Jacob is Director of Platform Security at Heroku_. He worked at World Online"
" for four years, where he helped open source Django and found the Django "
"Software Foundation. Jacob lives on a hobby farm outside of Lawrence where "
"he spends his weekends playing with dirt and power tools."
msgstr ""

#: ../../internals/team.txt:47
msgid "`Wilson Miner`_"
msgstr ""

#: ../../internals/team.txt:41
msgid ""
"Wilson's design-fu is what makes Django look so nice. He created the design "
"that was used for nearly the first ten years on the Django Project Web site,"
" as well as the current design for Django's acclaimed admin interface. "
"Wilson was the designer for EveryBlock and Rdio_. He now designs for "
"Facebook."
msgstr ""

#: ../../internals/team.txt:47
msgid "Wilson lives in San Francisco, USA."
msgstr ""

#: ../../internals/team.txt:64
msgid "The current team"
msgstr ""

#: ../../internals/team.txt:66
msgid ""
"These are the folks who have a long history of contributions, a solid track "
"record of being helpful on the mailing lists, and a proven desire to "
"dedicate serious time to Django. In return, they've been invited to join the"
" :ref:`core team <core-team>`."
msgstr ""

#: ../../internals/team.txt:86
msgid "`Luke Plant`_"
msgstr ""

#: ../../internals/team.txt:72
msgid ""
"At University Luke studied physics and Materials Science and also met "
"`Michael Meeks`_ who introduced him to Linux and Open Source, re-igniting an"
" interest in programming.  Since then he has contributed to a number of Open"
" Source projects and worked professionally as a developer."
msgstr ""

#: ../../internals/team.txt:78
msgid ""
"Luke has contributed many excellent improvements to Django, including "
"database-level improvements, the CSRF middleware and many unit tests."
msgstr ""

#: ../../internals/team.txt:82
msgid ""
"Luke currently works for a church in Bradford, UK, and part-time as a "
"freelance developer."
msgstr ""

#: ../../internals/team.txt:100
msgid "`Russell Keith-Magee`_"
msgstr ""

#: ../../internals/team.txt:89
msgid ""
"Russell studied physics as an undergraduate, and studied neural networks for"
" his PhD. His first job was with a startup in the defense industry "
"developing simulation frameworks. Over time, mostly through work with "
"Django, he's become more involved in Web development."
msgstr ""

#: ../../internals/team.txt:94
msgid ""
"Russell has helped with several major aspects of Django, including a couple "
"major internal refactorings, creation of the test system, and more."
msgstr ""

#: ../../internals/team.txt:97
msgid ""
"Russell lives in the most isolated capital city in the world — Perth, "
"Australia."
msgstr ""

#: ../../internals/team.txt:115
msgid "`James Bennett`_"
msgstr ""

#: ../../internals/team.txt:103
msgid ""
"James is one of Django's release managers, and also contributes to the "
"documentation and provide the occasional bugfix."
msgstr ""

#: ../../internals/team.txt:106
msgid ""
"James came to Web development from philosophy when he discovered that "
"programmers get to argue just as much while collecting much better pay. He "
"lives in Lawrence, Kansas and previously worked at World Online; currently, "
"he's part of the Web development team at Mozilla."
msgstr ""

#: ../../internals/team.txt:112
msgid "He `keeps a blog`_, and enjoys fine port and talking to his car."
msgstr ""

#: ../../internals/team.txt:128
msgid "Justin Bronn"
msgstr ""

#: ../../internals/team.txt:118
msgid ""
"Justin Bronn is a computer scientist and attorney specializing in legal "
"topics related to intellectual property and spatial law."
msgstr ""

#: ../../internals/team.txt:121
msgid ""
"In 2007, Justin began developing ``django.contrib.gis`` in a branch, a.k.a. "
"GeoDjango_, which was merged in time for Django 1.0.  While implementing "
"GeoDjango, Justin obtained a deep knowledge of Django's internals including "
"the ORM, the admin, and Oracle support."
msgstr ""

#: ../../internals/team.txt:126
msgid "Justin lives in San Francisco, CA."
msgstr ""

#: ../../internals/team.txt:138
msgid "Karen Tracey"
msgstr ""

#: ../../internals/team.txt:131
msgid ""
"Karen has a background in distributed operating systems (graduate school), "
"communications software (industry) and crossword puzzle construction "
"(freelance).  The last of these brought her to Django, in late 2006, when "
"she set out to put a Web front-end on her crossword puzzle database. That "
"done, she stuck around in the community answering questions, debugging "
"problems, etc. -- because coding puzzles are as much fun as word puzzles."
msgstr ""

#: ../../internals/team.txt:138
msgid "Karen lives in Apex, NC, USA."
msgstr ""

#: ../../internals/team.txt:155
msgid "`Jannis Leidel`_"
msgstr ""

#: ../../internals/team.txt:141
msgid ""
"Jannis graduated in media design from `Bauhaus-University Weimar`_, is the "
"author of a number of pluggable Django apps and likes to contribute to Open "
"Source projects like virtualenv_ and pip_."
msgstr ""

#: ../../internals/team.txt:145
msgid ""
"He has worked on Django's auth, admin and staticfiles apps as well as the "
"form, core, internationalization and test systems. He currently works at "
"Mozilla_."
msgstr ""

#: ../../internals/team.txt:149
msgid "Jannis lives in Berlin, Germany."
msgstr ""

#: ../../internals/team.txt:166
msgid "`Andrew Godwin`_"
msgstr ""

#: ../../internals/team.txt:158
msgid ""
"Andrew is a freelance Python developer and tinkerer, and has been developing"
" against Django since 2007. He graduated from Oxford University with a "
"degree in Computer Science, and has become most well known in the Django "
"community for his work on South, the schema migrations library."
msgstr ""

#: ../../internals/team.txt:164
msgid "Andrew lives in London, UK."
msgstr ""

#: ../../internals/team.txt:177
msgid "`Carl Meyer`_"
msgstr ""

#: ../../internals/team.txt:169
msgid ""
"Carl has been working with Django since 2007 (long enough to remember "
"queryset-refactor, but not magic-removal), and works as a freelance "
"developer with OddBird_.  He became a Django contributor by accident, "
"because fixing bugs is more interesting than working around them."
msgstr ""

#: ../../internals/team.txt:174
msgid "Carl lives in Rapid City, SD, USA."
msgstr ""

#: ../../internals/team.txt:188
msgid "Ramiro Morales"
msgstr ""

#: ../../internals/team.txt:180
msgid ""
"Ramiro has been reading Django source code and submitting patches since "
"mid-2006 after researching for a Python Web tool with matching awesomeness "
"and being pointed to it by an old ninja."
msgstr ""

#: ../../internals/team.txt:184
msgid ""
"A software developer in the electronic transactions industry, he is a living"
" proof of the fact that anyone with enough enthusiasm can contribute to "
"Django, learning a lot and having fun in the process."
msgstr ""

#: ../../internals/team.txt:188
msgid "Ramiro lives in Córdoba, Argentina."
msgstr ""

#: ../../internals/team.txt:200
msgid "`Chris Beaven`_"
msgstr ""

#: ../../internals/team.txt:191
msgid ""
"Chris has been submitting patches and suggesting crazy ideas for Django "
"since early 2006. An advocate for community involvement and a long-term "
"triager, he is still often found answering questions in the #django IRC "
"channel."
msgstr ""

#: ../../internals/team.txt:196
msgid ""
"Chris lives in Napier, New Zealand (adding to the pool of Oceanic core "
"developers). He works remotely as a developer for `Lincoln Loop`_."
msgstr ""

#: ../../internals/team.txt:213
msgid "Honza Král"
msgstr ""

#: ../../internals/team.txt:203
msgid ""
"Honza first discovered Django in 2006 and started using it right away, first"
" for school and personal projects and later in his full-time job. He "
"contributed various patches and fixes mostly to the newforms library, "
"newforms admin and, through participation in the Google Summer of Code "
"project, assisted in creating the :ref:`model validation <validating-"
"objects>` functionality."
msgstr ""

#: ../../internals/team.txt:210
msgid ""
"He is currently working for `Whiskey Media`_ in San Francisco developing "
"awesome sites running on pure Django."
msgstr ""

#: ../../internals/team.txt:216
msgid ""
"When exploring Web frameworks for an independent study project in the fall "
"of 2008, Tim discovered Django and was lured to it by the documentation. He "
"enjoys contributing to the docs because they're awesome."
msgstr ""

#: ../../internals/team.txt:220
msgid "Tim works as a software engineer and lives in Philadelphia, PA, USA."
msgstr ""

#: ../../internals/team.txt:237
msgid "`Idan Gazit`_"
msgstr ""

#: ../../internals/team.txt:223
msgid ""
"As a self-professed design geek, Idan was initially attracted to Django "
"sometime between magic-removal and queryset-refactor. Formally trained as a "
"software engineer, Idan straddles the worlds of design and code, jack of two"
" trades and master of none. He is passionate about usability and finding "
"novel ways to extract meaning from data, and is a longtime photographer_."
msgstr ""

#: ../../internals/team.txt:230
msgid ""
"Idan previously accepted freelance work under the Pixane_ imprint, but now "
"splits his days between his startup, Skills_, and beautifying all things "
"Django and Python."
msgstr ""

#: ../../internals/team.txt:240
msgid ""
"Paul found Django in 2008 while looking for a more structured approach to "
"web programming. He stuck around after figuring out that the developers of "
"Django had already invented many of the wheels he needed. His passion for "
"breaking (and then fixing) things led to his current role working to "
"maintain and improve the security of Django."
msgstr ""

#: ../../internals/team.txt:258
msgid "`Julien Phalip`_"
msgstr ""

#: ../../internals/team.txt:248
msgid ""
"Julien has a background in software engineering and human-computer "
"interaction. As a Web developer, he enjoys tinkering with the backend as "
"much as designing and coding user interfaces. Julien discovered Django in "
"2007 while doing his PhD in Computing Sciences. Since then he has "
"contributed patches to various components of the framework, in particular "
"the admin. Julien was a co-founder of the `Interaction Consortium`_. He now "
"works at Odopod_, a digital agency based in San Francisco, CA, USA."
msgstr ""

#: ../../internals/team.txt:273
msgid "`Aymeric Augustin`_"
msgstr ""

#: ../../internals/team.txt:261
msgid ""
"Aymeric is an engineer with a background in mathematics and computer "
"science. He chose Django because he believes that software should be simple,"
" explicit and tested. His perfectionist tendencies quickly led him to triage"
" tickets and contribute patches."
msgstr ""

#: ../../internals/team.txt:266
msgid ""
"Aymeric has a pragmatic approach to software engineering, can't live without"
" a continuous integration server, and likes proving that Django is a good "
"choice for enterprise software."
msgstr ""

#: ../../internals/team.txt:270
msgid "He's the CTO of Oscaro_, an e-commerce company based in Paris, France."
msgstr ""

#: ../../internals/team.txt:286
msgid "`Claude Paroz`_"
msgstr ""

#: ../../internals/team.txt:276
msgid ""
"Claude is a former teacher who fell in love with free software at the "
"beginning of the 21st century. He's now working as freelancer in Web "
"development in his native Switzerland. He has found in Django a perfect "
"match for his needs of a stable, clean, documented and well-maintained Web "
"framework."
msgstr ""

#: ../../internals/team.txt:282
msgid ""
"He's also helping the GNOME Translation Project as maintainer of the Django-"
"based `l10n.gnome.org`_."
msgstr ""

#: ../../internals/team.txt:296
msgid "Anssi Kääriäinen"
msgstr ""

#: ../../internals/team.txt:289
msgid ""
"Anssi works as a developer at Finnish National Institute for Health and "
"Welfare. He is also a computer science student at Aalto University. In his "
"work he uses Django for developing internal business applications and sees "
"Django as a great match for that use case."
msgstr ""

#: ../../internals/team.txt:294
msgid ""
"Anssi is interested in developing the object relational mapper (ORM) and all"
" related features. He's also a fan of benchmarking and he tries keep Django "
"as fast as possible."
msgstr ""

#: ../../internals/team.txt:299
msgid ""
"Florian is currently studying Physics at the `Graz University of "
"Technology`_. Soon after he started using Django he joined the `Ubuntuusers "
"webteam`_ to work on *Inyoka*, the software powering the whole Ubuntuusers "
"site."
msgstr ""

#: ../../internals/team.txt:303
msgid "For the time being he lives in Graz, Austria (not Australia ;))."
msgstr ""

#: ../../internals/team.txt:309
msgid ""
"Jeremy was rescued from corporate IT drudgery by Free Software and, in part,"
" Django.  Many of Jeremy's interests center around access to information."
msgstr ""

#: ../../internals/team.txt:312
msgid ""
"Jeremy was the lead developer of Pegasus News, one of the first uses of "
"Django outside World Online, and has since joined Votizen, a startup intent "
"on reducing the influence of money in politics."
msgstr ""

#: ../../internals/team.txt:316
msgid ""
"He serves as DSF Secretary, organizes and helps organize sprints, cares "
"about the health and equity of the Django community.  He has gone an "
"embarrassingly long time without a working blog."
msgstr ""

#: ../../internals/team.txt:320
msgid "Jeremy lives in Mountain View, CA, USA."
msgstr ""

#: ../../internals/team.txt:334
msgid "`Bryan Veloso`_"
msgstr ""

#: ../../internals/team.txt:323
msgid ""
"Bryan found Django 0.96 through a fellow designer who was evangelizing its "
"use. It was his first foray outside of the land that was PHP-based "
"templating. Although he has only ever used Django for personal projects, it "
"is the very reason he considers himself a designer/developer hybrid and is "
"working to further design within the Django community."
msgstr ""

#: ../../internals/team.txt:329
msgid ""
"Bryan works as a designer at GitHub by day, and masquerades as a `vlogger`_ "
"and `shoutcaster`_ in the after-hours. Bryan lives in Los Angeles, CA, USA."
msgstr ""

#: ../../internals/team.txt:347
msgid "`Preston Holmes`_"
msgstr ""

#: ../../internals/team.txt:337
msgid ""
"Preston is a recovering neuroscientist who originally discovered Django as "
"part of a sweeping move to Python from a grab bag of half a dozen languages."
" He was drawn to Django's balance of practical batteries included "
"philosophy, care and thought in code design, and strong open source "
"community. Currently working for Amazon Web Services, he is always looking "
"for opportunities to volunteer for community oriented education projects, "
"such as for kids and scientists (e.g. Software Carpentry)."
msgstr ""

#: ../../internals/team.txt:345
msgid ""
"Preston lives with his family and animal menagerie in Santa Barbara, CA, "
"USA."
msgstr ""

#: ../../internals/team.txt:363
msgid "`Simon Charette`_"
msgstr ""

#: ../../internals/team.txt:350
msgid ""
"Simon is a mathematics student who discovered Django while searching for a "
"replacement framework to an in-house PHP entity. Since that faithful day "
"Django has been a big part of his life. So far, he's been involved in some "
"ORM and forms API fixes."
msgstr ""

#: ../../internals/team.txt:355
msgid ""
"Apart from contributing to multiple open source projects he spends most of "
"his spare-time playing `Ultimate Frisbee`_ and working part-time at this "
"awesome place called `Reptiletech`_."
msgstr ""

#: ../../internals/team.txt:359
msgid "Simon lives in Montréal, Québec, Canada."
msgstr ""

#: ../../internals/team.txt:366
msgid ""
"Donald found Python and Django in 2007 while trying to find a language, and "
"web framework that he really enjoyed using after many years of PHP. He fell "
"in love with the beauty of Python and the way Django made tasks simple and "
"easy. His contributions to Django focus primarily on ensuring that it is and"
" remains a secure web framework."
msgstr ""

#: ../../internals/team.txt:372
msgid ""
"Donald currently works at `Nebula Inc`_ as a Software Engineer for their "
"security team and lives in the Greater Philadelphia Area."
msgstr ""

#: ../../internals/team.txt:386
msgid "Marc Tamlyn"
msgstr ""

#: ../../internals/team.txt:378
msgid ""
"Marc started life on the web using Django 1.2 back in 2010, and has never "
"looked back. He was involved with rewriting the class-based view "
"documentation at DjangoCon EU 2012, and also helped to develop `CCBV`_, an "
"additional class-based view reference tool."
msgstr ""

#: ../../internals/team.txt:383
msgid ""
"Marc is currently a full-time parent, part-time developer, and lives in "
"Oxford, UK."
msgstr ""

#: ../../internals/team.txt:398
msgid "Shai Berger"
msgstr ""

#: ../../internals/team.txt:389
msgid ""
"Shai started working with Python back in 1998, and with Django just before "
"1.0. He is a Free Software enthusiast, but life happens, and he was driven "
"by consulting gigs to contribute to the Oracle and SQL Server backends of "
"South, and then the Oracle backend of Django itself. Finally, he joined core"
" to help maintain the Oracle backend."
msgstr ""

#: ../../internals/team.txt:395
msgid ""
"Shai works for `Platonix`_, a small consulting company he started with a few"
" friends in 1996, and lives near Tel Aviv, Israel."
msgstr ""

#: ../../internals/team.txt:409
msgid "Baptiste Mispelon"
msgstr ""

#: ../../internals/team.txt:401
msgid ""
"Baptiste discovered Django around the 1.2 version and promptly switched away"
" from his homegrown PHP framework. He started getting more involved in the "
"project after attending DjangoCon EU 2012, mostly by triaging tickets and "
"submitting small patches."
msgstr ""

#: ../../internals/team.txt:406
msgid ""
"Baptiste currently lives in Budapest, Hungary and works for `M2BPO`_, a "
"small French company providing services to architects."
msgstr ""

#: ../../internals/team.txt:422
msgid "Daniele Procida"
msgstr ""

#: ../../internals/team.txt:412
msgid ""
"Daniele unexpectedly became a Django developer on 29th April 2009. Since "
"then he has relied daily on Django's documentation, which has been a "
"constant companion to him. More recently he has been able to contribute back"
" to the project by helping improve the documentation itself."
msgstr ""

#: ../../internals/team.txt:417
msgid ""
"He is the author of `Arkestra`_ and `Don't be afraid to commit`_. He lives "
"in Cardiff, Wales, and works for `Divio`_."
msgstr ""

#: ../../internals/team.txt:438
msgid "`Erik Romijn`_"
msgstr ""

#: ../../internals/team.txt:425
msgid ""
"Erik started using Django in the days of 1.2. His largest contribution to "
"Django was ``GenericIPAddressField``, and he has worked on all sorts of "
"patches since. While developing with Django, he always keeps a little list "
"of even the slightest Django frustrations, to tackle them at a later time "
"and prevent other developers from having to deal with the same issues."
msgstr ""

#: ../../internals/team.txt:431
msgid ""
"Erik is an independent app maker, mostly developing web and mobile apps, as "
"`Solid Links`_. He also enjoys helping ordinary developers to build safer "
"web apps, for which Django is already a great start, and developed `Erik's "
"Pony Checkup`_ with that goal in mind. Erik lives in Amsterdam, The "
"Netherlands."
msgstr ""

#: ../../internals/team.txt:453
msgid "`Loïc Bistuer`_"
msgstr ""

#: ../../internals/team.txt:441
msgid ""
"Loïc studied telecommunications engineering and works as an independent "
"software developer and consultant."
msgstr ""

#: ../../internals/team.txt:444
msgid ""
"He discovered Django in 2008 shortly before the 1.0 release and has been "
"hooked ever since. He contributes mostly to Django's ORM and Form "
"components. His main contributions include advanced query prefetching, "
"streamlining QuerySet and Manager to improve query reusability, and a "
"significant refactor of forms error handling."
msgstr ""

#: ../../internals/team.txt:450
msgid ""
"Loïc is originally from the South of France and currently lives in Bangkok, "
"Thailand."
msgstr ""

#: ../../internals/team.txt:464
msgid "`Michael Manfre`_"
msgstr ""

#: ../../internals/team.txt:456
msgid ""
"Michael started running Django on Windows against a Microsoft SQL Server "
"(MSSQL) database in 2008. He quickly became the maintainer of the django-"
"mssql 3rd party database backend. Much of his involvement with Django "
"relates to the ORM, the private 3rd party database API, and using Django on "
"Windows."
msgstr ""

#: ../../internals/team.txt:462
msgid "Michael lives in Cary, NC, USA."
msgstr ""

#: ../../internals/team.txt:479
msgid "`Collin Anderson`_"
msgstr ""

#: ../../internals/team.txt:467
msgid ""
"Collin found Django in November 2006. He was in awe of the admin and ORM and"
" was amazed that the documentation was teaching him best web practices like "
"redirecting after a successful POST request. Why had he never learned this "
"before? No one knows to this day."
msgstr ""

#: ../../internals/team.txt:472
msgid ""
"He enjoys helping people on the |django-users| mailing list and making "
"Django simple and easy for newcomers."
msgstr ""

#: ../../internals/team.txt:475
msgid ""
"Collin lives in South Bend, IN, USA where he uses Django to `increase "
"unity`_."
msgstr ""

#: ../../internals/team.txt:489
msgid "`Tom Christie`_"
msgstr ""

#: ../../internals/team.txt:482
msgid ""
"Tom has background in speech recognition, networking, and web development. "
"He has a particular interest in Web API design and is the original author of"
" `Django REST framework`_."
msgstr ""

#: ../../internals/team.txt:486
msgid "Tom lives in the seaside city of Brighton, UK."
msgstr ""

#: ../../internals/team.txt:500
msgid "`Curtis Maloney`_"
msgstr ""

#: ../../internals/team.txt:492
msgid ""
"Curtis is a self-taught programmer from Melbourne, Australia, who eschews "
"specialization.  Upon finding Django when it was first open sourced, he "
"realized it was possible to enjoy web development."
msgstr ""

#: ../../internals/team.txt:496
msgid ""
"He spends a lot of time helping people on the #django IRC channel, and has "
"authored and released a number of `smaller django apps`_."
msgstr ""

#: ../../internals/team.txt:514
msgid "`Markus Holtermann`_"
msgstr ""

#: ../../internals/team.txt:503
msgid ""
"Markus is a Master of Science student in Computer Science at `Technical "
"University of Berlin`_. He started working with Django in 2010 when he "
"joined the `ubuntuusers.de`_ web team to work on *Inyoka*. Markus made his "
"first contribution to the Django project during DjangoCon Europe 2013 in "
"Warsaw. He was the web team leader for the `EuroPython 2014 website`_."
msgstr ""

#: ../../internals/team.txt:509
msgid "Markus lives in Berlin, Germany."
msgstr ""

#: ../../internals/team.txt:528
msgid "`Josh Smeaton`_"
msgstr ""

#: ../../internals/team.txt:517
msgid ""
"Josh was given the opportunity to work on a new Django app around version "
"1.1 after working with a homegrown PHP reporting framework. The simplicity "
"of the ORM and the power of the Admin were extremely liberating."
msgstr ""

#: ../../internals/team.txt:521
msgid ""
"Still being involved with custom reporting applications, he decided to try "
"his hand at improving the ORM support for analytics. His contributions focus"
" on giving more power to users of the ORM."
msgstr ""

#: ../../internals/team.txt:525
msgid ""
"Josh lives in Melbourne, Australia where he heads up development for a SaaS "
"telecommunications company."
msgstr ""

#: ../../internals/team.txt:531
msgid "Past team members"
msgstr ""

#: ../../internals/team.txt:536
msgid "Georg \"Hugo\" Bauer"
msgstr ""

#: ../../internals/team.txt:534
msgid ""
"Georg created Django's internationalization system, managed i18n "
"contributions and made a ton of excellent tweaks, feature additions and bug "
"fixes."
msgstr ""

#: ../../internals/team.txt:541
msgid "Robert Wittams"
msgstr ""

#: ../../internals/team.txt:539
msgid ""
"Robert was responsible for the *first* refactoring of Django's admin "
"application to allow for easier reuse and has made a ton of excellent "
"tweaks, feature additions and bug fixes."
msgstr ""

#: ../../internals/team.txt:550
msgid "`Alex Gaynor`_"
msgstr ""

#: ../../internals/team.txt:544
msgid ""
"Alex was involved in many parts of Django, he contributed to the ORM, forms,"
" admin, amongst others; he is most known for his work on multiple-database "
"support in Django."
msgstr ""

#: ../../internals/team.txt:548
msgid "Alex lives in San Francisco, CA, USA."
msgstr ""

#: ../../internals/team.txt:559
msgid "`Simon Meers`_"
msgstr ""

#: ../../internals/team.txt:553
msgid ""
"Simon discovered Django 0.96 during his Computer Science PhD research and "
"has been developing with it full-time ever since. His core code "
"contributions are mostly in Django's admin application."
msgstr ""

#: ../../internals/team.txt:557
msgid "Simon works as a freelance developer based in Wollongong, Australia."
msgstr ""

#: ../../internals/team.txt:571
msgid "`Gabriel Hurley`_"
msgstr ""

#: ../../internals/team.txt:562
msgid ""
"Gabriel has been working with Django since 2008, shortly after the 1.0 "
"release. Convinced by his business partner that Python and Django were the "
"right direction for the company, he couldn't have been more happy with the "
"decision. His contributions range across many areas in Django, but years of "
"copy-editing and an eye for detail lead him to be particularly at home while"
" working on Django's documentation."
msgstr ""

#: ../../internals/team.txt:569
msgid "Gabriel works as a developer in the SF Bay Area, CA, USA."
msgstr ""

#: ../../internals/team.txt:585
msgid "Malcolm Tredinnick"
msgstr ""

#: ../../internals/team.txt:574
msgid ""
"Malcolm originally wanted to be a mathematician and somehow ended up a "
"software developer. He contributed to many Open Source projects, served on "
"the board of the GNOME foundation, and was a great chess player."
msgstr ""

#: ../../internals/team.txt:578
msgid ""
"Malcolm was deeply involved in many part of Django - most notably, the ORM, "
"but many other internals bear his fingerprints. Django’s support for unicode"
" and autoescaping in templates can both be almost entirely attributed to "
"Malcolm."
msgstr ""

#: ../../internals/team.txt:583
msgid "He was an International Man of Mystery and lived in Sydney, Australia."
msgstr ""

#: ../../internals/team.txt:585
msgid "*Malcolm passed away on March 17, 2013.*"
msgstr ""

#: ../../internals/team.txt:588
msgid "Matt Boersma"
msgstr ""

#: ../../internals/team.txt:588
msgid "Matt helped with Django's Oracle support."
msgstr ""

#: ../../internals/team.txt:591
msgid "Ian Kelly"
msgstr ""

#: ../../internals/team.txt:591
msgid "Ian also helped with Oracle support."
msgstr ""

#: ../../internals/team.txt:606
msgid "Joseph Kocherhans"
msgstr ""

#: ../../internals/team.txt:594
msgid ""
"Joseph was the director of lead development at EveryBlock and previously "
"developed at the Lawrence Journal-World. He often disappears for several "
"days into the woods, attempts to teach himself computational linguistics, "
"and annoys his neighbors with his Charango_ playing."
msgstr ""

#: ../../internals/team.txt:599
msgid ""
"Joseph's first contribution to Django was a series of improvements to the "
"authorization system leading up to support for pluggable authorization. "
"Since then, he's worked on the new forms system, its use in the admin, and "
"many other smaller improvements."
msgstr ""

#: ../../internals/team.txt:604
msgid "Joseph lives in Chicago, USA."
msgstr ""

#: ../../internals/team.txt:617
msgid "`Gary Wilson`_"
msgstr ""

#: ../../internals/team.txt:609
msgid ""
"Gary starting contributing patches to Django in 2006 while developing Web "
"applications for `The University of Texas`_ (UT).  Since, he has made "
"contributions to the email and forms systems, as well as many other "
"improvements and code cleanups throughout the code base."
msgstr ""

#: ../../internals/team.txt:614
msgid "Gary lives in Austin, Texas, USA."
msgstr ""

#: ../../internals/team.txt:628
msgid "`Brian Rosner`_"
msgstr ""

#: ../../internals/team.txt:620
msgid ""
"Brian enjoys learning more about programming languages and system "
"architectures and contributing to open source projects."
msgstr ""

#: ../../internals/team.txt:623
msgid ""
"He helped immensely in getting Django's \"newforms-admin\" branch finished "
"in time for Django 1.0."
msgstr ""

#: ../../internals/team.txt:626
msgid "Brian lives in Denver, Colorado, USA."
msgstr ""

#: ../../internals/team.txt:644
msgid "`James Tauber`_"
msgstr ""

#: ../../internals/team.txt:631
msgid ""
"James is the lead developer of Pinax_ and the CEO and founder of Eldarion_. "
"He has been doing open source software since 1993, Python since 1998 and "
"Django since 2006. He serves on the board of the Python Software Foundation "
"and is currently on a leave of absence from a PhD in linguistics."
msgstr ""

#: ../../internals/team.txt:637
msgid ""
"James currently lives in Boston, MA, USA but originally hails from Perth, "
"Western Australia where he attended the same high school as Russell Keith-"
"Magee."
msgstr ""

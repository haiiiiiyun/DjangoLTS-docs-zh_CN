# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: DjangoLTS-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-05 16:46+0800\n"
"PO-Revision-Date: 2016-05-10 06:38+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/djangolts-docs/djangolts-docs/language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../ref/applications.txt:3
msgid "Applications"
msgstr ""

#: ../../ref/applications.txt:9
msgid ""
"Django contains a registry of installed applications that stores "
"configuration and provides introspection. It also maintains a list of "
"available :doc:`models </topics/db/models>`."
msgstr ""

#: ../../ref/applications.txt:13
msgid ""
"This registry is simply called :attr:`~django.apps.apps` and it's available "
"in :mod:`django.apps`::"
msgstr ""

#: ../../ref/applications.txt:21
msgid "Projects and applications"
msgstr ""

#: ../../ref/applications.txt:23
msgid ""
"Django has historically used the term **project** to describe an "
"installation of Django. A project is defined primarily by a settings module."
msgstr ""

#: ../../ref/applications.txt:26
msgid ""
"The term **application** describes a Python package that provides some set "
"of features. Applications may be reused in various projects."
msgstr ""

#: ../../ref/applications.txt:30
msgid ""
"This terminology is somewhat confusing these days as it became common to use"
" the phrase \"web app\" to describe what equates to a Django project."
msgstr ""

#: ../../ref/applications.txt:33
msgid ""
"Applications include some combination of models, views, templates, template "
"tags, static files, URLs, middleware, etc. They're generally wired into "
"projects with the :setting:`INSTALLED_APPS` setting and optionally with "
"other mechanisms such as URLconfs, the :setting:`MIDDLEWARE_CLASSES` "
"setting, or template inheritance."
msgstr ""

#: ../../ref/applications.txt:39
msgid ""
"It is important to understand that a Django application is just a set of "
"code that interacts with various parts of the framework. There's no such "
"thing as an ``Application`` object. However, there's a few places where "
"Django needs to interact with installed applications, mainly for "
"configuration and also for introspection. That's why the application "
"registry maintains metadata in an :class:`~django.apps.AppConfig` instance "
"for each installed application."
msgstr ""

#: ../../ref/applications.txt:47
msgid "Configuring applications"
msgstr ""

#: ../../ref/applications.txt:49
msgid ""
"To configure an application, subclass :class:`~django.apps.AppConfig` and "
"put the dotted path to that subclass in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/applications.txt:52
msgid ""
"When :setting:`INSTALLED_APPS` simply contains the dotted path to an "
"application module, Django checks for a ``default_app_config`` variable in "
"that module."
msgstr ""

#: ../../ref/applications.txt:56
msgid ""
"If it's defined, it's the dotted path to the :class:`~django.apps.AppConfig`"
" subclass for that application."
msgstr ""

#: ../../ref/applications.txt:59
msgid ""
"If there is no ``default_app_config``, Django uses the base "
":class:`~django.apps.AppConfig` class."
msgstr ""

#: ../../ref/applications.txt:62
msgid ""
"``default_app_config`` allows applications that predate Django 1.7 such as "
"``django.contrib.admin`` to opt-in to :class:`~django.apps.AppConfig` "
"features without requiring users to update their :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/applications.txt:66
msgid ""
"New applications should avoid ``default_app_config``. Instead they should "
"require the dotted path to the appropriate :class:`~django.apps.AppConfig` "
"subclass to be configured explicitly in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/applications.txt:71
msgid "For application authors"
msgstr ""

#: ../../ref/applications.txt:73
msgid ""
"If you're creating a pluggable app called \"Rock ’n’ roll\", here's how you "
"would provide a proper name for the admin::"
msgstr ""

#: ../../ref/applications.txt:84
msgid ""
"You can make your application load this :class:`~django.apps.AppConfig` "
"subclass by default as follows::"
msgstr ""

#: ../../ref/applications.txt:91
msgid ""
"That will cause ``RockNRollConfig`` to be used when "
":setting:`INSTALLED_APPS` just contains ``'rock_n_roll'``. This allows you "
"to make use of :class:`~django.apps.AppConfig` features without requiring "
"your users to update their :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/applications.txt:96
msgid ""
"Of course, you can also tell your users to put "
"``'rock_n_roll.apps.RockNRollConfig'`` in their :setting:`INSTALLED_APPS` "
"setting. You can even provide several different "
":class:`~django.apps.AppConfig` subclasses with different behaviors and "
"allow your users to choose one via their :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/applications.txt:102
msgid ""
"The recommended convention is to put the configuration class in a submodule "
"of the application called ``apps``. However, this isn't enforced by Django."
msgstr ""

#: ../../ref/applications.txt:105
msgid ""
"You must include the :attr:`~django.apps.AppConfig.name` attribute for "
"Django to determine which application this configuration applies to. You can"
" define any attributes documented in the :class:`~django.apps.AppConfig` API"
" reference."
msgstr ""

#: ../../ref/applications.txt:112
msgid ""
"If your code imports the application registry in an application's "
"``__init__.py``, the name ``apps`` will clash with the ``apps`` submodule. "
"The best practice is to move that code to a submodule and import it. A "
"workaround is to import the registry under a different name::"
msgstr ""

#: ../../ref/applications.txt:120
msgid "For application users"
msgstr ""

#: ../../ref/applications.txt:122
msgid ""
"If you're using \"Rock ’n’ roll\" in a project called ``anthology``, but you"
" want it to show up as \"Gypsy jazz\" instead, you can provide your own "
"configuration::"
msgstr ""

#: ../../ref/applications.txt:140
msgid ""
"Again, defining project-specific configuration classes in a submodule called"
" ``apps`` is a convention, not a requirement."
msgstr ""

#: ../../ref/applications.txt:144
msgid "Application configuration"
msgstr ""

#: ../../ref/applications.txt:148
msgid ""
"Application configuration objects store metadata for an application. Some "
"attributes can be configured in :class:`~django.apps.AppConfig` subclasses. "
"Others are set by Django and read-only."
msgstr ""

#: ../../ref/applications.txt:153
msgid "Configurable attributes"
msgstr ""

#: ../../ref/applications.txt:157
msgid "Full Python path to the application, e.g. ``'django.contrib.admin'``."
msgstr ""

#: ../../ref/applications.txt:159
msgid ""
"This attribute defines which application the configuration applies to. It "
"must be set in all :class:`~django.apps.AppConfig` subclasses."
msgstr ""

#: ../../ref/applications.txt:162 ../../ref/applications.txt:172
msgid "It must be unique across a Django project."
msgstr ""

#: ../../ref/applications.txt:166
msgid "Short name for the application, e.g. ``'admin'``"
msgstr ""

#: ../../ref/applications.txt:168
msgid ""
"This attribute allows relabeling an application when two applications have "
"conflicting labels. It defaults to the last component of ``name``. It should"
" be a valid Python identifier."
msgstr ""

#: ../../ref/applications.txt:176
msgid "Human-readable name for the application, e.g. \"Administration\"."
msgstr ""

#: ../../ref/applications.txt:178
msgid "This attribute defaults to ``label.title()``."
msgstr ""

#: ../../ref/applications.txt:182
msgid ""
"Filesystem path to the application directory, e.g. ``'/usr/lib/python3.4"
"/dist-packages/django/contrib/admin'``."
msgstr ""

#: ../../ref/applications.txt:185
msgid ""
"In most cases, Django can automatically detect and set this, but you can "
"also provide an explicit override as a class attribute on your "
":class:`~django.apps.AppConfig` subclass. In a few situations this is "
"required; for instance if the app package is a `namespace package`_ with "
"multiple paths."
msgstr ""

#: ../../ref/applications.txt:192
msgid "Read-only attributes"
msgstr ""

#: ../../ref/applications.txt:196
msgid ""
"Root module for the application, e.g. ``<module 'django.contrib.admin' from "
"'django/contrib/admin/__init__.pyc'>``."
msgstr ""

#: ../../ref/applications.txt:201
msgid ""
"Module containing the models, e.g. ``<module 'django.contrib.admin.models' "
"from 'django/contrib/admin/models.pyc'>``."
msgstr ""

#: ../../ref/applications.txt:204
msgid ""
"It may be ``None`` if the application doesn't contain a ``models`` module. "
"Note that the database related signals such as "
":data:`~django.db.models.signals.pre_migrate` and "
":data:`~django.db.models.signals.post_migrate` are only emitted for "
"applications that have a ``models`` module."
msgstr ""

#: ../../ref/applications.txt:211 ../../ref/contrib/auth.txt:97
#: ../../ref/contrib/auth.txt:332 ../../ref/request-response.txt:237
#: ../../ref/request-response.txt:384 ../../ref/request-response.txt:685
#: ../../ref/schema-editor.txt:43 ../../ref/template-response.txt:66
#: ../../ref/template-response.txt:190
msgid "Methods"
msgstr ""

#: ../../ref/applications.txt:215
msgid ""
"Returns an iterable of :class:`~django.db.models.Model` classes for this "
"application."
msgstr ""

#: ../../ref/applications.txt:220
msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``model_name``. "
"Raises :exc:`LookupError` if no such model exists in this application. "
"``model_name`` is case-insensitive."
msgstr ""

#: ../../ref/applications.txt:226
msgid ""
"Subclasses can override this method to perform initialization tasks such as "
"registering signals. It is called as soon as the registry is fully "
"populated."
msgstr ""

#: ../../ref/applications.txt:230
msgid ""
"You cannot import models in modules that define application configuration "
"classes, but you can use :meth:`get_model` to access a model class by name, "
"like this::"
msgstr ""

#: ../../ref/applications.txt:239
msgid ""
"Although you can access model classes as described above, avoid interacting "
"with the database in your :meth:`ready()` implementation. This includes "
"model methods that execute queries (:meth:`~django.db.models.Model.save()`, "
":meth:`~django.db.models.Model.delete()`, manager methods etc.), and also "
"raw SQL queries via ``django.db.connection``. Your :meth:`ready()` method "
"will run during startup of every management command. For example, even "
"though the test database configuration is separate from the production "
"settings, ``manage.py test`` would still execute some queries against your "
"**production** database!"
msgstr ""

#: ../../ref/applications.txt:252
msgid ""
"In the usual initialization process, the ``ready`` method is only called "
"once by Django. But in some corner cases, particularly in tests which are "
"fiddling with installed applications, ``ready`` might be called more than "
"once. In that case, either write idempotent methods, or put a flag on your "
"``AppConfig`` classes to prevent re-running code which should be executed "
"exactly one time."
msgstr ""

#: ../../ref/applications.txt:262
msgid "Namespace packages as apps (Python 3.3+)"
msgstr ""

#: ../../ref/applications.txt:264
msgid ""
"Python versions 3.3 and later support Python packages without an "
"``__init__.py`` file. These packages are known as \"namespace packages\" and"
" may be spread across multiple directories at different locations on "
"``sys.path`` (see :pep:`420`)."
msgstr ""

#: ../../ref/applications.txt:269
msgid ""
"Django applications require a single base filesystem path where Django "
"(depending on configuration) will search for templates, static assets, etc. "
"Thus, namespace packages may only be Django applications if one of the "
"following is true:"
msgstr ""

#: ../../ref/applications.txt:274
msgid ""
"The namespace package actually has only a single location (i.e. is not "
"spread across more than one directory.)"
msgstr ""

#: ../../ref/applications.txt:277
msgid ""
"The :class:`~django.apps.AppConfig` class used to configure the application "
"has a :attr:`~django.apps.AppConfig.path` class attribute, which is the "
"absolute directory path Django will use as the single base path for the "
"application."
msgstr ""

#: ../../ref/applications.txt:282
msgid ""
"If neither of these conditions is met, Django will raise "
":exc:`~django.core.exceptions.ImproperlyConfigured`."
msgstr ""

#: ../../ref/applications.txt:286
msgid "Application registry"
msgstr ""

#: ../../ref/applications.txt:290
msgid ""
"The application registry provides the following public API. Methods that "
"aren't listed below are considered private and may change without notice."
msgstr ""

#: ../../ref/applications.txt:295
msgid ""
"Boolean attribute that is set to ``True`` when the registry is fully "
"populated."
msgstr ""

#: ../../ref/applications.txt:300
msgid "Returns an iterable of :class:`~django.apps.AppConfig` instances."
msgstr ""

#: ../../ref/applications.txt:304
msgid ""
"Returns an :class:`~django.apps.AppConfig` for the application with the "
"given ``app_label``. Raises :exc:`LookupError` if no such application "
"exists."
msgstr ""

#: ../../ref/applications.txt:310
msgid ""
"Checks whether an application with the given name exists in the registry. "
"``app_name`` is the full name of the app, e.g. ``'django.contrib.admin'``."
msgstr ""

#: ../../ref/applications.txt:315
msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``app_label`` "
"and ``model_name``. As a shortcut, this method also accepts a single "
"argument in the form ``app_label.model_name``. ``model_name`` is case- "
"insensitive."
msgstr ""

#: ../../ref/applications.txt:320
msgid ""
"Raises :exc:`LookupError` if no such application or model exists. Raises "
":exc:`ValueError` when called with a single argument that doesn't contain "
"exactly one dot."
msgstr ""

#: ../../ref/applications.txt:325
msgid "Initialization process"
msgstr ""

#: ../../ref/applications.txt:328
msgid "How applications are loaded"
msgstr ""

#: ../../ref/applications.txt:330
msgid ""
"When Django starts, :func:`django.setup()` is responsible for populating the"
" application registry."
msgstr ""

#: ../../ref/applications.txt:337
msgid "Configures Django by:"
msgstr ""

#: ../../ref/applications.txt:339
msgid "Loading the settings."
msgstr ""

#: ../../ref/applications.txt:340
msgid "Setting up logging."
msgstr ""

#: ../../ref/applications.txt:341
msgid "Initializing the application registry."
msgstr ""

#: ../../ref/applications.txt:343
msgid "This function is called automatically:"
msgstr ""

#: ../../ref/applications.txt:345
msgid "When running an HTTP server via Django's WSGI support."
msgstr ""

#: ../../ref/applications.txt:346
msgid "When invoking a management command."
msgstr ""

#: ../../ref/applications.txt:348
msgid ""
"It must be called explicitly in other cases, for instance in plain Python "
"scripts."
msgstr ""

#: ../../ref/applications.txt:353
msgid ""
"The application registry is initialized in three stages. At each stage, "
"Django processes all applications in the order of :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/applications.txt:356
msgid "First Django imports each item in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/applications.txt:358
msgid ""
"If it's an application configuration class, Django imports the root package "
"of the application, defined by its :attr:`~AppConfig.name` attribute. If "
"it's a Python package, Django creates a default application configuration."
msgstr ""

#: ../../ref/applications.txt:362
msgid "*At this stage, your code shouldn't import any models!*"
msgstr ""

#: ../../ref/applications.txt:364
msgid ""
"In other words, your applications' root packages and the modules that define"
" your application configuration classes shouldn't import any models, even "
"indirectly."
msgstr ""

#: ../../ref/applications.txt:368
msgid ""
"Strictly speaking, Django allows importing models once their application "
"configuration is loaded. However, in order to avoid needless constraints on "
"the order of :setting:`INSTALLED_APPS`, it's strongly recommended not import"
" any models at this stage."
msgstr ""

#: ../../ref/applications.txt:373
msgid ""
"Once this stage completes, APIs that operate on application configurations "
"such as :meth:`~apps.get_app_config()` become usable."
msgstr ""

#: ../../ref/applications.txt:376
msgid ""
"Then Django attempts to import the ``models`` submodule of each application,"
" if there is one."
msgstr ""

#: ../../ref/applications.txt:379
msgid ""
"You must define or import all models in your application's ``models.py`` or "
"``models/__init__.py``. Otherwise, the application registry may not be fully"
" populated at this point, which could cause the ORM to malfunction."
msgstr ""

#: ../../ref/applications.txt:383
msgid ""
"Once this stage completes, APIs that operate on models such as "
":meth:`~apps.get_model()` become usable."
msgstr ""

#: ../../ref/applications.txt:386
msgid ""
"Finally Django runs the :meth:`~AppConfig.ready()` method of each "
"application configuration."
msgstr ""

#: ../../ref/applications.txt:392
#: ../../ref/contrib/gis/install/geolibs.txt:126
#: ../../ref/contrib/gis/install/geolibs.txt:228
#: ../../ref/contrib/gis/install/index.txt:101
#: ../../ref/contrib/gis/layermapping.txt:198
msgid "Troubleshooting"
msgstr ""

#: ../../ref/applications.txt:394
msgid ""
"Here are some common problems that you may encounter during initialization:"
msgstr ""

#: ../../ref/applications.txt:396
msgid ""
"``AppRegistryNotReady`` This happens when importing an application "
"configuration or a models module triggers code that depends on the app "
"registry."
msgstr ""

#: ../../ref/applications.txt:400
msgid ""
"For example, :func:`~django.utils.translation.ugettext()` uses the app "
"registry to look up translation catalogs in applications. To translate at "
"import time, you need :func:`~django.utils.translation.ugettext_lazy()` "
"instead. (Using :func:`~django.utils.translation.ugettext()` would be a bug,"
" because the translation would happen at import time, rather than at each "
"request depending on the active language.)"
msgstr ""

#: ../../ref/applications.txt:407
msgid ""
"Executing database queries with the ORM at import time in models modules "
"will also trigger this exception. The ORM cannot function properly until all"
" models are available."
msgstr ""

#: ../../ref/applications.txt:411
msgid ""
"Another common culprit is :func:`django.contrib.auth.get_user_model()`. Use "
"the :setting:`AUTH_USER_MODEL` setting to reference the User model at import"
" time."
msgstr ""

#: ../../ref/applications.txt:415
msgid ""
"This exception also happens if you forget to call :func:`django.setup()` in "
"a standalone Python script."
msgstr ""

#: ../../ref/applications.txt:418
msgid ""
"``ImportError: cannot import name ...`` This happens if the import sequence "
"ends up in a loop."
msgstr ""

#: ../../ref/applications.txt:421
msgid ""
"To eliminate such problems, you should minimize dependencies between your "
"models modules and do as little work as possible at import time. To avoid "
"executing code at import time, you can move it into a function and cache its"
" results. The code will be executed when you first need its results. This "
"concept is known as \"lazy evaluation\"."
msgstr ""

#: ../../ref/applications.txt:427
msgid ""
"``django.contrib.admin`` automatically performs autodiscovery of ``admin`` "
"modules in installed applications. To prevent it, change your "
":setting:`INSTALLED_APPS` to contain "
"``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of "
"``'django.contrib.admin'``."
msgstr ""

#: ../../ref/checks.txt:3
msgid "System check framework"
msgstr ""

#: ../../ref/checks.txt:9
msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them."
" The framework is extensible so you can easily add your own checks."
msgstr ""

#: ../../ref/checks.txt:13
msgid ""
"For details on how to add your own checks and integrate them with Django's "
"system checks, see the :doc:`System check topic guide </topics/checks>`."
msgstr ""

#: ../../ref/checks.txt:17 ../../ref/contrib/gis/feeds.txt:22
#: ../../ref/index.txt:3
msgid "API Reference"
msgstr ""

#: ../../ref/checks.txt:20
msgid "``CheckMessage``"
msgstr ""

#: ../../ref/checks.txt:24
msgid ""
"The warnings and errors raised by system checks must be instances of "
"``CheckMessage``. An instance encapsulates a single reportable error or "
"warning. It also provides context and hints applicable to the message, and a"
" unique identifier that is used for filtering purposes."
msgstr ""

#: ../../ref/checks.txt:29
msgid "Constructor arguments are:"
msgstr ""

#: ../../ref/checks.txt:36
msgid "``level``"
msgstr ""

#: ../../ref/checks.txt:32
msgid ""
"The severity of the message. Use one of the predefined values: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. If the level is greater or "
"equal to ``ERROR``, then Django will prevent management commands from "
"executing. Messages with level lower than ``ERROR`` (i.e. warnings) are "
"reported to the console, but can be silenced."
msgstr ""

#: ../../ref/checks.txt:40
msgid "``msg``"
msgstr ""

#: ../../ref/checks.txt:39
msgid ""
"A short (less than 80 characters) string describing the problem. The string "
"should *not* contain newlines."
msgstr ""

#: ../../ref/checks.txt:45
msgid "``hint``"
msgstr ""

#: ../../ref/checks.txt:43
msgid ""
"A single-line string providing a hint for fixing the problem. If no hint can"
" be provided, or the hint is self-evident from the error message, the hint "
"can be omitted, or a value of ``None`` can be used."
msgstr ""

#: ../../ref/checks.txt:52
msgid "``obj``"
msgstr ""

#: ../../ref/checks.txt:48
msgid ""
"Optional. An object providing context for the message (for example, the "
"model where the problem was discovered). The object should be a model, "
"field, or manager or any other object that defines ``__str__`` method (on "
"Python 2 you need to define ``__unicode__`` method). The method is used "
"while reporting all messages and its result precedes the message."
msgstr ""

#: ../../ref/checks.txt:59
msgid "``id``"
msgstr ""

#: ../../ref/checks.txt:55
msgid ""
"Optional string. A unique identifier for the issue. Identifiers should "
"follow the pattern ``applabel.X001``, where ``X`` is one of the letters "
"``CEWID``, indicating the message severity (``C`` for criticals, ``E`` for "
"errors and so). The number can be allocated by the application, but should "
"be unique within that application."
msgstr ""

#: ../../ref/checks.txt:61
msgid ""
"There are subclasses to make creating messages with common levels easier. "
"When using them you can omit the ``level`` argument because it is implied by"
" the class name."
msgstr ""

#: ../../ref/checks.txt:72
msgid "Builtin checks"
msgstr ""

#: ../../ref/checks.txt:75
msgid "Builtin tags"
msgstr ""

#: ../../ref/checks.txt:77
msgid "Django's system checks are organized using the following tags:"
msgstr ""

#: ../../ref/checks.txt:79
msgid "``models``: Checks governing model, field and manager definitions."
msgstr ""

#: ../../ref/checks.txt:80
msgid "``signals``: Checks on signal declarations and handler registrations."
msgstr ""

#: ../../ref/checks.txt:81
msgid "``admin``: Checks of any admin site declarations."
msgstr ""

#: ../../ref/checks.txt:82
msgid "``compatibility``: Flagging potential problems with version upgrades."
msgstr ""

#: ../../ref/checks.txt:83
msgid "``security``: Checks security related configuration."
msgstr ""

#: ../../ref/checks.txt:85
msgid "Some checks may be registered with multiple tags."
msgstr ""

#: ../../ref/checks.txt:88
msgid "Core system checks"
msgstr ""

#: ../../ref/checks.txt:91 ../../ref/contrib/admin/admindocs.txt:52
#: ../../ref/models/index.txt:3 ../../ref/settings.txt:3484
#: ../../ref/unicode.txt:251
msgid "Models"
msgstr ""

#: ../../ref/checks.txt:93
msgid ""
"**models.E001**: ``<swappable>`` is not of the form ``app_label.app_name``."
msgstr ""

#: ../../ref/checks.txt:94
msgid ""
"**models.E002**: ``<SETTING>`` references ``<model>``, which has not been "
"installed, or is abstract."
msgstr ""

#: ../../ref/checks.txt:96
msgid ""
"**models.E003**: The model has two many-to-many relations through the "
"intermediate model ``<app_label>.<model>``."
msgstr ""

#: ../../ref/checks.txt:98
msgid ""
"**models.E004**: ``id`` can only be used as a field name if the field also "
"sets ``primary_key=True``."
msgstr ""

#: ../../ref/checks.txt:100
msgid ""
"**models.E005**: The field ``<field name>`` from parent model ``<model>`` "
"clashes with the field ``<field name>`` from parent model ``<model>``."
msgstr ""

#: ../../ref/checks.txt:102
msgid ""
"**models.E006**: The field clashes with the field ``<field name>`` from "
"model ``<model>``."
msgstr ""

#: ../../ref/checks.txt:104
msgid ""
"**models.E007**: Field ``<field name>`` has column name ``<column name>`` "
"that is used by another field."
msgstr ""

#: ../../ref/checks.txt:106
msgid "**models.E008**: ``index_together`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:107
msgid ""
"**models.E009**: All ``index_together`` elements must be lists or tuples."
msgstr ""

#: ../../ref/checks.txt:108
msgid "**models.E010**: ``unique_together`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:109
msgid ""
"**models.E011**: All ``unique_together`` elements must be lists or tuples."
msgstr ""

#: ../../ref/checks.txt:110
msgid ""
"**models.E012**: ``index_together/unique_together`` refers to the non-"
"existent field ``<field name>``."
msgstr ""

#: ../../ref/checks.txt:112
msgid ""
"**models.E013**: ``index_together/unique_together`` refers to a "
"``ManyToManyField`` ``<field name>``, but ``ManyToManyField``\\s are not "
"supported for that option."
msgstr ""

#: ../../ref/checks.txt:115
msgid ""
"**models.E014**: ``ordering`` must be a tuple or list (even if you want to "
"order by only one field)."
msgstr ""

#: ../../ref/checks.txt:117
msgid ""
"**models.E015**: ``ordering`` refers to the non-existent field ``<field "
"name>``."
msgstr ""

#: ../../ref/checks.txt:119
msgid ""
"**models.E016**: ``index_together/unique_together`` refers to field "
"``<field_name>`` which is not local to model ``<model>``."
msgstr ""

#: ../../ref/checks.txt:121
msgid "**models.E017**: Proxy model ``<model>`` contains model fields."
msgstr ""

#: ../../ref/checks.txt:122
msgid ""
"**models.E018**: Autogenerated column name too long for field ``<field>``. "
"Maximum length is ``<maximum length>`` for database ``<alias>``."
msgstr ""

#: ../../ref/checks.txt:124
msgid ""
"**models.E019**: Autogenerated column name too long for M2M field ``<M2M "
"field>``. Maximum length is ``<maximum length>`` for database ``<alias>``."
msgstr ""

#: ../../ref/checks.txt:127
msgid ""
"**models.E020**: The ``<model>.check()`` class method is currently "
"overridden."
msgstr ""

#: ../../ref/checks.txt:130 ../../ref/contrib/auth.txt:15
#: ../../ref/contrib/auth.txt:307 ../../ref/contrib/auth.txt:343
msgid "Fields"
msgstr ""

#: ../../ref/checks.txt:132
msgid "**fields.E001**: Field names must not end with an underscore."
msgstr ""

#: ../../ref/checks.txt:133
msgid "**fields.E002**: Field names must not contain ``\"__\"``."
msgstr ""

#: ../../ref/checks.txt:134
msgid ""
"**fields.E003**: ``pk`` is a reserved word that cannot be used as a field "
"name."
msgstr ""

#: ../../ref/checks.txt:136
msgid ""
"**fields.E004**: ``choices`` must be an iterable (e.g., a list or tuple)."
msgstr ""

#: ../../ref/checks.txt:137
msgid ""
"**fields.E005**: ``choices`` must be an iterable returning ``(actual value, "
"human readable name)`` tuples."
msgstr ""

#: ../../ref/checks.txt:139
msgid "**fields.E006**: ``db_index`` must be ``None``, ``True`` or ``False``."
msgstr ""

#: ../../ref/checks.txt:140
msgid "**fields.E007**: Primary keys must not have ``null=True``."
msgstr ""

#: ../../ref/checks.txt:141
msgid "**fields.E100**: ``AutoField``\\s must set primary_key=True."
msgstr ""

#: ../../ref/checks.txt:142
msgid "**fields.E110**: ``BooleanField``\\s do not accept null values."
msgstr ""

#: ../../ref/checks.txt:143
msgid ""
"**fields.E120**: ``CharField``\\s must define a ``max_length`` attribute."
msgstr ""

#: ../../ref/checks.txt:144
msgid "**fields.E121**: ``max_length`` must be a positive integer."
msgstr ""

#: ../../ref/checks.txt:145
msgid ""
"**fields.W122**: ``max_length`` is ignored when used with ``IntegerField``."
msgstr ""

#: ../../ref/checks.txt:146
msgid ""
"**fields.E130**: ``DecimalField``\\s must define a ``decimal_places`` "
"attribute."
msgstr ""

#: ../../ref/checks.txt:147
msgid "**fields.E131**: ``decimal_places`` must be a non-negative integer."
msgstr ""

#: ../../ref/checks.txt:148
msgid ""
"**fields.E132**: ``DecimalField``\\s must define a ``max_digits`` attribute."
msgstr ""

#: ../../ref/checks.txt:149
msgid "**fields.E133**: ``max_digits`` must be a non-negative integer."
msgstr ""

#: ../../ref/checks.txt:150
msgid ""
"**fields.E134**: ``max_digits`` must be greater or equal to "
"``decimal_places``."
msgstr ""

#: ../../ref/checks.txt:151
msgid ""
"**fields.E140**: ``FilePathField``\\s must have either ``allow_files`` or "
"``allow_folders`` set to True."
msgstr ""

#: ../../ref/checks.txt:153
msgid ""
"**fields.E150**: ``GenericIPAddressField``\\s cannot accept blank values if "
"null values are not allowed, as blank values are stored as nulls."
msgstr ""

#: ../../ref/checks.txt:155
msgid ""
"**fields.E160**: The options ``auto_now``, ``auto_now_add``, and ``default``"
" are mutually exclusive. Only one of these options may be present."
msgstr ""

#: ../../ref/checks.txt:157
msgid "**fields.W161**: Fixed default value provided."
msgstr ""

#: ../../ref/checks.txt:158
msgid ""
"**fields.W900**: ``IPAddressField`` has been deprecated. Support for it "
"(except in historical migrations) will be removed in Django 1.9."
msgstr ""

#: ../../ref/checks.txt:162
msgid "File Fields"
msgstr ""

#: ../../ref/checks.txt:164
msgid ""
"**fields.E200**: ``unique`` is not a valid argument for a ``FileField``."
msgstr ""

#: ../../ref/checks.txt:165
msgid ""
"**fields.E201**: ``primary_key`` is not a valid argument for a "
"``FileField``."
msgstr ""

#: ../../ref/checks.txt:166
msgid ""
"**fields.E210**: Cannot use ``ImageField`` because Pillow is not installed."
msgstr ""

#: ../../ref/checks.txt:169
msgid "Related Fields"
msgstr ""

#: ../../ref/checks.txt:171
msgid ""
"**fields.E300**: Field defines a relation with model ``<model>``, which is "
"either not installed, or is abstract."
msgstr ""

#: ../../ref/checks.txt:173
msgid ""
"**fields.E301**: Field defines a relation with the model ``<model>`` which "
"has been swapped out."
msgstr ""

#: ../../ref/checks.txt:175
msgid ""
"**fields.E302**: Accessor for field ``<field name>`` clashes with field "
"``<field name>``."
msgstr ""

#: ../../ref/checks.txt:177
msgid ""
"**fields.E303**: Reverse query name for field ``<field name>`` clashes with "
"field ``<field name>``."
msgstr ""

#: ../../ref/checks.txt:179
msgid ""
"**fields.E304**: Field name ``<field name>`` clashes with accessor for "
"``<field name>``."
msgstr ""

#: ../../ref/checks.txt:181
msgid ""
"**fields.E305**: Field name ``<field name>`` clashes with reverse query name"
" for ``<field name>``."
msgstr ""

#: ../../ref/checks.txt:183
msgid ""
"**fields.E306**: Related name must be a valid Python identifier or end with "
"a ``'+'``."
msgstr ""

#: ../../ref/checks.txt:185
msgid ""
"**fields.E310**: None of the fields ``<field1>``, ``<field2>``, ... on model"
" ``<model>`` have a ``unique=True`` constraint."
msgstr ""

#: ../../ref/checks.txt:187
msgid ""
"**fields.E311**: ``<model>`` must set ``unique=True`` because it is "
"referenced by a ``ForeignKey``."
msgstr ""

#: ../../ref/checks.txt:189
msgid ""
"**fields.E320**: Field specifies ``on_delete=SET_NULL``, but cannot be null."
msgstr ""

#: ../../ref/checks.txt:190
msgid ""
"**fields.E321**: The field specifies ``on_delete=SET_DEFAULT``, but has no "
"default value."
msgstr ""

#: ../../ref/checks.txt:192
msgid "**fields.E330**: ``ManyToManyField``\\s cannot be unique."
msgstr ""

#: ../../ref/checks.txt:193
msgid ""
"**fields.E331**: Field specifies a many-to-many relation through model "
"``<model>``, which has not been installed."
msgstr ""

#: ../../ref/checks.txt:195
msgid ""
"**fields.E332**: Many-to-many fields with intermediate tables must not be "
"symmetrical."
msgstr ""

#: ../../ref/checks.txt:197
msgid ""
"**fields.E333**: The model is used as an intermediate model by ``<model>``, "
"but it has more than two foreign keys to ``<model>``, which is ambiguous. "
"You must specify which two foreign keys Django should use via the "
"``through_fields`` keyword argument."
msgstr ""

#: ../../ref/checks.txt:201
msgid ""
"**fields.E334**: The model is used as an intermediate model by ``<model>``, "
"but it has more than one foreign key from ``<model>``, which is ambiguous. "
"You must specify which foreign key Django should use via the "
"``through_fields`` keyword argument."
msgstr ""

#: ../../ref/checks.txt:205
msgid ""
"**fields.E335**: The model is used as an intermediate model by ``<model>``, "
"but it has more than one foreign key to ``<model>``, which is ambiguous. You"
" must specify which foreign key Django should use via the ``through_fields``"
" keyword argument."
msgstr ""

#: ../../ref/checks.txt:209
msgid ""
"**fields.E336**: The model is used as an intermediary model by ``<model>``, "
"but it does not have foreign key to ``<model>`` or ``<model>``."
msgstr ""

#: ../../ref/checks.txt:211
msgid ""
"**fields.E337**: Field specifies ``through_fields`` but does not provide the"
" names of the two link fields that should be used for the relation through "
"``<model>``."
msgstr ""

#: ../../ref/checks.txt:214
msgid ""
"**fields.E338**: The intermediary model ``<through model>`` has no field "
"``<field name>``."
msgstr ""

#: ../../ref/checks.txt:216
msgid ""
"**fields.E339**: ``<model>.<field name>`` is not a foreign key to "
"``<model>``."
msgstr ""

#: ../../ref/checks.txt:217
msgid "**fields.W340**: ``null`` has no effect on ``ManyToManyField``."
msgstr ""

#: ../../ref/checks.txt:218
msgid "**fields.W341**: ``ManyToManyField`` does not support ``validators``."
msgstr ""

#: ../../ref/checks.txt:219
msgid ""
"**fields.W342**: Setting ``unique=True`` on a ``ForeignKey`` has the same "
"effect as using a ``OneToOneField``."
msgstr ""

#: ../../ref/checks.txt:223 ../../ref/signals.txt:3
msgid "Signals"
msgstr ""

#: ../../ref/checks.txt:225
msgid ""
"**signals.E001**: ``<handler>`` was connected to the ``<signal>`` signal "
"with a lazy reference to the ``<model>`` sender, which has not been "
"installed."
msgstr ""

#: ../../ref/checks.txt:229
msgid "Backwards Compatibility"
msgstr ""

#: ../../ref/checks.txt:231
msgid ""
"The following checks are performed to warn the user of any potential "
"problems that might occur as a result of a version upgrade."
msgstr ""

#: ../../ref/checks.txt:234
msgid ""
"**1_6.W001**: Some project unit tests may not execute as expected. *This "
"check was removed in Django 1.8 due to false positives*."
msgstr ""

#: ../../ref/checks.txt:236
msgid ""
"**1_6.W002**: ``BooleanField`` does not have a default value. *This check "
"was removed in Django 1.8 due to false positives*."
msgstr ""

#: ../../ref/checks.txt:238
msgid ""
"**1_7.W001**:  Django 1.7 changed the global defaults for the "
"``MIDDLEWARE_CLASSES.`` "
"``django.contrib.sessions.middleware.SessionMiddleware``, "
"``django.contrib.auth.middleware.AuthenticationMiddleware``, and "
"``django.contrib.messages.middleware.MessageMiddleware`` were removed from "
"the defaults. If your project needs these middleware then you should "
"configure this setting."
msgstr ""

#: ../../ref/checks.txt:245
msgid ""
"**1_8.W001**: The standalone ``TEMPLATE_*`` settings were deprecated in "
"Django 1.8 and the :setting:`TEMPLATES` dictionary takes precedence. You "
"must put the values of the following settings into your defaults "
"``TEMPLATES`` dict: :setting:`TEMPLATE_DIRS`, "
":setting:`ALLOWED_INCLUDE_ROOTS`, :setting:`TEMPLATE_CONTEXT_PROCESSORS`, "
":setting:`TEMPLATE_DEBUG`, :setting:`TEMPLATE_LOADERS`, "
":setting:`TEMPLATE_STRING_IF_INVALID`."
msgstr ""

#: ../../ref/checks.txt:253
msgid "Admin"
msgstr ""

#: ../../ref/checks.txt:255
msgid "Admin checks are all performed as part of the ``admin`` tag."
msgstr ""

#: ../../ref/checks.txt:257
msgid ""
"The following checks are performed on any "
":class:`~django.contrib.admin.ModelAdmin` (or subclass) that is registered "
"with the admin site:"
msgstr ""

#: ../../ref/checks.txt:261
msgid ""
"**admin.E001**: The value of ``raw_id_fields`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:262
msgid ""
"**admin.E002**: The value of ``raw_id_fields[n]`` refers to ``<field "
"name>``, which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:264
msgid ""
"**admin.E003**: The value of ``raw_id_fields[n]`` must be a ``ForeignKey`` "
"or ``ManyToManyField``."
msgstr ""

#: ../../ref/checks.txt:266
msgid "**admin.E004**: The value of ``fields`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:267
msgid "**admin.E005**: Both ``fieldsets`` and ``fields`` are specified."
msgstr ""

#: ../../ref/checks.txt:268
msgid "**admin.E006**: The value of ``fields`` contains duplicate field(s)."
msgstr ""

#: ../../ref/checks.txt:269
msgid "**admin.E007**: The value of ``fieldsets`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:270
msgid "**admin.E008**: The value of ``fieldsets[n]`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:271
msgid "**admin.E009**: The value of ``fieldsets[n]`` must be of length 2."
msgstr ""

#: ../../ref/checks.txt:272
msgid "**admin.E010**: The value of ``fieldsets[n][1]`` must be a dictionary."
msgstr ""

#: ../../ref/checks.txt:273
msgid ""
"**admin.E011**: The value of ``fieldsets[n][1]`` must contain the key "
"``fields``."
msgstr ""

#: ../../ref/checks.txt:275
msgid "**admin.E012**: There are duplicate field(s) in ``fieldsets[n][1]``."
msgstr ""

#: ../../ref/checks.txt:276
msgid ""
"**admin.E013**: ``fields[n]/fieldsets[n][m]`` cannot include the "
"``ManyToManyField`` ``<field name>``, because that field manually specifies "
"a relationship model."
msgstr ""

#: ../../ref/checks.txt:279
msgid "**admin.E014**: The value of ``exclude`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:280
msgid "**admin.E015**: The value of ``exclude`` contains duplicate field(s)."
msgstr ""

#: ../../ref/checks.txt:281
msgid ""
"**admin.E016**: The value of ``form`` must inherit from ``BaseModelForm``."
msgstr ""

#: ../../ref/checks.txt:282
msgid ""
"**admin.E017**: The value of ``filter_vertical`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:283
msgid ""
"**admin.E018**: The value of ``filter_horizontal`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:284
msgid ""
"**admin.E019**: The value of ``filter_vertical[n]/filter_vertical[n]`` "
"refers to ``<field name>``, which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:286
msgid ""
"**admin.E020**: The value of ``filter_vertical[n]/filter_vertical[n]`` must "
"be a ``ManyToManyField``."
msgstr ""

#: ../../ref/checks.txt:288
msgid "**admin.E021**: The value of ``radio_fields`` must be a dictionary."
msgstr ""

#: ../../ref/checks.txt:289
msgid ""
"**admin.E022**: The value of ``radio_fields`` refers to ``<field name>``, "
"which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:291
msgid ""
"**admin.E023**: The value of ``radio_fields`` refers to ``<field name>``, "
"which is not a ``ForeignKey``, and does not have a ``choices`` definition."
msgstr ""

#: ../../ref/checks.txt:293
msgid ""
"**admin.E024**: The value of ``radio_fields[<field name>]`` must be either "
"``admin.HORIZONTAL`` or ``admin.VERTICAL``."
msgstr ""

#: ../../ref/checks.txt:295
msgid ""
"**admin.E025**: The value of ``view_on_site`` must be either a callable or a"
" boolean value."
msgstr ""

#: ../../ref/checks.txt:297
msgid ""
"**admin.E026**: The value of ``prepopulated_fields`` must be a dictionary."
msgstr ""

#: ../../ref/checks.txt:298
msgid ""
"**admin.E027**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:300
msgid ""
"**admin.E028**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which must not be a ``DateTimeField``, ``ForeignKey`` or "
"``ManyToManyField``."
msgstr ""

#: ../../ref/checks.txt:303
msgid ""
"**admin.E029**: The value of ``prepopulated_fields[<field name>]`` must be a"
" list or tuple."
msgstr ""

#: ../../ref/checks.txt:305
msgid ""
"**admin.E030**: The value of ``prepopulated_fields`` refers to ``<field "
"name>``, which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:307
msgid "**admin.E031**: The value of ``ordering`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:308
msgid ""
"**admin.E032**: The value of ``ordering`` has the random ordering marker "
"``?``, but contains other fields as well."
msgstr ""

#: ../../ref/checks.txt:310
msgid ""
"**admin.E033**: The value of ``ordering`` refers to ``<field name>``, which "
"is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:312
msgid ""
"**admin.E034**: The value of ``readonly_fields`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:313
msgid ""
"**admin.E035**: The value of ``readonly_fields[n]`` is not a callable, an "
"attribute of ``<ModelAdmin class>``, or an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:317
msgid "ModelAdmin"
msgstr ""

#: ../../ref/checks.txt:319
msgid ""
"The following checks are performed on any "
":class:`~django.contrib.admin.ModelAdmin` that is registered with the admin "
"site:"
msgstr ""

#: ../../ref/checks.txt:323
msgid "**admin.E101**: The value of ``save_as`` must be a boolean."
msgstr ""

#: ../../ref/checks.txt:324
msgid "**admin.E102**: The value of ``save_on_top`` must be a boolean."
msgstr ""

#: ../../ref/checks.txt:325
msgid "**admin.E103**: The value of ``inlines`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:326
msgid ""
"**admin.E104**: ``<InlineModelAdmin class>`` must inherit from "
"``BaseModelAdmin``."
msgstr ""

#: ../../ref/checks.txt:328
msgid ""
"**admin.E105**: ``<InlineModelAdmin class>`` must have a ``model`` "
"attribute."
msgstr ""

#: ../../ref/checks.txt:329
msgid ""
"**admin.E106**: The value of ``<InlineModelAdmin class>.model`` must be a "
"``Model``."
msgstr ""

#: ../../ref/checks.txt:331
msgid "**admin.E107**: The value of ``list_display`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:332
msgid ""
"**admin.E108**: The value of ``list_display[n]`` refers to ``<label>``, "
"which is not a callable, an attribute of ``<ModelAdmin class>``, or an "
"attribute or method on ``<model>``."
msgstr ""

#: ../../ref/checks.txt:335
msgid ""
"**admin.E109**: The value of ``list_display[n]`` must not be a "
"``ManyToManyField``."
msgstr ""

#: ../../ref/checks.txt:337
msgid ""
"**admin.E110**: The value of ``list_display_links`` must be a list, a tuple,"
" or ``None``."
msgstr ""

#: ../../ref/checks.txt:339
msgid ""
"**admin.E111**: The value of ``list_display_links[n]`` refers to "
"``<label>``, which is not defined in ``list_display``."
msgstr ""

#: ../../ref/checks.txt:341
msgid "**admin.E112**: The value of ``list_filter`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:342
msgid ""
"**admin.E113**: The value of ``list_filter[n]`` must inherit from "
"``ListFilter``."
msgstr ""

#: ../../ref/checks.txt:344
msgid ""
"**admin.E114**: The value of ``list_filter[n]`` must not inherit from "
"``FieldListFilter``."
msgstr ""

#: ../../ref/checks.txt:346
msgid ""
"**admin.E115**: The value of ``list_filter[n][1]`` must inherit from "
"``FieldListFilter``."
msgstr ""

#: ../../ref/checks.txt:348
msgid ""
"**admin.E116**: The value of ``list_filter[n]`` refers to ``<label>``, which"
" does not refer to a Field."
msgstr ""

#: ../../ref/checks.txt:350
msgid ""
"**admin.E117**: The value of ``list_select_related`` must be a boolean, "
"tuple or list."
msgstr ""

#: ../../ref/checks.txt:352
msgid "**admin.E118**: The value of ``list_per_page`` must be an integer."
msgstr ""

#: ../../ref/checks.txt:353
msgid "**admin.E119**: The value of ``list_max_show_all`` must be an integer."
msgstr ""

#: ../../ref/checks.txt:354
msgid ""
"**admin.E120**: The value of ``list_editable`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:355
msgid ""
"**admin.E121**: The value of ``list_editable[n]`` refers to ``<label>``, "
"which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:357
msgid ""
"**admin.E122**: The value of ``list_editable[n]`` refers to ``<label>``, "
"which is not contained in ``list_display``."
msgstr ""

#: ../../ref/checks.txt:359
msgid ""
"**admin.E123**: The value of ``list_editable[n]`` cannot be in both "
"``list_editable`` and ``list_display_links``."
msgstr ""

#: ../../ref/checks.txt:361
msgid ""
"**admin.E124**: The value of ``list_editable[n]`` refers to the first field "
"in ``list_display`` (``<label>``), which cannot be used unless "
"``list_display_links`` is set."
msgstr ""

#: ../../ref/checks.txt:364
msgid ""
"**admin.E125**: The value of ``list_editable[n]`` refers to ``<field "
"name>``, which is not editable through the admin."
msgstr ""

#: ../../ref/checks.txt:366
msgid ""
"**admin.E126**: The value of ``search_fields`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:367
msgid ""
"**admin.E127**: The value of ``date_hierarchy`` refers to ``<field name>``, "
"which is not an attribute of ``<model>``."
msgstr ""

#: ../../ref/checks.txt:369
msgid ""
"**admin.E128**: The value of ``date_hierarchy`` must be a ``DateField`` or "
"``DateTimeField``."
msgstr ""

#: ../../ref/checks.txt:373
msgid "InlineModelAdmin"
msgstr ""

#: ../../ref/checks.txt:375
msgid ""
"The following checks are performed on any "
":class:`~django.contrib.admin.InlineModelAdmin` that is registered as an "
"inline on a :class:`~django.contrib.admin.ModelAdmin`."
msgstr ""

#: ../../ref/checks.txt:379
msgid ""
"**admin.E201**: Cannot exclude the field ``<field name>``, because it is the"
" foreign key to the parent model ``<app_label>.<model>``."
msgstr ""

#: ../../ref/checks.txt:381
msgid ""
"**admin.E202**: ``<model>`` has no ``ForeignKey`` to ``<parent model>``./ "
"``<model>`` has more than one ``ForeignKey`` to ``<parent model>``."
msgstr ""

#: ../../ref/checks.txt:383
msgid "**admin.E203**: The value of ``extra`` must be an integer."
msgstr ""

#: ../../ref/checks.txt:384
msgid "**admin.E204**: The value of ``max_num`` must be an integer."
msgstr ""

#: ../../ref/checks.txt:385
msgid "**admin.E205**: The value of ``min_num`` must be an integer."
msgstr ""

#: ../../ref/checks.txt:386
msgid ""
"**admin.E206**: The value of ``formset`` must inherit from "
"``BaseModelFormSet``."
msgstr ""

#: ../../ref/checks.txt:390
msgid "GenericInlineModelAdmin"
msgstr ""

#: ../../ref/checks.txt:392
msgid ""
"The following checks are performed on any "
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` that is "
"registered as an inline on a :class:`~django.contrib.admin.ModelAdmin`."
msgstr ""

#: ../../ref/checks.txt:396
msgid ""
"**admin.E301**: ``'ct_field'`` references ``<label>``, which is not a field "
"on ``<model>``."
msgstr ""

#: ../../ref/checks.txt:398
msgid ""
"**admin.E302**: ``'ct_fk_field'`` references ``<label>``, which is not a "
"field on ``<model>``."
msgstr ""

#: ../../ref/checks.txt:400
msgid "**admin.E303**: ``<model>`` has no ``GenericForeignKey``."
msgstr ""

#: ../../ref/checks.txt:401
msgid ""
"**admin.E304**: ``<model>`` has no ``GenericForeignKey`` using content type "
"field ``<field name>`` and object ID field ``<field name>``."
msgstr ""

#: ../../ref/checks.txt:406 ../../ref/settings.txt:2824
msgid "Auth"
msgstr ""

#: ../../ref/checks.txt:408
msgid "**auth.E001**: ``REQUIRED_FIELDS`` must be a list or tuple."
msgstr ""

#: ../../ref/checks.txt:409
msgid ""
"**auth.E002**: The field named as the ``USERNAME_FIELD`` for a custom user "
"model must not be included in ``REQUIRED_FIELDS``."
msgstr ""

#: ../../ref/checks.txt:411
msgid ""
"**auth.E003**: ``<field>`` must be unique because it is named as the "
"``USERNAME_FIELD``."
msgstr ""

#: ../../ref/checks.txt:413
msgid ""
"**auth.W004**: ``<field>`` is named as the ``USERNAME_FIELD``, but it is not"
" unique."
msgstr ""

#: ../../ref/checks.txt:418
msgid "Content Types"
msgstr ""

#: ../../ref/checks.txt:420
msgid ""
"The following checks are performed when a model contains a "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` or "
":class:`~django.contrib.contenttypes.fields.GenericRelation`:"
msgstr ""

#: ../../ref/checks.txt:424
msgid ""
"**contenttypes.E001**: The ``GenericForeignKey`` object ID references the "
"non-existent field ``<field>``."
msgstr ""

#: ../../ref/checks.txt:426
msgid ""
"**contenttypes.E002**: The ``GenericForeignKey`` content type references the"
" non-existent field ``<field>``."
msgstr ""

#: ../../ref/checks.txt:428
msgid "**contenttypes.E003**: ``<field>`` is not a ``ForeignKey``."
msgstr ""

#: ../../ref/checks.txt:429
msgid ""
"**contenttypes.E004**: ``<field>`` is not a ``ForeignKey`` to "
"``contenttypes.ContentType``."
msgstr ""

#: ../../ref/checks.txt:433 ../../ref/settings.txt:3463
#: ../../ref/settings.txt:3490
msgid "Security"
msgstr ""

#: ../../ref/checks.txt:435
msgid ""
"The security checks do not make your site secure. They do not audit code, do"
" intrusion detection, or do anything particularly complex. Rather, they help"
" perform an automated, low-hanging-fruit checklist. They help you remember "
"the simple things that improve your site's security."
msgstr ""

#: ../../ref/checks.txt:440
msgid ""
"Some of these checks may not be appropriate for your particular deployment "
"configuration. For instance, if you do your HTTP to HTTPS redirection in a "
"load balancer, it'd be irritating to be constantly warned about not having "
"enabled :setting:`SECURE_SSL_REDIRECT`. Use "
":setting:`SILENCED_SYSTEM_CHECKS` to silence unneeded checks."
msgstr ""

#: ../../ref/checks.txt:446
msgid ""
"The following checks will be run if you use the :djadminopt:`--deploy` "
"option of the :djadmin:`check` command:"
msgstr ""

#: ../../ref/checks.txt:449
msgid ""
"**security.W001**: You do not have "
":class:`django.middleware.security.SecurityMiddleware` in your "
":setting:`MIDDLEWARE_CLASSES` so the :setting:`SECURE_HSTS_SECONDS`, "
":setting:`SECURE_CONTENT_TYPE_NOSNIFF`, "
":setting:`SECURE_BROWSER_XSS_FILTER`, and :setting:`SECURE_SSL_REDIRECT` "
"settings will have no effect."
msgstr ""

#: ../../ref/checks.txt:454
msgid ""
"**security.W002**: You do not have "
":class:`django.middleware.clickjacking.XFrameOptionsMiddleware` in your "
":setting:`MIDDLEWARE_CLASSES`, so your pages will not be served with an ``'x"
"-frame-options'`` header. Unless there is a good reason for your site to be "
"served in a frame, you should consider enabling this header to help prevent "
"clickjacking attacks."
msgstr ""

#: ../../ref/checks.txt:460
msgid ""
"**security.W003**: You don't appear to be using Django's built-in cross-site"
" request forgery protection via the middleware "
"(:class:`django.middleware.csrf.CsrfViewMiddleware` is not in your "
":setting:`MIDDLEWARE_CLASSES`). Enabling the middleware is the safest "
"approach to ensure you don't leave any holes."
msgstr ""

#: ../../ref/checks.txt:465
msgid ""
"**security.W004**: You have not set a value for the "
":setting:`SECURE_HSTS_SECONDS` setting. If your entire site is served only "
"over SSL, you may want to consider setting a value and enabling :ref:`HTTP "
"Strict Transport Security <http-strict-transport-security>`. Be sure to read"
" the documentation first; enabling HSTS carelessly can cause serious, "
"irreversible problems."
msgstr ""

#: ../../ref/checks.txt:471
msgid ""
"**security.W005**: You have not set the "
":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` setting to ``True``. Without this,"
" your site is potentially vulnerable to attack via an insecure connection to"
" a subdomain. Only set this to ``True`` if you are certain that all "
"subdomains of your domain should be served exclusively via SSL."
msgstr ""

#: ../../ref/checks.txt:476
msgid ""
"**security.W006**: Your :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting is "
"not set to ``True``, so your pages will not be served with an ``'x-content-"
"type-options: nosniff'`` header. You should consider enabling this header to"
" prevent the browser from identifying content types incorrectly."
msgstr ""

#: ../../ref/checks.txt:480
msgid ""
"**security.W007**: Your :setting:`SECURE_BROWSER_XSS_FILTER` setting is not "
"set to ``True``, so your pages will not be served with an ``'x-xss-"
"protection: 1; mode=block'`` header. You should consider enabling this "
"header to activate the browser's XSS filtering and help prevent XSS attacks."
msgstr ""

#: ../../ref/checks.txt:485
msgid ""
"**security.W008**: Your :setting:`SECURE_SSL_REDIRECT` setting is not set to"
" ``True``. Unless your site should be available over both SSL and non-SSL "
"connections, you may want to either set this setting to ``True`` or "
"configure a load balancer or reverse-proxy server  to redirect all "
"connections to HTTPS."
msgstr ""

#: ../../ref/checks.txt:489
msgid ""
"**security.W009**: Your :setting:`SECRET_KEY` has less than 50 characters or"
" less than 5 unique characters. Please generate a long and random "
"``SECRET_KEY``, otherwise many of Django's security-critical features will "
"be vulnerable to attack."
msgstr ""

#: ../../ref/checks.txt:493
msgid ""
"**security.W010**: You have :mod:`django.contrib.sessions` in your "
":setting:`INSTALLED_APPS` but you have not set "
":setting:`SESSION_COOKIE_SECURE` to ``True``. Using a secure-only session "
"cookie makes it more difficult for network traffic sniffers to hijack user "
"sessions."
msgstr ""

#: ../../ref/checks.txt:498
msgid ""
"**security.W011**: You have "
":class:`django.contrib.sessions.middleware.SessionMiddleware` in your "
":setting:`MIDDLEWARE_CLASSES`, but you have not set "
":setting:`SESSION_COOKIE_SECURE` to ``True``. Using a secure-only session "
"cookie makes it more difficult for network traffic sniffers to hijack user "
"sessions."
msgstr ""

#: ../../ref/checks.txt:504
msgid ""
"**security.W012**: :setting:`SESSION_COOKIE_SECURE` is not set to ``True``. "
"Using a secure-only session cookie makes it more difficult for network "
"traffic sniffers to hijack user sessions."
msgstr ""

#: ../../ref/checks.txt:507
msgid ""
"**security.W013**: You have :mod:`django.contrib.sessions` in your "
":setting:`INSTALLED_APPS`, but you have not set "
":setting:`SESSION_COOKIE_HTTPONLY` to ``True``. Using an ``HttpOnly`` "
"session cookie makes it more difficult for cross-site scripting attacks to "
"hijack user sessions."
msgstr ""

#: ../../ref/checks.txt:512
msgid ""
"**security.W014**: You have "
":class:`django.contrib.sessions.middleware.SessionMiddleware` in your "
":setting:`MIDDLEWARE_CLASSES`, but you have not set "
":setting:`SESSION_COOKIE_HTTPONLY` to ``True``. Using an ``HttpOnly`` "
"session cookie makes it more difficult for cross-site scripting attacks to "
"hijack user sessions."
msgstr ""

#: ../../ref/checks.txt:518
msgid ""
"**security.W015**: :setting:`SESSION_COOKIE_HTTPONLY` is not set to "
"``True``. Using an ``HttpOnly`` session cookie makes it more difficult for "
"cross-site scripting attacks to hijack user sessions."
msgstr ""

#: ../../ref/checks.txt:521
msgid ""
"**security.W016**: :setting:`CSRF_COOKIE_SECURE` is not set to ``True``. "
"Using a secure-only CSRF cookie makes it more difficult for network traffic "
"sniffers to steal the CSRF token."
msgstr ""

#: ../../ref/checks.txt:524
msgid ""
"**security.W017**: :setting:`CSRF_COOKIE_HTTPONLY` is not set to ``True``. "
"Using an ``HttpOnly`` CSRF cookie makes it more difficult for cross-site "
"scripting attacks to steal the CSRF token."
msgstr ""

#: ../../ref/checks.txt:527
msgid ""
"**security.W018**: You should not have :setting:`DEBUG` set to ``True`` in "
"deployment."
msgstr ""

#: ../../ref/checks.txt:529
msgid ""
"**security.W019**: You have "
":class:`django.middleware.clickjacking.XFrameOptionsMiddleware` in your "
":setting:`MIDDLEWARE_CLASSES`, but :setting:`X_FRAME_OPTIONS` is not set to "
"``'DENY'``. The default is ``'SAMEORIGIN'``, but unless there is a good "
"reason for your site to serve other parts of itself in a frame, you should "
"change it to ``'DENY'``."
msgstr ""

#: ../../ref/checks.txt:537 ../../ref/settings.txt:3194
msgid "Sites"
msgstr ""

#: ../../ref/checks.txt:539
msgid ""
"The following checks are performed on any model using a "
":class:`~django.contrib.sites.managers.CurrentSiteManager`:"
msgstr ""

#: ../../ref/checks.txt:542
msgid ""
"**sites.E001**: ``CurrentSiteManager`` could not find a field named ``<field"
" name>``."
msgstr ""

#: ../../ref/checks.txt:544
msgid ""
"**sites.E002**: ``CurrentSiteManager`` cannot use ``<field>`` as it is not a"
" ``ForeignKey`` or ``ManyToManyField``."
msgstr ""

#: ../../ref/checks.txt:548 ../../ref/contrib/gis/install/index.txt:59
#: ../../ref/settings.txt:3375
msgid "Database"
msgstr ""

#: ../../ref/checks.txt:551 ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:64
#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:108
#: ../../ref/contrib/gis/geoquerysets.txt:212
#: ../../ref/contrib/gis/geoquerysets.txt:249
#: ../../ref/contrib/gis/geoquerysets.txt:329
#: ../../ref/contrib/gis/geoquerysets.txt:351
#: ../../ref/contrib/gis/install/index.txt:62
msgid "MySQL"
msgstr ""

#: ../../ref/checks.txt:553
msgid "If you're using MySQL, the following checks will be performed:"
msgstr ""

#: ../../ref/checks.txt:555
msgid ""
"**mysql.E001**: MySQL does not allow unique ``CharField``\\s to have a "
"``max_length`` > 255."
msgstr ""

#: ../../ref/class-based-views/base.txt:3
msgid "Base views"
msgstr ""

#: ../../ref/class-based-views/base.txt:5
msgid ""
"The following three classes provide much of the functionality needed to "
"create Django views. You may think of them as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins and "
"Generic class-based views."
msgstr ""

#: ../../ref/class-based-views/base.txt:11
msgid ""
"Many of Django's built-in class-based views inherit from other class-based "
"views or various mixins. Because this inheritance chain is very important, "
"the ancestor classes are  documented under the section title of **Ancestors "
"(MRO)**. MRO is an acronym for Method Resolution Order."
msgstr ""

#: ../../ref/class-based-views/base.txt:17
#: ../../ref/class-based-views/flattened-index.txt:15
msgid "View"
msgstr ""

#: ../../ref/class-based-views/base.txt:21
msgid ""
"The master class-based base view. All other class-based views inherit from "
"this base class."
msgstr ""

#: ../../ref/class-based-views/base.txt:24
#: ../../ref/class-based-views/base.txt:111
#: ../../ref/class-based-views/base.txt:169
#: ../../ref/class-based-views/generic-display.txt:26
#: ../../ref/class-based-views/generic-display.txt:96
msgid "**Method Flowchart**"
msgstr ""

#: ../../ref/class-based-views/base.txt:26
msgid ":meth:`dispatch()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:27
msgid ":meth:`http_method_not_allowed()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:28
msgid ":meth:`options()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:30
#: ../../ref/class-based-views/base.txt:117
#: ../../ref/class-based-views/base.txt:175
#: ../../ref/class-based-views/generic-display.txt:108
#: ../../ref/contrib/messages.txt:368
msgid "**Example views.py**::"
msgstr ""

#: ../../ref/class-based-views/base.txt:40
#: ../../ref/class-based-views/base.txt:132
#: ../../ref/class-based-views/base.txt:193
msgid "**Example urls.py**::"
msgstr ""

#: ../../ref/class-based-views/base.txt:50
#: ../../ref/class-based-views/base.txt:206
#: ../../ref/class-based-views/generic-editing.txt:104
#: ../../ref/class-based-views/generic-editing.txt:161
#: ../../ref/class-based-views/generic-editing.txt:217
#: ../../ref/class-based-views/mixins-simple.txt:44
msgid "**Attributes**"
msgstr ""

#: ../../ref/class-based-views/base.txt:54
msgid "The list of HTTP method names that this view will accept."
msgstr ""

#: ../../ref/class-based-views/base.txt:56 ../../ref/settings.txt:166
#: ../../ref/settings.txt:1014 ../../ref/settings.txt:1055
#: ../../ref/settings.txt:1415 ../../ref/settings.txt:1929
#: ../../ref/settings.txt:1948 ../../ref/settings.txt:2438
#: ../../ref/settings.txt:2509 ../../ref/settings.txt:2606
#: ../../ref/settings.txt:2914 ../../ref/settings.txt:2980
#: ../../ref/settings.txt:3334
msgid "Default::"
msgstr ""

#: ../../ref/class-based-views/base.txt:60
#: ../../ref/class-based-views/base.txt:237
#: ../../ref/class-based-views/flattened-index.txt:22
#: ../../ref/class-based-views/flattened-index.txt:41
#: ../../ref/class-based-views/flattened-index.txt:63
#: ../../ref/class-based-views/flattened-index.txt:98
#: ../../ref/class-based-views/flattened-index.txt:133
#: ../../ref/class-based-views/flattened-index.txt:164
#: ../../ref/class-based-views/flattened-index.txt:203
#: ../../ref/class-based-views/flattened-index.txt:245
#: ../../ref/class-based-views/flattened-index.txt:283
#: ../../ref/class-based-views/flattened-index.txt:322
#: ../../ref/class-based-views/flattened-index.txt:363
#: ../../ref/class-based-views/flattened-index.txt:405
#: ../../ref/class-based-views/flattened-index.txt:449
#: ../../ref/class-based-views/flattened-index.txt:493
#: ../../ref/class-based-views/flattened-index.txt:541
#: ../../ref/class-based-views/flattened-index.txt:588
#: ../../ref/class-based-views/generic-display.txt:161
#: ../../ref/class-based-views/mixins-simple.txt:10
#: ../../ref/class-based-views/mixins-simple.txt:93
msgid "**Methods**"
msgstr ""

#: ../../ref/class-based-views/base.txt:64
msgid "Returns a callable view that takes a request and returns a response::"
msgstr ""

#: ../../ref/class-based-views/base.txt:70
msgid ""
"The ``view`` part of the view -- the method that accepts a ``request`` "
"argument plus arguments, and returns a HTTP response."
msgstr ""

#: ../../ref/class-based-views/base.txt:73
msgid ""
"The default implementation will inspect the HTTP method and attempt to "
"delegate to a method that matches the HTTP method; a ``GET`` will be "
"delegated to ``get()``, a ``POST`` to ``post()``, and so on."
msgstr ""

#: ../../ref/class-based-views/base.txt:77
msgid ""
"By default, a ``HEAD`` request will be delegated to ``get()``. If you need "
"to handle ``HEAD`` requests in a different way than ``GET``, you can "
"override the ``head()`` method. See :ref:`supporting-other-http-methods` for"
" an example."
msgstr ""

#: ../../ref/class-based-views/base.txt:84
msgid ""
"If the view was called with a HTTP method it doesn't support, this method is"
" called instead."
msgstr ""

#: ../../ref/class-based-views/base.txt:87
msgid ""
"The default implementation returns ``HttpResponseNotAllowed`` with a list of"
" allowed methods in plain text."
msgstr ""

#: ../../ref/class-based-views/base.txt:92
msgid ""
"Handles responding to requests for the OPTIONS HTTP verb.  Returns a list of"
" the allowed HTTP method names for the view."
msgstr ""

#: ../../ref/class-based-views/base.txt:96
#: ../../ref/class-based-views/flattened-index.txt:30
msgid "TemplateView"
msgstr ""

#: ../../ref/class-based-views/base.txt:100
msgid ""
"Renders a given template, with the context containing parameters captured in"
" the URL."
msgstr ""

#: ../../ref/class-based-views/base.txt:103
#: ../../ref/class-based-views/base.txt:163
#: ../../ref/class-based-views/generic-date-based.txt:34
#: ../../ref/class-based-views/generic-date-based.txt:98
#: ../../ref/class-based-views/generic-date-based.txt:203
#: ../../ref/class-based-views/generic-date-based.txt:300
#: ../../ref/class-based-views/generic-date-based.txt:403
#: ../../ref/class-based-views/generic-date-based.txt:505
#: ../../ref/class-based-views/generic-date-based.txt:562
#: ../../ref/class-based-views/generic-display.txt:16
#: ../../ref/class-based-views/generic-display.txt:86
#: ../../ref/class-based-views/generic-display.txt:154
#: ../../ref/class-based-views/generic-editing.txt:35
#: ../../ref/class-based-views/generic-editing.txt:91
#: ../../ref/class-based-views/generic-editing.txt:148
#: ../../ref/class-based-views/generic-editing.txt:205
msgid "**Ancestors (MRO)**"
msgstr ""

#: ../../ref/class-based-views/base.txt:105
#: ../../ref/class-based-views/generic-display.txt:18
#: ../../ref/class-based-views/generic-display.txt:88
#: ../../ref/class-based-views/generic-display.txt:156
#: ../../ref/class-based-views/generic-editing.txt:37
#: ../../ref/class-based-views/generic-editing.txt:93
#: ../../ref/class-based-views/generic-editing.txt:150
#: ../../ref/class-based-views/generic-editing.txt:207
msgid "This view inherits methods and attributes from the following views:"
msgstr ""

#: ../../ref/class-based-views/base.txt:107
#: ../../ref/class-based-views/generic-date-based.txt:37
#: ../../ref/class-based-views/generic-date-based.txt:101
#: ../../ref/class-based-views/generic-date-based.txt:206
#: ../../ref/class-based-views/generic-date-based.txt:303
#: ../../ref/class-based-views/generic-date-based.txt:406
#: ../../ref/class-based-views/generic-date-based.txt:508
#: ../../ref/class-based-views/generic-date-based.txt:565
#: ../../ref/class-based-views/generic-display.txt:21
#: ../../ref/class-based-views/generic-display.txt:91
#: ../../ref/class-based-views/generic-editing.txt:39
#: ../../ref/class-based-views/generic-editing.txt:96
#: ../../ref/class-based-views/generic-editing.txt:153
#: ../../ref/class-based-views/generic-editing.txt:210
msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/base.txt:108
#: ../../ref/class-based-views/mixins-editing.txt:26
#: ../../ref/class-based-views/mixins-multiple-object.txt:44
msgid ":class:`django.views.generic.base.ContextMixin`"
msgstr ""

#: ../../ref/class-based-views/base.txt:109
#: ../../ref/class-based-views/base.txt:167
#: ../../ref/class-based-views/generic-date-based.txt:42
#: ../../ref/class-based-views/generic-date-based.txt:107
#: ../../ref/class-based-views/generic-date-based.txt:213
#: ../../ref/class-based-views/generic-date-based.txt:310
#: ../../ref/class-based-views/generic-date-based.txt:414
#: ../../ref/class-based-views/generic-date-based.txt:517
#: ../../ref/class-based-views/generic-date-based.txt:573
#: ../../ref/class-based-views/generic-display.txt:24
#: ../../ref/class-based-views/generic-display.txt:94
#: ../../ref/class-based-views/generic-display.txt:159
#: ../../ref/class-based-views/generic-editing.txt:43
#: ../../ref/class-based-views/generic-editing.txt:102
#: ../../ref/class-based-views/generic-editing.txt:159
#: ../../ref/class-based-views/generic-editing.txt:215
#: ../../ref/class-based-views/mixins-editing.txt:211
msgid ":class:`django.views.generic.base.View`"
msgstr ""

#: ../../ref/class-based-views/base.txt:113
#: ../../ref/class-based-views/base.txt:171
#: ../../ref/class-based-views/generic-display.txt:28
#: ../../ref/class-based-views/generic-display.txt:98
msgid ":meth:`~django.views.generic.base.View.dispatch()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:114
#: ../../ref/class-based-views/base.txt:172
#: ../../ref/class-based-views/generic-display.txt:29
#: ../../ref/class-based-views/generic-display.txt:99
msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:115
msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:142
#: ../../ref/class-based-views/generic-date-based.txt:44
#: ../../ref/class-based-views/generic-date-based.txt:122
#: ../../ref/class-based-views/generic-date-based.txt:215
#: ../../ref/class-based-views/generic-date-based.txt:312
#: ../../ref/class-based-views/generic-date-based.txt:416
#: ../../ref/class-based-views/generic-date-based.txt:575
#: ../../ref/class-based-views/mixins-multiple-object.txt:179
msgid "**Context**"
msgstr ""

#: ../../ref/class-based-views/base.txt:144
msgid ""
"Populated (through :class:`~django.views.generic.base.ContextMixin`) with "
"the keyword arguments captured from the URL pattern that served the view."
msgstr ""

#: ../../ref/class-based-views/base.txt:148
#: ../../ref/class-based-views/flattened-index.txt:52
msgid "RedirectView"
msgstr ""

#: ../../ref/class-based-views/base.txt:152
msgid "Redirects to a given URL."
msgstr ""

#: ../../ref/class-based-views/base.txt:154
msgid ""
"The given URL may contain dictionary-style string formatting, which will be "
"interpolated against the parameters captured in the URL. Because keyword "
"interpolation is *always* done (even if no arguments are passed in), any "
"``\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python"
" will convert them to a single percent sign on output."
msgstr ""

#: ../../ref/class-based-views/base.txt:160
msgid ""
"If the given URL is ``None``, Django will return an ``HttpResponseGone`` "
"(410)."
msgstr ""

#: ../../ref/class-based-views/base.txt:165
msgid "This view inherits methods and attributes from the following view:"
msgstr ""

#: ../../ref/class-based-views/base.txt:173
msgid ":meth:`get_redirect_url()`"
msgstr ""

#: ../../ref/class-based-views/base.txt:210
msgid ""
"The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP "
"error."
msgstr ""

#: ../../ref/class-based-views/base.txt:215
msgid ""
"The name of the URL pattern to redirect to. Reversing will be done using the"
" same args and kwargs as are passed in for this view."
msgstr ""

#: ../../ref/class-based-views/base.txt:220
msgid ""
"Whether the redirect should be permanent. The only difference here is the "
"HTTP status code returned. If ``True``, then the redirect will use status "
"code 301. If ``False``, then the redirect will use status code 302. By "
"default, ``permanent`` is ``True``."
msgstr ""

#: ../../ref/class-based-views/base.txt:227
msgid ""
"The default value of the ``permanent`` attribute will change from ``True`` "
"to ``False`` in Django 1.9."
msgstr ""

#: ../../ref/class-based-views/base.txt:232
msgid ""
"Whether to pass along the GET query string to the new location. If ``True``,"
" then the query string is appended to the URL. If ``False``, then the query "
"string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

#: ../../ref/class-based-views/base.txt:241
msgid "Constructs the target URL for redirection."
msgstr ""

#: ../../ref/class-based-views/base.txt:243
msgid ""
"The default implementation uses :attr:`url` as a starting string and "
"performs expansion of ``%`` named parameters in that string using the named "
"groups captured in the URL."
msgstr ""

#: ../../ref/class-based-views/base.txt:247
msgid ""
"If :attr:`url` is not set, ``get_redirect_url()`` tries to reverse the "
":attr:`pattern_name` using what was captured in the URL (both named and "
"unnamed groups are used)."
msgstr ""

#: ../../ref/class-based-views/base.txt:251
msgid ""
"If requested by :attr:`query_string`, it will also append the query string "
"to the generated URL. Subclasses may implement any behavior they wish, as "
"long as the method returns a redirect-ready URL string."
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:3
msgid "Class-based generic views - flattened index"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:5
msgid ""
"This index provides an alternate organization of the reference documentation"
" for class-based views. For each view, the effective attributes and methods "
"from the class tree are represented under that view. For the reference "
"documentation organized by the class which defines the behavior, see :doc"
":`Class-based views</ref/class-based-views/index>`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:12
msgid "Simple generic views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:18
#: ../../ref/class-based-views/flattened-index.txt:33
#: ../../ref/class-based-views/flattened-index.txt:55
#: ../../ref/class-based-views/flattened-index.txt:82
#: ../../ref/class-based-views/flattened-index.txt:116
#: ../../ref/class-based-views/flattened-index.txt:152
#: ../../ref/class-based-views/flattened-index.txt:182
#: ../../ref/class-based-views/flattened-index.txt:224
#: ../../ref/class-based-views/flattened-index.txt:266
#: ../../ref/class-based-views/flattened-index.txt:303
#: ../../ref/class-based-views/flattened-index.txt:341
#: ../../ref/class-based-views/flattened-index.txt:382
#: ../../ref/class-based-views/flattened-index.txt:426
#: ../../ref/class-based-views/flattened-index.txt:468
#: ../../ref/class-based-views/flattened-index.txt:516
#: ../../ref/class-based-views/flattened-index.txt:564
msgid "**Attributes** (with optional accessor):"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:20
#: ../../ref/class-based-views/flattened-index.txt:36
#: ../../ref/class-based-views/flattened-index.txt:57
#: ../../ref/class-based-views/flattened-index.txt:86
#: ../../ref/class-based-views/flattened-index.txt:121
#: ../../ref/class-based-views/flattened-index.txt:156
#: ../../ref/class-based-views/flattened-index.txt:188
#: ../../ref/class-based-views/flattened-index.txt:230
#: ../../ref/class-based-views/flattened-index.txt:270
#: ../../ref/class-based-views/flattened-index.txt:310
#: ../../ref/class-based-views/flattened-index.txt:348
#: ../../ref/class-based-views/flattened-index.txt:389
#: ../../ref/class-based-views/flattened-index.txt:433
#: ../../ref/class-based-views/flattened-index.txt:477
#: ../../ref/class-based-views/flattened-index.txt:525
#: ../../ref/class-based-views/flattened-index.txt:572
msgid ":attr:`~django.views.generic.base.View.http_method_names`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:24
#: ../../ref/class-based-views/flattened-index.txt:43
#: ../../ref/class-based-views/flattened-index.txt:65
#: ../../ref/class-based-views/flattened-index.txt:100
#: ../../ref/class-based-views/flattened-index.txt:135
#: ../../ref/class-based-views/flattened-index.txt:166
#: ../../ref/class-based-views/flattened-index.txt:205
#: ../../ref/class-based-views/flattened-index.txt:247
#: ../../ref/class-based-views/flattened-index.txt:285
#: ../../ref/class-based-views/flattened-index.txt:324
#: ../../ref/class-based-views/flattened-index.txt:365
#: ../../ref/class-based-views/flattened-index.txt:407
#: ../../ref/class-based-views/flattened-index.txt:451
#: ../../ref/class-based-views/flattened-index.txt:495
#: ../../ref/class-based-views/flattened-index.txt:543
#: ../../ref/class-based-views/flattened-index.txt:590
msgid ":meth:`~django.views.generic.base.View.as_view`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:25
#: ../../ref/class-based-views/flattened-index.txt:44
#: ../../ref/class-based-views/flattened-index.txt:67
#: ../../ref/class-based-views/flattened-index.txt:101
#: ../../ref/class-based-views/flattened-index.txt:136
#: ../../ref/class-based-views/flattened-index.txt:167
#: ../../ref/class-based-views/flattened-index.txt:206
#: ../../ref/class-based-views/flattened-index.txt:248
#: ../../ref/class-based-views/flattened-index.txt:287
#: ../../ref/class-based-views/flattened-index.txt:325
#: ../../ref/class-based-views/flattened-index.txt:366
#: ../../ref/class-based-views/flattened-index.txt:408
#: ../../ref/class-based-views/flattened-index.txt:452
#: ../../ref/class-based-views/flattened-index.txt:496
#: ../../ref/class-based-views/flattened-index.txt:544
#: ../../ref/class-based-views/flattened-index.txt:591
msgid ":meth:`~django.views.generic.base.View.dispatch`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:26
#: ../../ref/class-based-views/flattened-index.txt:47
#: ../../ref/class-based-views/flattened-index.txt:69
#: ../../ref/class-based-views/flattened-index.txt:105
#: ../../ref/class-based-views/flattened-index.txt:140
#: ../../ref/class-based-views/flattened-index.txt:214
#: ../../ref/class-based-views/flattened-index.txt:256
#: ../../ref/class-based-views/flattened-index.txt:291
#: ../../ref/class-based-views/flattened-index.txt:332
#: ../../ref/class-based-views/flattened-index.txt:373
#: ../../ref/class-based-views/flattened-index.txt:417
#: ../../ref/class-based-views/flattened-index.txt:459
#: ../../ref/class-based-views/flattened-index.txt:507
#: ../../ref/class-based-views/flattened-index.txt:555
#: ../../ref/class-based-views/flattened-index.txt:599
msgid "``head()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:27
#: ../../ref/class-based-views/flattened-index.txt:48
#: ../../ref/class-based-views/flattened-index.txt:70
#: ../../ref/class-based-views/flattened-index.txt:106
#: ../../ref/class-based-views/flattened-index.txt:141
#: ../../ref/class-based-views/flattened-index.txt:174
#: ../../ref/class-based-views/flattened-index.txt:215
#: ../../ref/class-based-views/flattened-index.txt:257
#: ../../ref/class-based-views/flattened-index.txt:292
#: ../../ref/class-based-views/flattened-index.txt:333
#: ../../ref/class-based-views/flattened-index.txt:374
#: ../../ref/class-based-views/flattened-index.txt:418
#: ../../ref/class-based-views/flattened-index.txt:460
#: ../../ref/class-based-views/flattened-index.txt:508
#: ../../ref/class-based-views/flattened-index.txt:556
#: ../../ref/class-based-views/flattened-index.txt:600
msgid ":meth:`~django.views.generic.base.View.http_method_not_allowed`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:35
#: ../../ref/class-based-views/flattened-index.txt:84
#: ../../ref/class-based-views/flattened-index.txt:119
#: ../../ref/class-based-views/flattened-index.txt:154
#: ../../ref/class-based-views/flattened-index.txt:184
#: ../../ref/class-based-views/flattened-index.txt:226
#: ../../ref/class-based-views/flattened-index.txt:268
#: ../../ref/class-based-views/flattened-index.txt:307
#: ../../ref/class-based-views/flattened-index.txt:345
#: ../../ref/class-based-views/flattened-index.txt:386
#: ../../ref/class-based-views/flattened-index.txt:430
#: ../../ref/class-based-views/flattened-index.txt:472
#: ../../ref/class-based-views/flattened-index.txt:520
#: ../../ref/class-based-views/flattened-index.txt:567
msgid ":attr:`~django.views.generic.base.TemplateResponseMixin.content_type`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:37
#: ../../ref/class-based-views/flattened-index.txt:90
#: ../../ref/class-based-views/flattened-index.txt:128
#: ../../ref/class-based-views/flattened-index.txt:159
#: ../../ref/class-based-views/flattened-index.txt:194
#: ../../ref/class-based-views/flattened-index.txt:236
#: ../../ref/class-based-views/flattened-index.txt:274
#: ../../ref/class-based-views/flattened-index.txt:317
#: ../../ref/class-based-views/flattened-index.txt:356
#: ../../ref/class-based-views/flattened-index.txt:398
#: ../../ref/class-based-views/flattened-index.txt:440
#: ../../ref/class-based-views/flattened-index.txt:486
#: ../../ref/class-based-views/flattened-index.txt:534
#: ../../ref/class-based-views/flattened-index.txt:578
msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.response_class` "
"[:meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:38
#: ../../ref/class-based-views/flattened-index.txt:93
#: ../../ref/class-based-views/flattened-index.txt:129
#: ../../ref/class-based-views/flattened-index.txt:161
#: ../../ref/class-based-views/flattened-index.txt:198
#: ../../ref/class-based-views/flattened-index.txt:240
#: ../../ref/class-based-views/flattened-index.txt:278
#: ../../ref/class-based-views/flattened-index.txt:318
#: ../../ref/class-based-views/flattened-index.txt:357
#: ../../ref/class-based-views/flattened-index.txt:399
#: ../../ref/class-based-views/flattened-index.txt:441
#: ../../ref/class-based-views/flattened-index.txt:487
#: ../../ref/class-based-views/flattened-index.txt:535
#: ../../ref/class-based-views/flattened-index.txt:581
msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_engine`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:39
#: ../../ref/class-based-views/flattened-index.txt:94
#: ../../ref/class-based-views/flattened-index.txt:130
#: ../../ref/class-based-views/flattened-index.txt:162
#: ../../ref/class-based-views/flattened-index.txt:199
#: ../../ref/class-based-views/flattened-index.txt:241
#: ../../ref/class-based-views/flattened-index.txt:279
#: ../../ref/class-based-views/flattened-index.txt:319
#: ../../ref/class-based-views/flattened-index.txt:358
#: ../../ref/class-based-views/flattened-index.txt:400
#: ../../ref/class-based-views/flattened-index.txt:442
#: ../../ref/class-based-views/flattened-index.txt:488
#: ../../ref/class-based-views/flattened-index.txt:536
#: ../../ref/class-based-views/flattened-index.txt:582
msgid ""
":attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"[:meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:45
#: ../../ref/class-based-views/flattened-index.txt:68
#: ../../ref/class-based-views/flattened-index.txt:102
#: ../../ref/class-based-views/flattened-index.txt:288
#: ../../ref/class-based-views/flattened-index.txt:326
#: ../../ref/class-based-views/flattened-index.txt:367
#: ../../ref/class-based-views/flattened-index.txt:409
#: ../../ref/class-based-views/flattened-index.txt:453
#: ../../ref/class-based-views/flattened-index.txt:497
#: ../../ref/class-based-views/flattened-index.txt:545
#: ../../ref/class-based-views/flattened-index.txt:592
#: ../../ref/class-based-views/generic-display.txt:36
#: ../../ref/class-based-views/generic-display.txt:104
msgid "``get()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:46
#: ../../ref/class-based-views/flattened-index.txt:171
#: ../../ref/class-based-views/flattened-index.txt:210
#: ../../ref/class-based-views/flattened-index.txt:252
msgid ":meth:`~django.views.generic.base.ContextMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:49
#: ../../ref/class-based-views/flattened-index.txt:107
#: ../../ref/class-based-views/flattened-index.txt:143
#: ../../ref/class-based-views/flattened-index.txt:218
#: ../../ref/class-based-views/flattened-index.txt:260
#: ../../ref/class-based-views/flattened-index.txt:294
#: ../../ref/class-based-views/flattened-index.txt:335
#: ../../ref/class-based-views/flattened-index.txt:376
#: ../../ref/class-based-views/flattened-index.txt:420
#: ../../ref/class-based-views/flattened-index.txt:462
#: ../../ref/class-based-views/flattened-index.txt:510
#: ../../ref/class-based-views/flattened-index.txt:558
#: ../../ref/class-based-views/flattened-index.txt:601
msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:58
msgid ":attr:`~django.views.generic.base.RedirectView.pattern_name`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:59
msgid ":attr:`~django.views.generic.base.RedirectView.permanent`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:60
msgid ":attr:`~django.views.generic.base.RedirectView.query_string`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:61
msgid ""
":attr:`~django.views.generic.base.RedirectView.url` "
"[:meth:`~django.views.generic.base.RedirectView.get_redirect_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:66
#: ../../ref/class-based-views/flattened-index.txt:286
msgid "``delete()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:71
msgid "``options()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:72
#: ../../ref/class-based-views/flattened-index.txt:293
msgid "``post()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:73
#: ../../ref/class-based-views/flattened-index.txt:217
#: ../../ref/class-based-views/flattened-index.txt:259
msgid "``put()``"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:76
msgid "Detail Views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:79
#: ../../ref/class-based-views/generic-display.txt:9
msgid "DetailView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:85
#: ../../ref/class-based-views/flattened-index.txt:185
#: ../../ref/class-based-views/flattened-index.txt:227
#: ../../ref/class-based-views/flattened-index.txt:269
#: ../../ref/class-based-views/flattened-index.txt:568
msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.context_object_name` "
"[:meth:`~django.views.generic.detail.SingleObjectMixin.get_context_object_name`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:87
#: ../../ref/class-based-views/flattened-index.txt:190
#: ../../ref/class-based-views/flattened-index.txt:232
#: ../../ref/class-based-views/flattened-index.txt:271
#: ../../ref/class-based-views/flattened-index.txt:573
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.model`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:88
#: ../../ref/class-based-views/flattened-index.txt:191
#: ../../ref/class-based-views/flattened-index.txt:233
#: ../../ref/class-based-views/flattened-index.txt:272
#: ../../ref/class-based-views/flattened-index.txt:576
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.pk_url_kwarg`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:89
#: ../../ref/class-based-views/flattened-index.txt:193
#: ../../ref/class-based-views/flattened-index.txt:235
#: ../../ref/class-based-views/flattened-index.txt:273
#: ../../ref/class-based-views/flattened-index.txt:577
msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` "
"[:meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:91
#: ../../ref/class-based-views/flattened-index.txt:195
#: ../../ref/class-based-views/flattened-index.txt:237
#: ../../ref/class-based-views/flattened-index.txt:275
#: ../../ref/class-based-views/flattened-index.txt:579
msgid ""
":attr:`~django.views.generic.detail.SingleObjectMixin.slug_field` "
"[:meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:92
#: ../../ref/class-based-views/flattened-index.txt:196
#: ../../ref/class-based-views/flattened-index.txt:238
#: ../../ref/class-based-views/flattened-index.txt:276
#: ../../ref/class-based-views/flattened-index.txt:580
msgid ":attr:`~django.views.generic.detail.SingleObjectMixin.slug_url_kwarg`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:95
#: ../../ref/class-based-views/flattened-index.txt:200
#: ../../ref/class-based-views/flattened-index.txt:242
#: ../../ref/class-based-views/flattened-index.txt:280
#: ../../ref/class-based-views/flattened-index.txt:583
msgid ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_field`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:96
#: ../../ref/class-based-views/flattened-index.txt:201
#: ../../ref/class-based-views/flattened-index.txt:243
#: ../../ref/class-based-views/flattened-index.txt:281
#: ../../ref/class-based-views/flattened-index.txt:584
msgid ""
":attr:`~django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:103
#: ../../ref/class-based-views/flattened-index.txt:289
#: ../../ref/class-based-views/flattened-index.txt:593
msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:104
#: ../../ref/class-based-views/flattened-index.txt:213
#: ../../ref/class-based-views/flattened-index.txt:255
#: ../../ref/class-based-views/flattened-index.txt:290
#: ../../ref/class-based-views/flattened-index.txt:596
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:110
msgid "List Views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:113
#: ../../ref/class-based-views/generic-display.txt:76
msgid "ListView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:118
#: ../../ref/class-based-views/flattened-index.txt:305
#: ../../ref/class-based-views/flattened-index.txt:343
#: ../../ref/class-based-views/flattened-index.txt:384
#: ../../ref/class-based-views/flattened-index.txt:428
#: ../../ref/class-based-views/flattened-index.txt:470
#: ../../ref/class-based-views/flattened-index.txt:518
msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` "
"[:meth:`~django.views.generic.list.MultipleObjectMixin.get_allow_empty`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:120
#: ../../ref/class-based-views/flattened-index.txt:308
#: ../../ref/class-based-views/flattened-index.txt:346
#: ../../ref/class-based-views/flattened-index.txt:387
#: ../../ref/class-based-views/flattened-index.txt:431
#: ../../ref/class-based-views/flattened-index.txt:473
#: ../../ref/class-based-views/flattened-index.txt:521
msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.context_object_name` "
"[:meth:`~django.views.generic.list.MultipleObjectMixin.get_context_object_name`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:122
#: ../../ref/class-based-views/flattened-index.txt:311
#: ../../ref/class-based-views/flattened-index.txt:350
#: ../../ref/class-based-views/flattened-index.txt:390
#: ../../ref/class-based-views/flattened-index.txt:434
#: ../../ref/class-based-views/flattened-index.txt:478
#: ../../ref/class-based-views/flattened-index.txt:526
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.model`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:123
#: ../../ref/class-based-views/flattened-index.txt:312
#: ../../ref/class-based-views/flattened-index.txt:351
#: ../../ref/class-based-views/flattened-index.txt:393
#: ../../ref/class-based-views/flattened-index.txt:435
#: ../../ref/class-based-views/flattened-index.txt:481
#: ../../ref/class-based-views/flattened-index.txt:529
msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.ordering` "
"[:meth:`~django.views.generic.list.MultipleObjectMixin.get_ordering`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:124
#: ../../ref/class-based-views/flattened-index.txt:313
#: ../../ref/class-based-views/flattened-index.txt:352
#: ../../ref/class-based-views/flattened-index.txt:394
#: ../../ref/class-based-views/flattened-index.txt:436
#: ../../ref/class-based-views/flattened-index.txt:482
#: ../../ref/class-based-views/flattened-index.txt:530
msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_by` "
"[:meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_by`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:125
#: ../../ref/class-based-views/flattened-index.txt:314
#: ../../ref/class-based-views/flattened-index.txt:353
#: ../../ref/class-based-views/flattened-index.txt:395
#: ../../ref/class-based-views/flattened-index.txt:437
#: ../../ref/class-based-views/flattened-index.txt:483
#: ../../ref/class-based-views/flattened-index.txt:531
msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.paginate_orphans` "
"[:meth:`~django.views.generic.list.MultipleObjectMixin.get_paginate_orphans`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:126
#: ../../ref/class-based-views/flattened-index.txt:315
#: ../../ref/class-based-views/flattened-index.txt:354
#: ../../ref/class-based-views/flattened-index.txt:396
#: ../../ref/class-based-views/flattened-index.txt:438
#: ../../ref/class-based-views/flattened-index.txt:484
#: ../../ref/class-based-views/flattened-index.txt:532
msgid ":attr:`~django.views.generic.list.MultipleObjectMixin.paginator_class`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:127
#: ../../ref/class-based-views/flattened-index.txt:316
#: ../../ref/class-based-views/flattened-index.txt:355
#: ../../ref/class-based-views/flattened-index.txt:397
#: ../../ref/class-based-views/flattened-index.txt:439
#: ../../ref/class-based-views/flattened-index.txt:485
#: ../../ref/class-based-views/flattened-index.txt:533
msgid ""
":attr:`~django.views.generic.list.MultipleObjectMixin.queryset` "
"[:meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:131
#: ../../ref/class-based-views/flattened-index.txt:320
#: ../../ref/class-based-views/flattened-index.txt:359
#: ../../ref/class-based-views/flattened-index.txt:401
#: ../../ref/class-based-views/flattened-index.txt:443
#: ../../ref/class-based-views/flattened-index.txt:489
#: ../../ref/class-based-views/flattened-index.txt:537
msgid ""
":attr:`~django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:137
msgid ":meth:`~django.views.generic.list.BaseListView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:138
#: ../../ref/class-based-views/flattened-index.txt:327
#: ../../ref/class-based-views/flattened-index.txt:368
#: ../../ref/class-based-views/flattened-index.txt:410
#: ../../ref/class-based-views/flattened-index.txt:454
#: ../../ref/class-based-views/flattened-index.txt:498
#: ../../ref/class-based-views/flattened-index.txt:546
msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:139
#: ../../ref/class-based-views/flattened-index.txt:331
#: ../../ref/class-based-views/flattened-index.txt:372
#: ../../ref/class-based-views/flattened-index.txt:415
#: ../../ref/class-based-views/flattened-index.txt:458
#: ../../ref/class-based-views/flattened-index.txt:504
#: ../../ref/class-based-views/flattened-index.txt:552
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_paginator`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:142
#: ../../ref/class-based-views/flattened-index.txt:334
#: ../../ref/class-based-views/flattened-index.txt:375
#: ../../ref/class-based-views/flattened-index.txt:419
#: ../../ref/class-based-views/flattened-index.txt:461
#: ../../ref/class-based-views/flattened-index.txt:509
#: ../../ref/class-based-views/flattened-index.txt:557
msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:146
msgid "Editing views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:149
#: ../../ref/class-based-views/generic-editing.txt:28
msgid "FormView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:155
msgid ""
":attr:`~django.views.generic.edit.FormMixin.form_class` "
"[:meth:`~django.views.generic.edit.FormMixin.get_form_class`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:157
#: ../../ref/class-based-views/flattened-index.txt:189
#: ../../ref/class-based-views/flattened-index.txt:231
msgid ""
":attr:`~django.views.generic.edit.FormMixin.initial` "
"[:meth:`~django.views.generic.edit.FormMixin.get_initial`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:158
#: ../../ref/class-based-views/flattened-index.txt:192
#: ../../ref/class-based-views/flattened-index.txt:234
msgid ""
":attr:`~django.views.generic.edit.FormMixin.prefix` "
"[:meth:`~django.views.generic.edit.FormMixin.get_prefix`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:160
msgid ""
":attr:`~django.views.generic.edit.FormMixin.success_url` "
"[:meth:`~django.views.generic.edit.FormMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:168
#: ../../ref/class-based-views/flattened-index.txt:207
#: ../../ref/class-based-views/flattened-index.txt:249
msgid ":meth:`~django.views.generic.edit.FormMixin.form_invalid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:169
msgid ":meth:`~django.views.generic.edit.FormMixin.form_valid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:170
#: ../../ref/class-based-views/flattened-index.txt:209
#: ../../ref/class-based-views/flattened-index.txt:251
msgid ":meth:`~django.views.generic.edit.ProcessFormView.get`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:172
#: ../../ref/class-based-views/flattened-index.txt:211
#: ../../ref/class-based-views/flattened-index.txt:253
msgid ":meth:`~django.views.generic.edit.FormMixin.get_form`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:173
msgid ":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:175
#: ../../ref/class-based-views/flattened-index.txt:216
#: ../../ref/class-based-views/flattened-index.txt:258
msgid ":meth:`~django.views.generic.edit.ProcessFormView.post`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:176
msgid ":meth:`~django.views.generic.edit.ProcessFormView.put`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:179
#: ../../ref/class-based-views/generic-editing.txt:84
msgid "CreateView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:186
#: ../../ref/class-based-views/flattened-index.txt:228
msgid ":attr:`~django.views.generic.edit.ModelFormMixin.fields`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:187
#: ../../ref/class-based-views/flattened-index.txt:229
msgid ""
":attr:`~django.views.generic.edit.FormMixin.form_class` "
"[:meth:`~django.views.generic.edit.ModelFormMixin.get_form_class`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:197
#: ../../ref/class-based-views/flattened-index.txt:239
msgid ""
":attr:`~django.views.generic.edit.FormMixin.success_url` "
"[:meth:`~django.views.generic.edit.ModelFormMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:208
#: ../../ref/class-based-views/flattened-index.txt:250
msgid ":meth:`~django.views.generic.edit.ModelFormMixin.form_valid`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:212
#: ../../ref/class-based-views/flattened-index.txt:254
msgid ":meth:`~django.views.generic.edit.ModelFormMixin.get_form_kwargs`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:221
#: ../../ref/class-based-views/generic-editing.txt:139
msgid "UpdateView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:263
#: ../../ref/class-based-views/generic-editing.txt:196
msgid "DeleteView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:277
msgid ""
":attr:`~django.views.generic.edit.DeletionMixin.success_url` "
"[:meth:`~django.views.generic.edit.DeletionMixin.get_success_url`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:297
msgid "Date-based views"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:300
#: ../../ref/class-based-views/generic-date-based.txt:26
msgid "ArchiveIndexView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:306
#: ../../ref/class-based-views/flattened-index.txt:344
#: ../../ref/class-based-views/flattened-index.txt:385
#: ../../ref/class-based-views/flattened-index.txt:429
#: ../../ref/class-based-views/flattened-index.txt:471
#: ../../ref/class-based-views/flattened-index.txt:519
#: ../../ref/class-based-views/flattened-index.txt:566
msgid ""
":attr:`~django.views.generic.dates.DateMixin.allow_future` "
"[:meth:`~django.views.generic.dates.DateMixin.get_allow_future`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:309
#: ../../ref/class-based-views/flattened-index.txt:347
#: ../../ref/class-based-views/flattened-index.txt:388
#: ../../ref/class-based-views/flattened-index.txt:432
#: ../../ref/class-based-views/flattened-index.txt:474
#: ../../ref/class-based-views/flattened-index.txt:522
#: ../../ref/class-based-views/flattened-index.txt:569
msgid ""
":attr:`~django.views.generic.dates.DateMixin.date_field` "
"[:meth:`~django.views.generic.dates.DateMixin.get_date_field`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:328
#: ../../ref/class-based-views/flattened-index.txt:369
#: ../../ref/class-based-views/flattened-index.txt:411
#: ../../ref/class-based-views/flattened-index.txt:455
#: ../../ref/class-based-views/flattened-index.txt:499
#: ../../ref/class-based-views/flattened-index.txt:547
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_date_list`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:329
#: ../../ref/class-based-views/flattened-index.txt:370
#: ../../ref/class-based-views/flattened-index.txt:412
#: ../../ref/class-based-views/flattened-index.txt:456
#: ../../ref/class-based-views/flattened-index.txt:500
#: ../../ref/class-based-views/flattened-index.txt:548
msgid ":meth:`~django.views.generic.dates.BaseDateListView.get_dated_items`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:330
#: ../../ref/class-based-views/flattened-index.txt:371
#: ../../ref/class-based-views/flattened-index.txt:413
#: ../../ref/class-based-views/flattened-index.txt:457
#: ../../ref/class-based-views/flattened-index.txt:501
#: ../../ref/class-based-views/flattened-index.txt:549
msgid ""
":meth:`~django.views.generic.dates.BaseDateListView.get_dated_queryset`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:338
#: ../../ref/class-based-views/generic-date-based.txt:90
msgid "YearArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:349
msgid ""
":attr:`~django.views.generic.dates.YearArchiveView.make_object_list` "
"[:meth:`~django.views.generic.dates.YearArchiveView.get_make_object_list`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:360
#: ../../ref/class-based-views/flattened-index.txt:402
#: ../../ref/class-based-views/flattened-index.txt:446
#: ../../ref/class-based-views/flattened-index.txt:490
#: ../../ref/class-based-views/flattened-index.txt:538
#: ../../ref/class-based-views/flattened-index.txt:585
msgid ""
":attr:`~django.views.generic.dates.YearMixin.year` "
"[:meth:`~django.views.generic.dates.YearMixin.get_year`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:361
#: ../../ref/class-based-views/flattened-index.txt:403
#: ../../ref/class-based-views/flattened-index.txt:447
#: ../../ref/class-based-views/flattened-index.txt:491
#: ../../ref/class-based-views/flattened-index.txt:539
#: ../../ref/class-based-views/flattened-index.txt:586
msgid ""
":attr:`~django.views.generic.dates.YearMixin.year_format` "
"[:meth:`~django.views.generic.dates.YearMixin.get_year_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:379
#: ../../ref/class-based-views/generic-date-based.txt:195
msgid "MonthArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:391
#: ../../ref/class-based-views/flattened-index.txt:479
#: ../../ref/class-based-views/flattened-index.txt:527
#: ../../ref/class-based-views/flattened-index.txt:574
msgid ""
":attr:`~django.views.generic.dates.MonthMixin.month` "
"[:meth:`~django.views.generic.dates.MonthMixin.get_month`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:392
#: ../../ref/class-based-views/flattened-index.txt:480
#: ../../ref/class-based-views/flattened-index.txt:528
#: ../../ref/class-based-views/flattened-index.txt:575
msgid ""
":attr:`~django.views.generic.dates.MonthMixin.month_format` "
"[:meth:`~django.views.generic.dates.MonthMixin.get_month_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:414
#: ../../ref/class-based-views/flattened-index.txt:503
#: ../../ref/class-based-views/flattened-index.txt:551
#: ../../ref/class-based-views/flattened-index.txt:595
msgid ":meth:`~django.views.generic.dates.MonthMixin.get_next_month`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:416
#: ../../ref/class-based-views/flattened-index.txt:506
#: ../../ref/class-based-views/flattened-index.txt:554
#: ../../ref/class-based-views/flattened-index.txt:598
msgid ":meth:`~django.views.generic.dates.MonthMixin.get_previous_month`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:423
#: ../../ref/class-based-views/generic-date-based.txt:292
msgid "WeekArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:444
msgid ""
":attr:`~django.views.generic.dates.WeekMixin.week` "
"[:meth:`~django.views.generic.dates.WeekMixin.get_week`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:445
msgid ""
":attr:`~django.views.generic.dates.WeekMixin.week_format` "
"[:meth:`~django.views.generic.dates.WeekMixin.get_week_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:465
#: ../../ref/class-based-views/generic-date-based.txt:395
msgid "DayArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:475
#: ../../ref/class-based-views/flattened-index.txt:523
#: ../../ref/class-based-views/flattened-index.txt:570
msgid ""
":attr:`~django.views.generic.dates.DayMixin.day` "
"[:meth:`~django.views.generic.dates.DayMixin.get_day`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:476
#: ../../ref/class-based-views/flattened-index.txt:524
#: ../../ref/class-based-views/flattened-index.txt:571
msgid ""
":attr:`~django.views.generic.dates.DayMixin.day_format` "
"[:meth:`~django.views.generic.dates.DayMixin.get_day_format`]"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:502
#: ../../ref/class-based-views/flattened-index.txt:550
#: ../../ref/class-based-views/flattened-index.txt:594
msgid ":meth:`~django.views.generic.dates.DayMixin.get_next_day`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:505
#: ../../ref/class-based-views/flattened-index.txt:553
#: ../../ref/class-based-views/flattened-index.txt:597
msgid ":meth:`~django.views.generic.dates.DayMixin.get_previous_day`"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:513
#: ../../ref/class-based-views/generic-date-based.txt:497
msgid "TodayArchiveView"
msgstr ""

#: ../../ref/class-based-views/flattened-index.txt:561
#: ../../ref/class-based-views/generic-date-based.txt:554
msgid "DateDetailView"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:3
msgid "Generic date views"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:7
msgid ""
"Date-based generic views, provided in :mod:`django.views.generic.dates`, are"
" views for displaying drilldown pages for date-based data."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:12
msgid ""
"Some of the examples on this page assume that an ``Article`` model has been "
"defined as follows in ``myapp/models.py``::"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:30
msgid ""
"A top-level index page showing the \"latest\" objects, by date. Objects with"
" a date in the *future* are not included unless you set ``allow_future`` to "
"``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:36
#: ../../ref/class-based-views/generic-date-based.txt:100
#: ../../ref/class-based-views/generic-date-based.txt:205
#: ../../ref/class-based-views/generic-date-based.txt:302
#: ../../ref/class-based-views/generic-date-based.txt:405
#: ../../ref/class-based-views/generic-date-based.txt:507
#: ../../ref/class-based-views/generic-display.txt:90
msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:38
msgid ":class:`django.views.generic.dates.BaseArchiveIndexView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:39
#: ../../ref/class-based-views/generic-date-based.txt:104
#: ../../ref/class-based-views/generic-date-based.txt:210
#: ../../ref/class-based-views/generic-date-based.txt:307
#: ../../ref/class-based-views/generic-date-based.txt:411
#: ../../ref/class-based-views/generic-date-based.txt:514
msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:40
#: ../../ref/class-based-views/generic-date-based.txt:105
#: ../../ref/class-based-views/generic-date-based.txt:211
#: ../../ref/class-based-views/generic-date-based.txt:308
#: ../../ref/class-based-views/generic-date-based.txt:412
#: ../../ref/class-based-views/generic-date-based.txt:515
#: ../../ref/class-based-views/generic-display.txt:93
#: ../../ref/class-based-views/generic-display.txt:158
msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:41
#: ../../ref/class-based-views/generic-date-based.txt:106
#: ../../ref/class-based-views/generic-date-based.txt:212
#: ../../ref/class-based-views/generic-date-based.txt:309
#: ../../ref/class-based-views/generic-date-based.txt:413
#: ../../ref/class-based-views/generic-date-based.txt:516
#: ../../ref/class-based-views/generic-date-based.txt:570
msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:46
#: ../../ref/class-based-views/generic-date-based.txt:124
msgid ""
"In addition to the context provided by "
":class:`django.views.generic.list.MultipleObjectMixin` (via "
":class:`django.views.generic.dates.BaseDateListView`), the template's "
"context will be:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:51
msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all years that have objects available according to "
"``queryset``, represented as :class:`datetime.datetime` objects, in "
"descending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:56
#: ../../ref/class-based-views/generic-date-based.txt:147
#: ../../ref/class-based-views/generic-date-based.txt:240
#: ../../ref/class-based-views/generic-date-based.txt:332
#: ../../ref/class-based-views/generic-date-based.txt:446
#: ../../ref/class-based-views/generic-date-based.txt:519
#: ../../ref/class-based-views/generic-date-based.txt:580
msgid "**Notes**"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:58
msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:59
msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:60
msgid ""
"Defaults to providing ``date_list`` by year, but this can be altered to "
"month or day using the attribute ``date_list_period``. This also applies to "
"all subclass views."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:64
#: ../../ref/class-based-views/generic-date-based.txt:163
#: ../../ref/class-based-views/generic-date-based.txt:255
#: ../../ref/class-based-views/generic-date-based.txt:348
#: ../../ref/class-based-views/generic-date-based.txt:461
#: ../../ref/class-based-views/generic-date-based.txt:534
#: ../../ref/class-based-views/generic-date-based.txt:584
#: ../../ref/class-based-views/generic-display.txt:55
#: ../../ref/class-based-views/generic-display.txt:124
msgid "**Example myapp/urls.py**::"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:77
msgid "**Example myapp/article_archive.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:87
msgid "This will output all articles."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:94
msgid ""
"A yearly archive page showing all available months in a given year. Objects "
"with a date in the *future* are not displayed unless you set "
"``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:102
msgid ":class:`django.views.generic.dates.BaseYearArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:103
#: ../../ref/class-based-views/generic-date-based.txt:208
#: ../../ref/class-based-views/generic-date-based.txt:305
#: ../../ref/class-based-views/generic-date-based.txt:408
#: ../../ref/class-based-views/generic-date-based.txt:511
#: ../../ref/class-based-views/generic-date-based.txt:567
msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:111
msgid ""
"A boolean specifying whether to retrieve the full list of objects for this "
"year and pass those to the template. If ``True``, the list of objects will "
"be made available to the context. If ``False``, the ``None`` queryset will "
"be used as the object list. By default, this is ``False``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:119
msgid ""
"Determine if an object list will be returned as part of the context. Returns"
" :attr:`~YearArchiveView.make_object_list` by default."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:129
msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all months that have objects available according to "
"``queryset``, represented as :class:`datetime.datetime` objects, in "
"ascending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:134
msgid ""
"``year``: A :class:`~datetime.date` object representing the given year."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:137
msgid ""
"``next_year``: A :class:`~datetime.date` object representing the first day "
"of the next year, according to :attr:`~BaseDateListView.allow_empty` and "
":attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:142
msgid ""
"``previous_year``: A :class:`~datetime.date` object representing the first "
"day of the previous year, according to :attr:`~BaseDateListView.allow_empty`"
" and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:149
msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:151
#: ../../ref/class-based-views/generic-date-based.txt:244
#: ../../ref/class-based-views/generic-date-based.txt:336
#: ../../ref/class-based-views/generic-date-based.txt:450
#: ../../ref/class-based-views/generic-date-based.txt:523
#: ../../ref/class-based-views/generic-display.txt:39
#: ../../ref/class-based-views/generic-editing.txt:57
#: ../../ref/class-based-views/generic-editing.txt:120
#: ../../ref/class-based-views/generic-editing.txt:176
#: ../../ref/class-based-views/generic-editing.txt:227
msgid "**Example myapp/views.py**::"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:175
msgid "**Example myapp/article_archive_year.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:199
msgid ""
"A monthly archive page showing all objects in a given month. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:207
msgid ":class:`django.views.generic.dates.BaseMonthArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:209
#: ../../ref/class-based-views/generic-date-based.txt:409
#: ../../ref/class-based-views/generic-date-based.txt:512
#: ../../ref/class-based-views/generic-date-based.txt:568
msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:217
#: ../../ref/class-based-views/generic-date-based.txt:314
#: ../../ref/class-based-views/generic-date-based.txt:418
msgid ""
"In addition to the context provided by "
":class:`~django.views.generic.list.MultipleObjectMixin` (via "
":class:`~django.views.generic.dates.BaseDateListView`), the template's "
"context will be:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:222
msgid ""
"``date_list``: A :meth:`QuerySet <django.db.models.query.QuerySet.dates>` "
"object containing all days that have objects available in the given month, "
"according to ``queryset``, represented as :class:`datetime.datetime` "
"objects, in ascending order."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:227
msgid ""
"``month``: A :class:`~datetime.date` object representing the given month."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:230
#: ../../ref/class-based-views/generic-date-based.txt:436
msgid ""
"``next_month``: A :class:`~datetime.date` object representing the first day "
"of the next month, according to :attr:`~BaseDateListView.allow_empty` and "
":attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:235
#: ../../ref/class-based-views/generic-date-based.txt:441
msgid ""
"``previous_month``: A :class:`~datetime.date` object representing the first "
"day of the previous month, according to "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:242
msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:272
msgid "**Example myapp/article_archive_month.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:296
msgid ""
"A weekly archive page showing all objects in a given week. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:304
msgid ":class:`django.views.generic.dates.BaseWeekArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:306
msgid ":class:`django.views.generic.dates.WeekMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:319
msgid ""
"``week``: A :class:`~datetime.date` object representing the first day of the"
" given week."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:322
msgid ""
"``next_week``: A :class:`~datetime.date` object representing the first day "
"of the next week, according to :attr:`~BaseDateListView.allow_empty` and "
":attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:327
msgid ""
"``previous_week``: A :class:`~datetime.date` object representing the first "
"day of the previous week, according to :attr:`~BaseDateListView.allow_empty`"
" and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:334
msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:361
msgid "**Example myapp/article_archive_week.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:383
msgid ""
"In this example, you are outputting the week number. The default "
"``week_format`` in the ``WeekArchiveView`` uses  week format ``'%U'`` which "
"is based on the United States week system where the week begins on a Sunday."
" The ``'%W'`` format uses the ISO week format and its week begins on a "
"Monday.  The ``'%W'`` format is the same in both the :func:`~time.strftime` "
"and the :tfilter:`date`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:390
msgid ""
"However, the :tfilter:`date` template filter does not have an equivalent "
"output format that supports the US based week system. The :tfilter:`date` "
"filter ``'%U'`` outputs the number of seconds since the Unix epoch."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:399
msgid ""
"A day archive page showing all objects in a given day. Days in the future "
"throw a 404 error, regardless of whether any objects exist for future days, "
"unless you set ``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:407
#: ../../ref/class-based-views/generic-date-based.txt:510
msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:410
#: ../../ref/class-based-views/generic-date-based.txt:513
#: ../../ref/class-based-views/generic-date-based.txt:569
msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:423
msgid "``day``: A :class:`~datetime.date` object representing the given day."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:426
msgid ""
"``next_day``: A :class:`~datetime.date` object representing the next day, "
"according to :attr:`~BaseDateListView.allow_empty` and "
":attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:431
msgid ""
"``previous_day``: A :class:`~datetime.date` object representing the previous"
" day, according to :attr:`~BaseDateListView.allow_empty` and "
":attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:448
msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:474
msgid "**Example myapp/article_archive_day.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:501
msgid ""
"A day archive page showing all objects for *today*. This is exactly the same"
" as :class:`django.views.generic.dates.DayArchiveView`, except today's date "
"is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:509
msgid ":class:`django.views.generic.dates.BaseTodayArchiveView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:521
msgid "Uses a default ``template_name_suffix`` of ``_archive_today``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:546
msgid "Where is the example template for ``TodayArchiveView``?"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:548
msgid ""
"This view uses by default the same template as the :class:`~DayArchiveView`,"
" which is in the previous example. If you need a different template, set the"
" ``template_name`` attribute to be the name of the new template."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:558
msgid ""
"A page representing an individual object. If the object has a date value in "
"the future, the view will throw a 404 error by default, unless you set "
"``allow_future`` to ``True``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:564
#: ../../ref/class-based-views/generic-display.txt:20
#: ../../ref/class-based-views/generic-editing.txt:95
#: ../../ref/class-based-views/generic-editing.txt:152
#: ../../ref/class-based-views/generic-editing.txt:209
msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:566
msgid ":class:`django.views.generic.dates.BaseDateDetailView`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:571
#: ../../ref/class-based-views/generic-display.txt:22
#: ../../ref/class-based-views/generic-editing.txt:213
msgid "``django.views.generic.detail.BaseDetailView``"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:572
#: ../../ref/class-based-views/generic-display.txt:23
#: ../../ref/class-based-views/generic-editing.txt:100
#: ../../ref/class-based-views/generic-editing.txt:157
#: ../../ref/class-based-views/generic-editing.txt:214
#: ../../ref/class-based-views/mixins-editing.txt:122
msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:577
msgid ""
"Includes the single object associated with the ``model`` specified in the "
"``DateDetailView``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:582
msgid "Uses a default ``template_name_suffix`` of ``_detail``."
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:595
#: ../../ref/class-based-views/generic-display.txt:65
msgid "**Example myapp/article_detail.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-date-based.txt:603
msgid ""
"All of the generic views listed above have matching ``Base`` views that only"
" differ in that they do not include the "
":class:`~django.views.generic.list.MultipleObjectTemplateResponseMixin` (for"
" the archive views) or "
":class:`~django.views.generic.detail.SingleObjectTemplateResponseMixin` (for"
" the :class:`DateDetailView`):"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:3
msgid "Generic display views"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:5
msgid ""
"The two following generic class-based views are designed to display data. On"
" many projects they are typically the most commonly used views."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:13
msgid ""
"While this view is executing, ``self.object`` will contain the object that "
"the view is operating upon."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:30
#: ../../ref/class-based-views/generic-display.txt:100
msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.get_template_names()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:31
msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_slug_field()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:32
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_queryset()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:33
msgid ":meth:`~django.views.generic.detail.SingleObjectMixin.get_object()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:34
msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_object_name()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:35
msgid ""
":meth:`~django.views.generic.detail.SingleObjectMixin.get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:37
#: ../../ref/class-based-views/generic-display.txt:105
msgid ""
":meth:`~django.views.generic.base.TemplateResponseMixin.render_to_response()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:80
msgid "A page representing a list of objects."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:82
msgid ""
"While this view is executing, ``self.object_list`` will contain the list of "
"objects (usually, but not necessarily a queryset) that the view is operating"
" upon."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:92
msgid ":class:`django.views.generic.list.BaseListView`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:101
msgid ":meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:102
msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_object_name()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:103
msgid ""
":meth:`~django.views.generic.list.MultipleObjectMixin.get_context_data()`"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:134
msgid "**Example myapp/article_list.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:149
msgid ""
"A base view for displaying a list of objects. It is not intended to be used "
"directly, but rather as a parent class of the "
":class:`django.views.generic.list.ListView` or other views representing "
"lists of objects."
msgstr ""

#: ../../ref/class-based-views/generic-display.txt:165
msgid ""
"Adds ``object_list`` to the context. If "
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is True "
"then display an empty list. If "
":attr:`~django.views.generic.list.MultipleObjectMixin.allow_empty` is False "
"then raise a 404 error."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:3
msgid "Generic editing views"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:5
msgid ""
"The following views are described on this page and provide a foundation for "
"editing content:"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:8
msgid ":class:`django.views.generic.edit.FormView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:9
msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:10
msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:11
msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:15
msgid ""
"Some of the examples on this page assume that an ``Author`` model has been "
"defined as follows in ``myapp/models.py``::"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:32
msgid ""
"A view that displays a form. On error, redisplays the form with validation "
"errors; on success, redirects to a new URL."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:40
msgid "``django.views.generic.edit.BaseFormView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:41
#: ../../ref/class-based-views/generic-editing.txt:99
#: ../../ref/class-based-views/generic-editing.txt:156
#: ../../ref/class-based-views/mixins-editing.txt:7
#: ../../ref/class-based-views/mixins-editing.txt:121
msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:42
#: ../../ref/class-based-views/generic-editing.txt:101
#: ../../ref/class-based-views/generic-editing.txt:158
#: ../../ref/class-based-views/mixins-editing.txt:9
msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:45
msgid "**Example myapp/forms.py**::"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:73
msgid "**Example myapp/contact.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:88
msgid ""
"A view that displays a form for creating an object, redisplaying the form "
"with validation errors (if there are any) and saving the object."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:97
msgid "``django.views.generic.edit.BaseCreateView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:98
#: ../../ref/class-based-views/generic-editing.txt:155
#: ../../ref/class-based-views/mixins-editing.txt:8
msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:108
msgid ""
"The ``CreateView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_form'``. For example, changing this "
"attribute to ``'_create_form'`` for a view creating objects for the example "
"``Author`` model would cause the default ``template_name`` to be "
"``'myapp/author_create_form.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:116
msgid ""
"When using ``CreateView`` you have access to ``self.object``, which is the "
"object being created. If the object hasn't been created yet, the value will "
"be ``None``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:129
msgid "**Example myapp/author_form.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:143
msgid ""
"A view that displays a form for editing an existing object, redisplaying the"
" form with validation errors (if there are any) and saving changes to the "
"object. This uses a form automatically generated from the object's model "
"class (unless a form class is manually specified)."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:154
msgid "``django.views.generic.edit.BaseUpdateView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:165
msgid ""
"The ``UpdateView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_form'``. For example, changing this "
"attribute to ``'_update_form'`` for a view updating objects for the example "
"``Author`` model would cause the default ``template_name`` to be "
"``'myapp/author_update_form.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:173
msgid ""
"When using ``UpdateView`` you have access to ``self.object``, which is the "
"object being updated."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:186
msgid "**Example myapp/author_update_form.html**:"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:200
msgid ""
"A view that displays a confirmation page and deletes an existing object. The"
" given object will only be deleted if the request method is ``POST``. If "
"this view is fetched via ``GET``, it will display a confirmation page that "
"should contain a form that POSTs to the same URL."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:211
msgid "``django.views.generic.edit.BaseDeleteView``"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:212
#: ../../ref/class-based-views/mixins-editing.txt:10
msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:221
msgid ""
"The ``DeleteView`` page displayed to a ``GET`` request uses a "
"``template_name_suffix`` of ``'_confirm_delete'``. For example, changing "
"this attribute to ``'_check_delete'`` for a view deleting objects for the "
"example ``Author`` model would cause the default ``template_name`` to be "
"``'myapp/author_check_delete.html'``."
msgstr ""

#: ../../ref/class-based-views/generic-editing.txt:237
msgid "**Example myapp/author_confirm_delete.html**:"
msgstr ""

#: ../../ref/class-based-views/index.txt:3
msgid "Built-in class-based views API"
msgstr ""

#: ../../ref/class-based-views/index.txt:5
msgid ""
"Class-based views API reference. For introductory material, see the "
":doc:`/topics/class-based-views/index` topic guide."
msgstr ""

#: ../../ref/class-based-views/index.txt:19
msgid "Specification"
msgstr ""

#: ../../ref/class-based-views/index.txt:21
msgid ""
"Each request served by a class-based view has an independent state; "
"therefore, it is safe to store state variables on the instance (i.e., "
"``self.foo = 3`` is a thread-safe operation)."
msgstr ""

#: ../../ref/class-based-views/index.txt:25
msgid ""
"A class-based view is deployed into a URL pattern using the "
":meth:`~django.views.generic.base.View.as_view()` classmethod::"
msgstr ""

#: ../../ref/class-based-views/index.txt:32
msgid "Thread safety with view arguments"
msgstr ""

#: ../../ref/class-based-views/index.txt:34
msgid ""
"Arguments passed to a view are shared between every instance of a view. This"
" means that you shouldn't use a list, dictionary, or any other mutable "
"object as an argument to a view. If you do and the shared object is "
"modified, the actions of one user visiting your view could have an effect on"
" subsequent users visiting the same view."
msgstr ""

#: ../../ref/class-based-views/index.txt:40
msgid ""
"Arguments passed into :meth:`~django.views.generic.base.View.as_view()` will"
" be assigned onto the instance that is used to service a request. Using the "
"previous example, this means that every request on ``MyView`` is able to use"
" ``self.size``. Arguments must correspond to attributes that already exist "
"on the class (return ``True`` on a ``hasattr`` check)."
msgstr ""

#: ../../ref/class-based-views/index.txt:47
msgid "Base vs Generic views"
msgstr ""

#: ../../ref/class-based-views/index.txt:49
msgid ""
"Base class-based views can be thought of as *parent* views, which can be "
"used by themselves or inherited from. They may not provide all the "
"capabilities required for projects, in which case there are Mixins which "
"extend what base views can do."
msgstr ""

#: ../../ref/class-based-views/index.txt:54
msgid ""
"Django’s generic views are built off of those base views, and were developed"
" as a shortcut for common usage patterns such as displaying the details of "
"an object. They take certain common idioms and patterns found in view "
"development and abstract them so that you can quickly write common views of "
"data without having to repeat yourself."
msgstr ""

#: ../../ref/class-based-views/index.txt:60
msgid ""
"Most generic views require the ``queryset`` key, which is a ``QuerySet`` "
"instance; see :doc:`/topics/db/queries` for more information about "
"``QuerySet`` objects."
msgstr ""

#: ../../ref/class-based-views/mixins.txt:3
msgid "Class-based views mixins"
msgstr ""

#: ../../ref/class-based-views/mixins.txt:5
msgid ""
"Class-based views API reference. For introductory material, see "
":doc:`/topics/class-based-views/mixins`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:3
msgid "Date-based mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:9
msgid ""
"All the date formatting attributes in these mixins use "
":func:`~time.strftime` format characters. Do not try to use the format "
"characters from the :ttag:`now` template tag as they are not compatible."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:14
msgid "YearMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:18
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"year component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:21
#: ../../ref/class-based-views/mixins-date-based.txt:73
#: ../../ref/class-based-views/mixins-date-based.txt:125
#: ../../ref/class-based-views/mixins-date-based.txt:177
#: ../../ref/class-based-views/mixins-date-based.txt:229
#: ../../ref/class-based-views/mixins-date-based.txt:288
#: ../../ref/class-based-views/mixins-editing.txt:28
#: ../../ref/class-based-views/mixins-editing.txt:124
#: ../../ref/class-based-views/mixins-editing.txt:213
#: ../../ref/class-based-views/mixins-editing.txt:238
#: ../../ref/class-based-views/mixins-multiple-object.txt:46
#: ../../ref/class-based-views/mixins-multiple-object.txt:214
#: ../../ref/class-based-views/mixins-single-object.txt:13
#: ../../ref/class-based-views/mixins-single-object.txt:154
msgid "**Methods and Attributes**"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:25
msgid ""
"The :func:`~time.strftime` format to use when parsing the year. By default, "
"this is ``'%Y'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:30
msgid ""
"**Optional** The value for the year, as a string. By default, set to "
"``None``, which means the year will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:35
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the year. "
"Returns :attr:`~YearMixin.year_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:40
msgid ""
"Returns the year for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:43
msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:44
msgid "The value of the ``year`` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:45
msgid "The value of the ``year`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:47
msgid "Raises a 404 if no valid year specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:51
msgid ""
"Returns a date object containing the first day of the year after the date "
"provided. This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:59
msgid ""
"Returns a date object containing the first day of the year before the date "
"provided. This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:66
msgid "MonthMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:70
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"month component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:77
msgid ""
"The :func:`~time.strftime` format to use when parsing the month. By default,"
" this is ``'%b'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:82
msgid ""
"**Optional** The value for the month, as a string. By default, set to "
"``None``, which means the month will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:87
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the month. "
"Returns :attr:`~MonthMixin.month_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:92
msgid ""
"Returns the month for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:95
msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:96
msgid "The value of the ``month`` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:97
msgid "The value of the ``month`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:99
msgid "Raises a 404 if no valid month specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:103
msgid ""
"Returns a date object containing the first day of the month after the date "
"provided. This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:111
msgid ""
"Returns a date object containing the first day of the month before the date "
"provided. This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:118
msgid "DayMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:122
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"day component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:129
msgid ""
"The :func:`~time.strftime` format to use when parsing the day. By default, "
"this is ``'%d'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:134
msgid ""
"**Optional** The value for the day, as a string. By default, set to "
"``None``, which means the day will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:139
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the day. "
"Returns :attr:`~DayMixin.day_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:144
msgid ""
"Returns the day for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:147
msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:148
msgid "The value of the ``day`` argument captured in the URL pattern."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:149
msgid "The value of the ``day`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:151
msgid "Raises a 404 if no valid day specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:155
msgid ""
"Returns a date object containing the next valid day after the date provided."
" This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:163
msgid ""
"Returns a date object containing the previous valid day. This function can "
"also return ``None`` or raise an :class:`~django.http.Http404` exception, "
"depending on the values of :attr:`~BaseDateListView.allow_empty` and "
":attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:170
msgid "WeekMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:174
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"week component of a date."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:181
msgid ""
"The :func:`~time.strftime` format to use when parsing the week. By default, "
"this is ``'%U'``, which means the week starts on Sunday. Set it to ``'%W'`` "
"if your week starts on Monday."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:187
msgid ""
"**Optional** The value for the week, as a string. By default, set to "
"``None``, which means the week will be determined using other means."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:192
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the week. "
"Returns :attr:`~WeekMixin.week_format` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:197
msgid ""
"Returns the week for which this view will display data, as a string. Tries "
"the following sources, in order:"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:200
msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:201
msgid "The value of the ``week`` argument captured in the URL pattern"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:202
msgid "The value of the ``week`` ``GET`` query argument."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:204
msgid "Raises a 404 if no valid week specification can be found."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:208
msgid ""
"Returns a date object containing the first day of the week after the date "
"provided. This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:216
msgid ""
"Returns a date object containing the first day of the week before the date "
"provided. This function can also return ``None`` or raise an "
":class:`~django.http.Http404` exception, depending on the values of "
":attr:`~BaseDateListView.allow_empty` and :attr:`~DateMixin.allow_future`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:223
msgid "DateMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:227
msgid "A mixin class providing common behavior for all date-based views."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:233
msgid ""
"The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``’s "
"model that the date-based archive should use to determine the list of "
"objects to display on the page."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:237
msgid ""
"When :doc:`time zone support </topics/i18n/timezones>` is enabled and "
"``date_field`` is a ``DateTimeField``, dates are assumed to be in the "
"current time zone. Otherwise, the queryset could include objects from the "
"previous or the next day in the end user's time zone."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:244
msgid ""
"In this situation, if you have implemented per-user time zone selection, the"
" same URL may show a different set of objects, depending on the end user's "
"time zone. To avoid this, you should use a ``DateField`` as the "
"``date_field`` attribute."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:251
msgid ""
"A boolean specifying whether to include \"future\" objects on this page, "
"where \"future\" means objects in which the field specified in "
"``date_field`` is greater than the current date/time. By default, this is "
"``False``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:258
msgid ""
"Returns the name of the field that contains the date data that this view "
"will operate on. Returns :attr:`~DateMixin.date_field` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:263
msgid ""
"Determine whether to include \"future\" objects on this page, where "
"\"future\" means objects in which the field specified in ``date_field`` is "
"greater than the current date/time. Returns :attr:`~DateMixin.allow_future` "
"by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:269
msgid "BaseDateListView"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:273
msgid ""
"A base class that provides common behavior for all date-based views. There "
"won't normally be a reason to instantiate "
":class:`~django.views.generic.dates.BaseDateListView`; instantiate one of "
"the subclasses instead."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:278
msgid ""
"While this view (and its subclasses) are executing, ``self.object_list`` "
"will contain the list of objects that the view is operating upon, and "
"``self.date_list`` will contain the list of dates for which data is "
"available."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:283
#: ../../ref/class-based-views/mixins-editing.txt:24
#: ../../ref/class-based-views/mixins-editing.txt:119
msgid "**Mixins**"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:285
msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:286
msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:292
msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``True`` and no objects are available, the view will "
"display an empty page instead of raising a 404."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:296
msgid ""
"This is identical to "
":attr:`django.views.generic.list.MultipleObjectMixin.allow_empty`, except "
"for the default value, which is ``False``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:302
msgid ""
"**Optional** A string defining the aggregation period for ``date_list``. It "
"must be one of ``'year'`` (default), ``'month'``, or ``'day'``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:308
msgid ""
"Returns a 3-tuple containing (``date_list``, ``object_list``, "
"``extra_context``)."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:311
msgid ""
"``date_list`` is the list of dates for which data is available. "
"``object_list`` is the list of objects. ``extra_context`` is a dictionary of"
" context data that will be added to any context data provided by the "
":class:`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:319
msgid ""
"Returns a queryset, filtered using the query arguments defined by "
"``lookup``. Enforces any restrictions on the queryset, such as "
"``allow_empty`` and ``allow_future``."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:325
msgid ""
"Returns the aggregation period for ``date_list``. Returns "
":attr:`~BaseDateListView.date_list_period` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-date-based.txt:330
msgid ""
"Returns the list of dates of type ``date_type`` for which ``queryset`` "
"contains entries. For example, ``get_date_list(qs, 'year')`` will return the"
" list of years for which ``qs`` has entries. If ``date_type`` isn't "
"provided, the result of :meth:`~BaseDateListView.get_date_list_period` is "
"used. ``date_type`` and ``ordering`` are simply passed to "
":meth:`QuerySet.dates()<django.db.models.query.QuerySet.dates>`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:3
msgid "Editing mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:5
msgid "The following mixins are used to construct Django's editing views:"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:14
msgid ""
"Examples of how these are combined into editing views can be found at the "
"documentation on :doc:`/ref/class-based-views/generic-editing`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:18
msgid "FormMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:22
msgid ""
"A mixin class that provides facilities for creating and displaying forms."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:32
msgid "A dictionary containing initial data for the form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:36
msgid "The form class to instantiate."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:40
#: ../../ref/class-based-views/mixins-editing.txt:149
msgid "The URL to redirect to when the form is successfully processed."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:44
msgid "The :attr:`~django.forms.Form.prefix` for the generated form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:48
msgid ""
"Retrieve initial data for the form. By default, returns a copy of "
":attr:`~django.views.generic.edit.FormMixin.initial`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:53
msgid ""
"Retrieve the form class to instantiate. By default :attr:`.form_class`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:58
msgid ""
"Instantiate an instance of ``form_class`` using "
":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`. If "
"``form_class`` isn't provided :meth:`get_form_class` will be used."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:64
msgid "The ``form_class`` argument is not required anymore."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:68
msgid "Build the keyword arguments required to instantiate the form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:70
msgid ""
"The ``initial`` argument is set to :meth:`.get_initial`. If the request is a"
" ``POST`` or ``PUT``, the request data (``request.POST`` and "
"``request.FILES``) will also be provided."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:76
msgid ""
"Determine the :attr:`~django.forms.Form.prefix` for the generated form. "
"Returns :attr:`~django.views.generic.edit.FormMixin.prefix` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:81
msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`~django.views.generic.edit.FormMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:87
msgid ""
"Redirects to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:92
#: ../../ref/class-based-views/mixins-editing.txt:193
msgid "Renders a response, providing the invalid form as context."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:95
msgid "ModelFormMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:99
msgid ""
"A form mixin that works on ``ModelForms``, rather than a standalone form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:101
msgid ""
"Since this is a subclass of "
":class:`~django.views.generic.detail.SingleObjectMixin`, instances of this "
"mixin have access to the "
":attr:`~django.views.generic.detail.SingleObjectMixin.model` and "
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset` attributes, "
"describing the type of object that the ``ModelForm`` is manipulating."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:108
msgid ""
"If you specify both the "
":attr:`~django.views.generic.edit.ModelFormMixin.fields` and "
":attr:`~django.views.generic.edit.FormMixin.form_class` attributes, an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception will be "
"raised."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:116
msgid ""
"Previously if both ``fields`` and ``form_class`` were specified, ``fields`` "
"was silently ignored."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:128
msgid ""
"A model class. Can be explicitly provided, otherwise will be determined by "
"examining ``self.object`` or "
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:134
msgid ""
"A list of names of fields. This is interpreted the same way as the "
"``Meta.fields`` attribute of :class:`~django.forms.ModelForm`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:137
msgid ""
"This is a required attribute if you are generating the form class "
"automatically (e.g. using ``model``). Omitting this attribute will result in"
" an :exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:144
msgid ""
"Previously, omitting this attribute was allowed and resulted in a form with "
"all fields of the model."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:151
msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/polls/{slug}/\"`` to redirect to a URL composed out of "
"the ``slug`` field on a model."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:158
#: ../../ref/class-based-views/mixins-editing.txt:252
msgid ""
"Support for the new brace-based Python formatting syntax has been added. The"
" old ``%(slug)s`` placeholder syntax support has been deprecated and will be"
" removed in Django 1.10."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:164
msgid ""
"Retrieve the form class to instantiate. If "
":attr:`~django.views.generic.edit.FormMixin.form_class` is provided, that "
"class will be used. Otherwise, a ``ModelForm`` will be instantiated using "
"the model associated with the "
":attr:`~django.views.generic.detail.SingleObjectMixin.queryset`, or with the"
" :attr:`~django.views.generic.detail.SingleObjectMixin.model`, depending on "
"which attribute is provided."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:174
msgid ""
"Add the current instance (``self.object``) to the standard "
":meth:`~django.views.generic.edit.FormMixin.get_form_kwargs`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:179
msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`django.views.generic.edit.ModelFormMixin.success_url` if it "
"is provided; otherwise, attempts to use the ``get_absolute_url()`` of the "
"object."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:187
msgid ""
"Saves the form instance, sets the current object for the view, and redirects"
" to :meth:`~django.views.generic.edit.FormMixin.get_success_url`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:197
msgid "ProcessFormView"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:201
msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:205
msgid ""
"This is named 'ProcessFormView' and inherits directly from "
":class:`django.views.generic.base.View`, but breaks if used independently, "
"so it is more of a mixin."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:209
#: ../../ref/class-based-views/mixins-multiple-object.txt:42
#: ../../ref/class-based-views/mixins-multiple-object.txt:210
#: ../../ref/class-based-views/mixins-single-object.txt:150
msgid "**Extends**"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:217
msgid ""
"Constructs a form, then renders a response using a context that contains "
"that form."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:222
msgid ""
"Constructs a form, checks the form for validity, and handles it accordingly."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:227
msgid ""
"The ``PUT`` action is also handled and just passes all parameters through to"
" :meth:`post`."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:232
msgid "DeletionMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:236
msgid "Enables handling of the ``DELETE`` http action."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:242
msgid ""
"The url to redirect to when the nominated object has been successfully "
"deleted."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:245
msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/parent/{parent_id}/\"`` to redirect to a URL composed "
"out of the ``parent_id`` field on a model."
msgstr ""

#: ../../ref/class-based-views/mixins-editing.txt:258
msgid ""
"Returns the url to redirect to when the nominated object has been "
"successfully deleted. Returns "
":attr:`~django.views.generic.edit.DeletionMixin.success_url` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:3
msgid "Multiple object mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:6
msgid "MultipleObjectMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:10
msgid "A mixin that can be used to display a list of objects."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:12
msgid ""
"If ``paginate_by`` is specified, Django will paginate the results returned "
"by this. You can specify the page number in the URL in one of two ways:"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:15
msgid ""
"Use the ``page`` parameter in the URLconf. For example, this is what your "
"URLconf might look like::"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:20
msgid ""
"Pass the page number via the ``page`` query-string parameter. For example, a"
" URL would look like this::"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:25
msgid ""
"These values and lists are 1-based, not 0-based, so the first page would be "
"represented as page ``1``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:28
msgid ""
"For more on pagination, read the :doc:`pagination documentation "
"</topics/pagination>`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:31
msgid ""
"As a special case, you are also permitted to use ``last`` as a value for "
"``page``::"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:36
msgid ""
"This allows you to access the final page of results without first having to "
"determine how many pages there are."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:39
msgid ""
"Note that ``page`` *must* be either a valid page number or the value "
"``last``; any other value for ``page`` will result in a 404 error."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:50
msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``False`` and no objects are available, the view will "
"raise a 404 instead of displaying an empty page. By default, this is "
"``True``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:57
#: ../../ref/class-based-views/mixins-single-object.txt:17
msgid ""
"The model that this view will display data for. Specifying ``model = Foo`` "
"is effectively the same as specifying ``queryset = Foo.objects.all()``, "
"where ``objects`` stands for ``Foo``’s :ref:`default manager <default-"
"managers>`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:64
#: ../../ref/class-based-views/mixins-single-object.txt:24
msgid ""
"A ``QuerySet`` that represents the objects. If provided, the value of "
"``queryset`` supersedes the value provided for :attr:`model`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:69
#: ../../ref/class-based-views/mixins-single-object.txt:29
msgid ""
"``queryset`` is a class attribute with a *mutable* value so care must be "
"taken when using it directly. Before using it, either call its "
":meth:`~django.db.models.query.QuerySet.all` method or retrieve it with "
":meth:`get_queryset` which takes care of the cloning behind the scenes."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:79
msgid ""
"A string or list of strings specifying the ordering to apply to the "
"``queryset``. Valid values are the same as those for "
":meth:`~django.db.models.query.QuerySet.order_by`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:84
msgid ""
"An integer specifying how many objects should be displayed per page. If this"
" is given, the view will paginate objects with ``paginate_by`` objects per "
"page. The view will expect either a ``page`` query string parameter (via "
"``request.GET``) or a ``page`` variable specified in the URLconf."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:92
msgid ""
"An integer specifying the number of \"overflow\" objects the last page can "
"contain. This extends the :attr:`paginate_by` limit on the last page by up "
"to ``paginate_orphans``, in order to keep the last page from having a very "
"small number of objects."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:99
msgid ""
"A string specifying the name to use for the page parameter. The view will "
"expect this parameter to be available either as a query string parameter "
"(via ``request.GET``) or as a kwarg variable specified in the URLconf. "
"Defaults to ``page``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:106
msgid ""
"The paginator class to be used for pagination. By default, "
":class:`django.core.paginator.Paginator` is used. If the custom paginator "
"class doesn't have the same constructor interface as "
":class:`django.core.paginator.Paginator`, you will also need to provide an "
"implementation for :meth:`get_paginator`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:114
#: ../../ref/class-based-views/mixins-single-object.txt:52
msgid "Designates the name of the variable to use in the context."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:118
msgid ""
"Get the list of items for this view. This must be an iterable and may be a "
"queryset (in which queryset-specific behavior will be enabled)."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:125
msgid ""
"Returns a string (or iterable of strings) that defines the ordering that "
"will be applied to the ``queryset``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:128
msgid "Returns :attr:`ordering` by default."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:132
msgid ""
"Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, "
"``is_paginated``)."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:135
msgid ""
"Constructed by paginating ``queryset`` into pages of size ``page_size``. If "
"the request contains a ``page`` argument, either as a captured URL argument "
"or as a GET argument, ``object_list`` will correspond to the objects from "
"that page."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:142
msgid ""
"Returns the number of items to paginate by, or ``None`` for no pagination. "
"By default this simply returns the value of :attr:`paginate_by`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:148
msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator_class`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:153
msgid ""
"An integer specifying the number of \"overflow\" objects the last page can "
"contain. By default this simply returns the value of "
":attr:`paginate_orphans`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:159
msgid ""
"Return a boolean specifying whether to display the page if no objects are "
"available. If this method returns ``False`` and no objects are available, "
"the view will raise a 404 instead of displaying an empty page. By default, "
"this is ``True``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:166
msgid ""
"Return the context variable name that will be used to contain the list of "
"data that this view is manipulating. If ``object_list`` is a queryset of "
"Django objects and :attr:`context_object_name` is not set, the context name "
"will be the ``model_name`` of the model that the queryset is composed from, "
"with postfix ``'_list'`` appended. For example, the model ``Article`` would "
"have a context object named ``article_list``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:177
#: ../../ref/class-based-views/mixins-single-object.txt:107
msgid "Returns context data for displaying the list of objects."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:181
msgid ""
"``object_list``: The list of objects that this view is displaying. If "
"``context_object_name`` is specified, that variable will also be set in the "
"context, with the same value as ``object_list``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:185
msgid ""
"``is_paginated``: A boolean representing whether the results are paginated. "
"Specifically, this is set to ``False`` if no page size has been specified, "
"or if the available objects do not span multiple pages."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:190
msgid ""
"``paginator``: An instance of :class:`django.core.paginator.Paginator`. If "
"the page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:194
msgid ""
"``page_obj``: An instance of :class:`django.core.paginator.Page`. If the "
"page is not paginated, this context variable will be ``None``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:200
msgid "MultipleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:204
msgid ""
"A mixin class that performs template-based response rendering for views that"
" operate upon a list of object instances. Requires that the view it is mixed"
" with provides ``self.object_list``, the list of object instances that the "
"view is operating on. ``self.object_list`` may be, but is not required to "
"be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:212
#: ../../ref/class-based-views/mixins-single-object.txt:152
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:218
msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_list``."
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:223
#: ../../ref/class-based-views/mixins-single-object.txt:171
msgid ""
"Returns a list of candidate template names. Returns the following list:"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:225
#: ../../ref/class-based-views/mixins-single-object.txt:173
msgid "the value of ``template_name`` on the view (if provided)"
msgstr ""

#: ../../ref/class-based-views/mixins-multiple-object.txt:226
#: ../../ref/class-based-views/mixins-single-object.txt:176
msgid "``<app_label>/<model_name><template_name_suffix>.html``"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:3
msgid "Simple mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:6
msgid "ContextMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:14
msgid ""
"Returns a dictionary representing the template context. The keyword "
"arguments provided will make up the returned context. Example usage::"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:22
msgid ""
"The template context of all class-based generic views include a ``view`` "
"variable that points to the ``View`` instance."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:25
msgid "Use ``alters_data`` where appropriate"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:27
msgid ""
"Note that having the view instance in the template context may expose "
"potentially hazardous methods to template authors.  To prevent methods like "
"this from being called in the template, set ``alters_data=True`` on those "
"methods.  For more information, read the documentation on :ref:`rendering a "
"template context <alters-data-description>`."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:35
msgid "TemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:39
msgid ""
"Provides a mechanism to construct a "
":class:`~django.template.response.TemplateResponse`, given suitable context."
" The template to use is configurable and can be further customized by "
"subclasses."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:48
msgid ""
"The full name of a template to use as defined by a string. Not defining a "
"``template_name`` will raise a "
":class:`django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:56
msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading"
" the template. ``template_engine`` is passed as the ``using`` keyword "
"argument to ``response_class``. Default is ``None``, which tells Django to "
"search for the template in all configured engines."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:63
msgid ""
"The response class to be returned by ``render_to_response`` method. Default "
"is :class:`TemplateResponse <django.template.response.TemplateResponse>`. "
"The template and context of ``TemplateResponse`` instances can be altered "
"later (e.g. in :ref:`template response middleware <template-response-"
"middleware>`)."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:72
msgid ""
"In older versions of Django, ``TemplateResponse`` used "
":class:`~django.template.RequestContext` in such a way that values from "
"template context processors would override template variables defined in "
"your views. For example, if you subclassed :class:`DetailView "
"<django.views.generic.detail.DetailView>` and set ``context_object_name`` to"
" ``user``, the ``django.contrib.auth.context_processors.auth`` context "
"processor would overwrite your variable with the current user. Now, for "
"consistency with the ``render()`` shortcut, values in the context provided "
"by the class override values from context processors."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:83
msgid ""
"If you need custom template loading or custom context object instantiation, "
"create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:89
msgid ""
"The content type to use for the response. ``content_type`` is passed as a "
"keyword argument to ``response_class``. Default is ``None`` -- meaning that "
"Django uses :setting:`DEFAULT_CONTENT_TYPE`."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:97
msgid "Returns a ``self.response_class`` instance."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:99
msgid ""
"If any keyword arguments are provided, they will be passed to the "
"constructor of the response class."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:102
msgid ""
"Calls :meth:`get_template_names()` to obtain the list of template names that"
" will be searched looking for an existent template."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:107
msgid ""
"Returns a list of template names to search for when rendering the template."
msgstr ""

#: ../../ref/class-based-views/mixins-simple.txt:110
msgid ""
"If :attr:`template_name` is specified, the default implementation will "
"return a list containing :attr:`template_name` (if it is specified)."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:3
msgid "Single object mixins"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:6
msgid "SingleObjectMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:10
msgid ""
"Provides a mechanism for looking up an object associated with the current "
"HTTP request."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:37
msgid ""
"The name of the field on the model that contains the slug. By default, "
"``slug_field`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:42
msgid ""
"The name of the URLConf keyword argument that contains the slug. By default,"
" ``slug_url_kwarg`` is ``'slug'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:47
msgid ""
"The name of the URLConf keyword argument that contains the primary key. By "
"default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:58
msgid ""
"If ``True``, causes :meth:`get_object()` to perform its lookup using both "
"the primary key and the slug. Defaults to ``False``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:61
msgid ""
"This attribute can help mitigate `insecure direct object reference`_ "
"attacks. When applications allow access to individual objects by a "
"sequential primary key, an attacker could brute-force guess all URLs; "
"thereby obtaining a list of all objects in the application. If users with "
"access to individual objects should be prevented from obtaining this list, "
"setting ``query_pk_and_slug`` to ``True`` will help prevent the guessing of "
"URLs as each URL will require two correct, non-sequential arguments. Simply "
"using a unique slug may serve the same purpose, but this scheme allows you "
"to have non-unique slugs."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:75
msgid ""
"Returns the single object that this view will display. If ``queryset`` is "
"provided, that queryset will be used as the source of objects; otherwise, "
":meth:`get_queryset` will be used. ``get_object()`` looks for a "
":attr:`pk_url_kwarg` argument in the arguments to the view; if this argument"
" is found, this method performs a primary-key based lookup using that value."
" If this argument is not found, it looks for a :attr:`slug_url_kwarg` "
"argument, and performs a slug lookup using the :attr:`slug_field`."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:86
msgid ""
"When :attr:`query_pk_and_slug` is ``True``, ``get_object()`` will perform "
"its lookup using both the primary key and the slug."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:91
msgid ""
"Returns the queryset that will be used to retrieve the object that this view"
" will display. By default, :meth:`get_queryset` returns the value of the "
":attr:`queryset` attribute if it is set, otherwise it constructs a "
":class:`~django.db.models.query.QuerySet` by calling the ``all()`` method on"
" the :attr:`model` attribute's default manager."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:99
msgid ""
"Return the context variable name that will be used to contain the data that "
"this view is manipulating. If :attr:`context_object_name` is not set, the "
"context name will be constructed from the ``model_name`` of the model that "
"the queryset is composed from. For example, the model ``Article`` would have"
" context object named ``'article'``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:109
msgid ""
"The base implementation of this method requires that the ``self.object`` "
"attribute be set by the view (even if ``None``). Be sure to do this if you "
"are using this mixin without one of the built-in views that does so."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:113
msgid "It returns a dictionary with these contents:"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:115
msgid "``object``: The object that this view is displaying (``self.object``)."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:117
msgid ""
"``context_object_name``: ``self.object`` will also be stored under the name "
"returned by :meth:`get_context_object_name`, which defaults to the "
"lowercased version of the model name."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:121
msgid "Context variables override values from template context processors"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:123
msgid ""
"Any variables from :meth:`get_context_data` take precedence over context "
"variables from :ref:`context processors <subclassing-context-"
"requestcontext>`. For example, if your view sets the :attr:`model` attribute"
" to :class:`~django.contrib.auth.models.User`, the default context object "
"name of ``user`` would override the ``user`` variable from the "
":func:`django.contrib.auth.context_processors.auth` context processor. Use "
":meth:`get_context_object_name` to avoid a clash."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:134
msgid ""
"Returns the name of a slug field to be used to look up by slug. By default "
"this simply returns the value of :attr:`slug_field`."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:139
msgid "SingleObjectTemplateResponseMixin"
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:143
msgid ""
"A mixin class that performs template-based response rendering for views that"
" operate upon a single object instance. Requires that the view it is mixed "
"with provides ``self.object``, the object instance that the view is "
"operating on. ``self.object`` will usually be, but is not required to be, an"
" instance of a Django model. It may be ``None`` if the view is in the "
"process of constructing a new instance."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:158
msgid ""
"The field on the current object instance that can be used to determine the "
"name of a candidate template. If either ``template_name_field`` itself or "
"the value of the ``template_name_field`` on the current object instance is "
"``None``, the object will not be used for a candidate template name."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:166
msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_detail``."
msgstr ""

#: ../../ref/class-based-views/mixins-single-object.txt:174
msgid ""
"the contents of the ``template_name_field`` field on the object instance "
"that the view is operating upon (if available)"
msgstr ""

#: ../../ref/clickjacking.txt:3
msgid "Clickjacking Protection"
msgstr ""

#: ../../ref/clickjacking.txt:8
msgid ""
"The clickjacking middleware and decorators provide easy-to-use protection "
"against `clickjacking`_.  This type of attack occurs when a malicious site "
"tricks a user into clicking on a concealed element of another site which "
"they have loaded in a hidden frame or iframe."
msgstr ""

#: ../../ref/clickjacking.txt:16
msgid "An example of clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:18
msgid ""
"Suppose an online store has a page where a logged in user can click \"Buy "
"Now\" to purchase an item. A user has chosen to stay logged into the store "
"all the time for convenience. An attacker site might create an \"I Like "
"Ponies\" button on one of their own pages, and load the store's page in a "
"transparent iframe such that the \"Buy Now\" button is invisibly overlaid on"
" the \"I Like Ponies\" button. If the user visits the attacker's site, "
"clicking \"I Like Ponies\" will cause an inadvertent click on the \"Buy "
"Now\" button and an unknowing purchase of the item."
msgstr ""

#: ../../ref/clickjacking.txt:29
msgid "Preventing clickjacking"
msgstr ""

#: ../../ref/clickjacking.txt:31
msgid ""
"Modern browsers honor the `X-Frame-Options`_ HTTP header that indicates "
"whether or not a resource is allowed to load within a frame or iframe. If "
"the response contains the header with a value of ``SAMEORIGIN`` then the "
"browser will only load the resource in a frame if the request originated "
"from the same site. If the header is set to ``DENY`` then the browser will "
"block the resource from loading in a frame no matter which site made the "
"request."
msgstr ""

#: ../../ref/clickjacking.txt:40
msgid ""
"Django provides a few simple ways to include this header in responses from "
"your site:"
msgstr ""

#: ../../ref/clickjacking.txt:43
msgid "A simple middleware that sets the header in all responses."
msgstr ""

#: ../../ref/clickjacking.txt:45
msgid ""
"A set of view decorators that can be used to override the middleware or to "
"only set the header for certain views."
msgstr ""

#: ../../ref/clickjacking.txt:48
msgid ""
"The ``X-Frame-Options`` HTTP header will only be set by the middleware or "
"view decorators if it is not already present in the response."
msgstr ""

#: ../../ref/clickjacking.txt:52 ../../ref/csrf.txt:27
msgid "How to use it"
msgstr ""

#: ../../ref/clickjacking.txt:55
msgid "Setting X-Frame-Options for all responses"
msgstr ""

#: ../../ref/clickjacking.txt:57
msgid ""
"To set the same ``X-Frame-Options`` value for all responses in your site, "
"put ``'django.middleware.clickjacking.XFrameOptionsMiddleware'`` to "
":setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

#: ../../ref/clickjacking.txt:67
msgid ""
"This middleware is enabled in the settings file generated by "
":djadmin:`startproject`."
msgstr ""

#: ../../ref/clickjacking.txt:70
msgid ""
"By default, the middleware will set the ``X-Frame-Options`` header to "
"``SAMEORIGIN`` for every outgoing ``HttpResponse``. If you want ``DENY`` "
"instead, set the :setting:`X_FRAME_OPTIONS` setting::"
msgstr ""

#: ../../ref/clickjacking.txt:76
msgid ""
"When using the middleware there may be some views where you do **not** want "
"the ``X-Frame-Options`` header set. For those cases, you can use a view "
"decorator that tells the middleware not to set the header::"
msgstr ""

#: ../../ref/clickjacking.txt:89
msgid "Setting X-Frame-Options per view"
msgstr ""

#: ../../ref/clickjacking.txt:91
msgid ""
"To set the ``X-Frame-Options`` header on a per view basis, Django provides "
"these decorators::"
msgstr ""

#: ../../ref/clickjacking.txt:106
msgid ""
"Note that you can use the decorators in conjunction with the middleware. Use"
" of a decorator overrides the middleware."
msgstr ""

#: ../../ref/clickjacking.txt:110 ../../ref/csrf.txt:314
msgid "Limitations"
msgstr ""

#: ../../ref/clickjacking.txt:112
msgid ""
"The ``X-Frame-Options`` header will only protect against clickjacking in a "
"modern browser. Older browsers will quietly ignore the header and need "
"`other clickjacking prevention techniques`_."
msgstr ""

#: ../../ref/clickjacking.txt:117
msgid "Browsers that support X-Frame-Options"
msgstr ""

#: ../../ref/clickjacking.txt:119
msgid "Internet Explorer 8+"
msgstr ""

#: ../../ref/clickjacking.txt:120
msgid "Firefox 3.6.9+"
msgstr ""

#: ../../ref/clickjacking.txt:121
msgid "Opera 10.5+"
msgstr ""

#: ../../ref/clickjacking.txt:122
msgid "Safari 4+"
msgstr ""

#: ../../ref/clickjacking.txt:123
msgid "Chrome 4.1+"
msgstr ""

#: ../../ref/clickjacking.txt:126
msgid "See also"
msgstr ""

#: ../../ref/clickjacking.txt:128
msgid "A `complete list`_ of browsers supporting ``X-Frame-Options``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:3
msgid "Admin actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:7
msgid ""
"The basic workflow of Django's admin is, in a nutshell, \"select an object, "
"then change it.\" This works well for a majority of use cases. However, if "
"you need to make the same change to many objects at once, this workflow can "
"be quite tedious."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:12
msgid ""
"In these cases, Django's admin lets you write and register \"actions\" -- "
"simple functions that get called with a list of objects selected on the "
"change list page."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:16
msgid ""
"If you look at any change list in the admin, you'll see this feature in "
"action; Django ships with a \"delete selected objects\" action available to "
"all models. For example, here's the user module from Django's built-in "
":mod:`django.contrib.auth` app:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:25
msgid ""
"The \"delete selected objects\" action uses :meth:`QuerySet.delete() "
"<django.db.models.query.QuerySet.delete>` for efficiency reasons, which has "
"an important caveat: your model's ``delete()`` method will not be called."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:30
msgid ""
"If you wish to override this behavior, simply write a custom action which "
"accomplishes deletion in your preferred manner -- for example, by calling "
"``Model.delete()`` for each of the selected items."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:34
msgid ""
"For more background on bulk deletion, see the documentation on :ref:`object "
"deletion <topics-db-queries-delete>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:37
msgid "Read on to find out how to add your own actions to this list."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:40
msgid "Writing actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:42
msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:44
msgid ""
"A common use case for admin actions is the bulk updating of a model. Imagine"
" a simple news application with an ``Article`` model::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:63
msgid ""
"A common task we might perform with a model like this is to update an "
"article's status from \"draft\" to \"published\". We could easily do this in"
" the admin one article at a time, but if we wanted to bulk-publish a group "
"of articles, it'd be tedious. So, let's write an action that lets us change "
"an article's status to \"published.\""
msgstr ""

#: ../../ref/contrib/admin/actions.txt:70
msgid "Writing action functions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:72
msgid ""
"First, we'll need to write a function that gets called when the action is "
"triggered from the admin. Action functions are just regular functions that "
"take three arguments:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:76
msgid "The current :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:77
msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:78
msgid ""
"A :class:`~django.db.models.query.QuerySet` containing the set of objects "
"selected by the user."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:81
msgid ""
"Our publish-these-articles function won't need the :class:`ModelAdmin` or "
"the request object, but we will use the queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:89
msgid ""
"For the best performance, we're using the queryset's :ref:`update method "
"<topics-db-queries-update>`. Other types of actions might need to deal with "
"each object individually; in these cases we'd just iterate over the "
"queryset::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:97
msgid ""
"That's actually all there is to writing an action! However, we'll take one "
"more optional-but-useful step and give the action a \"nice\" title in the "
"admin. By default, this action would appear in the action list as \"Make "
"published\" -- the function name, with underscores replaced by spaces. "
"That's fine, but we can provide a better, more human-friendly name by giving"
" the ``make_published`` function a ``short_description`` attribute::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:110
msgid ""
"This might look familiar; the admin's ``list_display`` option uses the same "
"technique to provide human-readable descriptions for callback functions "
"registered there, too."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:115
msgid "Adding actions to the :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:117
msgid ""
"Next, we'll need to inform our :class:`ModelAdmin` of the action. This works"
" just like any other configuration option. So, the complete ``admin.py`` "
"with the action and its registration would look like::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:135
msgid ""
"That code will give us an admin change list that looks something like this:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:139
msgid ""
"That's really all there is to it! If you're itching to write your own "
"actions, you now know enough to get started. The rest of this document just "
"covers more advanced techniques."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:144
msgid "Handling errors in actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:146
msgid ""
"If there are foreseeable error conditions that may occur while running your "
"action, you should gracefully inform the user of the problem. This means "
"handling exceptions and using "
":meth:`django.contrib.admin.ModelAdmin.message_user` to display a user "
"friendly description of the problem in the response."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:153
msgid "Advanced action techniques"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:155
msgid ""
"There's a couple of extra options and possibilities you can exploit for more"
" advanced options."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:159
msgid "Actions as :class:`ModelAdmin` methods"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:161
msgid ""
"The example above shows the ``make_published`` action defined as a simple "
"function. That's perfectly fine, but it's not perfect from a code design "
"point of view: since the action is tightly coupled to the ``Article`` "
"object, it makes sense to hook the action to the ``ArticleAdmin`` object "
"itself."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:166
msgid "That's easy enough to do::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:177
msgid ""
"Notice first that we've moved ``make_published`` into a method and renamed "
"the ``modeladmin`` parameter to ``self``, and second that we've now put the "
"string ``'make_published'`` in ``actions`` instead of a direct function "
"reference. This tells the :class:`ModelAdmin` to look up the action as a "
"method."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:182
msgid ""
"Defining actions as methods gives the action more straightforward, idiomatic"
" access to the :class:`ModelAdmin` itself, allowing the action to call any "
"of the methods provided by the admin."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:188
msgid ""
"For example, we can use ``self`` to flash a message to the user informing "
"her that the action was successful::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:202
msgid ""
"This make the action match what the admin itself does after successfully "
"performing an action:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:208
msgid "Actions that provide intermediate pages"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:210
msgid ""
"By default, after an action is performed the user is simply redirected back "
"to the original change list page. However, some actions, especially more "
"complex ones, will need to return intermediate pages. For example, the "
"built-in delete action asks for confirmation before deleting the selected "
"objects."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:216
msgid ""
"To provide an intermediary page, simply return an "
":class:`~django.http.HttpResponse` (or subclass) from your action. For "
"example, you might write a simple export function that uses Django's "
":doc:`serialization functions </topics/serialization>` to dump some selected"
" objects as JSON::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:230
msgid ""
"Generally, something like the above isn't considered a great idea. Most of "
"the time, the best practice will be to return an "
":class:`~django.http.HttpResponseRedirect` and redirect the user to a view "
"you've written, passing the list of selected objects in the GET query "
"string. This allows you to provide complex interaction logic on the "
"intermediary pages. For example, if you wanted to provide a more complete "
"export function, you'd want to let the user choose a format, and possibly a "
"list of fields to include in the export. The best thing to do would be to "
"write a small action that simply redirects to your custom export view::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:249
msgid ""
"As you can see, the action is the simple part; all the complex logic would "
"belong in your export view. This would need to deal with objects of any "
"type, hence the business with the ``ContentType``."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:253
msgid "Writing this view is left as an exercise to the reader."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:258
msgid "Making actions available site-wide"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:262
msgid ""
"Some actions are best if they're made available to *any* object in the admin"
" site -- the export action defined above would be a good candidate. You can "
"make an action globally available using :meth:`AdminSite.add_action()`. For "
"example::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:271
msgid ""
"This makes the ``export_selected_objects`` action globally available as an "
"action named \"export_selected_objects\". You can explicitly give the action"
" a name -- good if you later want to programmatically :ref:`remove the "
"action <disabling-admin-actions>` -- by passing a second argument to "
":meth:`AdminSite.add_action()`::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:282
msgid "Disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:284
msgid ""
"Sometimes you need to disable certain actions -- especially those "
":ref:`registered site-wide <adminsite-actions>` -- for particular objects. "
"There's a few ways you can disable actions:"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:289
msgid "Disabling a site-wide action"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:293
msgid ""
"If you need to disable a :ref:`site-wide action <adminsite-actions>` you can"
" call :meth:`AdminSite.disable_action()`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:296
msgid ""
"For example, you can use this method to remove the built-in \"delete "
"selected objects\" action::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:301
msgid ""
"Once you've done the above, that action will no longer be available site-"
"wide."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:304
msgid ""
"If, however, you need to re-enable a globally-disabled action for one "
"particular model, simply list it explicitly in your ``ModelAdmin.actions`` "
"list::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:323
msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:325
msgid ""
"If you want *no* bulk actions available for a given :class:`ModelAdmin`, "
"simply set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:331
msgid ""
"This tells the :class:`ModelAdmin` to not display or allow any actions, "
"including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:335
msgid "Conditionally enabling or disabling actions"
msgstr ""

#: ../../ref/contrib/admin/actions.txt:339
msgid ""
"Finally, you can conditionally enable or disable actions on a per-request "
"(and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:342
msgid ""
"This returns a dictionary of actions allowed. The keys are action names, and"
" the values are ``(function, name, short_description)`` tuples."
msgstr ""

#: ../../ref/contrib/admin/actions.txt:345
msgid ""
"Most of the time you'll use this method to conditionally remove actions from"
" the list gathered by the superclass. For example, if I only wanted users "
"whose names begin with 'J' to be able to delete objects in bulk, I could do "
"the following::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:3
msgid "The Django admin documentation generator"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:10
msgid ""
"Django's :mod:`~django.contrib.admindocs` app pulls documentation from the "
"docstrings of models, views, template tags, and template filters for any app"
" in :setting:`INSTALLED_APPS` and makes that documentation available from "
"the :mod:`Django admin <django.contrib.admin>`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:15
msgid ""
"You may, to some extent, utilize :mod:`~django.contrib.admindocs` to quickly"
" document your own code. This has limited usage, however, as the app is "
"primarily intended for documenting templates, template tags, and filters. "
"For example, model methods that require arguments are purposefully omitted "
"from the documentation because they can't be invoked from templates. The app"
" can still be useful since it doesn't require you to write any extra "
"documentation (besides docstrings) and is conveniently available from the "
":mod:`Django admin <django.contrib.admin>`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:25
#: ../../ref/contrib/admin/index.txt:15 ../../ref/contrib/contenttypes.txt:13
#: ../../ref/contrib/gis/gdal.txt:28 ../../ref/contrib/gis/install/index.txt:8
#: ../../ref/contrib/sitemaps.txt:14 ../../ref/contrib/syndication.txt:26
#: ../../ref/templates/api.txt:16
msgid "Overview"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:27
msgid ""
"To activate the :mod:`~django.contrib.admindocs`, you will need to do the "
"following:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:30
msgid "Add :mod:`django.contrib.admindocs` to your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:31
msgid ""
"Add ``url(r'^admin/doc/', include('django.contrib.admindocs.urls'))`` to "
"your ``urlpatterns``. Make sure it's included *before* the ``r'^admin/'`` "
"entry, so that requests to ``/admin/doc/`` don't get handled by the latter "
"entry."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:35
msgid "Install the docutils Python module (http://docutils.sf.net/)."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:36
msgid ""
"**Optional:** Using the admindocs bookmarklets requires "
"``django.contrib.admindocs.middleware.XViewMiddleware`` to be installed."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:39
msgid ""
"Once those steps are complete, you can start browsing the documentation by "
"going to your admin interface and clicking the \"Documentation\" link in the"
" upper right of the page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:44
msgid "Documentation helpers"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:46
msgid ""
"The following special markup can be used in your docstrings to easily create"
" hyperlinks to other components:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
msgid "Django Component"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:50
msgid "reStructuredText roles"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:52
msgid "``:model:`app_label.ModelName```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
msgid "Views"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:53
msgid "``:view:`app_label.view_name```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:54
#: ../../ref/contrib/staticfiles.txt:345
msgid "Template tags"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:54
msgid "``:tag:`tagname```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:55
msgid "Template filters"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:55
msgid "``:filter:`filtername```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:56 ../../ref/settings.txt:3508
#: ../../ref/templates/index.txt:3 ../../ref/templates/language.txt:35
#: ../../ref/unicode.txt:328
msgid "Templates"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:56
msgid "``:template:`path/to/template.html```"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:60
msgid "Model reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:62
msgid ""
"The **models** section of the ``admindocs`` page describes each model in the"
" system along with all the fields and methods (without any arguments) "
"available on it. While model properties don't have any arguments, they are "
"not listed. Relationships to other models appear as hyperlinks. Descriptions"
" are pulled from ``help_text`` attributes on fields or from docstrings on "
"model methods."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:68
msgid "A model with useful documentation might look like this::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:86
msgid "View reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:88
msgid ""
"Each URL in your site has a separate entry in the ``admindocs`` page, and "
"clicking on a given URL will show you the corresponding view. Helpful things"
" you can document in your view function docstrings include:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:92
msgid "A short description of what the view does."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:93
msgid ""
"The **context**, or a list of variables available in the view's template."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:94
msgid "The name of the template or templates that are used for that view."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:96
#: ../../ref/contrib/admin/index.txt:648 ../../ref/contrib/admin/index.txt:701
#: ../../ref/contrib/gis/db-api.txt:106 ../../ref/contrib/gis/geos.txt:740
#: ../../ref/contrib/staticfiles.txt:145 ../../ref/django-admin.txt:1287
#: ../../ref/django-admin.txt:1361 ../../ref/models/fields.txt:1187
#: ../../ref/models/instances.txt:604 ../../ref/models/instances.txt:634
#: ../../ref/models/instances.txt:676 ../../ref/models/instances.txt:728
#: ../../ref/models/instances.txt:737 ../../ref/models/instances.txt:808
#: ../../ref/models/querysets.txt:563 ../../ref/models/querysets.txt:1304
#: ../../ref/models/querysets.txt:1509 ../../ref/models/querysets.txt:1525
#: ../../ref/request-response.txt:306 ../../ref/templates/builtins.txt:1149
#: ../../ref/templates/builtins.txt:1176 ../../ref/templates/builtins.txt:1206
#: ../../ref/templates/builtins.txt:1236 ../../ref/templates/builtins.txt:1251
#: ../../ref/templates/builtins.txt:1264 ../../ref/templates/builtins.txt:1277
#: ../../ref/templates/builtins.txt:1379 ../../ref/templates/builtins.txt:1421
#: ../../ref/templates/builtins.txt:1438 ../../ref/templates/builtins.txt:1452
#: ../../ref/templates/builtins.txt:1514 ../../ref/templates/builtins.txt:1558
#: ../../ref/templates/builtins.txt:1573 ../../ref/templates/builtins.txt:1594
#: ../../ref/templates/builtins.txt:1681 ../../ref/templates/builtins.txt:1699
#: ../../ref/templates/builtins.txt:1712 ../../ref/templates/builtins.txt:1726
#: ../../ref/templates/builtins.txt:1740 ../../ref/templates/builtins.txt:1759
#: ../../ref/templates/builtins.txt:1775 ../../ref/templates/builtins.txt:1790
#: ../../ref/templates/builtins.txt:1804 ../../ref/templates/builtins.txt:1829
#: ../../ref/templates/builtins.txt:1842 ../../ref/templates/builtins.txt:1858
#: ../../ref/templates/builtins.txt:1877 ../../ref/templates/builtins.txt:1928
#: ../../ref/templates/builtins.txt:1948 ../../ref/templates/builtins.txt:1981
#: ../../ref/templates/builtins.txt:2046 ../../ref/templates/builtins.txt:2064
#: ../../ref/templates/builtins.txt:2077 ../../ref/templates/builtins.txt:2105
#: ../../ref/templates/builtins.txt:2195 ../../ref/templates/builtins.txt:2211
#: ../../ref/templates/builtins.txt:2228 ../../ref/templates/builtins.txt:2246
#: ../../ref/templates/builtins.txt:2266 ../../ref/templates/builtins.txt:2312
#: ../../ref/templates/builtins.txt:2325 ../../ref/templates/builtins.txt:2370
#: ../../ref/templates/builtins.txt:2404 ../../ref/templates/builtins.txt:2421
#: ../../ref/templates/builtins.txt:2436 ../../ref/templates/builtins.txt:2455
#: ../../ref/utils.txt:554 ../../ref/utils.txt:651 ../../ref/utils.txt:677
#: ../../ref/utils.txt:881
msgid "For example::"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:120
msgid "Template tags and filters reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:122
msgid ""
"The **tags** and **filters** ``admindocs`` sections describe all the tags "
"and filters that come with Django (in fact, the :ref:`built-in tag reference"
" <ref-templates-builtins-tags>` and :ref:`built-in filter reference <ref-"
"templates-builtins-filters>` documentation come directly from those pages). "
"Any tags or filters that you create or are added by a third-party app will "
"show up in these sections as well."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:131
msgid "Template reference"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:133
msgid ""
"While ``admindocs`` does not include a place to document templates by "
"themselves, if you use the ``:template:`path/to/template.html``` syntax in a"
" docstring the resulting page will verify the path of that template with "
"Django's :ref:`template loaders <template-loaders>`. This can be a handy way"
" to check if the specified template exists and to show where on the "
"filesystem that template is stored."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:143
msgid "Included Bookmarklets"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:145
msgid "Several useful bookmarklets are available from the ``admindocs`` page:"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:149
msgid "Documentation for this page"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:148
msgid ""
"Jumps you from any page to the documentation for the view that generates "
"that page."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:153
msgid "Show object ID"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:152
msgid ""
"Shows the content-type and unique ID for pages that represent a single "
"object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:156
msgid "Edit this object"
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:156
msgid "Jumps to the admin page for pages that represent a single object."
msgstr ""

#: ../../ref/contrib/admin/admindocs.txt:158
msgid ""
"Using these bookmarklets requires that you are either logged into the "
":mod:`Django admin <django.contrib.admin>` as a "
":class:`~django.contrib.auth.models.User` with "
":attr:`~django.contrib.auth.models.User.is_staff` set to ``True``, or that "
"the ``XViewMiddleware`` is installed and you are accessing the site from an "
"IP address listed in :setting:`INTERNAL_IPS`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:3
msgid "The Django admin site"
msgstr ""

#: ../../ref/contrib/admin/index.txt:8
msgid ""
"One of the most powerful parts of Django is the automatic admin interface. "
"It reads metadata in your model to provide a powerful and production-ready "
"interface that content producers can immediately use to start adding content"
" to the site. In this document, we discuss how to activate, use and "
"customize Django's admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:17
msgid ""
"The admin is enabled in the default project template used by "
":djadmin:`startproject`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:20
msgid "For reference, here are the requirements:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:22
msgid ""
"Add ``'django.contrib.admin'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/admin/index.txt:24
msgid ""
"The admin has four dependencies - :mod:`django.contrib.auth`, "
":mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages` and "
":mod:`django.contrib.sessions`.  If these applications are not in your "
":setting:`INSTALLED_APPS` list, add them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:30
msgid ""
"Add ``django.contrib.auth.context_processors.auth`` and "
"``django.contrib.messages.context_processors.messages`` to the "
"``'context_processors'`` option of the ``DjangoTemplates`` backend defined "
"in your :setting:`TEMPLATES` as well as "
":class:`django.contrib.auth.middleware.AuthenticationMiddleware` and "
":class:`django.contrib.messages.middleware.MessageMiddleware` to "
":setting:`MIDDLEWARE_CLASSES`. (These are all active by default, so you only"
" need to do this if you've manually tweaked the settings.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:39
msgid ""
"Determine which of your application's models should be editable in the admin"
" interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:42
msgid ""
"For each of those models, optionally create a ``ModelAdmin`` class that "
"encapsulates the customized admin functionality and options for that "
"particular model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:46
msgid ""
"Instantiate an ``AdminSite`` and tell it about each of your models and "
"``ModelAdmin`` classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:49
msgid "Hook the ``AdminSite`` instance into your URLconf."
msgstr ""

#: ../../ref/contrib/admin/index.txt:51
msgid ""
"After you've taken these steps, you'll be able to use your Django admin site"
" by visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:55
msgid "Other topics"
msgstr ""

#: ../../ref/contrib/admin/index.txt:65
msgid ""
"For information about serving the static files (images, JavaScript, and CSS)"
" associated with the admin in production, see :ref:`serving-files`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:68
msgid "Having problems?  Try :doc:`/faq/admin`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:71
msgid "``ModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:75
msgid ""
"The ``ModelAdmin`` class is the representation of a model in the admin "
"interface. Usually, these are stored in a file named ``admin.py`` in your "
"application. Let's take a look at a very simple example of the "
"``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:87
msgid "Do you need a ``ModelAdmin`` object at all?"
msgstr ""

#: ../../ref/contrib/admin/index.txt:89
msgid ""
"In the preceding example, the ``ModelAdmin`` class doesn't define any custom"
" values (yet). As a result, the default admin interface will be provided. If"
" you are happy with the default admin interface, you don't need to define a "
"``ModelAdmin`` object at all -- you can register the model class without "
"providing a ``ModelAdmin`` description. The preceding example could be "
"simplified to::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:102
msgid "The register decorator"
msgstr ""

#: ../../ref/contrib/admin/index.txt:108
msgid ""
"There is also a decorator for registering your ``ModelAdmin`` classes::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:117
msgid ""
"It is given one or more model classes to register with the ``ModelAdmin`` "
"and an optional keyword argument ``site`` if you are not using the default "
"``AdminSite``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:129
msgid ""
"You can't use this decorator if you have to reference your model admin class"
" in its ``__init__()`` method, e.g. ``super(PersonAdmin, "
"self).__init__(*args, **kwargs)``. If you are using Python 3 and don't have "
"to worry about supporting Python 2, you can use ``super().__init__(*args, "
"**kwargs)`` . Otherwise, you'll have to use ``admin.site.register()`` "
"instead of this decorator."
msgstr ""

#: ../../ref/contrib/admin/index.txt:137
msgid "Discovery of admin files"
msgstr ""

#: ../../ref/contrib/admin/index.txt:139
msgid ""
"When you put ``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` "
"setting, Django automatically looks for an ``admin`` module in each "
"application and imports it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:147
msgid ""
"This is the default :class:`~django.apps.AppConfig` class for the admin. It "
"calls :func:`~django.contrib.admin.autodiscover()` when Django starts."
msgstr ""

#: ../../ref/contrib/admin/index.txt:154
msgid ""
"This class works like :class:`~django.contrib.admin.apps.AdminConfig`, "
"except it doesn't call :func:`~django.contrib.admin.autodiscover()`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:159
msgid ""
"This function attempts to import an ``admin`` module in each installed "
"application. Such modules are expected to register models with the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:164
msgid ""
"Previous versions of Django recommended calling this function directly in "
"the URLconf. As of Django 1.7 this isn't needed anymore. "
":class:`~django.contrib.admin.apps.AdminConfig` takes care of running the "
"auto-discovery automatically."
msgstr ""

#: ../../ref/contrib/admin/index.txt:169
msgid ""
"If you are using a custom ``AdminSite``, it is common to import all of the "
"``ModelAdmin`` subclasses into your code and register them to the custom "
"``AdminSite``. In that case, in order to disable auto-discovery, you should "
"put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of "
"``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/admin/index.txt:177
msgid ""
"In previous versions, the admin needed to be instructed to look for "
"``admin.py`` files with :func:`~django.contrib.admin.autodiscover()`. As of "
"Django 1.7, auto-discovery is enabled by default and must be explicitly "
"disabled when it's undesirable."
msgstr ""

#: ../../ref/contrib/admin/index.txt:184
msgid "``ModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:186
msgid ""
"The ``ModelAdmin`` is very flexible. It has several options for dealing with"
" customizing the interface. All options are defined on the ``ModelAdmin`` "
"subclass::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:197
msgid ""
"A list of actions to make available on the change list page. See "
":doc:`/ref/contrib/admin/actions` for details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:203
msgid ""
"Controls where on the page the actions bar appears. By default, the admin "
"changelist displays actions at the top of the page (``actions_on_top = True;"
" actions_on_bottom = False``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:209
msgid ""
"Controls whether a selection counter is displayed next to the action "
"dropdown. By default, the admin changelist will display it "
"(``actions_selection_counter = True``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:215
msgid ""
"Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` "
"in your model, and the change list page will include a date-based drilldown "
"navigation by that field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:219 ../../ref/contrib/admin/index.txt:350
#: ../../ref/contrib/admin/index.txt:375 ../../ref/contrib/admin/index.txt:515
#: ../../ref/contrib/gis/gdal.txt:893
#: ../../ref/contrib/gis/geoquerysets.txt:34
#: ../../ref/contrib/gis/geoquerysets.txt:56
#: ../../ref/contrib/gis/geoquerysets.txt:78
#: ../../ref/contrib/gis/geoquerysets.txt:99
#: ../../ref/contrib/gis/geoquerysets.txt:122
#: ../../ref/contrib/gis/geoquerysets.txt:142
#: ../../ref/contrib/gis/geoquerysets.txt:163
#: ../../ref/contrib/gis/geoquerysets.txt:183
#: ../../ref/contrib/gis/geoquerysets.txt:203
#: ../../ref/contrib/gis/geoquerysets.txt:240
#: ../../ref/contrib/gis/geoquerysets.txt:280
#: ../../ref/contrib/gis/geoquerysets.txt:304
#: ../../ref/contrib/gis/geoquerysets.txt:321
#: ../../ref/contrib/gis/geoquerysets.txt:343
#: ../../ref/contrib/gis/geoquerysets.txt:366
#: ../../ref/contrib/gis/geoquerysets.txt:384
#: ../../ref/contrib/gis/geoquerysets.txt:402
#: ../../ref/contrib/gis/geoquerysets.txt:421
#: ../../ref/contrib/gis/geoquerysets.txt:439
#: ../../ref/contrib/gis/geoquerysets.txt:457
#: ../../ref/contrib/gis/geoquerysets.txt:475
#: ../../ref/contrib/gis/geoquerysets.txt:493
#: ../../ref/contrib/gis/geoquerysets.txt:534
#: ../../ref/contrib/gis/geoquerysets.txt:554
#: ../../ref/contrib/gis/geoquerysets.txt:574
#: ../../ref/contrib/gis/geoquerysets.txt:594
#: ../../ref/contrib/gis/geoquerysets.txt:617
#: ../../ref/contrib/gis/geoquerysets.txt:862
#: ../../ref/contrib/gis/geoquerysets.txt:977
#: ../../ref/contrib/gis/geoquerysets.txt:1010
#: ../../ref/contrib/gis/geoquerysets.txt:1170
#: ../../ref/contrib/gis/geoquerysets.txt:1198
#: ../../ref/contrib/gis/geoquerysets.txt:1215
#: ../../ref/contrib/gis/geoquerysets.txt:1231
#: ../../ref/contrib/gis/geoquerysets.txt:1254
#: ../../ref/contrib/gis/geos.txt:813 ../../ref/contrib/gis/geos.txt:829
#: ../../ref/contrib/gis/geos.txt:845 ../../ref/contrib/gis/geos.txt:854
#: ../../ref/contrib/gis/geos.txt:909 ../../ref/contrib/gis/geos.txt:932
#: ../../ref/contrib/gis/serializers.txt:38 ../../ref/csrf.txt:359
#: ../../ref/models/expressions.txt:489 ../../ref/models/options.txt:126
#: ../../ref/models/querysets.txt:285 ../../ref/models/querysets.txt:545
#: ../../ref/models/querysets.txt:1196 ../../ref/models/querysets.txt:1265
#: ../../ref/models/querysets.txt:1323 ../../ref/models/querysets.txt:1857
#: ../../ref/models/querysets.txt:1888 ../../ref/models/querysets.txt:1971
#: ../../ref/models/querysets.txt:2261 ../../ref/models/querysets.txt:2288
#: ../../ref/models/querysets.txt:2313 ../../ref/models/querysets.txt:2334
#: ../../ref/models/querysets.txt:2393 ../../ref/models/querysets.txt:2429
#: ../../ref/models/querysets.txt:2447 ../../ref/models/querysets.txt:2468
#: ../../ref/models/querysets.txt:2489 ../../ref/models/querysets.txt:2510
#: ../../ref/models/querysets.txt:2542 ../../ref/models/querysets.txt:2563
#: ../../ref/models/querysets.txt:2584 ../../ref/models/querysets.txt:2611
#: ../../ref/models/querysets.txt:2633 ../../ref/models/querysets.txt:2653
#: ../../ref/models/querysets.txt:2673 ../../ref/models/querysets.txt:2694
#: ../../ref/models/querysets.txt:2710 ../../ref/models/querysets.txt:2736
#: ../../ref/models/querysets.txt:2760 ../../ref/models/relations.txt:43
#: ../../ref/settings.txt:1811 ../../ref/settings.txt:1955
#: ../../ref/templates/builtins.txt:765 ../../ref/templates/builtins.txt:1891
#: ../../ref/templates/builtins.txt:1901 ../../ref/templates/builtins.txt:1908
#: ../../ref/templates/builtins.txt:2031
msgid "Example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:223
msgid ""
"This will intelligently populate itself based on available data, e.g. if all"
" the dates are in one month, it'll show the day-level drill-down only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:229
msgid ""
"``date_hierarchy`` uses :meth:`QuerySet.datetimes() "
"<django.db.models.query.QuerySet.datetimes>` internally. Please refer to its"
" documentation for some caveats when time zone support is enabled "
"(:setting:`USE_TZ = True <USE_TZ>`)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:236
msgid ""
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:239
msgid "For example, let's consider the following model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:248
msgid ""
"If you want a form for the ``Author`` model that includes only the ``name`` "
"and ``title`` fields, you would specify ``fields`` or ``exclude`` like "
"this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:260
msgid ""
"Since the Author model only has three fields, ``name``, ``title``, and "
"``birth_date``, the forms resulting from the above declarations will contain"
" exactly the same fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:266
msgid ""
"Use the ``fields`` option to make simple layout changes in the forms on the "
"\"add\" and \"change\" pages such as showing only a subset of available "
"fields, modifying their order, or grouping them into rows. For example, you "
"could define a simpler version of the admin form for the "
":class:`django.contrib.flatpages.models.FlatPage` model as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:275
msgid ""
"In the above example, only the fields ``url``, ``title`` and ``content`` "
"will be displayed, sequentially, in the form. ``fields`` can contain values "
"defined in :attr:`ModelAdmin.readonly_fields` to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:280
msgid ""
"For more complex layout needs, see the :attr:`~ModelAdmin.fieldsets` option."
msgstr ""

#: ../../ref/contrib/admin/index.txt:282
msgid ""
"The ``fields`` option, unlike :attr:`~ModelAdmin.list_display`, may only "
"contain names of fields on the model or the form specified by "
":attr:`~ModelAdmin.form`. It may contain callables only if they are listed "
"in :attr:`~ModelAdmin.readonly_fields`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:287
msgid ""
"To display multiple fields on the same line, wrap those fields in their own "
"tuple. In this example, the ``url`` and ``title`` fields will display on the"
" same line and the ``content`` field will be displayed below them on its own"
" line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:295 ../../ref/contrib/admin/index.txt:427
#: ../../ref/contrib/admin/index.txt:441
#: ../../ref/contrib/admin/index.txt:1645
#: ../../ref/contrib/admin/index.txt:1674 ../../ref/contrib/index.txt:13
#: ../../ref/models/querysets.txt:2795
msgid "Note"
msgstr ""

#: ../../ref/contrib/admin/index.txt:297
msgid ""
"This ``fields`` option should not be confused with the ``fields`` dictionary"
" key that is within the :attr:`~ModelAdmin.fieldsets` option, as described "
"in the next section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:301
msgid ""
"If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present,"
" Django will default to displaying each field that isn't an ``AutoField`` "
"and has ``editable=True``, in a single fieldset, in the same order as the "
"fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:308
msgid "Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:310
msgid ""
"``fieldsets`` is a list of two-tuples, in which each two-tuple represents a "
"``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of"
" the form.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:314
msgid ""
"The two-tuples are in the format ``(name, field_options)``, where ``name`` "
"is a string representing the title of the fieldset and ``field_options`` is "
"a dictionary of information about the fieldset, including a list of fields "
"to be displayed in it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:319
msgid ""
"A full example, taken from the "
":class:`django.contrib.flatpages.models.FlatPage` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:335
msgid "This results in an admin page that looks like:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:339
msgid ""
"If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present,"
" Django will default to displaying each field that isn't an ``AutoField`` "
"and has ``editable=True``, in a single fieldset, in the same order as the "
"fields are defined in the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:344
msgid "The ``field_options`` dictionary can have the following keys:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:370
msgid "``fields``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:347
msgid ""
"A tuple of field names to display in this fieldset. This key is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:356
msgid ""
"As with the :attr:`~ModelAdmin.fields` option, to display multiple fields on"
" the same line, wrap those fields in their own tuple. In this example, the "
"``first_name`` and ``last_name`` fields will display on the same line::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:365
msgid ""
"``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields`"
" to be displayed as read-only."
msgstr ""

#: ../../ref/contrib/admin/index.txt:368
msgid ""
"If you add the name of a callable to ``fields``, the same rule applies as "
"with the :attr:`~ModelAdmin.fields` option: the callable must be listed in "
":attr:`~ModelAdmin.readonly_fields`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:385
msgid "``classes``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:373
msgid "A list or tuple containing extra CSS classes to apply to the fieldset."
msgstr ""

#: ../../ref/contrib/admin/index.txt:381
msgid ""
"Two useful classes defined by the default admin site stylesheet are "
"``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be "
"initially collapsed in the admin and replaced with a small \"click to "
"expand\" link. Fieldsets with the ``wide`` style will be given extra "
"horizontal space."
msgstr ""

#: ../../ref/contrib/admin/index.txt:396 ../../ref/contrib/syndication.txt:902
#: ../../ref/contrib/syndication.txt:930
msgid "``description``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:388
msgid ""
"A string of optional extra text to be displayed at the top of each fieldset,"
" under the heading of the fieldset. This string is not rendered for "
":class:`~django.contrib.admin.TabularInline` due to its layout."
msgstr ""

#: ../../ref/contrib/admin/index.txt:393
msgid ""
"Note that this value is *not* HTML-escaped when it's displayed in the admin "
"interface. This lets you include HTML if you so desire. Alternatively you "
"can use plain text and ``django.utils.html.escape()`` to escape any HTML "
"special characters."
msgstr ""

#: ../../ref/contrib/admin/index.txt:401
msgid ""
"By default, a :class:`~django.db.models.ManyToManyField` is displayed in the"
" admin site with a ``<select multiple>``. However, multiple-select boxes can"
" be difficult to use when selecting many items. Adding a "
":class:`~django.db.models.ManyToManyField` to this list will instead use a "
"nifty unobtrusive JavaScript \"filter\" interface that allows searching "
"within the options. The unselected and selected options appear in two boxes "
"side by side. See :attr:`~ModelAdmin.filter_vertical` to use a vertical "
"interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:412
msgid ""
"Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display "
"of the filter interface with the box of unselected options appearing above "
"the box of selected options."
msgstr ""

#: ../../ref/contrib/admin/index.txt:418
msgid ""
"By default a ``ModelForm`` is dynamically created for your model. It is used"
" to create the form presented on both the add/change pages. You can easily "
"provide your own ``ModelForm`` to override any default form behavior on the "
"add/change pages. Alternatively, you can customize the default form rather "
"than specifying an entirely new one by using the :meth:`ModelAdmin.get_form`"
" method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:425
msgid "For an example see the section :ref:`admin-custom-validation`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:429
msgid ""
"If you define the ``Meta.model`` attribute on a "
":class:`~django.forms.ModelForm`, you must also define the ``Meta.fields`` "
"attribute (or the ``Meta.exclude`` attribute). However, since the admin has "
"its own way of defining fields, the ``Meta.fields`` attribute will be "
"ignored."
msgstr ""

#: ../../ref/contrib/admin/index.txt:435
msgid ""
"If the ``ModelForm`` is only going to be used for the admin, the easiest "
"solution is to omit the ``Meta.model`` attribute, since ``ModelAdmin`` will "
"provide the correct model to use. Alternatively, you can set ``fields = []``"
" in the ``Meta`` class to satisfy the validation on the ``ModelForm``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:443
msgid ""
"If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option "
"then ``ModelAdmin`` takes precedence::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:460
msgid ""
"In the above example, the \"age\" field will be excluded but the \"name\" "
"field will be included in the generated form."
msgstr ""

#: ../../ref/contrib/admin/index.txt:465
msgid ""
"This provides a quick-and-dirty way to override some of the "
":class:`~django.forms.Field` options for use in the admin. "
"``formfield_overrides`` is a dictionary mapping a field class to a dict of "
"arguments to pass to the field at construction time."
msgstr ""

#: ../../ref/contrib/admin/index.txt:470
msgid ""
"Since that's a bit abstract, let's look at a concrete example. The most "
"common use of ``formfield_overrides`` is to add a custom widget for a "
"certain type of field. So, imagine we've written a ``RichTextEditorWidget`` "
"that we'd like to use for large text fields instead of the default "
"``<textarea>``. Here's how we'd do that::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:488
msgid ""
"Note that the key in the dictionary is the actual field class, *not* a "
"string. The value is another dictionary; these arguments will be passed to "
"the form field's ``__init__()`` method. See :doc:`/ref/forms/api` for "
"details."
msgstr ""

#: ../../ref/contrib/admin/index.txt:495
msgid ""
"If you want to use a custom widget with a relation field (i.e. "
":class:`~django.db.models.ForeignKey` or "
":class:`~django.db.models.ManyToManyField`), make sure you haven't included "
"that field's name in ``raw_id_fields`` or ``radio_fields``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:500
msgid ""
"``formfield_overrides`` won't let you change the widget on relation fields "
"that have ``raw_id_fields`` or ``radio_fields`` set. That's because "
"``raw_id_fields`` and ``radio_fields`` imply custom widgets of their own."
msgstr ""

#: ../../ref/contrib/admin/index.txt:507
msgid ""
"See :class:`InlineModelAdmin` objects below as well as "
":meth:`ModelAdmin.get_formsets_with_inlines`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:512
msgid ""
"Set ``list_display`` to control which fields are displayed on the change "
"list page of the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:519
msgid ""
"If you don't set ``list_display``, the admin site will display a single "
"column that displays the ``__str__()`` (``__unicode__()`` on Python 2) "
"representation of each object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:523
msgid "You have four possible values that can be used in ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:525
msgid "A field of the model. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:530
msgid ""
"A callable that accepts one parameter for the model instance. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:540
msgid ""
"A string representing an attribute on the ``ModelAdmin``. This behaves same "
"as the callable. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:550
msgid ""
"A string representing an attribute on the model. This behaves almost the "
"same as the callable, but ``self`` in this context is the model instance. "
"Here's a full model example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:568
msgid "A few special cases to note about ``list_display``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:570
msgid ""
"If the field is a ``ForeignKey``, Django will display the ``__str__()`` "
"(``__unicode__()`` on Python 2) of the related object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:573
msgid ""
"``ManyToManyField`` fields aren't supported, because that would entail "
"executing a separate SQL statement for each row in the table. If you want to"
" do this nonetheless, give your model a custom method, and add that method's"
" name to ``list_display``. (See below for more on custom methods in "
"``list_display``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:579
msgid ""
"If the field is a ``BooleanField`` or ``NullBooleanField``, Django will "
"display a pretty \"on\" or \"off\" icon instead of ``True`` or ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:583
msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable, "
"Django will HTML-escape the output by default. If you'd rather not escape "
"the output of the method, give the method an ``allow_tags`` attribute whose "
"value is ``True``. However, to avoid an XSS vulnerability, you should use "
":func:`~django.utils.html.format_html` to escape user-provided inputs."
msgstr ""

#: ../../ref/contrib/admin/index.txt:590 ../../ref/contrib/admin/index.txt:617
msgid "Here's a full example model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:612
msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable "
"that returns True or False Django will display a pretty \"on\" or \"off\" "
"icon if you give the method a ``boolean`` attribute whose value is ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:634
msgid ""
"The ``__str__()`` (``__unicode__()`` on Python 2) method is just as valid in"
" ``list_display`` as any other model method, so it's perfectly OK to do "
"this::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:640
msgid ""
"Usually, elements of ``list_display`` that aren't actual database fields "
"can't be used in sorting (because Django does all the sorting at the "
"database level)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:644
msgid ""
"However, if an element of ``list_display`` represents a certain database "
"field, you can indicate this fact by setting the ``admin_order_field`` "
"attribute of the item."
msgstr ""

#: ../../ref/contrib/admin/index.txt:669
msgid ""
"The above will tell Django to order by the ``first_name`` field when trying "
"to sort by ``colored_first_name`` in the admin."
msgstr ""

#: ../../ref/contrib/admin/index.txt:674
msgid ""
"To indicate descending order with ``admin_order_field`` you can use a hyphen"
" prefix on the field name. Using the above example, this would look like::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:680
msgid ""
"``admin_order_field`` supports query lookups to sort by values on related "
"models. This example includes an \"author first name\" column in the list "
"display and allows sorting it by first name::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:696
msgid ""
"Elements of ``list_display`` can also be properties. Please note however, "
"that due to the way properties work in Python, setting ``short_description``"
" on a property is only possible when using the ``property()`` function and "
"**not** with the ``@property`` decorator."
msgstr ""

#: ../../ref/contrib/admin/index.txt:717
msgid ""
"The field names in ``list_display`` will also appear as CSS classes in the "
"HTML output, in the form of ``column-<field_name>`` on each ``<th>`` "
"element. This can be used to set column widths in a CSS file for example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:721
msgid ""
"Django will try to interpret every element of ``list_display`` in this "
"order:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:724
msgid "A field of the model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:725
msgid "A callable."
msgstr ""

#: ../../ref/contrib/admin/index.txt:726
msgid "A string representing a ``ModelAdmin`` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:727
msgid "A string representing a model attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:729
msgid ""
"For example if you have ``first_name`` as a model field and as a "
"``ModelAdmin`` attribute, the model field will be used."
msgstr ""

#: ../../ref/contrib/admin/index.txt:735
msgid ""
"Use ``list_display_links`` to control if and which fields in "
":attr:`list_display` should be linked to the \"change\" page for an object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:738
msgid ""
"By default, the change list page will link the first column -- the first "
"field specified in ``list_display`` -- to the change page for each item. But"
" ``list_display_links`` lets you change this:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:742
msgid "Set it to ``None`` to get no links at all."
msgstr ""

#: ../../ref/contrib/admin/index.txt:743
msgid ""
"Set it to a list or tuple of fields (in the same format as ``list_display``)"
" whose columns you want converted to links."
msgstr ""

#: ../../ref/contrib/admin/index.txt:746
msgid ""
"You can specify one or many fields. As long as the fields appear in "
"``list_display``, Django doesn't care how many (or how few) fields are "
"linked. The only requirement is that if you want to use "
"``list_display_links`` in this fashion, you must define ``list_display``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:751
msgid ""
"In this example, the ``first_name`` and ``last_name`` fields will be linked "
"on the change list page::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:758
msgid "In this example, the change list page grid will have no links::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:766
msgid "``None`` was added as a valid ``list_display_links`` value."
msgstr ""

#: ../../ref/contrib/admin/index.txt:772
msgid ""
"Set ``list_editable`` to a list of field names on the model which will allow"
" editing on the change list page. That is, fields listed in "
"``list_editable`` will be displayed as form widgets on the change list page,"
" allowing users to edit and save multiple rows at once."
msgstr ""

#: ../../ref/contrib/admin/index.txt:779
msgid ""
"``list_editable`` interacts with a couple of other options in particular "
"ways; you should note the following rules:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:782
msgid ""
"Any field in ``list_editable`` must also be in ``list_display``. You can't "
"edit a field that's not displayed!"
msgstr ""

#: ../../ref/contrib/admin/index.txt:785
msgid ""
"The same field can't be listed in both ``list_editable`` and "
"``list_display_links`` -- a field can't be both a form and a link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:789
msgid "You'll get a validation error if either of these rules are broken."
msgstr ""

#: ../../ref/contrib/admin/index.txt:793
msgid ""
"Set ``list_filter`` to activate filters in the right sidebar of the change "
"list page of the admin, as illustrated in the following screenshot:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:798
msgid ""
"``list_filter`` should be a list or tuple of elements, where each element "
"should be of one of the following types:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:801
msgid ""
"a field name, where the specified field should be either a ``BooleanField``,"
" ``CharField``, ``DateField``, ``DateTimeField``, ``IntegerField``, "
"``ForeignKey`` or ``ManyToManyField``, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:808
msgid ""
"Field names in ``list_filter`` can also span relations using the ``__`` "
"lookup, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:814
msgid ""
"a class inheriting from ``django.contrib.admin.SimpleListFilter``, which you"
" need to provide the ``title`` and ``parameter_name`` attributes to and "
"override the ``lookups`` and ``queryset`` methods, e.g.::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:865
msgid ""
"As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` "
"and ``queryset`` methods, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:880
msgid ""
"Also as a convenience, the ``ModelAdmin`` object is passed to the "
"``lookups`` method, for example if you want to base the lookups on the "
"available data::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:899
msgid ""
"a tuple, where the first element is a field name and the second element is a"
" class inheriting from ``django.contrib.admin.FieldListFilter``, for "
"example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:910
msgid ""
"You can now limit the choices of a related model to the objects involved in "
"that relation using ``RelatedOnlyFieldListFilter``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:918
msgid ""
"Assuming ``author`` is a ``ForeignKey`` to a ``User`` model, this will limit"
" the ``list_filter`` choices to the users who have written a book instead of"
" listing all users."
msgstr ""

#: ../../ref/contrib/admin/index.txt:924
msgid ""
"The ``FieldListFilter`` API is considered internal and might be changed."
msgstr ""

#: ../../ref/contrib/admin/index.txt:927
msgid ""
"It is possible to specify a custom template for rendering a list filter::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:932
msgid ""
"See the default template provided by django (``admin/filter.html``) for a "
"concrete example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:937
msgid ""
"Set ``list_max_show_all`` to control how many items can appear on a \"Show "
"all\" admin change list page. The admin will display a \"Show all\" link on "
"the change list only if the total result count is less than or equal to this"
" setting. By default, this is set to ``200``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:944
msgid ""
"Set ``list_per_page`` to control how many items appear on each paginated "
"admin change list page. By default, this is set to ``100``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:949
msgid ""
"Set ``list_select_related`` to tell Django to use "
":meth:`~django.db.models.query.QuerySet.select_related` in retrieving the "
"list of objects on the admin change list page. This can save you a bunch of "
"database queries."
msgstr ""

#: ../../ref/contrib/admin/index.txt:954
msgid ""
"The value should be either a boolean, a list or a tuple. Default is "
"``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:957
msgid ""
"When value is ``True``, ``select_related()`` will always be called. When "
"value is set to ``False``, Django will look at ``list_display`` and call "
"``select_related()`` if any ``ForeignKey`` is present."
msgstr ""

#: ../../ref/contrib/admin/index.txt:961
msgid ""
"If you need more fine-grained control, use a tuple (or list) as value for "
"``list_select_related``. Empty tuple will prevent Django from calling "
"``select_related`` at all. Any other tuple will be passed directly to "
"``select_related`` as parameters. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:969
msgid "will call ``select_related('author', 'category')``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:973
msgid ""
"Set ``ordering`` to specify how lists of objects should be ordered in the "
"Django admin views. This should be a list or tuple in the same format as a "
"model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""

#: ../../ref/contrib/admin/index.txt:977
msgid ""
"If this isn't provided, the Django admin will use the model's default "
"ordering."
msgstr ""

#: ../../ref/contrib/admin/index.txt:980
msgid ""
"If you need to specify a dynamic order (for example depending on user or "
"language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:986
msgid ""
"The paginator class to be used for pagination. By default, "
":class:`django.core.paginator.Paginator` is used. If the custom paginator "
"class doesn't have the same constructor interface as "
":class:`django.core.paginator.Paginator`, you will also need to provide an "
"implementation for :meth:`ModelAdmin.get_paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:994
msgid ""
"Set ``prepopulated_fields`` to a dictionary mapping field names to the "
"fields it should prepopulate from::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1000
msgid ""
"When set, the given fields will use a bit of JavaScript to populate from the"
" fields assigned. The main use for this functionality is to automatically "
"generate the value for ``SlugField`` fields from one or more other fields. "
"The generated value is produced by concatenating the values of the source "
"fields, and then by transforming that result into a valid slug (e.g. "
"substituting dashes for spaces)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1007
msgid ""
"``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, "
"nor ``ManyToManyField`` fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1012
msgid ""
"The admin now preserves filters on the list view after creating, editing or "
"deleting an object. You can restore the previous behavior of clearing "
"filters by setting this attribute to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1018
msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields"
" that are ``ForeignKey`` or have ``choices`` set. If a field is present in "
"``radio_fields``, Django will use a radio-button interface instead. Assuming"
" ``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1026
msgid ""
"You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the "
"``django.contrib.admin`` module."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1029
msgid ""
"Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or "
"has ``choices`` set."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1034
#: ../../ref/contrib/admin/index.txt:2095
msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields"
" that are ``ForeignKey``. Sometimes you don't want to incur the overhead of "
"having to select all the related instances to display in the drop-down."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1039
#: ../../ref/contrib/admin/index.txt:2100
msgid ""
"``raw_id_fields`` is a list of fields you would like to change into an "
"``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1046
msgid ""
"The ``raw_id_fields`` ``Input`` widget should contain a primary key if the "
"field is a ``ForeignKey`` or a comma separated list of values if the field "
"is a ``ManyToManyField``.  The ``raw_id_fields`` widget shows a magnifying "
"glass button next to the field which allows users to search for and select a"
" value:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1056
msgid ""
"By default the admin shows all fields as editable. Any fields in this option"
" (which should be a ``list`` or ``tuple``) will display its data as-is and "
"non-editable; they are also excluded from the "
":class:`~django.forms.ModelForm` used for creating and editing. Note that "
"when specifying :attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` "
"the read-only fields must be present to be shown (they are ignored "
"otherwise)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1064
msgid ""
"If ``readonly_fields`` is used without defining explicit ordering through "
":attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added"
" last after all editable fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1068
msgid ""
"A read-only field can not only display data from a model's field, it can "
"also display the output of a model's method or a method of the "
"``ModelAdmin`` class itself. This is very similar to the way "
":attr:`ModelAdmin.list_display` behaves. This provides an easy way to use "
"the admin interface to provide feedback on the status of the objects being "
"edited, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1099
msgid "Set ``save_as`` to enable a \"save as\" feature on admin change forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1101
msgid ""
"Normally, objects have three save options: \"Save\", \"Save and continue "
"editing\" and \"Save and add another\". If ``save_as`` is ``True``, \"Save "
"and add another\" will be replaced by a \"Save as\" button."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1105
msgid ""
"\"Save as\" means the object will be saved as a new object (with a new ID), "
"rather than the old object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1108
msgid "By default, ``save_as`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1112
msgid ""
"Set ``save_on_top`` to add save buttons across the top of your admin change "
"forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1115
msgid ""
"Normally, the save buttons appear only at the bottom of the forms. If you "
"set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1119
msgid "By default, ``save_on_top`` is set to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1123
msgid ""
"Set ``search_fields`` to enable a search box on the admin change list page. "
"This should be set to a list of field names that will be searched whenever "
"somebody submits a search query in that text box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1127
msgid ""
"These fields should be some kind of text field, such as ``CharField`` or "
"``TextField``. You can also perform a related lookup on a ``ForeignKey`` or "
"``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1133
msgid ""
"For example, if you have a blog entry with an author, the following "
"definition would enable searching blog entries by the email address of the "
"author::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1139
msgid ""
"When somebody does a search in the admin search box, Django splits the "
"search query into words and returns all objects that contain each of the "
"words, case insensitive, where each word must be in at least one of "
"``search_fields``. For example, if ``search_fields`` is set to "
"``['first_name', 'last_name']`` and a user searches for ``john lennon``, "
"Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1149
msgid ""
"For faster and/or more restrictive searches, prefix the field name with an "
"operator:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1166
msgid "``^``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1153
msgid ""
"Use the '^' operator to match starting at the beginning of the field. For "
"example, if ``search_fields`` is set to ``['^first_name', '^last_name']`` "
"and a user searches for ``john lennon``, Django will do the equivalent of "
"this SQL ``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1162
msgid ""
"This query is more efficient than the normal ``'%john%'`` query, because the"
" database only needs to check the beginning of a column's data, rather than "
"seeking through the entire column's data. Plus, if the column has an index "
"on it, some databases may be able to use the index for this query, even "
"though it's a ``LIKE`` query."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1180
msgid "``=``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1169
msgid ""
"Use the '=' operator for case-insensitive exact matching. For example, if "
"``search_fields`` is set to ``['=first_name', '=last_name']`` and a user "
"searches for ``john lennon``, Django will do the equivalent of this SQL "
"``WHERE`` clause::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1178
msgid ""
"Note that the query input is split by spaces, so, following this example, "
"it's currently not possible to search for all records in which "
"``first_name`` is exactly ``'john winston'`` (containing a space)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1185
msgid "``@``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1183
msgid ""
"Using the '@' operator to perform a full text match. This is like the "
"default search method but uses an index. Currently this is only available "
"for MySQL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1187
msgid ""
"If you need to customize search you can use "
":meth:`ModelAdmin.get_search_results` to provide additional or alternate "
"search behavior."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1195
msgid ""
"Set ``show_full_result_count`` to control whether the full count of objects "
"should be displayed on a filtered admin page (e.g. ``99 results (103 "
"total)``). If this option is set to ``False``, a text like ``99 results "
"(Show all)`` is displayed instead."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1200
msgid ""
"The default of ``show_full_result_count=True`` generates a query to perform "
"a full count on the table which can be expensive if the table contains a "
"large number of rows."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1208
msgid ""
"Set ``view_on_site`` to control whether or not to display the \"View on "
"site\" link. This link should bring you to a URL where you can display the "
"saved object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1211
msgid ""
"This value can be either a boolean flag or a callable. If ``True`` (the "
"default), the object's :meth:`~django.db.models.Model.get_absolute_url` "
"method will be used to generate the url."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1215
msgid ""
"If your model has a :meth:`~django.db.models.Model.get_absolute_url` method "
"but you don't want the \"View on site\" button to appear, you only need to "
"set ``view_on_site`` to ``False``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1224
msgid ""
"In case it is a callable, it accepts the model instance as a parameter. For "
"example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1236
msgid "Custom template options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1238
msgid ""
"The :ref:`admin-overriding-templates` section describes how to override or "
"extend the default admin templates.  Use the following options to override "
"the default templates used by the :class:`ModelAdmin` views:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1244
msgid "Path to a custom template, used by :meth:`add_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1248
msgid "Path to a custom template, used by :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1252
msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1256
msgid ""
"Path to a custom template, used by :meth:`delete_view` for displaying a "
"confirmation page when deleting one or more objects."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1261
msgid ""
"Path to a custom template, used by the ``delete_selected`` action method for"
" displaying a confirmation page when deleting one or more objects. See the "
":doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1267
msgid "Path to a custom template, used by :meth:`history_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1273
msgid "``ModelAdmin`` methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1277
msgid ""
":meth:`ModelAdmin.save_model` and :meth:`ModelAdmin.delete_model` must "
"save/delete the object, they are not for veto purposes, rather they allow "
"you to perform extra operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1283
msgid ""
"The ``save_model`` method is given the ``HttpRequest``, a model instance, a "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the object. Here you can do any pre- or post-save operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1287
msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1298
msgid ""
"The ``delete_model`` method is given the ``HttpRequest`` and a model "
"instance. Use this method to do pre- or post-delete operations."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1303
msgid ""
"The ``save_formset`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the parent object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1307
msgid ""
"For example, to attach ``request.user`` to each changed formset model "
"instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1320
msgid "See also :ref:`saving-objects-in-the-formset`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1324
msgid ""
"The ``get_ordering`` method takes a ``request`` as parameter and is expected"
" to return a ``list`` or ``tuple`` for ordering similar to the "
":attr:`ordering` attribute. For example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1338
msgid ""
"The ``get_search_results`` method modifies the list of objects displayed "
"into those that match the provided search term. It accepts the request, a "
"queryset that applies the current filters, and the user-provided search "
"term. It returns a tuple containing a queryset modified to implement the "
"search, and a boolean indicating if the results may contain duplicates."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1344
msgid ""
"The default implementation searches the fields named in "
":attr:`ModelAdmin.search_fields`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1346
msgid ""
"This method may be overridden with your own custom search method. For "
"example, you might wish to search by an integer field, or use an external "
"tool such as Solr or Haystack. You must establish if the queryset changes "
"implemented by your search method may introduce duplicates into the results,"
" and return ``True`` in the second element of the return value."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1352
msgid "For example, to enable search by integer field, you could use::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1370
msgid ""
"The ``save_related`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance, the list of inline formsets and a boolean value "
"based on whether the parent is being added or changed. Here you can do any "
"pre- or post-save operations for objects related to the parent. Note that at"
" this point the parent object and its form have already been saved."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1378
msgid ""
"The ``get_readonly_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of field names that will be displayed as read-only, "
"as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1385
msgid ""
"The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``dictionary``, as described above in the "
":attr:`ModelAdmin.prepopulated_fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1392
msgid ""
"The ``get_list_display`` method is given the ``HttpRequest`` and is expected"
" to return a ``list`` or ``tuple`` of field names that will be displayed on "
"the changelist view as described above in the "
":attr:`ModelAdmin.list_display` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1399
msgid ""
"The ``get_list_display_links`` method is given the ``HttpRequest`` and the "
"``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is"
" expected to return either ``None`` or a ``list`` or ``tuple`` of field "
"names on the changelist that will be linked to the change view, as described"
" in the :attr:`ModelAdmin.list_display_links` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1407
msgid ""
"``None`` was added as a valid ``get_list_display_links()`` return value."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1413
msgid ""
"The ``get_fields`` method is given the ``HttpRequest`` and the ``obj`` being"
" edited (or ``None`` on an add form) and is expected to return a list of "
"fields, as described above in the :attr:`ModelAdmin.fields` section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1419
msgid ""
"The ``get_fieldsets`` method is given the ``HttpRequest`` and the ``obj`` "
"being edited (or ``None`` on an add form) and is expected to return a list "
"of two-tuples, in which each two-tuple represents a ``<fieldset>`` on the "
"admin form page, as described above in the :attr:`ModelAdmin.fieldsets` "
"section."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1426
msgid ""
"The ``get_list_filter`` method is given the ``HttpRequest`` and is expected "
"to return the same kind of sequence type as for the "
":attr:`~ModelAdmin.list_filter` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1434
msgid ""
"The ``get_search_fields`` method is given the ``HttpRequest`` and is "
"expected to return the same kind of sequence type as for the "
":attr:`~ModelAdmin.search_fields` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1440
msgid ""
"The ``get_inline_instances`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of :class:`~django.contrib.admin.InlineModelAdmin` "
"objects, as described below in the "
":class:`~django.contrib.admin.InlineModelAdmin` section. For example, the "
"following would return inlines without the default filtering based on add, "
"change, and delete permissions::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1453
msgid ""
"If you override this method, make sure that the returned inlines are "
"instances of the classes defined in :attr:`inlines` or you might encounter a"
" \"Bad Request\" error when adding related objects."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1459
msgid ""
"The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for "
"that ModelAdmin in the same way as a URLconf.  Therefore you can extend them"
" as documented in :doc:`/topics/http/urls`::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1481
msgid ""
"If you want to use the admin layout, extend from ``admin/base_site.html``:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1492
msgid ""
"Notice that the custom patterns are included *before* the regular admin "
"URLs: the admin URL patterns are very permissive and will match nearly "
"anything, so you'll usually want to prepend your custom URLs to the built-in"
" ones."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1497
msgid ""
"In this example, ``my_view`` will be accessed at "
"``/admin/myapp/mymodel/my_view/`` (assuming the admin URLs are included at "
"``/admin/``.)"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1501
msgid ""
"However, the ``self.my_view`` function registered above suffers from two "
"problems:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1504
msgid ""
"It will *not* perform any permission checks, so it will be accessible to the"
" general public."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1506
msgid ""
"It will *not* provide any header details to prevent caching. This means if "
"the page retrieves data from the database, and caching middleware is active,"
" the page could show outdated information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1510
msgid ""
"Since this is usually not what you want, Django provides a convenience "
"wrapper to check permissions and mark the view as non-cacheable. This "
"wrapper is ``AdminSite.admin_view()`` (i.e. ``self.admin_site.admin_view`` "
"inside a ``ModelAdmin`` instance); use it like so::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1523
msgid "Notice the wrapped view in the fifth line above::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1527
msgid ""
"This wrapping will protect ``self.my_view`` from unauthorized access and "
"will apply the ``django.views.decorators.cache.never_cache`` decorator to "
"make sure it is not cached if the cache middleware is active."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1531
msgid ""
"If the page is cacheable, but you still want the permission check to be "
"performed, you can pass a ``cacheable=True`` argument to "
"``AdminSite.admin_view()``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1539
msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the admin add "
"and change views, see :meth:`add_view` and :meth:`change_view`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1542
msgid ""
"The base implementation uses :func:`~django.forms.models.modelform_factory` "
"to subclass :attr:`~form`, modified by attributes such as :attr:`~fields` "
"and :attr:`~exclude`. So, for example, if you wanted to offer additional "
"fields to superusers, you could swap in a different base form like so::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1553
msgid ""
"You may also simply return a custom :class:`~django.forms.ModelForm` class "
"directly."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1558
msgid "Use :meth:`get_formsets_with_inlines()` instead."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1561
msgid ""
"Yields  :class:`InlineModelAdmin`\\s for use in admin add and change views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1563
msgid ""
"For example if you wanted to display a particular inline only in the change "
"view, you could override ``get_formsets`` as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1580
msgid ""
"Yields (``FormSet``, :class:`InlineModelAdmin`) pairs for use in admin add "
"and change views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1583
msgid ""
"For example if you wanted to display a particular inline only in the change "
"view, you could override ``get_formsets_with_inlines`` as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1598
msgid ""
"The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to "
"override the default formfield for a foreign keys field. For example, to "
"return a subset of objects for this foreign key field based on the user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1608
msgid ""
"This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key "
"field to only display the cars owned by the ``User`` instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1613
msgid ""
"Like the ``formfield_for_foreignkey`` method, the "
"``formfield_for_manytomany`` method can be overridden to change the default "
"formfield for a many to many field. For example, if an owner can own "
"multiple cars and cars can belong to multiple owners -- a many to many "
"relationship -- you could filter the ``Car`` foreign key field to only "
"display the cars owned by the ``User``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1628
msgid ""
"Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` "
"methods, the ``formfield_for_choice_field`` method can be overridden to "
"change the default formfield for a field that has declared choices. For "
"example, if the choices available to a superuser should be different than "
"those available to regular staff, you could proceed as follows::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1647
msgid ""
"Any ``choices`` attribute set on the formfield will be limited to the form "
"field only. If the corresponding field on the model has choices set, the "
"choices provided to the form must be a valid subset of those choices, "
"otherwise the form submission will fail with a "
":exc:`~django.core.exceptions.ValidationError` when the model itself is "
"validated before saving."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1656
msgid ""
"Returns the ``Changelist`` class to be used for listing. By default, "
"``django.contrib.admin.views.main.ChangeList`` is used. By inheriting this "
"class you can change the behavior of the listing."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1662
msgid ""
"Returns a :class:`~django.forms.ModelForm` class for use in the ``Formset`` "
"on the changelist page. To use a custom form, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1676
msgid ""
"If you define the ``Meta.model`` attribute on a "
":class:`~django.forms.ModelForm`, you must also define the ``Meta.fields`` "
"attribute (or the ``Meta.exclude`` attribute). However, ``ModelAdmin`` "
"ignores this value, overriding it with the :attr:`ModelAdmin.list_editable` "
"attribute. The easiest solution is to omit the ``Meta.model`` attribute, "
"since ``ModelAdmin`` will provide the correct model to use."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1686
msgid ""
"Returns a :ref:`ModelFormSet <model-formsets>` class for use on the "
"changelist page if :attr:`~ModelAdmin.list_editable` is used. To use a "
"custom formset, for example::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1702
msgid ""
"Should return ``True`` if adding an object is permitted, ``False`` "
"otherwise."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1707
msgid ""
"Should return ``True`` if editing obj is permitted, ``False`` otherwise. If "
"obj is ``None``, should return ``True`` or ``False`` to indicate whether "
"editing of objects of this type is permitted in general (e.g., ``False`` "
"will be interpreted as meaning that the current user is not permitted to "
"edit any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1715
msgid ""
"Should return ``True`` if deleting obj is permitted, ``False`` otherwise. If"
" obj is ``None``, should return ``True`` or ``False`` to indicate whether "
"deleting objects of this type is permitted in general (e.g., ``False`` will "
"be interpreted as meaning that the current user is not permitted to delete "
"any object of this type)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1725
msgid ""
"Should return ``True`` if displaying the module on the admin index page and "
"accessing the module's index page is permitted, ``False`` otherwise. Uses "
":meth:`User.has_module_perms() "
"<django.contrib.auth.models.User.has_module_perms>` by default. Overriding "
"it does not restrict access to the add, change or delete views, "
":meth:`~ModelAdmin.has_add_permission`, "
":meth:`~ModelAdmin.has_change_permission`, and "
":meth:`~ModelAdmin.has_delete_permission` should be used for that."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1736
msgid ""
"The ``get_queryset`` method on a ``ModelAdmin`` returns a "
":class:`~django.db.models.query.QuerySet` of all model instances that can be"
" edited by the admin site. One use case for overriding this method is to "
"show objects owned by the logged-in user::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1750
msgid ""
"Sends a message to the user using the :mod:`django.contrib.messages` "
"backend.  See the :ref:`custom ModelAdmin example <custom-admin-action>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1753
msgid ""
"Keyword arguments allow you to change the message level, add extra CSS tags,"
" or fail silently if the ``contrib.messages`` framework is not installed. "
"These keyword arguments match those for "
":func:`django.contrib.messages.add_message`, see that function's "
"documentation for more details. One difference is that the level may be "
"passed as a string label in addition to integer/constant."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1762
msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1767
msgid ""
"Determines the :class:`~django.http.HttpResponse` for the :meth:`add_view` "
"stage."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1770
msgid ""
"``response_add`` is called after the admin form is submitted and just after "
"the object and all the related instances have been created and saved. You "
"can override it to change the default behavior after the object has been "
"created."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1777
msgid ""
"Determines the :class:`~django.http.HttpResponse` for the "
":meth:`change_view` stage."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1780
msgid ""
"``response_change`` is called after the admin form is submitted and just "
"after the object and all the related instances have been saved. You can "
"override it to change the default behavior after the object has been "
"changed."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1789
msgid ""
"Determines the :class:`~django.http.HttpResponse` for the "
":meth:`delete_view` stage."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1792
msgid ""
"``response_delete`` is called after the object has been deleted. You can "
"override it to change the default behavior after the object has been "
"deleted."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1796
msgid "``obj_display`` is a string with the name of the deleted object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1799
msgid ""
"``obj_id`` is the serialized identifier used to retrieve the object to be "
"deleted."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1804
msgid "The ``obj_id`` parameter was added."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1810
msgid ""
"A hook for the initial data on admin change forms. By default, fields are "
"given initial values from ``GET`` parameters. For instance, "
"``?name=initial_value`` will set the ``name`` field's initial value to be "
"``initial_value``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1815
msgid ""
"This method should return a dictionary in the form ``{'fieldname': "
"'fieldval'}``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1822
msgid "Other methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1826
msgid "Django view for the model instance addition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1830
msgid "Django view for the model instance edition page. See note below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1834
msgid ""
"Django view for the model instances change list/actions page. See note "
"below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1839
msgid ""
"Django view for the model instance(s) deletion confirmation page. See note "
"below."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1844
msgid ""
"Django view for the page that shows the modification history for a given "
"model instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1847
msgid ""
"Unlike the hook-type ``ModelAdmin`` methods detailed in the previous "
"section, these five methods are in reality designed to be invoked as Django "
"views from the admin application URL dispatching handler to render the pages"
" that deal with model instances CRUD operations. As a result, completely "
"overriding these methods will significantly change the behavior of the admin"
" application."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1853
msgid ""
"One common reason for overriding these methods is to augment the context "
"data that is provided to the template that renders the view. In the "
"following example, the change view is overridden so that the rendered "
"template is provided some extra mapping data that would not otherwise be "
"available::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1873 ../../ref/contrib/sitemaps.txt:430
msgid ""
"These views return :class:`~django.template.response.TemplateResponse` "
"instances which allow you to easily customize the response data before "
"rendering. For more details, see the :doc:`TemplateResponse documentation "
"</ref/template-response>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1881
msgid "``ModelAdmin`` asset definitions"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1883
msgid ""
"There are times where you would like add a bit of CSS and/or JavaScript to "
"the add/change views. This can be accomplished by using a ``Media`` inner "
"class on your ``ModelAdmin``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1894
msgid ""
"The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends "
":setting:`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is "
"``None``) to any asset paths. The same rules apply as :ref:`regular asset "
"definitions on forms <form-asset-paths>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1900
msgid "jQuery"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1902
msgid "Django admin JavaScript makes use of the `jQuery`_ library."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1904
msgid ""
"To avoid conflicts with user-supplied scripts or libraries, Django's jQuery "
"(version 1.11.2) is namespaced as ``django.jQuery``. If you want to use "
"jQuery in your own admin JavaScript without including a second copy, you can"
" use the ``django.jQuery`` object on changelist and add/edit views."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1911
msgid "The embedded jQuery has been upgraded from 1.9.1 to 1.11.2."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1913
msgid ""
"The :class:`ModelAdmin` class requires jQuery by default, so there is no "
"need to add jQuery to your ``ModelAdmin``’s list of media resources unless "
"you have a specific need. For example, if you require the jQuery library to "
"be in the global namespace (for example when using third-party jQuery "
"plugins) or if you need a newer version of jQuery, you will have to include "
"your own copy."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1919
msgid ""
"Django provides both uncompressed and 'minified' versions of jQuery, as "
"``jquery.js`` and ``jquery.min.js`` respectively."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1922
msgid ""
":class:`ModelAdmin` and :class:`InlineModelAdmin` have a ``media`` property "
"that returns a list of ``Media`` objects which store paths to the JavaScript"
" files for the forms and/or formsets. If :setting:`DEBUG` is ``True`` it "
"will return the uncompressed versions of the various JavaScript files, "
"including ``jquery.js``; if not, it will return the 'minified' versions."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1933
msgid "Adding custom validation to the admin"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1935
msgid ""
"Adding custom validation of data in the admin is quite easy. The automatic "
"admin interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class "
"gives you the ability define your own form::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1942
msgid ""
"``MyArticleAdminForm`` can be defined anywhere as long as you import where "
"needed. Now within your form you can add your own custom validation for any "
"field::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1951
msgid ""
"It is important you use a ``ModelForm`` here otherwise things can break. See"
" the :doc:`forms </ref/forms/index>` documentation on :doc:`custom "
"validation </ref/forms/validation>` and, more specifically, the :ref:`model "
"form validation notes <overriding-modelform-clean-method>` for more "
"information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:1960
msgid "``InlineModelAdmin`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1966
msgid ""
"The admin interface has the ability to edit models on the same page as a "
"parent model. These are called inlines. Suppose you have these two models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1978
msgid ""
"You can edit the books authored by an author on the author page. You add "
"inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1991
msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1993
msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1994
msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:1996
msgid ""
"The difference between these two is merely the template used to render them."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2000
msgid "``InlineModelAdmin`` options"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2002
msgid ""
"``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and"
" adds some of its own (the shared features are actually defined in the "
"``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2006
msgid ":attr:`~InlineModelAdmin.form`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2007
msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2008
msgid ":attr:`~ModelAdmin.fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2009
msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2010
msgid ":attr:`~ModelAdmin.exclude`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2011
msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2012
msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2013
msgid ":attr:`~ModelAdmin.ordering`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2014
msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2015
msgid ":meth:`~ModelAdmin.get_queryset`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2016
msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2017
msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2018
msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2019
msgid ":meth:`~ModelAdmin.formfield_for_choice_field`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2020
msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2021
msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2022
msgid ":meth:`~ModelAdmin.has_add_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2023
msgid ":meth:`~ModelAdmin.has_change_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2024
msgid ":meth:`~ModelAdmin.has_delete_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2025
msgid ":meth:`~ModelAdmin.has_module_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2027
msgid "The ``InlineModelAdmin`` class adds:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2031
msgid "The model which the inline is using. This is required."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2035
msgid ""
"The name of the foreign key on the model. In most cases this will be dealt "
"with automatically, but ``fk_name`` must be specified explicitly if there "
"are more than one foreign key to the same parent model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2041
msgid ""
"This defaults to :class:`~django.forms.models.BaseInlineFormSet`. Using your"
" own formset can give you many possibilities of customization. Inlines are "
"built around :ref:`model formsets <model-formsets>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2047
msgid ""
"The value for ``form`` defaults to ``ModelForm``. This is what is passed "
"through to :func:`~django.forms.models.inlineformset_factory` when creating "
"the formset for this inline."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2052
msgid ""
"When writing custom validation for ``InlineModelAdmin`` forms, be cautious "
"of writing validation that relies on features of the parent model. If the "
"parent model fails to validate, it may be left in an inconsistent state as "
"described in the warning in :ref:`validation-on-modelform`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2059
msgid ""
"This controls the number of extra forms the formset will display in addition"
" to the initial forms. See the :doc:`formsets documentation "
"</topics/forms/formsets>` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2064
msgid ""
"For users with JavaScript-enabled browsers, an \"Add another\" link is "
"provided to enable any number of additional inlines to be added in addition "
"to those provided as a result of the ``extra`` argument."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2068
msgid ""
"The dynamic link will not appear if the number of currently displayed forms "
"exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2071
msgid ""
":meth:`InlineModelAdmin.get_extra` also allows you to customize the number "
"of extra forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2076
msgid ""
"This controls the maximum number of forms to show in the inline. This "
"doesn't directly correlate to the number of objects, but can if the value is"
" small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2080
msgid ""
":meth:`InlineModelAdmin.get_max_num` also allows you to customize the "
"maximum number of extra forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2087
msgid ""
"This controls the minimum number of forms to show in the inline. See "
":func:`~django.forms.models.modelformset_factory` for more information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2090
msgid ""
":meth:`InlineModelAdmin.get_min_num` also allows you to customize the "
"minimum number of displayed forms."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2110
msgid "The template used to render the inline on the page."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2114
msgid ""
"An override to the ``verbose_name`` found in the model's inner ``Meta`` "
"class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2119
msgid ""
"An override to the ``verbose_name_plural`` found in the model's inner "
"``Meta`` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2124
msgid ""
"Specifies whether or not inline objects can be deleted in the inline. "
"Defaults to ``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2131
msgid ""
"Specifies whether or not inline objects that can be changed in the admin "
"have a link to the change form. Defaults to ``False``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2136
msgid ""
"Returns a :class:`~django.forms.models.BaseInlineFormSet` class for use in "
"admin add/change views. See the example for "
":class:`ModelAdmin.get_formsets_with_inlines`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2142
msgid ""
"Returns the number of extra inline forms to use. By default, returns the "
":attr:`InlineModelAdmin.extra` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2145
msgid ""
"Override this method to programmatically determine the number of extra "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2160
msgid ""
"Returns the maximum number of extra inline forms to use. By default, returns"
" the :attr:`InlineModelAdmin.max_num` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2163
msgid ""
"Override this method to programmatically determine the maximum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2180
msgid ""
"Returns the minimum number of inline forms to use. By default, returns the "
":attr:`InlineModelAdmin.min_num` attribute."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2183
msgid ""
"Override this method to programmatically determine the minimum number of "
"inline forms. For example, this may be based on the model instance (passed "
"as the keyword argument ``obj``)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2188
msgid ""
"Working with a model with two or more foreign keys to the same parent model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2190
msgid ""
"It is sometimes possible to have more than one foreign key to the same "
"model. Take this model for instance::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2199
msgid ""
"If you wanted to display an inline on the ``Person`` admin add/change pages "
"you need to explicitly define the foreign key since it is unable to do so "
"automatically::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2216
msgid "Working with many-to-many models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2218
msgid ""
"By default, admin widgets for many-to-many relations will be displayed on "
"whichever model contains the actual reference to the "
":class:`~django.db.models.ManyToManyField`. Depending on your ``ModelAdmin``"
" definition, each many-to-many field in your model will be represented by a "
"standard HTML ``<select multiple>``, a horizontal or vertical filter, or a "
"``raw_id_admin`` widget. However, it is also possible to replace these "
"widgets with inlines."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2226
msgid "Suppose we have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2237
msgid ""
"If you want to display many-to-many relations using an inline, you can do so"
" by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2256
msgid "There are two features worth noting in this example."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2258
msgid ""
"Firstly - the ``MembershipInline`` class references "
"``Group.members.through``. The ``through`` attribute is a reference to the "
"model that manages the many-to-many relation. This model is automatically "
"created by Django when you define a many-to-many field."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2263
msgid ""
"Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. "
"Django displays an admin widget for a many-to-many field on the model that "
"defines the relation (in this case, ``Group``). If you want to use an inline"
" model to represent the many-to-many relationship, you must tell Django's "
"admin to *not* display this widget - otherwise you will end up with two "
"widgets on your admin page for managing the relation."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2270
msgid ""
"In all other respects, the ``InlineModelAdmin`` is exactly the same as any "
"other. You can customize the appearance using any of the normal "
"``ModelAdmin`` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2275
msgid "Working with many-to-many intermediary models"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2277
msgid ""
"When you specify an intermediary model using the ``through`` argument to a "
":class:`~django.db.models.ManyToManyField`, the admin will not display a "
"widget by default. This is because each instance of that intermediary model "
"requires more information than could be displayed in a single widget, and "
"the layout required for multiple widgets will vary depending on the "
"intermediate model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2284
msgid ""
"However, we still want to be able to edit that information inline. "
"Fortunately, this is easy to do with inline admin models. Suppose we have "
"the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2303
msgid ""
"The first step in displaying this intermediate model in the admin is to "
"define an inline class for the ``Membership`` model::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2310
msgid ""
"This simple example uses the default ``InlineModelAdmin`` values for the "
"``Membership`` model, and limits the extra add forms to one. This could be "
"customized using any of the options available to ``InlineModelAdmin`` "
"classes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2314
msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2322
msgid ""
"Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2327
msgid ""
"Now your admin site is set up to edit ``Membership`` objects inline from "
"either the ``Person`` or the ``Group`` detail pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2333
msgid "Using generic relations as an inline"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2335
msgid ""
"It is possible to use an inline with generically related objects. Let's say "
"you have the following models::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2350
msgid ""
"If you want to allow editing and creating an ``Image`` instance on the "
"``Product``, add/change views you can use "
":class:`~django.contrib.contenttypes.admin.GenericTabularInline` or "
":class:`~django.contrib.contenttypes.admin.GenericStackedInline` (both "
"subclasses of "
":class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`) "
"provided by :mod:`~django.contrib.contenttypes.admin`. They implement "
"tabular and stacked visual layouts for the forms representing the inline "
"objects, respectively, just like their non-generic counterparts. They behave"
" just like any other inline. In your ``admin.py`` for this example app::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2375
msgid ""
"See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for "
"more specific information."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2381
msgid "Overriding admin templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2383
msgid ""
"It is relatively easy to override many of the templates which the admin "
"module uses to generate the various pages of an admin site. You can even "
"override a few of these templates for a specific app, or a specific model."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2388
msgid "Set up your projects admin template directories"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2390
msgid ""
"The admin template files are located in the "
"``contrib/admin/templates/admin`` directory."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2393
msgid ""
"In order to override one or more of them, first create an ``admin`` "
"directory in your project's ``templates`` directory. This can be any of the "
"directories you specified in the :setting:`DIRS <TEMPLATES-DIRS>` option of "
"the ``DjangoTemplates`` backend in the :setting:`TEMPLATES` setting. If you "
"have customized the ``'loaders'`` option, be sure "
"``'django.template.loaders.filesystem.Loader'`` appears before "
"``'django.template.loaders.app_directories.Loader'`` so that your custom "
"templates will be found by the template loading system before those that are"
" included with :mod:`django.contrib.admin`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2403
msgid ""
"Within this ``admin`` directory, create sub-directories named after your "
"app. Within these app subdirectories create sub-directories named after your"
" models. Note, that the admin app will lowercase the model name when looking"
" for the directory, so make sure you name the directory in all lowercase if "
"you are going to run your app on a case-sensitive filesystem."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2409
msgid ""
"To override an admin template for a specific app, copy and edit the template"
" from the ``django/contrib/admin/templates/admin`` directory, and save it to"
" one of the directories you just created."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2413
msgid ""
"For example, if we wanted to add a tool to the change list view for all the "
"models in an app named ``my_app``, we would copy "
"``contrib/admin/templates/admin/change_list.html`` to the "
"``templates/admin/my_app/`` directory of our project, and make any necessary"
" changes."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2419
msgid ""
"If we wanted to add a tool to the change list view for only a specific model"
" named 'Page', we would copy that same file to the "
"``templates/admin/my_app/page`` directory of our project."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2424
msgid "Overriding vs. replacing an admin template"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2426
msgid ""
"Because of the modular design of the admin templates, it is usually neither "
"necessary nor advisable to replace an entire template. It is almost always "
"better to override only the section of the template which you need to "
"change."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2430
msgid ""
"To continue the example above, we want to add a new link next to the "
"``History`` tool for the ``Page`` model. After looking at "
"``change_form.html`` we determine that we only need to override the "
"``object-tools-items`` block. Therefore here is our new ``change_form.html``"
" :"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2453
msgid ""
"And that's it! If we placed this file in the ``templates/admin/my_app`` "
"directory, our link would appear on the change form for all models within "
"my_app."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2458
msgid "Templates which may be overridden per app or model"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2460
msgid ""
"Not every template in ``contrib/admin/templates/admin`` may be overridden "
"per app or per model. The following can:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2463
msgid "``app_index.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2464
msgid "``change_form.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2465
msgid "``change_list.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2466
msgid "``delete_confirmation.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2467
msgid "``object_history.html``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2469
msgid ""
"For those templates that cannot be overridden in this way, you may still "
"override them for your entire project. Just place the new version in your "
"``templates/admin`` directory. This is particularly useful to create custom "
"404 and 500 pages."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2476
msgid ""
"Some of the admin templates, such as ``change_list_results.html`` are used "
"to render custom inclusion tags. These may be overridden, but in such cases "
"you are probably better off creating your own version of the tag in question"
" and giving it a different name. That way you can use it selectively."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2483
msgid "Root and login templates"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2485
msgid ""
"If you wish to change the index, login or logout templates, you are better "
"off creating your own ``AdminSite`` instance (see below), and changing the "
":attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or "
":attr:`AdminSite.logout_template` properties."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2491
msgid "``AdminSite`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2495
msgid ""
"A Django administrative site is represented by an instance of "
"``django.contrib.admin.sites.AdminSite``; by default, an instance of this "
"class is created as ``django.contrib.admin.site`` and you can register your "
"models and ``ModelAdmin`` instances with it."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2500
msgid ""
"When constructing an instance of an ``AdminSite``, you can provide a unique "
"instance name using the ``name`` argument to the constructor. This instance "
"name is used to identify the instance, especially when :ref:`reversing admin"
" URLs <admin-reverse-urls>`. If no instance name is provided, a default "
"instance name of ``admin`` will be used. See :ref:`customizing-adminsite` "
"for an example of customizing the :class:`AdminSite` class."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2509
msgid "``AdminSite`` attributes"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2511
msgid ""
"Templates can override or extend base admin templates as described in :ref"
":`admin-overriding-templates`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2518
msgid ""
"The text to put at the top of each admin page, as an ``<h1>`` (a string). By"
" default, this is \"Django administration\"."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2525
msgid ""
"The text to put at the end of each admin page's ``<title>`` (a string). By "
"default, this is \"Django site admin\"."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2532
msgid ""
"The URL for the \"View site\" link at the top of each admin page. By "
"default, ``site_url`` is ``/``. Set it to ``None`` to remove the link."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2539
msgid ""
"The text to put at the top of the admin index page (a string). By default, "
"this is \"Site administration\"."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2544
msgid ""
"Path to a custom template that will be used by the admin site main index "
"view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2549
msgid ""
"Path to a custom template that will be used by the admin site app index "
"view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2553
msgid ""
"Path to a custom template that will be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2557
msgid ""
"Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will"
" be used by the admin site login view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2562
msgid ""
"Path to a custom template that will be used by the admin site logout view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2566
msgid ""
"Path to a custom template that will be used by the admin site password "
"change view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2571
msgid ""
"Path to a custom template that will be used by the admin site password "
"change done view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2575
msgid "``AdminSite`` methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2581
msgid ""
"Returns a dictionary of variables to put in the template context for every "
"page in the admin site."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2584
msgid "Includes the following variables and values by default:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2586
msgid "``site_header``: :attr:`AdminSite.site_header`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2587
msgid "``site_title``: :attr:`AdminSite.site_title`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2588
msgid "``site_url``: :attr:`AdminSite.site_url`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2589
msgid "``has_permission``: :meth:`AdminSite.has_permission`"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2593
msgid ""
"The ``request`` argument and the ``has_permission`` variable were added."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2597
msgid ""
"Returns ``True`` if the user for the given ``HttpRequest`` has permission to"
" view at least one page in the admin site. Defaults to requiring both "
":attr:`User.is_active <django.contrib.auth.models.User.is_active>` and "
":attr:`User.is_staff <django.contrib.auth.models.User.is_staff>` to be "
"``True``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2604
msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2606
msgid ""
"The last step in setting up the Django admin is to hook your ``AdminSite`` "
"instance into your URLconf. Do this by pointing a given URL at the "
"``AdminSite.urls`` method."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2610
msgid ""
"In this example, we register the default ``AdminSite`` instance "
"``django.contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2624
msgid "Customizing the :class:`AdminSite` class"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2626
msgid ""
"If you'd like to set up your own admin site with custom behavior, you're "
"free to subclass ``AdminSite`` and override or add anything you like. Then, "
"simply create an instance of your ``AdminSite`` subclass (the same way you'd"
" instantiate any other Python class) and register your models and "
"``ModelAdmin`` subclasses with it instead of with the default site. Finally,"
" update :file:`myproject/urls.py` to reference your :class:`AdminSite` "
"subclass."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2658
msgid ""
"Note that you may not want autodiscovery of ``admin`` modules when using "
"your own ``AdminSite`` instance since you will likely be importing all the "
"per-app ``admin`` modules in your ``myproject.admin`` module. This means you"
" need to put ``'django.contrib.admin.apps.SimpleAdminConfig'`` instead of "
"``'django.contrib.admin'`` in your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2667
msgid "Multiple admin sites in the same URLconf"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2669
msgid ""
"It's easy to create multiple instances of the admin site on the same Django-"
"powered Web site. Just create multiple instances of ``AdminSite`` and root "
"each one at a different URL."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2673
msgid ""
"In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature"
" separate versions of the admin site -- using the ``AdminSite`` instances "
"``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, "
"respectively::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2687
msgid ""
"``AdminSite`` instances take a single argument to their constructor, their "
"name, which can be anything you like. This argument becomes the prefix to "
"the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`."
" This is only necessary if you are using more than one ``AdminSite``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2693
msgid "Adding views to admin sites"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2695
msgid ""
"Just like :class:`ModelAdmin`, :class:`AdminSite` provides a "
":meth:`~django.contrib.admin.ModelAdmin.get_urls()` method that can be "
"overridden to define additional views for the site. To add a new view to "
"your admin site, extend the base "
":meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to include a "
"pattern for your new view."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2704
msgid ""
"Any view you render that uses the admin templates, or extends the base admin"
" template, should set ``request.current_app`` before rendering the template."
" It should be set to either ``self.name`` if your view is on an "
"``AdminSite`` or ``self.admin_site.name`` if your view is on a "
"``ModelAdmin``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2712
msgid ""
"In previous versions of Django, you had to provide the ``current_app`` "
"argument to :class:`~django.template.RequestContext` or "
":class:`~django.template.Context` when rendering the template."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2719
msgid "Adding a password-reset feature"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2721
msgid ""
"You can add a password-reset feature to the admin site by adding a few lines"
" to your URLconf. Specifically, add these four patterns::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2731
msgid ""
"(This assumes you've added the admin at ``admin/`` and requires that you put"
" the URLs starting with ``^admin/`` before the line that includes the admin "
"app itself)."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2735
msgid ""
"The presence of the ``admin_password_reset`` named URL will cause a "
"\"forgotten your password?\" link to appear on the default admin log-in page"
" under the password box."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2740
msgid "``LogEntry`` objects"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2744
msgid ""
"The ``LogEntry`` class tracks additions, changes, and deletions of objects "
"done through the admin interface."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2750
msgid "``LogEntry`` attributes"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2754
msgid "The date and time of the action."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2758
msgid ""
"The user (an :setting:`AUTH_USER_MODEL` instance) who performed the action."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2763
msgid ""
"The :class:`~django.contrib.contenttypes.models.ContentType` of the modified"
" object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2768
msgid "The textual representation of the modified object's primary key."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2772
msgid "The object`s ``repr()`` after the modification."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2776
msgid "The type of action logged: ``ADDITION``, ``CHANGE``, ``DELETION``."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2778
msgid "For example, to get a list of all additions done through the admin::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2786
msgid ""
"The detailed description of the modification. In the case of an edit, for "
"example, the message contains a list of the edited fields."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2790
msgid "``LogEntry`` methods"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2794
msgid "A shortcut that returns the referenced object."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2801
msgid "Reversing admin URLs"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2803
msgid ""
"When an :class:`AdminSite` is deployed, the views provided by that site are "
"accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2806
msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2809
#: ../../ref/contrib/admin/index.txt:2823
#: ../../ref/contrib/admin/index.txt:2835
msgid "Page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2809
#: ../../ref/contrib/admin/index.txt:2823
#: ../../ref/contrib/admin/index.txt:2835
msgid "URL name"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2809
#: ../../ref/contrib/admin/index.txt:2823
#: ../../ref/contrib/admin/index.txt:2835
msgid "Parameters"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2811 ../../ref/contrib/sitemaps.txt:444
msgid "Index"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2811
msgid "``index``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2812
msgid "Logout"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2812
msgid "``logout``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2813
#: ../../ref/contrib/admin/index.txt:2837
msgid "Password change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2813
msgid "``password_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2814
msgid "Password change done"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2814
msgid "``password_change_done``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2815
msgid "i18n JavaScript"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2815
msgid "``jsi18n``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2816
msgid "Application index page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2816
msgid "``app_list``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2816 ../../ref/models/options.txt:23
msgid "``app_label``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2817
msgid "Redirect to object's page"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2817
msgid "``view_on_site``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2817
msgid "``content_type_id``, ``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2820
msgid ""
"Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2825
msgid "Changelist"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2825
msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2826
msgid "Add"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2826
msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2827
msgid "History"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2827
msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2827
#: ../../ref/contrib/admin/index.txt:2828
#: ../../ref/contrib/admin/index.txt:2829
msgid "``object_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2828
msgid "Delete"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2828
msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2829
msgid "Change"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2829
msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2832
msgid "The ``UserAdmin`` provides a named URL:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2837
msgid "``auth_user_password_change``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2837
msgid "``user_id``"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2840
msgid ""
"These named URLs are registered with the application namespace ``admin``, "
"and with an instance namespace corresponding to the name of the Site "
"instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2843
msgid ""
"So - if you wanted to get a reference to the Change view for a particular "
"``Choice`` object (from the polls application) in the default admin, you "
"would call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2851
msgid ""
"This will find the first registered instance of the admin application "
"(whatever the instance name), and resolve to the view for changing "
"``poll.Choice`` instances in that instance."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2855
msgid ""
"If you want to find a URL in a specific admin instance, provide the name of "
"that instance as a ``current_app`` hint to the reverse call. For example, if"
" you specifically wanted the admin view from the admin instance named "
"``custom``, you would need to call::"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2863
msgid ""
"For more details, see the documentation on :ref:`reversing namespaced URLs "
"<topics-http-reversing-url-namespaces>`."
msgstr ""

#: ../../ref/contrib/admin/index.txt:2866
msgid ""
"To allow easier reversing of the admin urls in templates, Django provides an"
" ``admin_urlname`` filter which takes an action as argument:"
msgstr ""

#: ../../ref/contrib/admin/index.txt:2875
msgid ""
"The action in the examples above match the last part of the URL names for "
":class:`ModelAdmin` instances described above. The ``opts`` variable can be "
"any object which has an ``app_label`` and ``model_name`` attributes and is "
"usually supplied by the admin views for the current model."
msgstr ""

#: ../../ref/contrib/auth.txt:2 ../../ref/django-admin.txt:1552
msgid "``django.contrib.auth``"
msgstr ""

#: ../../ref/contrib/auth.txt:4
msgid ""
"This document provides API reference material for the components of Django's"
" authentication system. For more details on the usage of these components or"
" how to customize authentication and authorization see the "
":doc:`authentication topic guide </topics/auth/index>`."
msgstr ""

#: ../../ref/contrib/auth.txt:12
msgid "User"
msgstr ""

#: ../../ref/contrib/auth.txt:19
msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:24
msgid ""
"Required. 30 characters or fewer. Usernames may contain alphanumeric, ``_``,"
" ``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

#: ../../ref/contrib/auth.txt:29 ../../ref/contrib/auth.txt:33
msgid "Optional. 30 characters or fewer."
msgstr ""

#: ../../ref/contrib/auth.txt:37
msgid "Optional. Email address."
msgstr ""

#: ../../ref/contrib/auth.txt:41
msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store"
" the raw password.) Raw passwords can be arbitrarily long and can contain "
"any character. See the :doc:`password documentation "
"</topics/auth/passwords>`."
msgstr ""

#: ../../ref/contrib/auth.txt:48
msgid ""
"Many-to-many relationship to :class:`~django.contrib.auth.models.Group`"
msgstr ""

#: ../../ref/contrib/auth.txt:52
msgid ""
"Many-to-many relationship to :class:`~django.contrib.auth.models.Permission`"
msgstr ""

#: ../../ref/contrib/auth.txt:56
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

#: ../../ref/contrib/auth.txt:60
msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the"
" foreign keys won't break."
msgstr ""

#: ../../ref/contrib/auth.txt:65
msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag,"
" and the default backends do not. If you want to reject a login based on "
"``is_active`` being ``False``, it's up to you to check that in your own "
"login view or a custom authentication backend. However, the "
":class:`~django.contrib.auth.forms.AuthenticationForm` used by the "
":func:`~django.contrib.auth.views.login` view (which is the default) *does* "
"perform this check, as do the permission-checking methods such as "
":meth:`~django.contrib.auth.models.User.has_perm` and the authentication in "
"the Django admin. All of those functions/methods will return ``False`` for "
"inactive users."
msgstr ""

#: ../../ref/contrib/auth.txt:79
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

#: ../../ref/contrib/auth.txt:84
msgid "A datetime of the user's last login."
msgstr ""

#: ../../ref/contrib/auth.txt:88
msgid ""
"This field will be ``null`` if the user has never logged in. Previously it "
"was set to the current date/time by default."
msgstr ""

#: ../../ref/contrib/auth.txt:93
msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr ""

#: ../../ref/contrib/auth.txt:103
msgid ""
"Returns the username for the user. Since the User model can be swapped out, "
"you should use  this method instead of referencing the username attribute "
"directly."
msgstr ""

#: ../../ref/contrib/auth.txt:109
msgid ""
"Always returns ``False``. This is a way of differentiating "
":class:`~django.contrib.auth.models.User` and "
":class:`~django.contrib.auth.models.AnonymousUser` objects. Generally, you "
"should prefer using "
":meth:`~django.contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

#: ../../ref/contrib/auth.txt:118
msgid ""
"Always returns ``True`` (as opposed to ``AnonymousUser.is_authenticated()`` "
"which always returns ``False``). This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the"
" user is active or has a valid session. Even though normally you will call "
"this method on ``request.user`` to find out whether it has been populated by"
" the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` "
"(representing the currently logged-in user), you should know this method "
"returns ``True`` for any :class:`~django.contrib.auth.models.User` instance."
msgstr ""

#: ../../ref/contrib/auth.txt:131
msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the "
":attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

#: ../../ref/contrib/auth.txt:137
msgid "Returns the :attr:`~django.contrib.auth.models.User.first_name`."
msgstr ""

#: ../../ref/contrib/auth.txt:141
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User`"
" object."
msgstr ""

#: ../../ref/contrib/auth.txt:145
msgid ""
"When the ``raw_password`` is ``None``, the password will be set to an "
"unusable password, as if "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` were used."
msgstr ""

#: ../../ref/contrib/auth.txt:152
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

#: ../../ref/contrib/auth.txt:158
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. "
":meth:`~django.contrib.auth.models.User.check_password()` for this user will"
" never return ``True``. Doesn't save the "
":class:`~django.contrib.auth.models.User` object."
msgstr ""

#: ../../ref/contrib/auth.txt:164
msgid ""
"You may need this if authentication for your application takes place against"
" an existing external source such as an LDAP directory."
msgstr ""

#: ../../ref/contrib/auth.txt:169
msgid ""
"Returns ``False`` if "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` has been "
"called for this user."
msgstr ""

#: ../../ref/contrib/auth.txt:175
msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr ""

#: ../../ref/contrib/auth.txt:178
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:183
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

#: ../../ref/contrib/auth.txt:186
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

#: ../../ref/contrib/auth.txt:191
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see documentation on "
":ref:`permissions <topic-authorization>`). If the user is inactive, this "
"method will always return ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:196
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:201
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the"
" user is inactive, this method will always return ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:206
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

#: ../../ref/contrib/auth.txt:211
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:217
msgid ""
"Sends an email to the user. If ``from_email`` is ``None``, Django uses the "
":setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../ref/contrib/auth.txt:222
msgid ""
"Any ``**kwargs`` are passed to the underlying "
":meth:`~django.core.mail.send_mail()` call."
msgstr ""

#: ../../ref/contrib/auth.txt:226
msgid "Manager methods"
msgstr ""

#: ../../ref/contrib/auth.txt:230
msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper methods (in addition to the methods provided "
"by :class:`~django.contrib.auth.models.BaseUserManager`):"
msgstr ""

#: ../../ref/contrib/auth.txt:236
msgid ""
"Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

#: ../../ref/contrib/auth.txt:238
msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and "
":attr:`~django.contrib.auth.models.User.password` are set as given. The "
"domain portion of :attr:`~django.contrib.auth.models.User.email` is "
"automatically converted to lowercase, and the returned "
":class:`~django.contrib.auth.models.User` object will have "
":attr:`~django.contrib.auth.models.User.is_active` set to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:245
msgid ""
"If no password is provided, "
":meth:`~django.contrib.auth.models.User.set_unusable_password()` will be "
"called."
msgstr ""

#: ../../ref/contrib/auth.txt:249
msgid ""
"The ``extra_fields`` keyword arguments are passed through to the "
":class:`~django.contrib.auth.models.User`’s ``__init__`` method to allow "
"setting arbitrary fields on a :ref:`custom User model <auth-custom-user>`."
msgstr ""

#: ../../ref/contrib/auth.txt:254
msgid ""
"See :ref:`Creating users <topics-auth-creating-users>` for example usage."
msgstr ""

#: ../../ref/contrib/auth.txt:258
msgid ""
"Same as :meth:`create_user`, but sets :attr:`~models.User.is_staff` and "
":attr:`~models.User.is_superuser` to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:263
msgid "Anonymous users"
msgstr ""

#: ../../ref/contrib/auth.txt:267
msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements"
" the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""

#: ../../ref/contrib/auth.txt:271
msgid ":ref:`id <automatic-primary-key-fields>` is always ``None``."
msgstr ""

#: ../../ref/contrib/auth.txt:272
msgid ""
":attr:`~django.contrib.auth.models.User.username` is always the empty "
"string."
msgstr ""

#: ../../ref/contrib/auth.txt:274
msgid ""
":meth:`~django.contrib.auth.models.User.get_username()` always returns the "
"empty string."
msgstr ""

#: ../../ref/contrib/auth.txt:276
msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and "
":attr:`~django.contrib.auth.models.User.is_superuser` are always ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:279
msgid ""
":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:280
msgid ""
":attr:`~django.contrib.auth.models.User.groups` and "
":attr:`~django.contrib.auth.models.User.user_permissions` are always empty."
msgstr ""

#: ../../ref/contrib/auth.txt:283
msgid ""
":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` "
"instead of ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:285
msgid ""
":meth:`~django.contrib.auth.models.User.is_authenticated()` returns "
"``False`` instead of ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:287
msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, "
":meth:`~django.contrib.auth.models.User.check_password()`, "
":meth:`~django.db.models.Model.save` and "
":meth:`~django.db.models.Model.delete()` raise :exc:`NotImplementedError`."
msgstr ""

#: ../../ref/contrib/auth.txt:294
msgid ""
"``AnonymousUser.get_username()`` has been added to better mirror "
":class:`django.contrib.auth.models.User`."
msgstr ""

#: ../../ref/contrib/auth.txt:297
msgid ""
"In practice, you probably won't need to use "
":class:`~django.contrib.auth.models.AnonymousUser` objects on your own, but "
"they're used by Web requests, as explained in the next section."
msgstr ""

#: ../../ref/contrib/auth.txt:302
msgid "Permission"
msgstr ""

#: ../../ref/contrib/auth.txt:309
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:316
msgid "Required. 255 characters or fewer. Example: ``'Can vote'``."
msgstr ""

#: ../../ref/contrib/auth.txt:320
msgid "The ``max_length`` increased from 50 to 255 characters."
msgstr ""

#: ../../ref/contrib/auth.txt:324
msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed model."
msgstr ""

#: ../../ref/contrib/auth.txt:329
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

#: ../../ref/contrib/auth.txt:334
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model "
"</ref/models/instances>`."
msgstr ""

#: ../../ref/contrib/auth.txt:338
msgid "Group"
msgstr ""

#: ../../ref/contrib/auth.txt:345
msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following "
"fields:"
msgstr ""

#: ../../ref/contrib/auth.txt:351
msgid ""
"Required. 80 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr ""

#: ../../ref/contrib/auth.txt:356
msgid ""
"Many-to-many field to :class:`~django.contrib.auth.models.Permission`::"
msgstr ""

#: ../../ref/contrib/auth.txt:366
msgid "Login and logout signals"
msgstr ""

#: ../../ref/contrib/auth.txt:370
msgid ""
"The auth framework uses the following :doc:`signals </topics/signals>` that "
"can be used for notification when a user logs in or out."
msgstr ""

#: ../../ref/contrib/auth.txt:375
msgid "Sent when a user logs in successfully."
msgstr ""

#: ../../ref/contrib/auth.txt:377 ../../ref/signals.txt:56
#: ../../ref/signals.txt:92 ../../ref/signals.txt:109
#: ../../ref/signals.txt:139 ../../ref/signals.txt:172
#: ../../ref/signals.txt:193 ../../ref/signals.txt:219
#: ../../ref/signals.txt:381 ../../ref/signals.txt:421
#: ../../ref/signals.txt:468 ../../ref/signals.txt:538
#: ../../ref/signals.txt:598 ../../ref/signals.txt:626
#: ../../ref/signals.txt:639 ../../ref/signals.txt:676
#: ../../ref/signals.txt:702 ../../ref/signals.txt:733
msgid "Arguments sent with this signal:"
msgstr ""

#: ../../ref/contrib/auth.txt:380 ../../ref/contrib/auth.txt:394
#: ../../ref/contrib/auth.txt:408 ../../ref/signals.txt:59
#: ../../ref/signals.txt:76 ../../ref/signals.txt:95 ../../ref/signals.txt:112
#: ../../ref/signals.txt:142 ../../ref/signals.txt:175
#: ../../ref/signals.txt:196 ../../ref/signals.txt:225
#: ../../ref/signals.txt:300 ../../ref/signals.txt:327
#: ../../ref/signals.txt:365 ../../ref/signals.txt:385
#: ../../ref/signals.txt:426 ../../ref/signals.txt:472
#: ../../ref/signals.txt:543 ../../ref/signals.txt:601
#: ../../ref/signals.txt:629 ../../ref/signals.txt:642
#: ../../ref/signals.txt:679 ../../ref/signals.txt:705
#: ../../ref/signals.txt:738
msgid "``sender``"
msgstr ""

#: ../../ref/contrib/auth.txt:380
msgid "The class of the user that just logged in."
msgstr ""

#: ../../ref/contrib/auth.txt:383 ../../ref/contrib/auth.txt:397
#: ../../ref/signals.txt:645 ../../ref/template-response.txt:199
msgid "``request``"
msgstr ""

#: ../../ref/contrib/auth.txt:383 ../../ref/contrib/auth.txt:397
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/contrib/auth.txt:385 ../../ref/contrib/auth.txt:400
msgid "``user``"
msgstr ""

#: ../../ref/contrib/auth.txt:386
msgid "The user instance that just logged in."
msgstr ""

#: ../../ref/contrib/auth.txt:390
msgid "Sent when the logout method is called."
msgstr ""

#: ../../ref/contrib/auth.txt:393
msgid ""
"As above: the class of the user that just logged out or ``None`` if the user"
" was not authenticated."
msgstr ""

#: ../../ref/contrib/auth.txt:400
msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""

#: ../../ref/contrib/auth.txt:405
msgid "Sent when the user failed to login successfully"
msgstr ""

#: ../../ref/contrib/auth.txt:408
msgid "The name of the module used for authentication."
msgstr ""

#: ../../ref/contrib/auth.txt:413
msgid "``credentials``"
msgstr ""

#: ../../ref/contrib/auth.txt:411
msgid ""
"A dictionary of keyword arguments containing the user credentials that were "
"passed to :func:`~django.contrib.auth.authenticate()` or your own custom "
"authentication backend. Credentials matching a set of 'sensitive' patterns, "
"(including password) will not be sent in the clear as part of the signal."
msgstr ""

#: ../../ref/contrib/auth.txt:419
msgid "Authentication backends"
msgstr ""

#: ../../ref/contrib/auth.txt:424
msgid ""
"This section details the authentication backends that come with Django. For "
"information on how to use them and how to write your own authentication "
"backends, see the :ref:`Other authentication sources section "
"<authentication-backends>` of the :doc:`User authentication guide "
"</topics/auth/index>`."
msgstr ""

#: ../../ref/contrib/auth.txt:432
msgid "Available authentication backends"
msgstr ""

#: ../../ref/contrib/auth.txt:434
msgid ""
"The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""

#: ../../ref/contrib/auth.txt:438
msgid ""
"This is the default authentication backend used by Django.  It authenticates"
" using credentials consisting of a user identifier and password.  For "
"Django's default user model, the user identifier is the username, for custom"
" user models it is the field specified by USERNAME_FIELD (see "
":doc:`Customizing Users and authentication </topics/auth/customizing>`)."
msgstr ""

#: ../../ref/contrib/auth.txt:445
msgid ""
"It also handles the default permissions model as defined for "
":class:`~django.contrib.auth.models.User` and "
":class:`~django.contrib.auth.models.PermissionsMixin`."
msgstr ""

#: ../../ref/contrib/auth.txt:449
msgid ""
":meth:`has_perm`, :meth:`get_all_permissions`, :meth:`get_user_permissions`,"
" and :meth:`get_group_permissions` allow an object to be passed as a "
"parameter for object-specific permissions, but this backend does not "
"implement them other than returning an empty set of permissions if ``obj is "
"not None``."
msgstr ""

#: ../../ref/contrib/auth.txt:457
msgid ""
"Tries to authenticate ``username`` with ``password`` by calling "
":meth:`User.check_password "
"<django.contrib.auth.models.User.check_password>`. If no ``username`` is "
"provided, it tries to fetch a username from ``kwargs`` using the key "
":attr:`CustomUser.USERNAME_FIELD "
"<django.contrib.auth.models.CustomUser.USERNAME_FIELD>`. Returns an "
"authenticated user or ``None``."
msgstr ""

#: ../../ref/contrib/auth.txt:469
msgid ""
"Returns the set of permission strings the ``user_obj`` has from their own "
"user permissions. Returns an empty set if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or "
":attr:`~django.contrib.auth.models.CustomUser.is_active` is ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:476
msgid ""
"Returns the set of permission strings the ``user_obj`` has from the "
"permissions of the groups they belong. Returns an empty set if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or "
":attr:`~django.contrib.auth.models.CustomUser.is_active`  is ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:483
msgid ""
"Returns the set of permission strings the ``user_obj`` has, including both "
"user permissions and group permissions. Returns an empty set if "
":meth:`~django.contrib.auth.models.AbstractBaseUser.is_anonymous` or "
":attr:`~django.contrib.auth.models.CustomUser.is_active` is ``False``."
msgstr ""

#: ../../ref/contrib/auth.txt:490
msgid ""
"Uses :meth:`get_all_permissions` to check if ``user_obj`` has the permission"
" string ``perm``. Returns ``False`` if the user is not "
":attr:`~django.contrib.auth.models.CustomUser.is_active`."
msgstr ""

#: ../../ref/contrib/auth.txt:496
msgid ""
"Returns whether the ``user_obj`` has any permissions on the app "
"``app_label``."
msgstr ""

#: ../../ref/contrib/auth.txt:501
msgid ""
"Use this backend to take advantage of external-to-Django-handled "
"authentication.  It authenticates using usernames passed in "
":attr:`request.META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the"
" :doc:`Authenticating against REMOTE_USER </howto/auth-remote-user>` "
"documentation."
msgstr ""

#: ../../ref/contrib/auth.txt:507
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from this class and override these attributes or methods:"
msgstr ""

#: ../../ref/contrib/auth.txt:512
msgid ""
"``True`` or ``False``.  Determines whether or not a "
":class:`~django.contrib.auth.models.User` object is created if not already "
"in the database.  Defaults to ``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:518
msgid ""
"The username passed as ``remote_user`` is considered trusted. This method "
"simply returns the ``User`` object with the given username, creating a new "
"``User`` object if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``True``."
msgstr ""

#: ../../ref/contrib/auth.txt:523
msgid ""
"Returns ``None`` if :attr:`~RemoteUserBackend.create_unknown_user` is "
"``False`` and a ``User`` object with the given username is not found in the "
"database."
msgstr ""

#: ../../ref/contrib/auth.txt:529
msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a "
":class:`~django.contrib.auth.models.User` object.  Returns the cleaned "
"username."
msgstr ""

#: ../../ref/contrib/auth.txt:536
msgid ""
"Configures a newly created user.  This method is called immediately after a "
"new user is created, and can be used to perform custom setup actions, such "
"as setting the user's groups based on attributes in an LDAP directory. "
"Returns the user object."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:3
msgid "The contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:8
msgid ""
"Django includes a :mod:`~django.contrib.contenttypes` application that can "
"track all of the models installed in your Django-powered project, providing "
"a high-level, generic interface for working with your models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:15
msgid ""
"At the heart of the contenttypes application is the "
":class:`~django.contrib.contenttypes.models.ContentType` model, which lives "
"at ``django.contrib.contenttypes.models.ContentType``. Instances of "
":class:`~django.contrib.contenttypes.models.ContentType` represent and store"
" information about the models installed in your project, and new instances "
"of :class:`~django.contrib.contenttypes.models.ContentType` are "
"automatically created whenever new models are installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:23
msgid ""
"Instances of :class:`~django.contrib.contenttypes.models.ContentType` have "
"methods for returning the model classes they represent and for querying "
"objects from those models. "
":class:`~django.contrib.contenttypes.models.ContentType` also has a "
":ref:`custom manager <custom-managers>` that adds methods for working with "
":class:`~django.contrib.contenttypes.models.ContentType` and for obtaining "
"instances of :class:`~django.contrib.contenttypes.models.ContentType` for a "
"particular model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:31
msgid ""
"Relations between your models and "
":class:`~django.contrib.contenttypes.models.ContentType` can also be used to"
" enable \"generic\" relationships between an instance of one of your models "
"and instances of any model you have installed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:37
msgid "Installing the contenttypes framework"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:39
msgid ""
"The contenttypes framework is included in the default "
":setting:`INSTALLED_APPS` list created by ``django-admin startproject``, but"
" if you've removed it or if you manually set up your "
":setting:`INSTALLED_APPS` list, you can enable it by adding "
"``'django.contrib.contenttypes'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:45
msgid ""
"It's generally a good idea to have the contenttypes framework installed; "
"several of Django's other bundled applications require it:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:48
msgid ""
"The admin application uses it to log the history of each object added or "
"changed through the admin interface."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:51
msgid ""
"Django's :mod:`authentication framework <django.contrib.auth>` uses it to "
"tie user permissions to specific models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:57
msgid "The ``ContentType`` model"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:61
msgid ""
"Each instance of :class:`~django.contrib.contenttypes.models.ContentType` "
"has two fields which, taken together, uniquely describe an installed model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:67
msgid ""
"The name of the application the model is part of. This is taken from the "
":attr:`app_label` attribute of the model, and includes only the *last* part "
"of the application's Python import path; \"django.contrib.contenttypes\", "
"for example, becomes an :attr:`app_label` of \"contenttypes\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:75
msgid "The name of the model class."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:77
msgid "Additionally, the following property is available:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:81
msgid ""
"The human-readable name of the content type. This is taken from the "
":attr:`verbose_name <django.db.models.Field.verbose_name>` attribute of the "
"model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:87
msgid ""
"Before Django 1.8, the ``name`` property was a real field on the "
"``ContentType`` model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:90
msgid ""
"Let's look at an example to see how this works. If you already have the "
":mod:`~django.contrib.contenttypes` application installed, and then add "
":mod:`the sites application <django.contrib.sites>` to your "
":setting:`INSTALLED_APPS` setting and run ``manage.py migrate`` to install "
"it, the model :class:`django.contrib.sites.models.Site` will be installed "
"into your database. Along with it a new instance of "
":class:`~django.contrib.contenttypes.models.ContentType` will be created "
"with the following values:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:99
msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be "
"set to ``'sites'`` (the last part of the Python path "
"\"django.contrib.sites\")."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:103
msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to"
" ``'site'``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:109
msgid "Methods on ``ContentType`` instances"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:111
msgid ""
"Each :class:`~django.contrib.contenttypes.models.ContentType` instance has "
"methods that allow you to get from a "
":class:`~django.contrib.contenttypes.models.ContentType` instance to the "
"model it represents, or to retrieve objects from that model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:118
msgid ""
"Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the "
"model the :class:`~django.contrib.contenttypes.models.ContentType` "
"represents, and does :meth:`a get() lookup "
"<django.db.models.query.QuerySet.get>` on that model, returning the "
"corresponding object."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:126
msgid ""
"Returns the model class represented by this "
":class:`~django.contrib.contenttypes.models.ContentType` instance."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:129
msgid ""
"For example, we could look up the "
":class:`~django.contrib.contenttypes.models.ContentType` for the "
":class:`~django.contrib.auth.models.User` model::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:138
msgid ""
"And then use it to query for a particular "
":class:`~django.contrib.auth.models.User`, or to get access to the ``User`` "
"model class::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:147
msgid ""
"Together, "
":meth:`~django.contrib.contenttypes.models.ContentType.get_object_for_this_type`"
" and :meth:`~django.contrib.contenttypes.models.ContentType.model_class` "
"enable two extremely important use cases:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:152
msgid ""
"Using these methods, you can write high-level generic code that performs "
"queries on any installed model -- instead of importing and using a single "
"specific model class, you can pass an ``app_label`` and ``model`` into a "
":class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, "
"and then work with the model class or retrieve objects from it."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:159
msgid ""
"You can relate another model to "
":class:`~django.contrib.contenttypes.models.ContentType` as a way of tying "
"instances of it to particular model classes, and use these methods to get "
"access to those model classes."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:164
msgid ""
"Several of Django's bundled applications make use of the latter technique. "
"For example, :class:`the permissions system "
"<django.contrib.auth.models.Permission>` in Django's authentication "
"framework uses a :class:`~django.contrib.auth.models.Permission` model with "
"a foreign key to :class:`~django.contrib.contenttypes.models.ContentType`; "
"this lets :class:`~django.contrib.auth.models.Permission` represent concepts"
" like \"can add blog entry\" or \"can delete news story\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:174
msgid "The ``ContentTypeManager``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:178
msgid ""
":class:`~django.contrib.contenttypes.models.ContentType` also has a custom "
"manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, "
"which adds the following methods:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:184
msgid ""
"Clears an internal cache used by "
":class:`~django.contrib.contenttypes.models.ContentType` to keep track of "
"models for which it has created "
":class:`~django.contrib.contenttypes.models.ContentType` instances. You "
"probably won't ever need to call this method yourself; Django will call it "
"automatically when it's needed."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:193
msgid ""
"Lookup a :class:`~django.contrib.contenttypes.models.ContentType` by ID. "
"Since this method uses the same shared cache as "
":meth:`~django.contrib.contenttypes.models.ContentTypeManager.get_for_model`,"
" it's preferred to use this method over the usual "
"``ContentType.objects.get(pk=id)``"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:201
msgid ""
"Takes either a model class or an instance of a model, and returns the "
":class:`~django.contrib.contenttypes.models.ContentType` instance "
"representing that model. ``for_concrete_model=False`` allows fetching the "
":class:`~django.contrib.contenttypes.models.ContentType` of a proxy model."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:209
msgid ""
"Takes a variadic number of model classes, and returns a dictionary mapping "
"the model classes to the "
":class:`~django.contrib.contenttypes.models.ContentType` instances "
"representing them. ``for_concrete_models=False`` allows fetching the "
":class:`~django.contrib.contenttypes.models.ContentType` of proxy models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:218
msgid ""
"Returns the :class:`~django.contrib.contenttypes.models.ContentType` "
"instance uniquely identified by the given application label and model name. "
"The primary purpose of this method is to allow "
":class:`~django.contrib.contenttypes.models.ContentType` objects to be "
"referenced via a :ref:`natural key<topics-serialization-natural-keys>` "
"during deserialization."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:225
msgid ""
"The :meth:`~ContentTypeManager.get_for_model()` method is especially useful "
"when you know you need to work with a :class:`ContentType "
"<django.contrib.contenttypes.models.ContentType>` but don't want to go to "
"the trouble of obtaining the model's metadata to perform a manual lookup::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:241
msgid "Generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:243
msgid ""
"Adding a foreign key from one of your own models to "
":class:`~django.contrib.contenttypes.models.ContentType` allows your model "
"to effectively tie itself to another model class, as in the example of the "
":class:`~django.contrib.auth.models.Permission` model above. But it's "
"possible to go one step further and use "
":class:`~django.contrib.contenttypes.models.ContentType` to enable truly "
"generic (sometimes called \"polymorphic\") relationships between models."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:251
msgid "A simple example is a tagging system, which might look like this::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:266
msgid ""
"A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one "
"other model, which means that if the ``TaggedItem`` model used a "
":class:`~django.db.models.ForeignKey` it would have to choose one and only "
"one model to store tags for. The contenttypes application provides a special"
" field type (``GenericForeignKey``) which works around this and allows the "
"relationship to be with any model:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:276
msgid ""
"There are three parts to setting up a "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey`:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:279
msgid ""
"Give your model a :class:`~django.db.models.ForeignKey` to "
":class:`~django.contrib.contenttypes.models.ContentType`. The usual name for"
" this field is \"content_type\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:283
msgid ""
"Give your model a field that can store primary key values from the models "
"you'll be relating to. For most models, this means a "
":class:`~django.db.models.PositiveIntegerField`. The usual name for this "
"field is \"object_id\"."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:288
msgid ""
"Give your model a "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey`, and pass it "
"the names of the two fields described above. If these fields are named "
"\"content_type\" and \"object_id\", you can omit this -- those are the "
"default field names "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` will look "
"for."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:298
msgid ""
"If ``False``, the field will be able to reference proxy models. Default is "
"``True``. This mirrors the ``for_concrete_model`` argument to "
":meth:`~django.contrib.contenttypes.models.ContentTypeManager.get_for_model`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:304
#: ../../ref/contrib/contenttypes.txt:384
msgid ""
"This class was moved from ``django.contrib.contenttypes.generic`` to "
"``django.contrib.contenttypes.fields``. Support for importing from the old "
"location will be removed in Django 1.9."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:308
msgid "Primary key type compatibility"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:310
msgid ""
"The \"object_id\" field doesn't have to be the same type as the primary key "
"fields on the related models, but their primary key values must be coercible"
" to the same type as the \"object_id\" field by its "
":meth:`~django.db.models.Field.get_db_prep_value` method."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:315
msgid ""
"For example, if you want to allow generic relations to models with either "
":class:`~django.db.models.IntegerField` or "
":class:`~django.db.models.CharField` primary key fields, you can use "
":class:`~django.db.models.CharField` for the \"object_id\" field on your "
"model since integers can be coerced to strings by "
":meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:322
msgid ""
"For maximum flexibility you can use a :class:`~django.db.models.TextField` "
"which doesn't have a maximum length defined, however this may incur "
"significant performance penalties depending on your database backend."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:327
msgid ""
"There is no one-size-fits-all solution for which field type is best. You "
"should evaluate the models you expect to be pointing to and determine which "
"solution will be most effective for your use case."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:331
msgid "Serializing references to ``ContentType`` objects"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:333
msgid ""
"If you're serializing data (for example, when generating "
":class:`~django.test.TransactionTestCase.fixtures`) from a model that "
"implements generic relations, you should probably be using a natural key to "
"uniquely identify related "
":class:`~django.contrib.contenttypes.models.ContentType` objects. See "
":ref:`natural keys<topics-serialization-natural-keys>` and "
":djadminopt:`dumpdata --natural-foreign <--natural-foreign>` for more "
"information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:341
msgid ""
"This will enable an API similar to the one used for a normal "
":class:`~django.db.models.ForeignKey`; each ``TaggedItem`` will have a "
"``content_object`` field that returns the object it's related to, and you "
"can also assign to that field or use it when creating a ``TaggedItem``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:354
msgid ""
"Due to the way "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` is "
"implemented, you cannot use such fields directly with filters (``filter()`` "
"and ``exclude()``, for example) via the database API. Because a "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` isn't a "
"normal field object, these examples will *not* work::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:365
msgid ""
"Likewise, :class:`~django.contrib.contenttypes.fields.GenericForeignKey`\\s "
"does not appear in :class:`~django.forms.ModelForm`\\s."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:369
msgid "Reverse generic relations"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:377
msgid ""
"The relation on the related object back to this object doesn't exist by "
"default. Setting ``related_query_name`` creates a relation from the related "
"object back to this one. This allows querying and filtering from the related"
" object."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:388
msgid ""
"If you know which models you'll be using most often, you can also add a "
"\"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:398
msgid ""
"``Bookmark`` instances will each have a ``tags`` attribute, which can be "
"used to retrieve their associated ``TaggedItems``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:412
msgid ""
"Defining :class:`~django.contrib.contenttypes.fields.GenericRelation` with "
"``related_query_name`` set allows querying from the related object::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:417
msgid ""
"This enables filtering, ordering, and other query operations on ``Bookmark``"
" from ``TaggedItem``::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:424
msgid ""
"Just as :class:`~django.contrib.contenttypes.fields.GenericForeignKey` "
"accepts the names of the content-type and object-ID fields as arguments, so "
"too does :class:`~django.contrib.contenttypes.fields.GenericRelation`; if "
"the model which has the generic foreign key is using non-default names for "
"those fields, you must pass the names of the fields when setting up a "
":class:`.GenericRelation` to it. For example, if the ``TaggedItem`` model "
"referred to above used fields named ``content_type_fk`` and "
"``object_primary_key`` to create its generic foreign key, then a "
":class:`.GenericRelation` back to it would need to be defined like so::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:439
msgid ""
"Of course, if you don't add the reverse relationship, you can do the same "
"types of lookups manually::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:448
msgid ""
"Note that if the model in a "
":class:`~django.contrib.contenttypes.fields.GenericRelation` uses a non-"
"default value for ``ct_field`` or ``fk_field`` in its "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` (for example,"
" if you had a ``Comment`` model that uses ``ct_field=\"object_pk\"``), "
"you'll need to set ``content_type_field`` and/or ``object_id_field`` in the "
":class:`~django.contrib.contenttypes.fields.GenericRelation` to match the "
"``ct_field`` and ``fk_field``, respectively, in the "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey`::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:460
msgid ""
"Note also, that if you delete an object that has a "
":class:`~django.contrib.contenttypes.fields.GenericRelation`, any objects "
"which have a :class:`~django.contrib.contenttypes.fields.GenericForeignKey` "
"pointing at it will be deleted as well. In the example above, this means "
"that if a ``Bookmark`` object were deleted, any ``TaggedItem`` objects "
"pointing at it would be deleted at the same time."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:467
msgid ""
"Unlike :class:`~django.db.models.ForeignKey`, "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` does not "
"accept an :attr:`~django.db.models.ForeignKey.on_delete` argument to "
"customize this behavior; if desired, you can avoid the cascade-deletion "
"simply by not using "
":class:`~django.contrib.contenttypes.fields.GenericRelation`, and alternate "
"behavior can be provided via the "
":data:`~django.db.models.signals.pre_delete` signal."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:476
msgid "Generic relations and aggregation"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:478
msgid ""
":doc:`Django's database aggregation API </topics/db/aggregation>` works with"
" a :class:`~django.contrib.contenttypes.fields.GenericRelation`. For "
"example, you can find out how many tags all the bookmarks have::"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:488
msgid "Generic relation in forms"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:490
msgid "The :mod:`django.contrib.contenttypes.forms` module provides:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:492
msgid ":class:`BaseGenericInlineFormSet`"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:493
msgid ""
"A formset factory, :func:`generic_inlineformset_factory`, for use with "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:500
msgid ""
"This class was moved from ``django.contrib.contenttypes.generic`` to "
"``django.contrib.contenttypes.forms``. Support for importing from the old "
"location will be removed in Django 1.9."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:506
msgid ""
"Returns a ``GenericInlineFormSet`` using "
":func:`~django.forms.models.modelformset_factory`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:509
msgid ""
"You must provide ``ct_field`` and ``fk_field`` if they are different from "
"the defaults, ``content_type`` and ``object_id`` respectively. Other "
"parameters are similar to those documented in "
":func:`~django.forms.models.modelformset_factory` and "
":func:`~django.forms.models.inlineformset_factory`."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:515
msgid ""
"The ``for_concrete_model`` argument corresponds to the "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey.for_concrete_model`"
" argument on ``GenericForeignKey``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:521
msgid ""
"This function was moved from ``django.contrib.contenttypes.generic`` to "
"``django.contrib.contenttypes.forms``. Support for importing from the old "
"location will be removed in Django 1.9."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:527
msgid "``min_num`` and ``validate_min`` were added."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:532
msgid "Generic relations in admin"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:534
msgid ""
"The :mod:`django.contrib.contenttypes.admin` module provides "
":class:`~django.contrib.contenttypes.admin.GenericTabularInline` and "
":class:`~django.contrib.contenttypes.admin.GenericStackedInline` (subclasses"
" of :class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin`)"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:539
msgid ""
"These classes and functions enable the use of generic relations in forms and"
" the admin. See the :doc:`model formset </topics/forms/modelforms>` and "
":ref:`admin <using-generic-relations-as-an-inline>` documentation for more "
"information."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:546
msgid ""
"The :class:`~django.contrib.contenttypes.admin.GenericInlineModelAdmin` "
"class inherits all properties from an "
":class:`~django.contrib.admin.InlineModelAdmin` class. However, it adds a "
"couple of its own for working with the generic relation:"
msgstr ""

#: ../../ref/contrib/contenttypes.txt:553
msgid ""
"The name of the :class:`~django.contrib.contenttypes.models.ContentType` "
"foreign key field on the model. Defaults to ``content_type``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:559
msgid ""
"The name of the integer field that represents the ID of the related object. "
"Defaults to ``object_id``."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:564
msgid ""
"This class was moved from ``django.contrib.contenttypes.generic`` to "
"``django.contrib.contenttypes.admin``. Support for importing from the old "
"location will be removed in Django 1.9."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:571
msgid ""
"Subclasses of :class:`GenericInlineModelAdmin` with stacked and tabular "
"layouts, respectively."
msgstr ""

#: ../../ref/contrib/contenttypes.txt:576
msgid ""
"These classes was moved from ``django.contrib.contenttypes.generic`` to "
"``django.contrib.contenttypes.admin``. Support for importing from the old "
"location will be removed in Django 1.9."
msgstr ""

#: ../../ref/contrib/flatpages.txt:3
msgid "The flatpages app"
msgstr ""

#: ../../ref/contrib/flatpages.txt:8
msgid ""
"Django comes with an optional \"flatpages\" application. It lets you store "
"simple \"flat\" HTML content in a database and handles the management for "
"you via Django's admin interface and a Python API."
msgstr ""

#: ../../ref/contrib/flatpages.txt:12
msgid ""
"A flatpage is a simple object with a URL, title and content. Use it for one-"
"off, special-case pages, such as \"About\" or \"Privacy Policy\" pages, that"
" you want to store in a database but for which you don't want to develop a "
"custom Django application."
msgstr ""

#: ../../ref/contrib/flatpages.txt:17
msgid ""
"A flatpage can use a custom template or a default, systemwide flatpage "
"template. It can be associated with one, or multiple, sites."
msgstr ""

#: ../../ref/contrib/flatpages.txt:20
msgid ""
"The content field may optionally be left blank if you prefer to put your "
"content in a custom template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:23
msgid "Here are some examples of flatpages on Django-powered sites:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:25
msgid "http://www.lawrence.com/about/contact/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:26
msgid "http://www2.ljworld.com/site/rules/"
msgstr ""

#: ../../ref/contrib/flatpages.txt:29
#: ../../ref/contrib/gis/install/index.txt:73
#: ../../ref/contrib/redirects.txt:13 ../../ref/contrib/sitemaps.txt:30
msgid "Installation"
msgstr ""

#: ../../ref/contrib/flatpages.txt:31
msgid "To install the flatpages app, follow these steps:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:33
msgid ""
"Install the :mod:`sites framework <django.contrib.sites>` by adding "
"``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting, if "
"it's not already in there."
msgstr ""

#: ../../ref/contrib/flatpages.txt:37
msgid ""
"Also make sure you've correctly set :setting:`SITE_ID` to the ID of the site"
" the settings file represents. This will usually be ``1`` (i.e. ``SITE_ID = "
"1``, but if you're using the sites framework to manage multiple sites, it "
"could be the ID of a different site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:42
msgid ""
"Add ``'django.contrib.flatpages'`` to your :setting:`INSTALLED_APPS` "
"setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:45
msgid "Then either:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:47
msgid "Add an entry in your URLconf. For example::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:53
msgid "or:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:55
msgid ""
"Add ``'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'`` to "
"your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:58 ../../ref/contrib/redirects.txt:22
msgid "Run the command :djadmin:`manage.py migrate <migrate>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:63 ../../ref/contrib/redirects.txt:25
#: ../../ref/csrf.txt:227
msgid "How it works"
msgstr ""

#: ../../ref/contrib/flatpages.txt:65
msgid ""
"``manage.py migrate`` creates two tables in your database: "
"``django_flatpage`` and ``django_flatpage_sites``. ``django_flatpage`` is a "
"simple lookup table that simply maps a URL to a title and bunch of text "
"content. ``django_flatpage_sites`` associates a flatpage with a site."
msgstr ""

#: ../../ref/contrib/flatpages.txt:71
msgid "Using the URLconf"
msgstr ""

#: ../../ref/contrib/flatpages.txt:73
msgid ""
"There are several ways to include the flat pages in your URLconf. You can "
"dedicate a particular path to flat pages::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:80
msgid ""
"You can also set it up as a \"catchall\" pattern. In this case, it is "
"important to place the pattern at the end of the other urlpatterns::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:92
msgid ""
"If you set :setting:`APPEND_SLASH` to ``False``, you must remove the slash "
"in the catchall pattern or flatpages without a trailing slash will not be "
"matched."
msgstr ""

#: ../../ref/contrib/flatpages.txt:96
msgid ""
"Another common setup is to use flat pages for a limited set of known pages "
"and to hard code the urls, so you can reference them with the :ttag:`url` "
"template tag::"
msgstr ""

#: ../../ref/contrib/flatpages.txt:108
msgid "Using the middleware"
msgstr ""

#: ../../ref/contrib/flatpages.txt:110
msgid ""
"The :class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`"
" can do all of the work."
msgstr ""

#: ../../ref/contrib/flatpages.txt:115
msgid ""
"Each time any Django application raises a 404 error, this middleware checks "
"the flatpages database for the requested URL as a last resort. Specifically,"
" it checks for a flatpage with the given URL with a site ID that corresponds"
" to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/flatpages.txt:120
msgid "If it finds a match, it follows this algorithm:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:122
msgid ""
"If the flatpage has a custom template, it loads that template. Otherwise, it"
" loads the template :file:`flatpages/default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:125
msgid ""
"It passes that template a single context variable, ``flatpage``, which is "
"the flatpage object. It uses :class:`~django.template.RequestContext` in "
"rendering the template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:130
msgid ""
"The middleware will only add a trailing slash and redirect (by looking at "
"the :setting:`APPEND_SLASH` setting) if the resulting URL refers to a valid "
"flatpage. Redirects are permanent (301 status code)."
msgstr ""

#: ../../ref/contrib/flatpages.txt:134 ../../ref/contrib/redirects.txt:46
msgid ""
"If it doesn't find a match, the request continues to be processed as usual."
msgstr ""

#: ../../ref/contrib/flatpages.txt:136 ../../ref/contrib/redirects.txt:49
msgid ""
"The middleware only gets activated for 404s -- not for 500s or responses of "
"any other status code."
msgstr ""

#: ../../ref/contrib/flatpages.txt:139
msgid "Flatpages will not apply view middleware"
msgstr ""

#: ../../ref/contrib/flatpages.txt:141
msgid ""
"Because the ``FlatpageFallbackMiddleware`` is applied only after URL "
"resolution has failed and produced a 404, the response it returns will not "
"apply any :ref:`view middleware <view-middleware>` methods. Only requests "
"which are successfully routed to a view via normal URL resolution apply view"
" middleware."
msgstr ""

#: ../../ref/contrib/flatpages.txt:147
msgid ""
"Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you"
" can put "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` at "
"the end of the list. This means it will run first when processing the "
"response, and ensures that any other response-processing middlewares see the"
" real flatpage response rather than the 404."
msgstr ""

#: ../../ref/contrib/flatpages.txt:154 ../../ref/contrib/redirects.txt:56
msgid ""
"For more on middleware, read the :doc:`middleware docs "
"</topics/http/middleware>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:157
msgid "Ensure that your 404 template works"
msgstr ""

#: ../../ref/contrib/flatpages.txt:159
msgid ""
"Note that the "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"only steps in once another view has successfully produced a 404 response. If"
" another view or middleware class attempts to produce a 404 but ends up "
"raising an exception instead, the response will become an HTTP 500 "
"(\"Internal Server Error\") and the "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"will not attempt to serve a flat page."
msgstr ""

#: ../../ref/contrib/flatpages.txt:171
msgid "How to add, change and delete flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:174 ../../ref/contrib/redirects.txt:63
msgid "Via the admin interface"
msgstr ""

#: ../../ref/contrib/flatpages.txt:176
msgid ""
"If you've activated the automatic Django admin interface, you should see a "
"\"Flatpages\" section on the admin index page. Edit flatpages as you edit "
"any other object in the system."
msgstr ""

#: ../../ref/contrib/flatpages.txt:181 ../../ref/contrib/redirects.txt:70
msgid "Via the Python API"
msgstr ""

#: ../../ref/contrib/flatpages.txt:185
msgid ""
"Flatpages are represented by a standard :doc:`Django model "
"</topics/db/models>`, which lives in `django/contrib/flatpages/models.py`_. "
"You can access flatpage objects via the :doc:`Django database API "
"</topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:194
msgid "Check for duplicate flatpage URLs."
msgstr ""

#: ../../ref/contrib/flatpages.txt:196
msgid ""
"If you add or modify flatpages via your own code, you will likely want to "
"check for duplicate flatpage URLs within the same site. The flatpage form "
"used in the admin performs this validation check, and can be imported from "
"``django.contrib.flatpages.forms.FlatpageForm`` and used in your own views."
msgstr ""

#: ../../ref/contrib/flatpages.txt:203
msgid "Flatpage templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:205
msgid ""
"By default, flatpages are rendered via the template "
":file:`flatpages/default.html`, but you can override that for a particular "
"flatpage: in the admin, a collapsed fieldset titled \"Advanced options\" "
"(clicking will expand it) contains a field for specifying a template name. "
"If you're creating a flat page via the Python API you can simply set the "
"template name as the field ``template_name`` on the ``FlatPage`` object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:213
msgid ""
"Creating the :file:`flatpages/default.html` template is your responsibility;"
" in your template directory, just create a :file:`flatpages` directory "
"containing a file :file:`default.html`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:217
msgid ""
"Flatpage templates are passed a single context variable, ``flatpage``, which"
" is the flatpage object."
msgstr ""

#: ../../ref/contrib/flatpages.txt:220
msgid "Here's a sample :file:`flatpages/default.html` template:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:234
msgid ""
"Since you're already entering raw HTML into the admin page for a flatpage, "
"both ``flatpage.title`` and ``flatpage.content`` are marked as **not** "
"requiring :ref:`automatic HTML escaping <automatic-html-escaping>` in the "
"template."
msgstr ""

#: ../../ref/contrib/flatpages.txt:240
msgid ""
"Getting a list of :class:`~django.contrib.flatpages.models.FlatPage` objects"
" in your templates"
msgstr ""

#: ../../ref/contrib/flatpages.txt:242
msgid ""
"The flatpages app provides a template tag that allows you to iterate over "
"all of the available flatpages on the :ref:`current site <hooking-into-"
"current-site-from-views>`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:246
msgid ""
"Like all custom template tags, you'll need to :ref:`load its custom tag "
"library <loading-custom-template-libraries>` before you can use it. After "
"loading the library, you can retrieve all current flatpages via the "
":ttag:`get_flatpages` tag:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:264
msgid "Displaying ``registration_required`` flatpages"
msgstr ""

#: ../../ref/contrib/flatpages.txt:266
msgid ""
"By default, the :ttag:`get_flatpages` templatetag will only show flatpages "
"that are marked ``registration_required = False``. If you want to display "
"registration-protected flatpages, you need to specify an authenticated user "
"using a ``for`` clause."
msgstr ""

#: ../../ref/contrib/flatpages.txt:271 ../../ref/contrib/flatpages.txt:289
msgid "For example:"
msgstr ""

#: ../../ref/contrib/flatpages.txt:277
msgid ""
"If you provide an anonymous user, :ttag:`get_flatpages` will behave the same"
" as if you hadn't provided a user -- i.e., it will only show you public "
"flatpages."
msgstr ""

#: ../../ref/contrib/flatpages.txt:282
msgid "Limiting flatpages by base URL"
msgstr ""

#: ../../ref/contrib/flatpages.txt:284
msgid ""
"An optional argument, ``starts_with``, can be applied to limit the returned "
"pages to those beginning with a particular base URL. This argument may be "
"passed as a string, or as a variable to be resolved from the context."
msgstr ""

#: ../../ref/contrib/flatpages.txt:298
msgid "Integrating with :mod:`django.contrib.sitemaps`"
msgstr ""

#: ../../ref/contrib/flatpages.txt:304
msgid ""
"The :class:`sitemaps.FlatPageSitemap "
"<django.contrib.flatpages.sitemaps.FlatPageSitemap>` class looks at all "
"publicly visible :mod:`~django.contrib.flatpages` defined for the current "
":setting:`SITE_ID` (see the :mod:`sites documentation "
"<django.contrib.sites>`) and creates an entry in the sitemap. These entries "
"include only the :attr:`~django.contrib.sitemaps.Sitemap.location` attribute"
" -- not :attr:`~django.contrib.sitemaps.Sitemap.lastmod`, "
":attr:`~django.contrib.sitemaps.Sitemap.changefreq` or "
":attr:`~django.contrib.sitemaps.Sitemap.priority`."
msgstr ""

#: ../../ref/contrib/flatpages.txt:316
msgid ""
"This class is available from ``django.contrib.sitemaps.FlatPageSitemap`` in "
"older version of Django."
msgstr ""

#: ../../ref/contrib/flatpages.txt:320 ../../ref/contrib/gis/feeds.txt:19
#: ../../ref/contrib/gis/geoip.txt:25
#: ../../ref/contrib/gis/layermapping.txt:32
#: ../../ref/contrib/gis/measure.txt:15 ../../ref/contrib/gis/sitemaps.txt:10
#: ../../ref/contrib/gis/testing.txt:123 ../../ref/contrib/sitemaps.txt:289
msgid "Example"
msgstr ""

#: ../../ref/contrib/flatpages.txt:322
msgid "Here's an example of a URLconf using :class:`FlatPageSitemap`::"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:2
msgid "django.contrib.formtools"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:4
msgid ""
"A set of high-level abstractions for Django forms (:mod:`django.forms`)."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:6
msgid ""
"Historically, Django shipped with ``django.contrib.formtools`` -- a "
"collection of assorted utilities that are useful for specific form use "
"cases. This code is now distributed separately from Django, for easier "
"maintenance and to trim the size of Django's codebase. In Django 1.8, "
"importing from ``django.contrib.formtools`` will no longer work."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:12
msgid ""
"The new formtools package is named ``django-formtools``, with a main module "
"called ``formtools``. Version 1.0 includes the same two primary features "
"that the code included when it shipped with Django: a helper for form "
"previews and a form wizard view."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:17
msgid "See the `official documentation`_ for more information."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:24
msgid "How to migrate"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:26
msgid ""
"If you've used the old ``django.contrib.formtools`` package follow these two"
" easy steps to update your code:"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:29
msgid "Install version 1.0 of the third-party ``django-formtools`` package."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:31
msgid "Change your app's import statements to reference the new packages."
msgstr ""

#: ../../ref/contrib/formtools/index.txt:33
msgid "For example, change::"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:37
msgid "to::"
msgstr ""

#: ../../ref/contrib/formtools/index.txt:41
msgid ""
"The code in version 1.0 of the new package is the same (it was copied "
"directly from Django), so you don't have to worry about backwards "
"compatibility in terms of functionality. Only the imports have changed."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:3
msgid "GeoDjango's admin site"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:9
msgid "``GeoModelAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:15
msgid "The default center longitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:19
msgid "The default center latitude."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:23
msgid "The default zoom level to use.  Defaults to 18."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:27
msgid "Sequence of URLs to any extra JavaScript to include."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:31
msgid ""
"Override the template used to generate the JavaScript slippy map. Default is"
" ``'gis/admin/openlayers.html'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:36
msgid "Width of the map, in pixels.  Defaults to 600."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:40
msgid "Height of the map, in pixels.  Defaults to 400."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:44
msgid ""
"Link to the URL of the OpenLayers JavaScript.  Defaults to "
"``'http://openlayers.org/api/2.13/OpenLayers.js'``."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:50
msgid ""
"Defaults to ``True``.  When set to ``False``, disables editing of existing "
"geometry fields in the admin."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:55
msgid ""
"This is different from adding the geometry field to "
":attr:`~django.contrib.admin.ModelAdmin.readonly_fields`, which will only "
"display the WKT of the geometry. Setting ``modifiable=False``, actually "
"displays the geometry in a map, but disables the ability to edit its "
"vertices."
msgstr ""

#: ../../ref/contrib/gis/admin.txt:62 ../../ref/contrib/gis/tutorial.txt:779
msgid "``OSMGeoAdmin``"
msgstr ""

#: ../../ref/contrib/gis/admin.txt:66
msgid ""
"A subclass of :class:`GeoModelAdmin` that uses a spherical mercator "
"projection with `OpenStreetMap <http://www.openstreetmap.org/>`_ street data"
" tiles. See the :ref:`OSMGeoAdmin introduction <osmgeoadmin-intro>` in the "
"tutorial for a usage example."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:3
msgid "GeoDjango Management Commands"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:6 ../../ref/django-admin.txt:346
msgid "inspectdb"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:10
msgid ""
"When :mod:`django.contrib.gis` is in your :setting:`INSTALLED_APPS`, the "
":djadmin:`inspectdb` management command is overridden with one from "
"GeoDjango. The overridden command is spatially-aware, and places geometry "
"fields in the auto-generated model definition, where appropriate."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:16
msgid "ogrinspect <data_source> <model_name>"
msgstr ""

#: ../../ref/contrib/gis/commands.txt:20
msgid ""
"The ``ogrinspect`` management command will inspect the given OGR-compatible "
":class:`~django.contrib.gis.gdal.DataSource` (e.g., a shapefile) and will "
"output a GeoDjango model with the given model name.  There's a detailed "
"example of using ``ogrinspect`` :ref:`in the tutorial <ogrinspect-intro>`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:27
msgid ""
"Use a comma separated list of OGR field names to add the ``blank=True`` "
"keyword option to the field definition.  Set with ``true`` to apply to all "
"applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:33
msgid ""
"Use a comma separated list of OGR float fields to generate "
":class:`~django.db.models.DecimalField` instead of the default "
":class:`~django.db.models.FloatField`. Set to ``true`` to apply to all OGR "
"float fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:40
msgid ""
"Specifies the model attribute name to use for the geometry field. Defaults "
"to ``'geom'``."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:45
msgid ""
"The key for specifying which layer in the OGR "
":class:`~django.contrib.gis.gdal.DataSource` source to use. Defaults to 0 "
"(the first layer). May be an integer or a string identifier for the "
":class:`~django.contrib.gis.gdal.Layer`. When inspecting databases, "
"``layer`` is generally the table name you want to inspect."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:53
msgid ""
"Automatically generate a mapping dictionary for use with "
":class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:58
msgid ""
"When generating the geometry field, treat it as a geometry collection. For "
"example, if this setting is enabled then a "
":class:`~django.contrib.gis.db.models.MultiPolygonField` will be placed in "
"the generated model rather than "
":class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:66
msgid ""
"Generates a ``__str__`` routine (``__unicode__`` on Python 2) on the model "
"that will return the given field name."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:71
msgid ""
"Suppresses the ``from django.contrib.gis.db import models`` import "
"statement."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:75
msgid ""
"Use a comma separated list of OGR field names to add the ``null=True`` "
"keyword option to the field definition.  Set with ``true`` to apply to all "
"applicable fields."
msgstr ""

#: ../../ref/contrib/gis/commands.txt:81
msgid ""
"The SRID to use for the geometry field.  If not set, ``ogrinspect`` attempts"
" to automatically determine of the SRID of the data source."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:3
msgid "GeoDjango Database API"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:8
msgid "Spatial Backends"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:13
msgid "GeoDjango currently provides the following spatial database backends:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:15
msgid "``django.contrib.gis.db.backends.postgis``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:16
msgid "``django.contrib.gis.db.backends.mysql``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:17
msgid "``django.contrib.gis.db.backends.oracle``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:18
msgid "``django.contrib.gis.db.backends.spatialite``"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:26
msgid "MySQL Spatial Limitations"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:28
msgid ""
"MySQL's spatial extensions only support bounding box operations (what MySQL "
"calls minimum bounding rectangles, or MBR).  Specifically, `MySQL does not "
"conform to the OGC standard <http://dev.mysql.com/doc/refman/5.6/en/spatial-"
"relation-functions.html>`_:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:33
msgid ""
"Currently, MySQL does not implement these functions [``Contains``, "
"``Crosses``, ``Disjoint``, ``Intersects``, ``Overlaps``, ``Touches``, "
"``Within``] according to the specification.  Those that are implemented "
"return the same result as the corresponding MBR-based functions."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:39
msgid ""
"In other words, while spatial lookups such as :lookup:`contains <gis-"
"contains>` are available in GeoDjango when using MySQL, the results returned"
" are really equivalent to what would be returned when using "
":lookup:`bbcontains` on a different spatial backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:46
msgid ""
"True spatial indexes (R-trees) are only supported with MyISAM tables on "
"MySQL. [#fnmysqlidx]_ In other words, when using MySQL spatial extensions "
"you have to choose between fast spatial lookups and the integrity of your "
"data -- MyISAM tables do not support transactions or foreign key "
"constraints."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:53
msgid "Creating and Saving Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:55
msgid ""
"Here is an example of how to create a geometry object (assuming the "
"``Zipcode`` model)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:62
msgid ""
":class:`~django.contrib.gis.geos.GEOSGeometry` objects may also be used to "
"save geometric models::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:69
msgid ""
"Moreover, if the ``GEOSGeometry`` is in a different coordinate system (has a"
" different SRID value) than that of the field, then it will be implicitly "
"transformed into the SRID of the model's field, using the spatial database's"
" transform procedure::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:81
msgid ""
"Thus, geometry parameters may be passed in using the ``GEOSGeometry`` "
"object, WKT (Well Known Text [#fnwkt]_), HEXEWKB (PostGIS specific -- a WKB "
"geometry in hexadecimal [#fnewkb]_), and GeoJSON [#fngeojson]_ (requires "
"GDAL). Essentially, if the input is not a ``GEOSGeometry`` object, the "
"geometry field will attempt to create a ``GEOSGeometry`` instance from the "
"input."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:87
msgid ""
"For more information creating :class:`~django.contrib.gis.geos.GEOSGeometry`"
" objects, refer to the :ref:`GEOS tutorial <geos-tutorial>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:93 ../../ref/contrib/gis/db-api.txt:218
#: ../../ref/contrib/gis/geoquerysets.txt:12
#: ../../ref/contrib/gis/tutorial.txt:607
msgid "Spatial Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:95
msgid ""
"GeoDjango's lookup types may be used with any manager method like "
"``filter()``, ``exclude()``, etc.  However, the lookup types unique to "
"GeoDjango are only available on geometry fields. Filters on 'normal' fields "
"(e.g. :class:`~django.db.models.CharField`) may be chained with those on "
"geographic fields.  Thus, geographic queries take the following general form"
" (assuming  the ``Zipcode`` model used in the :doc:`model-api`)::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:110
msgid ""
"In this case, ``poly`` is the geographic field, :lookup:`contains <gis-"
"contains>` is the spatial lookup type, and ``pnt`` is the parameter (which "
"may be a :class:`~django.contrib.gis.geos.GEOSGeometry` object or a string "
"of GeoJSON , WKT, or HEXEWKB)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:115
msgid ""
"A complete reference can be found in the :ref:`spatial lookup reference "
"<spatial-lookups>`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:120
msgid ""
"GeoDjango constructs spatial SQL with the :class:`GeoQuerySet`, a subclass "
"of :class:`~django.db.models.query.QuerySet`.  The :class:`GeoManager` "
"instance attached to your model is what enables use of :class:`GeoQuerySet`."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:128
msgid "Distance Queries"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:131 ../../ref/contrib/gis/tutorial.txt:6
msgid "Introduction"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:132
msgid ""
"Distance calculations with spatial data is tricky because, unfortunately, "
"the Earth is not flat.  Some distance queries with fields in a geographic "
"coordinate system may have to be expressed differently because of "
"limitations in PostGIS.  Please see the :ref:`selecting-an-srid` section in "
"the :doc:`model-api` documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:141
#: ../../ref/contrib/gis/geoquerysets.txt:505
msgid "Distance Lookups"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:142
#: ../../ref/contrib/gis/geoquerysets.txt:265
#: ../../ref/contrib/gis/geoquerysets.txt:507
#: ../../ref/contrib/gis/geoquerysets.txt:686
#: ../../ref/contrib/gis/geoquerysets.txt:765
#: ../../ref/contrib/gis/geoquerysets.txt:785
#: ../../ref/contrib/gis/geoquerysets.txt:844
#: ../../ref/contrib/gis/geoquerysets.txt:882
#: ../../ref/contrib/gis/geoquerysets.txt:972
#: ../../ref/contrib/gis/geoquerysets.txt:1068
#: ../../ref/contrib/gis/geoquerysets.txt:1080
#: ../../ref/contrib/gis/geoquerysets.txt:1242
msgid "*Availability*: PostGIS, Oracle, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:144
msgid "The following distance lookups are available:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:146 ../../ref/contrib/gis/db-api.txt:237
msgid ":lookup:`distance_lt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:147 ../../ref/contrib/gis/db-api.txt:238
msgid ":lookup:`distance_lte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:148 ../../ref/contrib/gis/db-api.txt:235
msgid ":lookup:`distance_gt`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:149 ../../ref/contrib/gis/db-api.txt:236
msgid ":lookup:`distance_gte`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:150 ../../ref/contrib/gis/db-api.txt:239
msgid ":lookup:`dwithin`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:154
msgid ""
"For *measuring*, rather than querying on distances, use the "
":meth:`GeoQuerySet.distance` method."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:157
msgid "Distance lookups take a tuple parameter comprising:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:159
msgid "A geometry to base calculations from; and"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:160
msgid ""
"A number or :class:`~django.contrib.gis.measure.Distance` object containing "
"the distance."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:162
msgid ""
"If a :class:`~django.contrib.gis.measure.Distance` object is used, it may be"
" expressed in any units (the SQL generated will use units converted to those"
" of the field); otherwise, numeric parameters are assumed to be in the units"
" of the field."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:169
msgid ""
"In PostGIS, ``ST_Distance_Sphere`` does *not* limit the geometry types "
"geographic distance queries are performed with. [#fndistsphere15]_  However,"
" these queries may take a long time, as great-circle distances must be "
"calculated on the fly for *every* row in the query.  This is because the "
"spatial index on traditional geometry fields cannot be used."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:175
msgid ""
"For much better performance on WGS84 distance queries, consider using "
":ref:`geography columns <geography-type>` in your database instead because "
"they are able to use their spatial index in distance queries. You can tell "
"GeoDjango to use a geography column by setting ``geography=True`` in your "
"field definition."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:181
msgid ""
"For example, let's say we have a ``SouthTexasCity`` model (from the "
"`GeoDjango distance tests`__ ) on a *projected* coordinate system valid for "
"cities in southern Texas::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:194
msgid "Then distance queries may be performed as follows::"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:213
msgid "Compatibility Tables"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:220
msgid ""
"The following table provides a summary of what spatial lookups are available"
" for each spatial database backend."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:224
msgid "Lookup Type"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:224 ../../ref/contrib/gis/db-api.txt:267
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/geoquerysets.txt:41
#: ../../ref/contrib/gis/geoquerysets.txt:63
#: ../../ref/contrib/gis/geoquerysets.txt:85
#: ../../ref/contrib/gis/geoquerysets.txt:106
#: ../../ref/contrib/gis/geoquerysets.txt:129
#: ../../ref/contrib/gis/geoquerysets.txt:149
#: ../../ref/contrib/gis/geoquerysets.txt:170
#: ../../ref/contrib/gis/geoquerysets.txt:190
#: ../../ref/contrib/gis/geoquerysets.txt:210
#: ../../ref/contrib/gis/geoquerysets.txt:247
#: ../../ref/contrib/gis/geoquerysets.txt:328
#: ../../ref/contrib/gis/geoquerysets.txt:350
#: ../../ref/contrib/gis/geoquerysets.txt:541
#: ../../ref/contrib/gis/geoquerysets.txt:561
#: ../../ref/contrib/gis/geoquerysets.txt:581
#: ../../ref/contrib/gis/geoquerysets.txt:601
#: ../../ref/contrib/gis/geoquerysets.txt:624
#: ../../ref/contrib/gis/install/index.txt:433
#: ../../ref/contrib/gis/testing.txt:11
msgid "PostGIS"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:224 ../../ref/contrib/gis/db-api.txt:267
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/geoquerysets.txt:107
#: ../../ref/contrib/gis/geoquerysets.txt:150
#: ../../ref/contrib/gis/geoquerysets.txt:171
#: ../../ref/contrib/gis/geoquerysets.txt:211
#: ../../ref/contrib/gis/geoquerysets.txt:248
#: ../../ref/contrib/gis/geoquerysets.txt:295
#: ../../ref/contrib/gis/geoquerysets.txt:330
#: ../../ref/contrib/gis/geoquerysets.txt:352
#: ../../ref/contrib/gis/geoquerysets.txt:542
#: ../../ref/contrib/gis/geoquerysets.txt:562
#: ../../ref/contrib/gis/geoquerysets.txt:582
#: ../../ref/contrib/gis/geoquerysets.txt:602
#: ../../ref/contrib/gis/geoquerysets.txt:625
#: ../../ref/contrib/gis/install/index.txt:63
msgid "Oracle"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:224
msgid "MySQL [#]_"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:224 ../../ref/contrib/gis/db-api.txt:267
#: ../../ref/contrib/gis/db-api.txt:304
#: ../../ref/contrib/gis/geoquerysets.txt:43
#: ../../ref/contrib/gis/geoquerysets.txt:65
#: ../../ref/contrib/gis/geoquerysets.txt:87
#: ../../ref/contrib/gis/geoquerysets.txt:109
#: ../../ref/contrib/gis/geoquerysets.txt:191
#: ../../ref/contrib/gis/geoquerysets.txt:213
#: ../../ref/contrib/gis/geoquerysets.txt:250
#: ../../ref/contrib/gis/geoquerysets.txt:331
#: ../../ref/contrib/gis/geoquerysets.txt:353
#: ../../ref/contrib/gis/geoquerysets.txt:543
#: ../../ref/contrib/gis/geoquerysets.txt:563
#: ../../ref/contrib/gis/geoquerysets.txt:583
#: ../../ref/contrib/gis/geoquerysets.txt:603
#: ../../ref/contrib/gis/testing.txt:104
msgid "SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:226
msgid ":lookup:`bbcontains`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:226 ../../ref/contrib/gis/db-api.txt:226
#: ../../ref/contrib/gis/db-api.txt:226 ../../ref/contrib/gis/db-api.txt:227
#: ../../ref/contrib/gis/db-api.txt:227 ../../ref/contrib/gis/db-api.txt:227
#: ../../ref/contrib/gis/db-api.txt:228 ../../ref/contrib/gis/db-api.txt:228
#: ../../ref/contrib/gis/db-api.txt:228 ../../ref/contrib/gis/db-api.txt:229
#: ../../ref/contrib/gis/db-api.txt:229 ../../ref/contrib/gis/db-api.txt:229
#: ../../ref/contrib/gis/db-api.txt:229 ../../ref/contrib/gis/db-api.txt:230
#: ../../ref/contrib/gis/db-api.txt:231 ../../ref/contrib/gis/db-api.txt:231
#: ../../ref/contrib/gis/db-api.txt:232 ../../ref/contrib/gis/db-api.txt:232
#: ../../ref/contrib/gis/db-api.txt:233 ../../ref/contrib/gis/db-api.txt:233
#: ../../ref/contrib/gis/db-api.txt:234 ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:234 ../../ref/contrib/gis/db-api.txt:234
#: ../../ref/contrib/gis/db-api.txt:235 ../../ref/contrib/gis/db-api.txt:235
#: ../../ref/contrib/gis/db-api.txt:235 ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:236 ../../ref/contrib/gis/db-api.txt:236
#: ../../ref/contrib/gis/db-api.txt:237 ../../ref/contrib/gis/db-api.txt:237
#: ../../ref/contrib/gis/db-api.txt:237 ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:238 ../../ref/contrib/gis/db-api.txt:238
#: ../../ref/contrib/gis/db-api.txt:239 ../../ref/contrib/gis/db-api.txt:239
#: ../../ref/contrib/gis/db-api.txt:240 ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:240 ../../ref/contrib/gis/db-api.txt:240
#: ../../ref/contrib/gis/db-api.txt:241 ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:241 ../../ref/contrib/gis/db-api.txt:241
#: ../../ref/contrib/gis/db-api.txt:242 ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:242 ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/db-api.txt:243 ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:243 ../../ref/contrib/gis/db-api.txt:243
#: ../../ref/contrib/gis/db-api.txt:244 ../../ref/contrib/gis/db-api.txt:244
#: ../../ref/contrib/gis/db-api.txt:244 ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245 ../../ref/contrib/gis/db-api.txt:245
#: ../../ref/contrib/gis/db-api.txt:245 ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246 ../../ref/contrib/gis/db-api.txt:246
#: ../../ref/contrib/gis/db-api.txt:246 ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247 ../../ref/contrib/gis/db-api.txt:247
#: ../../ref/contrib/gis/db-api.txt:247 ../../ref/contrib/gis/db-api.txt:248
#: ../../ref/contrib/gis/db-api.txt:249 ../../ref/contrib/gis/db-api.txt:250
#: ../../ref/contrib/gis/db-api.txt:251 ../../ref/contrib/gis/db-api.txt:252
#: ../../ref/contrib/gis/db-api.txt:253 ../../ref/contrib/gis/db-api.txt:254
#: ../../ref/contrib/gis/db-api.txt:255 ../../ref/contrib/gis/db-api.txt:269
#: ../../ref/contrib/gis/db-api.txt:269 ../../ref/contrib/gis/db-api.txt:269
#: ../../ref/contrib/gis/db-api.txt:270 ../../ref/contrib/gis/db-api.txt:270
#: ../../ref/contrib/gis/db-api.txt:270 ../../ref/contrib/gis/db-api.txt:271
#: ../../ref/contrib/gis/db-api.txt:271 ../../ref/contrib/gis/db-api.txt:271
#: ../../ref/contrib/gis/db-api.txt:272 ../../ref/contrib/gis/db-api.txt:272
#: ../../ref/contrib/gis/db-api.txt:272 ../../ref/contrib/gis/db-api.txt:273
#: ../../ref/contrib/gis/db-api.txt:273 ../../ref/contrib/gis/db-api.txt:274
#: ../../ref/contrib/gis/db-api.txt:275 ../../ref/contrib/gis/db-api.txt:276
#: ../../ref/contrib/gis/db-api.txt:276 ../../ref/contrib/gis/db-api.txt:277
#: ../../ref/contrib/gis/db-api.txt:277 ../../ref/contrib/gis/db-api.txt:277
#: ../../ref/contrib/gis/db-api.txt:278 ../../ref/contrib/gis/db-api.txt:278
#: ../../ref/contrib/gis/db-api.txt:278 ../../ref/contrib/gis/db-api.txt:279
#: ../../ref/contrib/gis/db-api.txt:279 ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:280 ../../ref/contrib/gis/db-api.txt:280
#: ../../ref/contrib/gis/db-api.txt:281 ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:282 ../../ref/contrib/gis/db-api.txt:282
#: ../../ref/contrib/gis/db-api.txt:283 ../../ref/contrib/gis/db-api.txt:283
#: ../../ref/contrib/gis/db-api.txt:283 ../../ref/contrib/gis/db-api.txt:284
#: ../../ref/contrib/gis/db-api.txt:284 ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:285 ../../ref/contrib/gis/db-api.txt:285
#: ../../ref/contrib/gis/db-api.txt:286 ../../ref/contrib/gis/db-api.txt:286
#: ../../ref/contrib/gis/db-api.txt:287 ../../ref/contrib/gis/db-api.txt:287
#: ../../ref/contrib/gis/db-api.txt:288 ../../ref/contrib/gis/db-api.txt:289
#: ../../ref/contrib/gis/db-api.txt:289 ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:290 ../../ref/contrib/gis/db-api.txt:290
#: ../../ref/contrib/gis/db-api.txt:291 ../../ref/contrib/gis/db-api.txt:291
#: ../../ref/contrib/gis/db-api.txt:291 ../../ref/contrib/gis/db-api.txt:292
#: ../../ref/contrib/gis/db-api.txt:292 ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:293 ../../ref/contrib/gis/db-api.txt:293
#: ../../ref/contrib/gis/db-api.txt:306 ../../ref/contrib/gis/db-api.txt:307
#: ../../ref/contrib/gis/db-api.txt:307 ../../ref/contrib/gis/db-api.txt:308
#: ../../ref/contrib/gis/db-api.txt:309 ../../ref/contrib/gis/db-api.txt:310
#: ../../ref/contrib/gis/db-api.txt:310 ../../ref/contrib/gis/db-api.txt:310
msgid "X"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:227
#: ../../ref/contrib/gis/model-api.txt:208
msgid ":lookup:`bboverlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:228
msgid ":lookup:`contained`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:229
msgid ":lookup:`contains <gis-contains>`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:230
msgid ":lookup:`contains_properly`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:231
#: ../../ref/contrib/gis/model-api.txt:209
msgid ":lookup:`coveredby`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:232
#: ../../ref/contrib/gis/model-api.txt:210
msgid ":lookup:`covers`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:233
msgid ":lookup:`crosses`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:234
msgid ":lookup:`disjoint`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:240
msgid ":lookup:`equals`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:241
msgid ":lookup:`exact`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:242
#: ../../ref/contrib/gis/model-api.txt:211
msgid ":lookup:`intersects`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:243
msgid ":lookup:`overlaps`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:244
msgid ":lookup:`relate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:245
msgid ":lookup:`same_as`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:246
msgid ":lookup:`touches`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:247
msgid ":lookup:`within`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:248
msgid ":lookup:`left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:249
msgid ":lookup:`right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:250
msgid ":lookup:`overlaps_left`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:251
msgid ":lookup:`overlaps_right`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:252
msgid ":lookup:`overlaps_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:253
msgid ":lookup:`overlaps_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:254
msgid ":lookup:`strictly_above`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:255
msgid ":lookup:`strictly_below`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:261
#: ../../ref/contrib/gis/geoquerysets.txt:633
#: ../../ref/contrib/gis/tutorial.txt:719
msgid "``GeoQuerySet`` Methods"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:262
msgid ""
"The following table provides a summary of what :class:`GeoQuerySet` methods "
"are available on each spatial backend.  Please note that MySQL does not "
"support any of these methods, and is thus excluded from the table."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:267
msgid "Method"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:269
msgid ":meth:`GeoQuerySet.area`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:270
msgid ":meth:`GeoQuerySet.centroid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:271
msgid ":meth:`GeoQuerySet.difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:272
msgid ":meth:`GeoQuerySet.distance`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:273
msgid ":meth:`GeoQuerySet.envelope`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:274
msgid ":meth:`GeoQuerySet.force_rhr`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:275
msgid ":meth:`GeoQuerySet.geohash`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:276
msgid ":meth:`GeoQuerySet.geojson`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:277
msgid ":meth:`GeoQuerySet.gml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:278
msgid ":meth:`GeoQuerySet.intersection`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:279
msgid ":meth:`GeoQuerySet.kml`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:280
msgid ":meth:`GeoQuerySet.length`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:281
msgid ":meth:`GeoQuerySet.mem_size`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:282
msgid ":meth:`GeoQuerySet.num_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:283
msgid ":meth:`GeoQuerySet.num_points`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:284
msgid ":meth:`GeoQuerySet.perimeter`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:285
msgid ":meth:`GeoQuerySet.point_on_surface`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:286
msgid ":meth:`GeoQuerySet.reverse_geom`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:287
msgid ":meth:`GeoQuerySet.scale`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:288
msgid ":meth:`GeoQuerySet.snap_to_grid`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:289
msgid ":meth:`GeoQuerySet.svg`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:290
msgid ":meth:`GeoQuerySet.sym_difference`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:291
msgid ":meth:`GeoQuerySet.transform`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:292
msgid ":meth:`GeoQuerySet.translate`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:293
msgid ":meth:`GeoQuerySet.union`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:297
#: ../../ref/contrib/gis/geoquerysets.txt:1153
msgid "Aggregate Functions"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:299
msgid ""
"The following table provides a summary of what GIS-specific aggregate "
"functions are available on each spatial backend. Please note that MySQL does"
" not support any of these aggregates, and is thus excluded from the table."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:304
msgid "Aggregate"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:306
msgid ":class:`Collect`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:306 ../../ref/contrib/gis/db-api.txt:307
msgid "(from v3.0)"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:307
msgid ":class:`Extent`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:308
msgid ":class:`Extent3D`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:309
msgid ":class:`MakeLine`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:310
msgid ":class:`Union`"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:313 ../../ref/contrib/gis/geoip.txt:216
#: ../../ref/contrib/gis/geoquerysets.txt:1259
#: ../../ref/contrib/gis/geos.txt:972
#: ../../ref/contrib/gis/install/geolibs.txt:258
#: ../../ref/contrib/gis/install/index.txt:516
#: ../../ref/contrib/gis/measure.txt:175
#: ../../ref/contrib/gis/model-api.txt:247
#: ../../ref/contrib/gis/sitemaps.txt:21
#: ../../ref/contrib/gis/tutorial.txt:801
msgid "Footnotes"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:314
msgid ""
"*See* Open Geospatial Consortium, Inc., `OpenGIS Simple Feature "
"Specification For SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document "
"99-049 (May 5, 1999), at  Ch. 3.2.5, p. 3-11 (SQL Textual Representation of "
"Geometry)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:315
msgid ""
"*See* `PostGIS EWKB, EWKT and Canonical Forms "
"<http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#EWKB_EWKT>`_,"
" PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:316
msgid ""
"*See* Howard Butler, Martin Daly, Allan Doyle, Tim Schaub, & Christopher "
"Schmidt, `The GeoJSON Format Specification <http://geojson.org/geojson-"
"spec.html>`_, Revision 1.0 (June 16, 2008)."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:317
msgid ""
"*See* `PostGIS documentation "
"<http://postgis.net/docs/manual-2.1/ST_Distance_Sphere.html>`_ on "
"``ST_distance_sphere``."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:318
msgid ""
"*See* `Creating Spatial Indexes <http://dev.mysql.com/doc/refman/5.6/en"
"/creating-spatial-indexes.html>`_ in the MySQL Reference Manual:"
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:321
msgid ""
"For MyISAM tables, ``SPATIAL INDEX`` creates an R-tree index. For storage "
"engines that support nonspatial indexing of spatial columns, the engine "
"creates a B-tree index. A B-tree index on spatial values will be useful for "
"exact-value lookups, but not for range scans."
msgstr ""

#: ../../ref/contrib/gis/db-api.txt:326
msgid "Refer :ref:`mysql-spatial-limitations` section for more details."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:3
msgid "Deploying GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:5
msgid ""
"Basically, the deployment of a GeoDjango application is not different from "
"the deployment of a normal Django application. Please consult Django's "
":doc:`deployment documentation </howto/deployment/index>`."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:11
msgid ""
"GeoDjango uses the GDAL geospatial library which is not thread safe at this "
"time.  Thus, it is *highly* recommended to not use threading when deploying "
"-- in other words, use an appropriate configuration of Apache or the prefork"
" method when using FastCGI through another Web server."
msgstr ""

#: ../../ref/contrib/gis/deployment.txt:17
msgid ""
"For example, when configuring your application with ``mod_wsgi``, set the "
"``WSGIDaemonProcess`` attribute ``threads`` to ``1``, unless Apache may "
"crash when running your GeoDjango application.  Increase the number of "
"``processes`` instead."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:3
msgid "Geographic Feeds"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:8
msgid ""
"GeoDjango has its own :class:`Feed` subclass that may embed location "
"information in RSS/Atom feeds formatted according to either the `Simple "
"GeoRSS`__ or `W3C Geo`_ standards.  Because GeoDjango's syndication API is a"
" superset of Django's, please consult :doc:`Django's syndication "
"documentation </ref/contrib/syndication>` for details on general usage."
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:25
msgid "``Feed`` Subclass"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:29
msgid ""
"In addition to methods provided by the "
":class:`django.contrib.syndication.views.Feed` base class, GeoDjango's "
"``Feed`` class provides the following overrides.  Note that these overrides "
"may be done in multiple ways::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:58
msgid ""
"Takes the object returned by ``get_object()`` and returns the *feed's* "
"geometry.  Typically this is a ``GEOSGeometry`` instance, or can be a tuple "
"to represent a point or a box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:70
msgid ""
"Set this to return the geometry for each *item* in the feed.  This can be a "
"``GEOSGeometry`` instance, or a tuple that represents a point coordinate or "
"bounding box.  For example::"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:81
msgid "``SyndicationFeed`` Subclasses"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:83
msgid ""
"The following :class:`django.utils.feedgenerator.SyndicationFeed` subclasses"
" are available:"
msgstr ""

#: ../../ref/contrib/gis/feeds.txt:94
msgid ""
"`W3C Geo`_ formatted feeds only support "
":class:`~django.contrib.gis.db.models.PointField` geometries."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:3
msgid "GeoDjango Forms API"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:8
msgid ""
"GeoDjango provides some specialized form fields and widgets in order to "
"visually display and edit geolocalized data on a map. By default, they use "
"`OpenLayers`_-powered maps, with a base WMS layer provided by `Metacarta`_."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:16
msgid "Field arguments"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:17
msgid ""
"In addition to the regular :ref:`form field arguments <core-field-"
"arguments>`, GeoDjango form fields take the following optional arguments."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:21
#: ../../ref/contrib/gis/model-api.txt:77
msgid "``srid``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:25
msgid ""
"This is the SRID code that the field value should be transformed to. For "
"example, if the map widget SRID is different from the SRID more generally "
"used by your application or database, the field will automatically convert "
"input values into that SRID."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:31
msgid "``geom_type``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:35
msgid ""
"You generally shouldn't have to set or change that attribute which should be"
" setup depending on the field class. It matches the OpenGIS standard "
"geometry name."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:40
msgid "Form field classes"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:43
#: ../../ref/contrib/gis/model-api.txt:28
msgid "``GeometryField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:48
#: ../../ref/contrib/gis/model-api.txt:33
msgid "``PointField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:53
#: ../../ref/contrib/gis/model-api.txt:38
msgid "``LineStringField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:58
#: ../../ref/contrib/gis/model-api.txt:43
msgid "``PolygonField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:63
#: ../../ref/contrib/gis/model-api.txt:48
msgid "``MultiPointField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:68
#: ../../ref/contrib/gis/model-api.txt:53
msgid "``MultiLineStringField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:73
#: ../../ref/contrib/gis/model-api.txt:58
msgid "``MultiPolygonField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:78
#: ../../ref/contrib/gis/model-api.txt:63
msgid "``GeometryCollectionField``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:83
msgid "Form widgets"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:88
msgid ""
"GeoDjango form widgets allow you to display and edit geographic data on a "
"visual map. Note that none of the currently available widgets supports 3D "
"geometries, hence geometry fields will fallback using a simple ``Textarea`` "
"widget for such data."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:94
msgid "Widget attributes"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:96
msgid ""
"GeoDjango widgets are template-based, so their attributes are mostly "
"different from other Django widget attributes."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:102
msgid "The OpenGIS geometry type, generally set by the form field."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:107
msgid "Height and width of the widget map (default is 400x600)."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:111
msgid "SRID code used by the map (default is 4326)."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:115
msgid ""
"Boolean value specifying if a textarea input showing the serialized "
"representation of the current geometry is visible, mainly for debugging "
"purposes (default is ``False``)."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:121
msgid ""
"Indicates if the widget supports edition of 3D data (default is ``False``)."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:125
msgid "The template used to render the map widget."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:127
msgid ""
"You can pass widget attributes in the same manner that for any other Django "
"widget. For example::"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:137
msgid "Widget classes"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:139
msgid "``BaseGeometryWidget``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:143
msgid ""
"This is an abstract base widget containing the logic needed by subclasses. "
"You cannot directly use this widget for a geometry field. Note that the "
"rendering of GeoDjango widgets is based on a template, identified by the "
":attr:`template_name` class attribute."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:148
msgid "``OpenLayersWidget``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:152
msgid ""
"This is the default widget used by all GeoDjango form fields. "
"``template_name`` is ``gis/openlayers.html``."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:155
msgid ""
"``OpenLayersWidget`` and :class:`OSMWidget` use the ``openlayers.js`` file "
"hosted on the ``openlayers.org`` Web site. This works for basic usage during"
" development, but isn't appropriate for a production deployment as "
"``openlayers.org/api/`` has no guaranteed uptime and runs on a slow server. "
"You are therefore advised to subclass these widgets in order to specify your"
" own version of the ``openlayers.js`` file in the ``js`` property of the "
"inner ``Media`` class (see :ref:`assets-as-a-static-definition`). You can "
"host a copy of ``openlayers.js`` `tailored to your needs`_ on your own "
"server or refer to a copy from a content-delivery network like "
"https://cdnjs.com/. This will also allow you to serve the JavaScript file(s)"
" using the ``https`` protocol if needed."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:169
msgid "``OSMWidget``"
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:173
msgid ""
"This widget uses an OpenStreetMap base layer (Mapnik) to display geographic "
"objects on. ``template_name`` is ``gis/openlayers-osm.html``."
msgstr ""

#: ../../ref/contrib/gis/forms-api.txt:177
msgid ""
"The :class:`OpenLayersWidget` note about JavaScript file hosting above also "
"applies here. See also this `FAQ answer`_ about ``https`` access to map "
"tiles."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:3
msgid "GDAL API"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:8
msgid ""
"`GDAL`__ stands for **Geospatial Data Abstraction Library**, and is a "
"veritable \"Swiss army knife\" of GIS data functionality.  A subset of GDAL "
"is the `OGR`__ Simple Features Library, which specializes in reading and "
"writing vector geographic data in a variety of standard formats."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:14
msgid ""
"GeoDjango provides a high-level Python interface for some of the "
"capabilities of OGR, including the reading and coordinate transformation of "
"vector spatial data."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:20
msgid ""
"Although the module is named ``gdal``, GeoDjango only supports some of the "
"capabilities of OGR.  Thus, GDAL's features with respect to raster (image) "
"data are minimally supported (read-only) at this time."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:31
msgid "Sample Data"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:33
msgid ""
"The GDAL/OGR tools described here are designed to help you read in your "
"geospatial data, in order for most of them to be useful you have to have "
"some data to work with.  If you're starting out and don't yet have any data "
"of your own to use, GeoDjango tests contain a number of simple data sets "
"that you can use for testing. You can download them here::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:42
msgid "Vector Data Source Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:45
msgid "``DataSource``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:47
msgid ""
":class:`DataSource` is a wrapper for the OGR data source object that "
"supports reading data from a variety of OGR-supported geospatial file "
"formats and data sources using a simple, consistent interface.  Each data "
"source is represented by a :class:`DataSource` object which contains one or "
"more layers of data.  Each layer, represented by a :class:`Layer` object, "
"contains some number of geographic features (:class:`Feature`), information "
"about the type of features contained in that layer (e.g. points, polygons, "
"etc.), as well as the names and types of any additional fields "
"(:class:`Field`) of data that may be associated with each feature in that "
"layer."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:60
msgid ""
"The constructor for ``DataSource`` only requires one parameter: the path of "
"the file you want to read. However, OGR also supports a variety of more "
"complex data sources, including databases, that may be accessed by passing a"
" special name string instead of a path.  For more information, see the `OGR "
"Vector Formats`__ documentation.  The :attr:`name` property of a "
"``DataSource`` instance gives the OGR name of the underlying data source "
"that it is using."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:69
msgid ""
"The optional ``encoding`` parameter allows you to specify a non-standard "
"encoding of the strings in the source. This is typically useful when you "
"obtain ``DjangoUnicodeDecodeError`` exceptions while reading field values."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:74
msgid ""
"Once you've created your ``DataSource``, you can find out how many layers of"
" data it contains by accessing the :attr:`layer_count` property, or "
"(equivalently) by using the ``len()`` function.  For information on "
"accessing the layers of data themselves, see the next section::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:88
msgid "Returns the number of layers in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:92
msgid "Returns the name of the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:97
msgid "``Layer``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:101
msgid ""
"``Layer`` is a wrapper for a layer of data in a ``DataSource`` object. You "
"never create a ``Layer`` object directly.  Instead, you retrieve them from a"
" :class:`DataSource` object, which is essentially a standard Python "
"container of ``Layer`` objects.  For example, you can access a specific "
"layer by its index (e.g. ``ds[0]`` to access the first layer), or you can "
"iterate over all the layers in the container in a ``for`` loop.  The "
"``Layer`` itself acts as a container for geometric features."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:110
msgid ""
"Typically, all the features in a given layer have the same geometry type. "
"The :attr:`geom_type` property of a layer is an :class:`OGRGeomType` that "
"identifies the feature type.  We can use it to print out some basic "
"information about each layer in a :class:`DataSource`::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:120
msgid ""
"The example output is from the cities data source, loaded above, which "
"evidently contains one layer, called ``\"cities\"``, which contains three "
"point features.  For simplicity, the examples below assume that you've "
"stored that layer in the variable ``layer``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:129
msgid "Returns the name of this layer in the data source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:136
msgid "Returns the number of features in the layer.  Same as ``len(layer)``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:143
msgid ""
"Returns the geometry type of the layer, as an :class:`OGRGeomType` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:151
msgid ""
"Returns the number of fields in the layer, i.e the number of fields of data "
"associated with each feature in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:159
msgid "Returns a list of the names of each of the fields in this layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:166
msgid ""
"Returns a list of the data types of each of the fields in this layer. These "
"are subclasses of ``Field``, discussed below::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:174
msgid ""
"Returns a list of the maximum field widths for each of the fields in this "
"layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:182
msgid ""
"Returns a list of the numeric precisions for each of the fields in this "
"layer.  This is meaningless (and set to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:191
msgid ""
"Returns the spatial extent of this layer, as an :class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:199
msgid ""
"Property that returns the :class:`SpatialReference` associated with this "
"layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:209
msgid ""
"If the :class:`Layer` has no spatial reference information associated with "
"it, ``None`` is returned."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:214
msgid ""
"Property that may be used to retrieve or set a spatial filter for this "
"layer.  A spatial filter can only be set with an :class:`OGRGeometry` "
"instance, a 4-tuple extent, or ``None``.  When set with something other than"
" ``None``, only features that intersect the filter will be returned when "
"iterating over the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:238
msgid ""
"A method that returns a list of the values of a given field for each feature"
" in the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:246
msgid ""
"A method that returns a list containing the geometry of each feature in the "
"layer.  If the optional argument ``geos`` is set to ``True`` then the "
"geometries are converted to :class:`~django.contrib.gis.geos.GEOSGeometry` "
"objects. Otherwise, they are returned as :class:`OGRGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:256
msgid ""
"Returns a boolean indicating whether this layer supports the given "
"capability (a string).  Examples of valid capability strings include: "
"``'RandomRead'``, ``'SequentialWrite'``, ``'RandomWrite'``, "
"``'FastSpatialFilter'``, ``'FastFeatureCount'``, ``'FastGetExtent'``, "
"``'CreateField'``, ``'Transactions'``, ``'DeleteFeature'``, and "
"``'FastSetNextByIndex'``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:264
msgid "``Feature``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:269
msgid ""
"``Feature`` wraps an OGR feature.  You never create a ``Feature`` object "
"directly.  Instead, you retrieve them from a :class:`Layer` object. Each "
"feature consists of a geometry and a set of fields containing additional "
"properties.  The geometry of a field is accessible via its ``geom`` "
"property, which returns an :class:`OGRGeometry` object.  A ``Feature`` "
"behaves like a standard Python container for its fields, which it returns as"
" :class:`Field` objects: you can access a field directly by its index or "
"name, or you can iterate over a feature's fields, e.g. in a ``for`` loop."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:280
msgid "Returns the geometry for this feature, as an ``OGRGeometry`` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:287
msgid ""
"A method that returns the value of the given field (specified by name) for "
"this feature, **not** a ``Field`` wrapper object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:295
msgid ""
"Returns the type of geometry for this feature, as an :class:`OGRGeomType` "
"object.  This will be the same for all features in a given layer, and is "
"equivalent to the :attr:`Layer.geom_type` property of the :class:`Layer` "
"object the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:302
msgid ""
"Returns the number of fields of data associated with the feature. This will "
"be the same for all features in a given layer, and is equivalent to the "
":attr:`Layer.num_fields` property of the :class:`Layer` object the feature "
"came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:309
msgid ""
"Returns a list of the names of the fields of data associated with the "
"feature.  This will be the same for all features in a given layer, and is "
"equivalent to the :attr:`Layer.fields` property of the :class:`Layer` object"
" the feature came from."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:316
msgid "Returns the feature identifier within the layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:323
msgid ""
"Returns the name of the :class:`Layer` that the feature came from. This will"
" be the same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:331
msgid ""
"A method that returns the index of the given field name.  This will be the "
"same for all features in a given layer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:338
msgid "``Field``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:344
msgid "Returns the name of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:351
msgid ""
"Returns the OGR type of this field, as an integer.  The ``FIELD_CLASSES`` "
"dictionary maps these values onto subclasses of ``Field``::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:360
msgid "Returns a string with the name of the data type of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:367
msgid ""
"Returns the value of this field.  The ``Field`` class itself returns the "
"value as a string, but each subclass returns the value in the most "
"appropriate form::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:376
msgid "Returns the width of this field::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:383
msgid ""
"Returns the numeric precision of this field.  This is meaningless (and set "
"to zero) for non-numeric fields::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:391
msgid "Returns the value of the field as a double (float)::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:398
msgid "Returns the value of the field as an integer::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:405
msgid "Returns the value of the field as a string::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:412
msgid ""
"Returns the value of the field as a tuple of date and time components::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:418
msgid "``Driver``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:422
msgid ""
"The ``Driver`` class is used internally to wrap an OGR :class:`DataSource` "
"driver."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:426
msgid "Returns the number of OGR vector drivers currently registered."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:430
msgid "OGR Geometries"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:433
msgid "``OGRGeometry``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:435
msgid ""
":class:`OGRGeometry` objects share similar functionality with "
":class:`~django.contrib.gis.geos.GEOSGeometry` objects, and are thin "
"wrappers around OGR's internal geometry representation.  Thus, they allow "
"for more efficient access to data when using :class:`DataSource`. Unlike its"
" GEOS counterpart, :class:`OGRGeometry` supports spatial reference systems "
"and coordinate transformation::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:447
msgid ""
"This object is a wrapper for the `OGR Geometry`__ class. These objects are "
"instantiated directly from the given ``geom_input`` parameter, which may be "
"a string containing WKT, HEX, GeoJSON, a ``buffer`` containing WKB data, or "
"an :class:`OGRGeomType` object. These objects are also returned from the "
":class:`Feature.geom` attribute, when reading vector data from "
":class:`Layer` (which is in turn a part of a :class:`DataSource`)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:459
msgid "Constructs a :class:`Polygon` from the given bounding-box (a 4-tuple)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:463
msgid ""
"Returns the number of points in a :class:`LineString`, the number of rings "
"in a :class:`Polygon`, or the number of geometries in a "
":class:`GeometryCollection`. Not applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:469
msgid ""
"Iterates over the points in a :class:`LineString`, the rings in a "
":class:`Polygon`, or the geometries in a :class:`GeometryCollection`. Not "
"applicable to other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:475
msgid ""
"Returns the point at the specified index for a :class:`LineString`, the "
"interior ring at the specified index for a :class:`Polygon`, or the geometry"
" at the specified index in a :class:`GeometryCollection`.  Not applicable to"
" other geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:482
msgid ""
"Returns the number of coordinated dimensions of the geometry, i.e. 0 for "
"points, 1 for lines, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:490
msgid ""
"Returns or sets the coordinate dimension of this geometry.  For example, the"
" value would be 2 for two-dimensional geometries."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:495
msgid "Returns the number of elements in this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:502
msgid "Returns the number of points used to describe this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:509 ../../ref/contrib/gis/gdal.txt:513
msgid "Alias for :attr:`point_count`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:517
msgid "Returns the type of this geometry, as an :class:`OGRGeomType` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:521
msgid "Returns the name of the type of this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:528
msgid ""
"Returns the area of this geometry, or 0 for geometries that do not contain "
"an area::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:536
msgid "Returns the envelope of this geometry, as an :class:`Envelope` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:540
msgid ""
"Returns the envelope of this geometry as a 4-tuple, instead of as an "
":class:`Envelope` object::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:548
msgid ""
"This property controls the spatial reference for this geometry, or ``None`` "
"if no spatial reference system has been assigned to it. If assigned, "
"accessing this property returns a :class:`SpatialReference` object.  It may "
"be set with another :class:`SpatialReference` object, or any input that "
":class:`SpatialReference` accepts. Example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:559
msgid ""
"Returns or sets the spatial reference identifier corresponding to "
":class:`SpatialReference` of this geometry.  Returns ``None`` if there is no"
" spatial reference information associated with this geometry, or if an SRID "
"cannot be determined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:566
msgid ""
"Returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object "
"corresponding to this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:571
msgid "Returns a string representation of this geometry in GML format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:578
msgid "Returns a string representation of this geometry in HEX WKB format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:585
msgid "Returns a string representation of this geometry in JSON format::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:593
msgid "Returns a string representation of this geometry in KML format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:597
msgid ""
"Returns the size of the WKB buffer needed to hold a WKB representation of "
"this geometry::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:605
msgid "Returns a ``buffer`` containing a WKB representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:609
msgid "Returns a string representation of this geometry in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:613
msgid "Returns the EWKT representation of this geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:617
msgid "Returns a new :class:`OGRGeometry` clone of this geometry object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:621
msgid ""
"If there are any rings within this geometry that have not been closed, this "
"routine will do so by adding the starting point to the end::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:631
msgid ""
"Transforms this geometry to a different spatial reference system.  May take "
"a :class:`CoordTransform` object, a :class:`SpatialReference` object, or any"
" other input accepted by :class:`SpatialReference` (including spatial "
"reference WKT and PROJ.4 strings, or an integer SRID). By default nothing is"
" returned and the geometry is transformed in-place. However, if the "
"``clone`` keyword is set to ``True`` then a transformed clone of this "
"geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:641
msgid ""
"Returns ``True`` if this geometry intersects the other, otherwise returns "
"``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:646
msgid ""
"Returns ``True`` if this geometry is equivalent to the other, otherwise "
"returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:651
msgid ""
"Returns ``True`` if this geometry is spatially disjoint to (i.e. does not "
"intersect) the other, otherwise returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:656
msgid ""
"Returns ``True`` if this geometry touches the other, otherwise returns "
"``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:661
msgid ""
"Returns ``True`` if this geometry crosses the other, otherwise returns "
"``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:666
msgid ""
"Returns ``True`` if this geometry is contained within the other, otherwise "
"returns ``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:671
msgid ""
"Returns ``True`` if this geometry contains the other, otherwise returns "
"``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:676
msgid ""
"Returns ``True`` if this geometry overlaps the other, otherwise returns "
"``False``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:681
msgid "The boundary of this geometry, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:685
msgid ""
"The smallest convex polygon that contains this geometry, as a new "
":class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:690
msgid ""
"Returns the region consisting of the difference of this geometry and the "
"other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:695
msgid ""
"Returns the region consisting of the intersection of this geometry and the "
"other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:700
msgid ""
"Returns the region consisting of the symmetric difference of this geometry "
"and the other, as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:705
msgid ""
"Returns the region consisting of the union of this geometry and the other, "
"as a new :class:`OGRGeometry` object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:710
msgid ""
"Returns the coordinates of a point geometry as a tuple, the coordinates of a"
" line geometry as a tuple of tuples, and so forth::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:720
msgid "An alias for :attr:`tuple`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:726
msgid "Returns the X coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:733
msgid "Returns the Y coordinate of this point::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:740
msgid ""
"Returns the Z coordinate of this point, or ``None`` if the point does not "
"have a Z coordinate::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:750
msgid "Returns a list of X coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:757
msgid "Returns a list of Y coordinates in this line::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:764
msgid ""
"Returns a list of Z coordinates in this line, or ``None`` if the line does "
"not have Z coordinates::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:775
msgid ""
"Returns the shell or exterior ring of this polygon, as a ``LinearRing`` "
"geometry."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:780
msgid "An alias for :attr:`shell`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:784
msgid "Returns a :class:`Point` representing the centroid of this polygon."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:790
msgid ""
"Adds a geometry to this geometry collection.  Not applicable to other "
"geometry types."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:795
msgid "``OGRGeomType``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:799
msgid ""
"This class allows for the representation of an OGR geometry type in any of "
"several ways::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:811
msgid "Returns a short-hand string form of the OGR Geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:818
msgid "Returns the number corresponding to the OGR geometry type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:825
msgid ""
"Returns the Django field type (a subclass of GeometryField) to use for "
"storing this OGR type, or ``None`` if there is no appropriate Django type::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:833
msgid "``Envelope``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:837
msgid ""
"Represents an OGR Envelope structure that contains the minimum and maximum "
"X, Y coordinates for a rectangle bounding box. The naming of the variables "
"is compatible with the OGR Envelope C structure."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:844
msgid "The value of the minimum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:848
msgid "The value of the maximum X coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:852
msgid "The value of the minimum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:856
msgid "The value of the maximum Y coordinate."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:860
msgid "The upper-right coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:864
msgid "The lower-left coordinate, as a tuple."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:868
msgid "A tuple representing the envelope."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:872
msgid "A string representing this envelope as a polygon in WKT format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:878
msgid "Coordinate System Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:881
msgid "``SpatialReference``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:885
msgid ""
"Spatial reference objects are initialized on the given ``srs_input``, which "
"may be one of the following:"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:888
msgid "OGC Well Known Text (WKT) (a string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:889
msgid "EPSG code (integer or string)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:890
msgid "PROJ.4 string"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:891
msgid ""
"A shorthand string for well-known standards (``'WGS84'``, ``'WGS72'``, "
"``'NAD27'``, ``'NAD83'``)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:913
msgid ""
"Returns the value of the given string attribute node, ``None`` if the node "
"doesn't exist.  Can also take a tuple as a parameter, (target, child), where"
" child is the index of the attribute in the WKT.  For example::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:936
msgid ""
"The attribute value for the given target node (e.g. ``'PROJCS'``). The index"
" keyword specifies an index of the child node to return."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:941
msgid "Returns the authority name for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:945
msgid "Returns the authority code for the given string target node."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:949
msgid "Returns a clone of this spatial reference object."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:953
msgid ""
"This method inspects the WKT of this SpatialReference, and will add EPSG "
"authority nodes where an EPSG identifier is applicable."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:958
msgid "Morphs this SpatialReference from ESRI's format to EPSG"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:962
msgid "Morphs this SpatialReference to ESRI's format."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:966
msgid ""
"Checks to see if the given spatial reference is valid, if not an exception "
"will be raised."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:971
msgid "Import spatial reference from EPSG code."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:975
msgid "Import spatial reference from PROJ.4 string."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:981
msgid "Import spatial reference from WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:985
msgid "Import spatial reference from XML."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:989
msgid "Returns the name of this Spatial Reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:993
msgid "Returns the SRID of top-level authority, or ``None`` if undefined."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:997
msgid "Returns the name of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1001
msgid "Returns the value of the linear units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1005
msgid "Returns the name of the angular units.\""
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1009
msgid "Returns the value of the angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1013
msgid ""
"Returns a 2-tuple of the units value and the units name, and will "
"automatically determines whether to return the linear or angular units."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1019
msgid ""
"Returns a tuple of the ellipsoid parameters for this spatial reference: "
"(semimajor axis, semiminor axis, and inverse flattening)"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1024
msgid ""
"Returns the semi major axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1028
msgid ""
"Returns the semi minor axis of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1032
msgid ""
"Returns the inverse flattening of the ellipsoid for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1036
msgid ""
"Returns ``True`` if this spatial reference is geographic (root node is "
"``GEOGCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1041
msgid ""
"Returns ``True`` if this spatial reference is local (root node is "
"``LOCAL_CS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1046
msgid ""
"Returns ``True`` if this spatial reference is a projected coordinate system "
"(root node is ``PROJCS``)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1051
msgid "Returns the WKT representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1055
msgid "Returns the 'pretty' representation of the WKT."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1059
msgid "Returns the PROJ.4 representation for this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1063
msgid "Alias for :attr:`SpatialReference.proj`."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1067
msgid "Returns the XML representation of this spatial reference."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1071
msgid "``CoordTransform``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1075
msgid ""
"Represents a coordinate system transform.  It is initialized with two "
":class:`SpatialReference`, representing the source and target coordinate "
"systems, respectively.  These objects should be used when performing the "
"same coordinate transformation repeatedly on different geometries::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1088
msgid "Raster Data Objects"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1093
msgid "``GDALRaster``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1095
msgid ""
":class:`GDALRaster` is a wrapper for the GDAL raster source object that "
"supports reading data from a variety of GDAL-supported geospatial file "
"formats and data sources using a simple, consistent interface.  Each data "
"source is represented by a :class:`GDALRaster` object which contains one or "
"more layers of data named bands.  Each band, represented by a "
":class:`GDALBand` object, contains georeferenced image data. For example, an"
" RGB image is represented as three bands: one for red, one for green, and "
"one for blue."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1106
msgid ""
"The constructor for ``GDALRaster`` accepts a single parameter: the path of "
"the file you want to read."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1111
msgid "The name of the source which is equivalent to the input file path."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1115
msgid ""
"The name of the GDAL driver used to handle the input file. For example, "
"``GTiff`` for a ``GeoTiff`` file. See also the `GDAL Raster Formats`__ list."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1123
msgid "The width of the source in pixels (X-axis)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1127
msgid "The height of the source in pixels (Y-axis)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1131
msgid ""
"The spatial reference system of the source, as a :class:`SpatialReference` "
"instance."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1136
msgid ""
"The affine transformation matrix used to georeference the source, as a tuple"
" of six coefficients which map pixel/line coordinates into georeferenced "
"space using the following relationship::"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1143
msgid ""
"The same values can be retrieved by accessing the :attr:`origin` (indices 0 "
"and 3), :attr:`scale` (indices 1 and 5) and :attr:`skew` (indices 2 and 4) "
"properties."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1149
msgid ""
"Coordinates of the top left origin of the raster in the spatial reference "
"system of the source, as a point object with ``x`` and ``y`` members."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1155
msgid ""
"Pixel width and height used for georeferencing the raster, as a as a point "
"object with ``x`` and ``y``  members. See :attr:`geotransform` for more "
"information."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1161
msgid ""
"Skew coefficients used to georeference the raster, as a point object with "
"``x`` and ``y``  members. In case of north up images, these coefficients are"
" both ``0``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1167
msgid ""
"Extent (boundary values) of the raster source, as a 4-tuple ``(xmin, ymin, "
"xmax, ymax)`` in the spatial reference system of the source."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1173
msgid "List of all bands of the source, as :class:`GDALBand` instances."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1176
msgid "``GDALBand``"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1180
msgid ""
"``GDALBand`` instances are not created explicitly, but rather obtained from "
"a :class:`GDALRaster` object, through its :attr:`~GDALRaster.bands` "
"attribute."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1186
msgid "The name or description of the band, if any."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1190
msgid "The width of the band in pixels (X-axis)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1194
msgid "The height of the band in pixels (Y-axis)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1198
msgid "The minimum pixel value of the band (excluding the \"no data\" value)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1202
msgid "The maximum pixel value of the band (excluding the \"no data\" value)."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1206
msgid ""
"The \"no data\" value for a band is generally a special marker value used to"
" mark pixels that are not valid data. Such pixels should generally not be "
"displayed, nor contribute to analysis operations."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1212
msgid ""
"The data type contained in the band, as an integer constant between 0 "
"(Unknown) and 11. If ``as_string`` is ``True``, the data type is returned as"
" a string with the following possible values: ``GDT_Unknown``, ``GDT_Byte``,"
" ``GDT_UInt16``, ``GDT_Int16``, ``GDT_UInt32``, ``GDT_Int32``, "
"``GDT_Float32``, ``GDT_Float64``, ``GDT_CInt16``, ``GDT_CInt32``, "
"``GDT_CFloat32``, and ``GDT_CFloat64``."
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1220 ../../ref/contrib/gis/geos.txt:977
#: ../../ref/contrib/gis/testing.txt:14 ../../ref/contrib/messages.txt:434
#: ../../ref/contrib/staticfiles.txt:21 ../../ref/csrf.txt:448
#: ../../ref/settings.txt:3
msgid "Settings"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1225
msgid "GDAL_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/gdal.txt:1227
msgid ""
"A string specifying the location of the GDAL library.  Typically, this "
"setting is only used if the GDAL library is in a non-standard location "
"(e.g., ``/home/john/lib/libgdal.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:3
msgid "Geolocation with GeoIP"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:8
msgid ""
"The :class:`GeoIP` object is a ctypes wrapper for the `MaxMind GeoIP C "
"API`__. [#]_"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:11
msgid ""
"In order to perform IP-based geolocation, the :class:`GeoIP` object requires"
" the GeoIP C library and either the GeoIP `Country`__ or `City`__ datasets "
"in binary format (the CSV files will not work!).  These datasets may be "
"`downloaded from MaxMind`__.  Grab the ``GeoLiteCountry/GeoIP.dat.gz`` and "
"``GeoLiteCity.dat.gz`` files and unzip them in a directory corresponding to "
"what you set :setting:`GEOIP_PATH` with in your settings.  See the example "
"and reference below for more details."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:27
msgid ""
"Assuming you have the GeoIP C library installed, here is an example of its "
"usage::"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:53
msgid "``GeoIP`` Settings"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:58
msgid "GEOIP_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:60
msgid ""
"A string specifying the directory where the GeoIP data files are located.  "
"This setting is *required* unless manually specified with ``path`` keyword "
"when initializing the :class:`GeoIP` object."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:67
msgid "GEOIP_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:69
msgid ""
"A string specifying the location of the GeoIP C library.  Typically, this "
"setting is only used if the GeoIP C library is in a non-standard location "
"(e.g., ``/home/sue/lib/libGeoIP.so``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:76
msgid "GEOIP_COUNTRY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:78
msgid ""
"The basename to use for the GeoIP country data file. Defaults to "
"``'GeoIP.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:84
msgid "GEOIP_CITY"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:86
msgid ""
"The basename to use for the GeoIP city data file. Defaults to "
"``'GeoLiteCity.dat'``."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:90
msgid "``GeoIP`` API"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:94
msgid ""
"The ``GeoIP`` object does not require any parameters to use the default "
"settings.  However, at the very least the :setting:`GEOIP_PATH` setting "
"should be set with the path of the location of your GeoIP data sets.  The "
"following initialization keywords may be used to customize any of the "
"defaults."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:101
#: ../../ref/contrib/gis/layermapping.txt:111
msgid "Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:101
#: ../../ref/contrib/gis/geoquerysets.txt:654
#: ../../ref/contrib/gis/geoquerysets.txt:832
#: ../../ref/contrib/gis/geoquerysets.txt:951
#: ../../ref/contrib/gis/geoquerysets.txt:984
#: ../../ref/contrib/gis/geoquerysets.txt:1017
#: ../../ref/contrib/gis/geoquerysets.txt:1037
#: ../../ref/contrib/gis/geoquerysets.txt:1160
#: ../../ref/contrib/gis/geos.txt:903 ../../ref/contrib/gis/geos.txt:926
#: ../../ref/contrib/gis/install/geolibs.txt:9
#: ../../ref/contrib/gis/layermapping.txt:94
#: ../../ref/contrib/gis/layermapping.txt:156 ../../ref/models/fields.txt:644
#: ../../ref/templates/builtins.txt:334 ../../ref/templates/builtins.txt:738
#: ../../ref/templates/builtins.txt:1303
msgid "Description"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:103
msgid "``path``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:103
msgid ""
"Base directory to where GeoIP data is located or the full path to where the "
"city or country data files (.dat) are located.  Assumes that both the city "
"and country data sets are located in this directory; overrides the "
":setting:`GEOIP_PATH` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:109
msgid "``cache``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:109
msgid ""
"The cache settings when opening up the GeoIP datasets, and may be an integer"
" in (0, 1, 2, 4) corresponding to the ``GEOIP_STANDARD``, "
"``GEOIP_MEMORY_CACHE``, ``GEOIP_CHECK_CACHE``, and ``GEOIP_INDEX_CACHE`` "
"``GeoIPOptions`` C API settings, respectively. Defaults to 0 "
"(``GEOIP_STANDARD``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
msgid "``country``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:116
msgid ""
"The name of the GeoIP country data file.  Defaults to ``GeoIP.dat``.  "
"Setting this keyword overrides the :setting:`GEOIP_COUNTRY` settings "
"attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:120
msgid "``city``"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:120
msgid ""
"The name of the GeoIP city data file.  Defaults to ``GeoLiteCity.dat``.  "
"Setting this keyword overrides the :setting:`GEOIP_CITY` settings attribute."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:126
msgid "``GeoIP`` Methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:129
msgid "Querying"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:131
msgid ""
"All the following querying routines may take either a string IP address or a"
" fully qualified domain name (FQDN).  For example, both "
"``'205.186.163.125'`` and ``'djangoproject.com'`` would be valid query "
"parameters."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:138
msgid ""
"Returns a dictionary of city information for the given query.  Some of the "
"values in the dictionary may be undefined (``None``)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:143
msgid ""
"Returns a dictionary with the country code and country for the given query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:148
msgid "Returns only the country code corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:152
msgid "Returns only the country name corresponding to the query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:155
msgid "Coordinate Retrieval"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:159 ../../ref/contrib/gis/geoip.txt:163
msgid "Returns a coordinate tuple of (longitude, latitude)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:167
msgid "Returns a coordinate tuple of (latitude, longitude),"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:171
msgid ""
"Returns a :class:`django.contrib.gis.geos.Point` object corresponding to the"
" query."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:174
msgid "Database Information"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:178
msgid "This property returns information about the GeoIP country database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:182
msgid "This property returns information about the GeoIP city database."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:186
msgid ""
"This property returns information about all GeoIP databases (both city and "
"country), and the version of the GeoIP C library (if supported)."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:190
msgid "GeoIP-Python API compatibility methods"
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:192
msgid ""
"These methods exist to ease compatibility with any code using MaxMind's "
"existing Python API."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:197
msgid ""
"This classmethod instantiates the GeoIP object from the given database path "
"and given cache setting."
msgstr ""

#: ../../ref/contrib/gis/geoip.txt:217
msgid ""
"GeoIP(R) is a registered trademark of MaxMind, LLC of Boston, Massachusetts."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:3
msgid "GeoQuerySet API Reference"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:14
msgid ""
"Just like when using the :ref:`queryset-api`, interaction with "
"``GeoQuerySet`` by :ref:`chaining filters <chaining-filters>`. Instead of "
"the regular Django :ref:`field-lookups`, the spatial lookups in this section"
" are available for :class:`GeometryField`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:19
msgid ""
"For an introduction, see the :ref:`spatial lookups introduction <spatial-"
"lookups-intro>`.  For an overview of what lookups are compatible with a "
"particular spatial backend, refer to the :ref:`spatial lookup compatibility "
"table <spatial-lookup-compatibility>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:27
msgid "bbcontains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:29
#: ../../ref/contrib/gis/geoquerysets.txt:51
#: ../../ref/contrib/gis/geoquerysets.txt:73
msgid "*Availability*: PostGIS, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:31
msgid ""
"Tests if the geometry field's bounding box completely contains the lookup "
"geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:39
#: ../../ref/contrib/gis/geoquerysets.txt:61
#: ../../ref/contrib/gis/geoquerysets.txt:83
#: ../../ref/contrib/gis/geoquerysets.txt:104
#: ../../ref/contrib/gis/geoquerysets.txt:127
#: ../../ref/contrib/gis/geoquerysets.txt:147
#: ../../ref/contrib/gis/geoquerysets.txt:168
#: ../../ref/contrib/gis/geoquerysets.txt:188
#: ../../ref/contrib/gis/geoquerysets.txt:208
#: ../../ref/contrib/gis/geoquerysets.txt:245
#: ../../ref/contrib/gis/geoquerysets.txt:326
#: ../../ref/contrib/gis/geoquerysets.txt:348
#: ../../ref/contrib/gis/geoquerysets.txt:539
#: ../../ref/contrib/gis/geoquerysets.txt:559
#: ../../ref/contrib/gis/geoquerysets.txt:579
#: ../../ref/contrib/gis/geoquerysets.txt:599
#: ../../ref/contrib/gis/geoquerysets.txt:622
msgid "Backend"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:39
#: ../../ref/contrib/gis/geoquerysets.txt:61
#: ../../ref/contrib/gis/geoquerysets.txt:83
#: ../../ref/contrib/gis/geoquerysets.txt:104
#: ../../ref/contrib/gis/geoquerysets.txt:127
#: ../../ref/contrib/gis/geoquerysets.txt:147
#: ../../ref/contrib/gis/geoquerysets.txt:168
#: ../../ref/contrib/gis/geoquerysets.txt:188
#: ../../ref/contrib/gis/geoquerysets.txt:208
#: ../../ref/contrib/gis/geoquerysets.txt:245
#: ../../ref/contrib/gis/geoquerysets.txt:326
#: ../../ref/contrib/gis/geoquerysets.txt:348
#: ../../ref/contrib/gis/geoquerysets.txt:539
#: ../../ref/contrib/gis/geoquerysets.txt:559
#: ../../ref/contrib/gis/geoquerysets.txt:579
#: ../../ref/contrib/gis/geoquerysets.txt:599
#: ../../ref/contrib/gis/geoquerysets.txt:622
msgid "SQL Equivalent"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:41
msgid "``poly ~ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:42
#: ../../ref/contrib/gis/geoquerysets.txt:108
msgid "``MBRContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:43
msgid "``MbrContains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:49
msgid "bboverlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:53
msgid ""
"Tests if the geometry field's bounding box overlaps the lookup geometry's "
"bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:63
msgid "``poly && geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:64
msgid "``MBROverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:65
msgid "``MbrOverlaps(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:71
msgid "contained"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:75
msgid ""
"Tests if the geometry field's bounding box is completely contained by the "
"lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:85
msgid "``poly @ geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:86
#: ../../ref/contrib/gis/geoquerysets.txt:351
msgid "``MBRWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:87
msgid "``MbrWithin(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:93
#: ../../ref/contrib/postgres/fields.txt:112
#: ../../ref/contrib/postgres/fields.txt:343
#: ../../ref/contrib/postgres/fields.txt:541
#: ../../ref/models/querysets.txt:2284
msgid "contains"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:95
#: ../../ref/contrib/gis/geoquerysets.txt:199
#: ../../ref/contrib/gis/geoquerysets.txt:221
#: ../../ref/contrib/gis/geoquerysets.txt:229
#: ../../ref/contrib/gis/geoquerysets.txt:236
#: ../../ref/contrib/gis/geoquerysets.txt:258
#: ../../ref/contrib/gis/geoquerysets.txt:317
#: ../../ref/contrib/gis/geoquerysets.txt:339
msgid "*Availability*: PostGIS, Oracle, MySQL, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:97
msgid "Tests if the geometry field spatially contains the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:106
msgid "``ST_Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:107
msgid "``SDO_CONTAINS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:109
msgid "``Contains(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:115
msgid "contains_properly"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:117
#: ../../ref/contrib/gis/geoquerysets.txt:361
#: ../../ref/contrib/gis/geoquerysets.txt:379
#: ../../ref/contrib/gis/geoquerysets.txt:397
#: ../../ref/contrib/gis/geoquerysets.txt:416
#: ../../ref/contrib/gis/geoquerysets.txt:434
#: ../../ref/contrib/gis/geoquerysets.txt:452
#: ../../ref/contrib/gis/geoquerysets.txt:470
#: ../../ref/contrib/gis/geoquerysets.txt:488
#: ../../ref/contrib/gis/geoquerysets.txt:799
#: ../../ref/contrib/gis/geoquerysets.txt:1058
#: ../../ref/contrib/gis/geoquerysets.txt:1209
#: ../../ref/contrib/gis/geoquerysets.txt:1226
msgid "*Availability*: PostGIS"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:119
msgid ""
"Returns true if the lookup geometry intersects the interior of the geometry "
"field, but not the boundary (or exterior). [#fncontainsproperly]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:129
msgid "``ST_ContainsProperly(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:135
msgid "coveredby"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:137
#: ../../ref/contrib/gis/geoquerysets.txt:158
#: ../../ref/contrib/gis/geoquerysets.txt:810
msgid "*Availability*: PostGIS, Oracle"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:139
msgid ""
"Tests if no point in the geometry field is outside the lookup geometry. "
"[#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:149
msgid "``ST_CoveredBy(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:150
msgid "``SDO_COVEREDBY(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:156
msgid "covers"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:160
msgid ""
"Tests if no point in the lookup geometry is outside the geometry field. "
"[#fncovers]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:170
msgid "``ST_Covers(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:171
msgid "``SDO_COVERS(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:177
msgid "crosses"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:179
#: ../../ref/contrib/gis/geoquerysets.txt:775
#: ../../ref/contrib/gis/geoquerysets.txt:820
#: ../../ref/contrib/gis/geoquerysets.txt:875
#: ../../ref/contrib/gis/geoquerysets.txt:945
#: ../../ref/contrib/gis/geoquerysets.txt:1003
#: ../../ref/contrib/gis/geoquerysets.txt:1031
msgid "*Availability*: PostGIS, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:181
msgid "Tests if the geometry field spatially crosses the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:190
msgid "``ST_Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:191
msgid "``Crosses(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:197
msgid "disjoint"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:201
msgid ""
"Tests if the geometry field is spatially disjoint from the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:210
msgid "``ST_Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:211
msgid "``SDO_GEOM.RELATE(poly, 'DISJOINT', geom, 0.05)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:212
msgid "``MBRDisjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:213
msgid "``Disjoint(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:219
msgid "equals"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:227
msgid "exact, same_as"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:234
msgid "intersects"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:238
msgid "Tests if the geometry field spatially intersects the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:247
msgid "``ST_Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:248
msgid "``SDO_OVERLAPBDYINTERSECT(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:249
msgid "``MBRIntersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:250
msgid "``Intersects(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:256
msgid "overlaps"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:263
msgid "relate"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:267
msgid ""
"Tests if the geometry field is spatially related to the lookup geometry by "
"the values given in the given pattern.  This lookup requires a tuple "
"parameter, ``(geom, pattern)``; the form of ``pattern`` will depend on the "
"spatial backend:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:272
msgid "PostGIS & SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:273
msgid ""
"On these spatial backends the intersection pattern is a string comprising "
"nine characters, which  define intersections between  the interior, "
"boundary, and exterior of the geometry field and the lookup geometry. The "
"intersection pattern matrix may only use the following characters: ``1``, "
"``2``, ``T``, ``F``, or ``*``.  This lookup type allows users to \"fine "
"tune\" a specific geometric relationship consistent with the DE-9IM model. "
"[#fnde9im]_"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:286
msgid "PostGIS SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:290
msgid "SpatiaLite SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:297
msgid ""
"Here the relation pattern is comprised at least one of the nine relation "
"strings: ``TOUCH``, ``OVERLAPBDYDISJOINT``, ``OVERLAPBDYINTERSECT``, "
"``EQUAL``, ``INSIDE``, ``COVEREDBY``, ``CONTAINS``, ``COVERS``, ``ON``, and "
"``ANYINTERACT``.   Multiple strings may be combined with the logical Boolean"
" operator OR, for example, ``'inside+touch'``. [#fnsdorelate]_  The relation"
" strings are case-insensitive."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:308
msgid "Oracle SQL equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:315
msgid "touches"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:319
msgid "Tests if the geometry field spatially touches the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:328
msgid "``ST_Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:329
msgid "``MBRTouches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:330
msgid "``SDO_TOUCH(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:331
msgid "``Touches(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:337
msgid "within"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:341
msgid "Tests if the geometry field is spatially within the lookup geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:350
msgid "``ST_Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:352
msgid "``SDO_INSIDE(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:353
msgid "``Within(poly, geom)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:359
msgid "left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:363
msgid ""
"Tests if the geometry field's bounding box is strictly to the left of the "
"lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:370
#: ../../ref/contrib/gis/geoquerysets.txt:388
#: ../../ref/contrib/gis/geoquerysets.txt:406
#: ../../ref/contrib/gis/geoquerysets.txt:425
#: ../../ref/contrib/gis/geoquerysets.txt:443
#: ../../ref/contrib/gis/geoquerysets.txt:461
#: ../../ref/contrib/gis/geoquerysets.txt:479
#: ../../ref/contrib/gis/geoquerysets.txt:497
msgid "PostGIS equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:377
msgid "right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:381
msgid ""
"Tests if the geometry field's bounding box is strictly to the right of the "
"lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:395
msgid "overlaps_left"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:399
msgid ""
"Tests if the geometry field's bounding box overlaps or is to the left of the"
" lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:414
msgid "overlaps_right"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:418
msgid ""
"Tests if the geometry field's bounding box overlaps or is to the right of "
"the lookup geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:432
msgid "overlaps_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:436
msgid ""
"Tests if the geometry field's bounding box overlaps or is above the lookup "
"geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:450
msgid "overlaps_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:454
msgid ""
"Tests if the geometry field's bounding box overlaps or is below the lookup "
"geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:468
msgid "strictly_above"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:472
msgid ""
"Tests if the geometry field's bounding box is strictly above the lookup "
"geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:486
msgid "strictly_below"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:490
msgid ""
"Tests if the geometry field's bounding box is strictly below the lookup "
"geometry's bounding box."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:509
msgid ""
"For an overview on performing distance queries, please refer to the "
":ref:`distance queries introduction <distance-queries>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:512
msgid "Distance lookups take the following form::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:516
msgid ""
"The value passed into a distance lookup is a tuple; the first two values are"
" mandatory, and are the geometry to calculate distances to, and a distance "
"value (either a number in units of the field or a "
":class:`~django.contrib.gis.measure.Distance` object).  On every distance "
"lookup but :lookup:`dwithin`, an optional third element, ``'spheroid'``, may"
" be included to tell GeoDjango to use the more accurate spheroid distance "
"calculation functions on fields with a geodetic coordinate system (e.g., "
"``ST_Distance_Spheroid`` would be used instead of ``ST_Distance_Sphere``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:529
msgid "distance_gt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:531
msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is greater than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:541
msgid "``ST_Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:542
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:543
msgid "``Distance(poly, geom) > 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:549
msgid "distance_gte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:551
msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is greater than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:561
msgid "``ST_Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:562
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:563
msgid "``Distance(poly, geom) >= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:569
msgid "distance_lt"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:571
msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is less than the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:581
msgid "``ST_Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:582
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:583
msgid "``Distance(poly, geom) < 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:589
msgid "distance_lte"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:591
msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry is less than or equal to the given distance value."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:601
msgid "``ST_Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:602
msgid "``SDO_GEOM.SDO_DISTANCE(poly, geom, 0.05) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:603
msgid "``Distance(poly, geom) <= 5``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:609
msgid "dwithin"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:611
msgid ""
"Returns models where the distance to the geometry field from the lookup "
"geometry are within the given distance from one another. Note that you can "
"only provide :class:`~django.contrib.gis.measure.Distance` objects if the "
"targeted geometries are in a projected system. For geographic geometries, "
"you should use units of the geometry field (e.g. degrees for ``WGS84``) ."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:624
msgid "``ST_DWithin(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:625
msgid "``SDO_WITHIN_DISTANCE(poly, geom, 5)``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:630
msgid "This lookup is not available on SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:635
msgid ""
"``GeoQuerySet`` methods specify that a spatial operation be performed on "
"each spatial operation on each geographic field in the queryset and store "
"its output in a new attribute on the model (which is generally the name of "
"the ``GeoQuerySet`` method)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:640
msgid ""
"There are also aggregate ``GeoQuerySet`` methods which return a single value"
" instead of a queryset.  This section will describe the API and availability"
" of every ``GeoQuerySet`` method available in GeoDjango."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:646
msgid ""
"What methods are available depend on your spatial backend.  See the "
":ref:`compatibility table <geoqueryset-method-compatibility>` for more "
"details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:650
msgid ""
"With a few exceptions, the following keyword arguments may be used with all "
"``GeoQuerySet`` methods:"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:654
#: ../../ref/contrib/gis/geoquerysets.txt:951
#: ../../ref/contrib/gis/geoquerysets.txt:984
#: ../../ref/contrib/gis/geoquerysets.txt:1017
#: ../../ref/contrib/gis/geoquerysets.txt:1037
#: ../../ref/contrib/gis/geoquerysets.txt:1160
msgid "Keyword Argument"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:656
msgid "``field_name``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:656
msgid ""
"By default, ``GeoQuerySet`` methods use the first geographic field "
"encountered in the model.  This keyword should be used to specify another "
"geographic field (e.g., ``field_name='point2'``) when there are multiple "
"geographic fields in a model."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:662
msgid ""
"On PostGIS, the ``field_name`` keyword may also be used on geometry fields "
"in models that are related via a ``ForeignKey`` relation (e.g., "
"``field_name='related__point'``)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:667
msgid "``model_att``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:667
msgid ""
"By default, ``GeoQuerySet`` methods typically attach their output in an "
"attribute with the same name as the ``GeoQuerySet`` method.  Setting this "
"keyword with the desired attribute name will override this default behavior."
"  For example, ``qs = Zipcode.objects.centroid(model_att='c')`` will attach "
"the centroid of the ``Zipcode`` geometry field in a ``c`` attribute on every"
" model rather than in a ``centroid`` attribute."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:677
msgid ""
"This keyword is required if a method name clashes with an existing "
"``GeoQuerySet`` method -- if you wanted to use the ``area()`` method on "
"model with a ``PolygonField`` named ``area``, for example."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:685
msgid "Measurement"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:689
msgid "``area``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:693
msgid ""
"Returns the area of the geographic field in an ``area`` attribute on each "
"element of this GeoQuerySet."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:697
msgid "``distance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:701
msgid ""
"This method takes a geometry as a parameter, and attaches a ``distance`` "
"attribute to every model in the returned queryset that contains the distance"
" (as a :class:`~django.contrib.gis.measure.Distance` object) to the given "
"geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:705
msgid ""
"In the following example (taken from the `GeoDjango distance tests`__), the "
"distance from the `Tasmanian`__ city of Hobart to every other "
":class:`PointField` in the ``AustraliaCity`` queryset is calculated::"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:725
msgid ""
"Because the ``distance`` attribute is a "
":class:`~django.contrib.gis.measure.Distance` object, you can easily express"
" the value in the units of your choice.  For example, ``city.distance.mi`` "
"is the distance value in miles and ``city.distance.km`` is the distance "
"value in kilometers.  See :doc:`measure` for usage details and the list of "
":ref:`supported_units`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:736
msgid "``length``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:740
msgid ""
"Returns the length of the geometry field in a ``length`` attribute (a "
":class:`~django.contrib.gis.measure.Distance` object) on each model in the "
"queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:745
msgid "``perimeter``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:749
msgid ""
"Returns the perimeter of the geometry field in a ``perimeter`` attribute (a "
":class:`~django.contrib.gis.measure.Distance` object) on each model in the "
"queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:754
msgid "Geometry Relationships"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:756
msgid ""
"The following methods take no arguments, and attach geometry objects each "
"element of the :class:`GeoQuerySet` that is the result of relationship "
"function evaluated on the geometry field."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:761
msgid "``centroid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:767
msgid ""
"Returns the ``centroid`` value for the geographic field in a ``centroid`` "
"attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:771
msgid "``envelope``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:777
msgid ""
"Returns a geometry representing the bounding box of the geometry field in an"
" ``envelope`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:781
msgid "``point_on_surface``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:787
msgid ""
"Returns a Point geometry guaranteed to lie on the surface of the geometry "
"field in a ``point_on_surface`` attribute on each element of the queryset; "
"otherwise sets with None."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:792
msgid "Geometry Editors"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:795
msgid "``force_rhr``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:801
msgid ""
"Returns a modified version of the polygon/multipolygon in which all of the "
"vertices follow the Right-Hand-Rule, and attaches as a ``force_rhr`` "
"attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:806
msgid "``reverse_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:812
msgid ""
"Reverse the coordinate order of the geometry field, and attaches as a "
"``reverse`` attribute on each element of the queryset."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:816
msgid "``scale``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:823
msgid "``snap_to_grid``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:827
msgid ""
"Snap all points of the input geometry to the grid.  How the geometry is "
"snapped to the grid depends on how many numeric (either float, integer, or "
"long) arguments are given."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:832
msgid "Number of Arguments"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:834
#: ../../ref/contrib/gis/geos.txt:216 ../../ref/contrib/gis/geos.txt:906
msgid "1"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:834
msgid "A single size to snap bot the X and Y grids to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:835
#: ../../ref/contrib/gis/geos.txt:217 ../../ref/contrib/gis/geos.txt:928
msgid "2"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:835
msgid "X and Y sizes to snap the grid to."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:836
#: ../../ref/contrib/gis/geos.txt:219
msgid "4"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:836
msgid "X, Y sizes and the corresponding X, Y origins."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:840
#: ../../ref/contrib/gis/layermapping.txt:130
msgid "``transform``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:846
msgid ""
"The ``transform`` method transforms the geometry field of a model to the "
"spatial reference system specified by the ``srid`` parameter.  If no "
"``srid`` is given, then 4326 (WGS84) is used by default."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:852
msgid ""
"Unlike other ``GeoQuerySet`` methods, ``transform`` stores its output \"in-"
"place\".  In other words, no new attribute for the transformed geometry is "
"placed on the models."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:858
msgid ""
"What spatial reference system an integer SRID corresponds to may depend on "
"the spatial database used.  In other words, the SRID numbers used for Oracle"
" are not necessarily the same as those used by PostGIS."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:872
msgid "``translate``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:877
msgid ""
"Translates the geometry field to a new location using the given numeric "
"parameters as offsets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:881
msgid "Geometry Operations"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:884
msgid ""
"The following methods all take a geometry as a parameter and attach a "
"geometry to each element of the ``GeoQuerySet`` that is the result of the "
"operation."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:888
msgid "``difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:892
msgid ""
"Returns the spatial difference of the geographic field with the given "
"geometry in a ``difference`` attribute on each element of the "
"``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:898
msgid "``intersection``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:902
msgid ""
"Returns the spatial intersection of the geographic field with the given "
"geometry in an ``intersection`` attribute on each element of the "
"``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:907
msgid "``sym_difference``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:911
msgid ""
"Returns the symmetric difference of the geographic field with the given "
"geometry in a ``sym_difference`` attribute on each element of the "
"``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:916
msgid "``union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:920
msgid ""
"Returns the union of the geographic field with the given geometry in an "
"``union`` attribute on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:925
msgid "Geometry Output"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:927
msgid ""
"The following ``GeoQuerySet`` methods will return an attribute that has the "
"value of the geometry field in each model converted to the requested output "
"format."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:931
msgid "``geohash``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:935
msgid ""
"Attaches a ``geohash`` attribute to every model the queryset containing the "
"`GeoHash`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:941
msgid "``geojson``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:947
msgid ""
"Attaches a ``geojson`` attribute to every model in the queryset that "
"contains the `GeoJSON`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:953
#: ../../ref/contrib/gis/geoquerysets.txt:986
#: ../../ref/contrib/gis/geoquerysets.txt:1019
#: ../../ref/contrib/gis/geoquerysets.txt:1043
msgid "``precision``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:953
msgid ""
"It may be used to specify the number of significant digits for the "
"coordinates in the GeoJSON representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:957
msgid "``crs``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:957
msgid ""
"Set this to ``True`` if you want the coordinate reference system to be "
"included in the returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:961
msgid "``bbox``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:961
msgid ""
"Set this to ``True`` if you want the bounding box to be included in the "
"returned GeoJSON."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:968
msgid "``gml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:974
msgid ""
"Attaches a ``gml`` attribute to every model in the queryset that contains "
"the `Geographic Markup Language (GML)`__ representation of the geometry."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:986
msgid ""
"This keyword is for PostGIS only.  It may be used to specify the number of "
"significant digits for the coordinates in the GML representation -- the "
"default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:991
msgid "``version``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:991
msgid ""
"This keyword is for PostGIS only.  It may be used to specify the GML version"
" used, and may only be values of 2 or 3.  The default value is 2."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:999
msgid "``kml``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1005
msgid ""
"Attaches a ``kml`` attribute to every model in the queryset that contains "
"the `Keyhole Markup Language (KML)`__ representation of the geometry fields."
" It should be noted that the contents of the KML are transformed to WGS84 if"
" necessary."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1019
msgid ""
"This keyword may be used to specify the number of significant digits for the"
" coordinates in the KML representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1027
msgid "``svg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1033
msgid ""
"Attaches a ``svg`` attribute to every model in the queryset that contains "
"the `Scalable Vector Graphics (SVG)`__ path data of the geometry fields."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1039
msgid "``relative``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1039
msgid ""
"If set to ``True``, the path data will be implemented in terms of relative "
"moves.  Defaults to ``False``, meaning that absolute moves are used instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1043
msgid ""
"This keyword may be used to specify the number of significant digits for the"
" coordinates in the SVG representation -- the default value is 8."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1051
msgid "Miscellaneous"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1054
msgid "``mem_size``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1060
msgid ""
"Returns the memory size (number of bytes) that the geometry field takes in a"
" ``mem_size`` attribute  on each element of the ``GeoQuerySet``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1064
msgid "``num_geom``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1070
msgid ""
"Returns the number of geometries in a ``num_geom`` attribute on each element"
" of the ``GeoQuerySet`` if the geometry field is a collection (e.g., a "
"``GEOMETRYCOLLECTION`` or ``MULTI*`` field); otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1076
msgid "``num_points``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1082
msgid ""
"Returns the number of points in the first linestring in the geometry field "
"in a ``num_points`` attribute on each element of the ``GeoQuerySet``; "
"otherwise sets with ``None``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1087
msgid "Spatial Aggregates"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1090
msgid "Aggregate Methods"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1094
msgid ""
"Aggregate methods are now deprecated. Prefer using their function-based "
"equivalents."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1098
msgid "``collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1104
msgid "Use the :class:`Collect` aggregate instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1106
msgid "Shortcut for ``aggregate(Collect(<field>))``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1109
msgid "``extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1115
#: ../../ref/contrib/gis/geoquerysets.txt:1126
msgid "Use the :class:`Extent` aggregate instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1117
msgid "Shortcut for ``aggregate(Extent(<field>))``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1120
msgid "``extent3d``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1128
msgid "Shortcut for ``aggregate(Extent3D(<field>))``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1131
msgid "``make_line``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1137
msgid "Use the :class:`MakeLine` aggregate instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1139
msgid "Shortcut for ``aggregate(MakeLine(<field>))``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1142
msgid "``unionagg``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1148
msgid "Use the :class:`Union` aggregate instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1150
msgid "Shortcut for ``aggregate(Union(<field>))``."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1155
msgid ""
"Django provides some GIS-specific aggregate functions. For details on how to"
" use these aggregate functions, see :doc:`the topic guide on aggregation "
"</topics/db/aggregation>`."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1162
msgid "``tolerance``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1162
msgid ""
"This keyword is for Oracle only.  It is for the tolerance value used by the "
"``SDOAGGRTYPE`` procedure; the  `Oracle documentation`__ has more details."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1176
msgid "``Collect``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1180
msgid "*Availability*: PostGIS, Spatialite (≥3.0)"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1182
msgid ""
"Returns a ``GEOMETRYCOLLECTION`` or a ``MULTI`` geometry object from the "
"geometry column. This is analogous to a simplified version of the "
":class:`Union` aggregate, except it can be several orders of magnitude "
"faster than performing a union because it simply rolls up geometries into a "
"collection or multi object, not caring about dissolving boundaries."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1189
msgid "``Extent``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1193
msgid "*Availability*: PostGIS, Oracle, Spatialite (≥3.0)"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1195
msgid ""
"Returns the extent of all ``geo_field`` in the ``QuerySet`` as a four-tuple,"
" comprising the lower left coordinate and the upper right coordinate."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1205
msgid "``Extent3D``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1211
msgid ""
"Returns the 3D extent of all ``geo_field`` in the ``QuerySet`` as a six-"
"tuple, comprising the lower left coordinate and upper right coordinate (each"
" with x, y, and z coordinates)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1222
msgid "``MakeLine``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1228
msgid ""
"Returns a ``LineString`` constructed from the point field geometries in the "
"``QuerySet``. Currently, ordering the queryset has no effect."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1238
msgid "``Union``"
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1244
msgid ""
"This method returns a :class:`~django.contrib.gis.geos.GEOSGeometry` object "
"comprising the union of every geometry in the queryset. Please note that use"
" of ``Union`` is processor intensive and may take a significant amount of "
"time on large querysets."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1251
msgid ""
"If the computation time for using this method is too expensive, consider "
"using :class:`Collect` instead."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1260
msgid ""
"*See* `OpenGIS Simple Feature Specification For SQL "
"<http://www.opengis.org/docs/99-049.pdf>`_, at Ch. 2.1.13.2, p. 2-13 (The "
"Dimensionally Extended Nine-Intersection Model)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1261
msgid ""
"*See* `SDO_RELATE documentation "
"<http://docs.oracle.com/cd/B19306_01/appdev.102/b14255/sdo_operat.htm#sthref845>`_,"
" from Ch. 11 of the Oracle Spatial User's Guide and Manual."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1262
msgid ""
"For an explanation of this routine, read `Quirks of the \"Contains\" Spatial"
" Predicate <http://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-"
"covers-spatial.html>`_ by Martin Davis (a PostGIS developer)."
msgstr ""

#: ../../ref/contrib/gis/geoquerysets.txt:1263
msgid ""
"Refer to the PostGIS ``ST_ContainsProperly`` `documentation "
"<http://postgis.net/docs/manual-1.5/ST_ContainsProperly.html>`_ for more "
"details."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:3
msgid "GEOS API"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:9
msgid "Background"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:12
msgid "What is GEOS?"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:14
msgid ""
"`GEOS`__ stands for **Geometry Engine - Open Source**, and is a C++ library,"
" ported from the  `Java Topology Suite`__.  GEOS implements the OpenGIS "
"`Simple Features for SQL`__ spatial predicate functions and spatial "
"operators. GEOS, now an OSGeo project, was initially developed and "
"maintained by `Refractions Research`__ of Victoria, Canada."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:26
msgid "Features"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:28
msgid ""
"GeoDjango implements a high-level Python wrapper for the GEOS library, its "
"features include:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:31
msgid ""
"A BSD-licensed interface to the GEOS geometry routines, implemented purely "
"in Python using ``ctypes``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:33
msgid ""
"Loosely-coupled to GeoDjango.  For example, :class:`GEOSGeometry` objects "
"may be used outside of a Django project/application.  In other words, no "
"need to have ``DJANGO_SETTINGS_MODULE`` set or use a database, etc."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:36
msgid "Mutability: :class:`GEOSGeometry` objects may be modified."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:37
msgid ""
"Cross-platform and tested; compatible with Windows, Linux, Solaris, and Mac "
"OS X platforms."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:43
msgid "Tutorial"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:45
msgid ""
"This section contains a brief introduction and tutorial to using "
":class:`GEOSGeometry` objects."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:49
msgid "Creating a Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:51
msgid ""
":class:`GEOSGeometry` objects may be created in a few ways.  The first is to"
" simply instantiate the object on some spatial input -- the following are "
"examples of creating the same geometry from WKT, HEX, WKB, and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:61
msgid ""
"Another option is to use the constructor for the specific geometry type that"
" you wish to create.  For example, a :class:`Point` object may be created by"
" passing in the X and Y coordinates into its constructor::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:68
msgid ""
"All these constructors take the keyword argument ``srid``. For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:78
msgid ""
"Finally, there is the :func:`fromfile` factory method which returns a "
":class:`GEOSGeometry` object from a file::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:87
msgid "My logs are filled with GEOS-related errors"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:89
msgid ""
"You find many ``TypeError`` or ``AttributeError`` exceptions filling your "
"Web server's log files. This generally means that you are creating GEOS "
"objects at the top level of some of your Python modules. Then, due to a race"
" condition in the garbage collector, your module is garbage collected before"
" the GEOS object. To prevent this, create :class:`GEOSGeometry` objects "
"inside the local scope of your functions/methods."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:97
msgid "Geometries are Pythonic"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:98
msgid ""
":class:`GEOSGeometry` objects are 'Pythonic', in other words components may "
"be accessed, modified, and iterated over using standard Python conventions. "
"For example, you can iterate over the coordinates in a :class:`Point`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:106
msgid ""
"With any geometry object, the :attr:`GEOSGeometry.coords` property may be "
"used to get the geometry coordinates as a Python tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:112
msgid ""
"You can get/set geometry components using standard Python indexing "
"techniques.  However, what is returned depends on the geometry type of the "
"object.  For example, indexing on a :class:`LineString` returns a coordinate"
" tuple::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:124
msgid ""
"Whereas indexing on a :class:`Polygon` will return the ring (a "
":class:`LinearRing` object) corresponding to the index::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:134
msgid ""
"In addition, coordinates/components of the geometry may added or modified, "
"just like a Python list::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:145
msgid "Geometry Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:148
msgid "``GEOSGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:152
msgid "Geometry input value (string or buffer)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:153 ../../ref/contrib/gis/geos.txt:822
msgid "spatial reference identifier"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:156
msgid ""
"This is the base class for all GEOS geometry objects.  It initializes on the"
" given ``geo_input`` argument, and then assumes the proper geometry subclass"
" (e.g., ``GEOSGeometry('POINT(1 1)')`` will create a :class:`Point` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:160
msgid ""
"The following input formats, along with their corresponding Python types, "
"are accepted:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:164
msgid "Format"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:164
msgid "Input Type"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:166
msgid "WKT / EWKT"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:166 ../../ref/contrib/gis/geos.txt:167
#: ../../ref/contrib/gis/geos.txt:169
msgid "``str`` or ``unicode``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:167
msgid "HEX / HEXEWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:168
msgid "WKB / EWKB"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:168
msgid "``buffer``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:169
msgid "GeoJSON"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:174
msgid ""
"The new 3D/4D WKT notation with an intermediary Z or M (like ``POINT Z (3, "
"4, 5)``) is only supported with GEOS 3.3.0 or later."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:178
msgid "Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:182
msgid "Returns the coordinates of the geometry as a tuple."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:186
msgid "Returns the dimension of the geometry:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:188
msgid "``0`` for :class:`Point`\\s and :class:`MultiPoint`\\s"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:189
msgid "``1`` for :class:`LineString`\\s and :class:`MultiLineString`\\s"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:190
msgid "``2`` for :class:`Polygon`\\s and :class:`MultiPolygon`\\s"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:191
msgid "``-1`` for empty :class:`GeometryCollection`\\s"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:192
msgid ""
"the maximum dimension of its elements for non-empty "
":class:`GeometryCollection`\\s"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:197
msgid "Returns whether or not the set of points in the geometry is empty."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:201
msgid "Returns a string corresponding to the type of geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:209
msgid ""
"Returns the GEOS geometry type identification number.  The following table "
"shows the value for each geometry type:"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:213
msgid "Geometry"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:213
msgid "ID"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:215
msgid ":class:`Point`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:215 ../../ref/contrib/gis/geos.txt:905
msgid "0"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:216
msgid ":class:`LineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:217
msgid ":class:`LinearRing`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:218
msgid ":class:`Polygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:218 ../../ref/contrib/gis/geos.txt:929
msgid "3"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:219
msgid ":class:`MultiPoint`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:220
msgid ":class:`MultiLineString`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:220
msgid "5"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:221
msgid ":class:`MultiPolygon`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:221
msgid "6"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:222
msgid ":class:`GeometryCollection`"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:222
msgid "7"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:227
msgid "Returns the number of coordinates in the geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:231
msgid ""
"Returns the number of geometries in this geometry.  In other words, will "
"return 1 on anything but geometry collections."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:236
msgid ""
"Returns a boolean indicating whether the geometry is three-dimensional."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:240
msgid "Returns a boolean indicating whether the geometry is a ``LinearRing``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:244
msgid ""
"Returns a boolean indicating whether the geometry is 'simple'. A geometry is"
" simple if and only if it does not intersect itself (except at boundary "
"points).  For example, a :class:`LineString` object is not simple if it "
"intersects itself. Thus, :class:`LinearRing` and :class:`Polygon` objects "
"are always simple because they do cannot intersect themselves, by "
"definition."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:253
msgid "Returns a boolean indicating whether the geometry is valid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:257
msgid "Returns a string describing the reason why a geometry is invalid."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:261
msgid ""
"Property that may be used to retrieve or set the SRID associated with the "
"geometry.  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:272
msgid "Output Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:274
msgid ""
"The properties in this section export the :class:`GEOSGeometry` object into "
"a different.  This output may be in the form of a string, buffer, or even "
"another object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:280
msgid ""
"Returns the \"extended\" Well-Known Text of the geometry.  This "
"representation is specific to PostGIS and is a super set of the OGC WKT "
"standard. [#fnogc]_ Essentially the SRID is prepended to the WKT "
"representation, for example ``SRID=4326;POINT(5 23)``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:287
msgid ""
"The output from this property does not include the 3dm, 3dz, and 4d "
"information that PostGIS supports in its EWKT representations."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:292
msgid ""
"Returns the WKB of this Geometry in hexadecimal form.  Please note that the "
"SRID value is not included in this representation because it is not a part "
"of the OGC specification (use the :attr:`GEOSGeometry.hexewkb` property "
"instead)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:299
msgid ""
"Returns the EWKB of this Geometry in hexadecimal form.  This is an extension"
" of the WKB specification that includes the SRID value that are a part of "
"this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:305
msgid ""
"Returns the GeoJSON representation of the geometry. Note that the result is "
"not a complete GeoJSON structure but only the ``geometry`` key content of a "
"GeoJSON structure. See also :doc:`/ref/contrib/gis/serializers`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:311 ../../ref/contrib/gis/geos.txt:330
#: ../../ref/contrib/gis/geos.txt:561
msgid "Requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:315
msgid "Alias for :attr:`GEOSGeometry.json`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:319
msgid ""
"Returns a `KML`__ (Keyhole Markup Language) representation of the geometry."
"  This should only be used for geometries with an SRID of 4326 (WGS84), but "
"this restriction is not enforced."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:325
msgid ""
"Returns an :class:`~django.contrib.gis.gdal.OGRGeometry` object "
"corresponding to the GEOS geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:336
msgid ""
"Returns the WKB (Well-Known Binary) representation of this Geometry as a "
"Python buffer.  SRID value is not included, use the "
":attr:`GEOSGeometry.ewkb` property instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:344
msgid ""
"Return the EWKB representation of this Geometry as a Python buffer. This is "
"an extension of the WKB specification that includes any SRID value that are "
"a part of this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:350
msgid "Returns the Well-Known Text of the geometry (an OGC standard)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:355
msgid "Spatial Predicate Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:357
msgid ""
"All of the following spatial predicate methods take another "
":class:`GEOSGeometry` instance (``other``) as a parameter, and return a "
"boolean."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:363
msgid ""
"Returns ``True`` if :meth:`other.within(this) <GEOSGeometry.within>` returns"
" ``True``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:368
msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two Geometries is"
" ``T*T******`` (for a point and a curve,a point and an area or a line and an"
" area) ``0********`` (for two curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:374
msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is"
" ``FF*FF****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:379
msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is"
" ``T*F**FFF*``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:384
msgid ""
"Returns true if the two geometries are exactly equal, up to a specified "
"tolerance.  The ``tolerance`` value should be a floating point number "
"representing the error tolerance in the comparison, e.g., "
"``poly1.equals_exact(poly2, 0.001)`` will compare equality to within one "
"thousandth of a unit."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:392
msgid "Returns ``True`` if :meth:`GEOSGeometry.disjoint` is ``False``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:396
msgid ""
"Returns true if the DE-9IM intersection matrix for the two geometries is "
"``T*T***T**`` (for two points or two surfaces) ``1*T***T**`` (for two "
"curves)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:402
msgid ""
"Returns ``True`` if the elements in the DE-9IM intersection matrix for this "
"geometry and the other matches the given ``pattern`` -- a string of nine "
"characters from the alphabet: {``T``, ``F``, ``*``, ``0``}."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:408
msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is"
" ``FT*******``, ``F**T*****`` or ``F***T****``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:413
msgid ""
"Returns ``True`` if the DE-9IM intersection matrix for the two geometries is"
" ``T*F**F***``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:417
msgid "Topological Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:421
msgid ""
"Returns a :class:`GEOSGeometry` that represents all points whose distance "
"from this geometry is less than or equal to the given ``width``. The "
"optional ``quadsegs`` keyword sets the number of segments used to "
"approximate a quarter circle (defaults is 8)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:428
msgid ""
"Returns a :class:`GEOSGeometry` representing the points making up this "
"geometry that do not make up other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:434
msgid ""
"Given a distance (float), returns the point (or closest point) within the "
"geometry (:class:`LineString` or :class:`MultiLineString`) at that distance."
" The normalized version takes the distance as a float between 0 (origin) and"
" 1 (endpoint)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:439
msgid "Reverse of :meth:`GEOSGeometry.project`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:443
msgid ""
"Returns a :class:`GEOSGeometry` representing the points shared by this "
"geometry and other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:449
msgid ""
"Returns the distance (float) from the origin of the geometry "
"(:class:`LineString` or :class:`MultiLineString`) to the point projected on "
"the geometry (that is to a point of the line the closest to the given "
"point). The normalized version returns the distance as a float between 0 "
"(origin) and 1 (endpoint)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:455
msgid "Reverse of :meth:`GEOSGeometry.interpolate`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:459
msgid ""
"Returns the DE-9IM intersection matrix (a string) representing the "
"topological relationship between this geometry and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:464
msgid ""
"Returns a new :class:`GEOSGeometry`, simplified to the specified tolerance "
"using the Douglas-Peucker algorithm. A higher tolerance value implies fewer "
"points in the output. If no tolerance is provided, it defaults to 0."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:468
msgid ""
"By default, this function does not preserve topology. For example, "
":class:`Polygon` objects can be split, be collapsed into lines, or "
"disappear. :class:`Polygon` holes can be created or disappear, and lines may"
" cross. By specifying ``preserve_topology=True``, the result will have the "
"same dimension and number of components as the input; this is significantly "
"slower, however."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:477
msgid ""
"Returns a :class:`GEOSGeometry` combining the points in this geometry not in"
" other, and the points in other not in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:482
msgid ""
"Returns a :class:`GEOSGeometry` representing all the points in this geometry"
" and the other."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:486
msgid "Topological Properties"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:490
msgid "Returns the boundary as a newly allocated Geometry object."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:494
msgid ""
"Returns a :class:`Point` object representing the geometric center of the "
"geometry.  The point is not guaranteed to be on the interior of the "
"geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:500
msgid ""
"Returns the smallest :class:`Polygon` that contains all the points in the "
"geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:505
msgid ""
"Returns a :class:`Polygon` that represents the bounding envelope of this "
"geometry. Note that it can also return a :class:`Point` if the input "
"geometry is a point."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:511
msgid ""
"Computes and returns a :class:`Point` guaranteed to be on the interior of "
"this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:515
msgid "Other Properties & Methods"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:519
msgid "This property returns the area of the Geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:523
msgid ""
"This property returns the extent of this geometry as a 4-tuple, consisting "
"of ``(xmin, ymin, xmax, ymax)``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:528
msgid ""
"This method returns a :class:`GEOSGeometry` that is a clone of the original."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:532
msgid ""
"Returns the distance between the closest points on this geometry and the "
"given ``geom`` (another :class:`GEOSGeometry` object)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:537
msgid ""
"GEOS distance calculations are  linear -- in other words, GEOS does not "
"perform a spherical calculation even if the SRID specifies a geographic "
"coordinate system."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:543
msgid ""
"Returns the length of this geometry (e.g., 0 for a :class:`Point`, the "
"length of a :class:`LineString`, or the circumference of a "
":class:`Polygon`)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:549
msgid ""
"Returns a GEOS ``PreparedGeometry`` for the contents of this geometry. "
"``PreparedGeometry`` objects are optimized for the contains, intersects, "
"covers, crosses, disjoint, overlaps, touches and within operations. Refer to"
" the :ref:`prepared-geometries` documentation for more information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:556
msgid ""
"Returns a :class:`~django.contrib.gis.gdal.SpatialReference` object "
"corresponding to the SRID of the geometry or ``None``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:565
msgid ""
"Transforms the geometry according to the given coordinate transformation "
"parameter (``ct``), which may be an integer SRID, spatial reference WKT "
"string, a PROJ.4 string, a "
":class:`~django.contrib.gis.gdal.SpatialReference` object, or a "
":class:`~django.contrib.gis.gdal.CoordTransform` object. By default, the "
"geometry is transformed in-place and nothing is returned. However if the "
"``clone`` keyword is set, then the geometry is not modified and a "
"transformed clone of the geometry is returned instead."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:575
msgid ""
"Requires GDAL. Raises :class:`~django.contrib.gis.geos.GEOSException` if "
"GDAL is not available or if the geometry's SRID is ``None`` or less than 0."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:579
msgid "``Point``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:583
msgid ""
"``Point`` objects are instantiated using arguments that represent the "
"component coordinates of the point or with a single sequence coordinates.  "
"For example, the following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:591
msgid "``LineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:595
msgid ""
"``LineString`` objects are instantiated using arguments that are either a "
"sequence of coordinates or :class:`Point` objects. For example, the "
"following are equivalent::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:602
msgid ""
"In addition, ``LineString`` objects may also be created by passing in a "
"single sequence of coordinate or :class:`Point` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:609
msgid "``LinearRing``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:613
msgid ""
"``LinearRing`` objects are constructed in the exact same way as "
":class:`LineString` objects, however the coordinates must be *closed*, in "
"other words, the first coordinates must be the same as the last coordinates."
"  For example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:620
msgid ""
"Notice that ``(0, 0)`` is the first and last coordinate -- if they were not "
"equal, an error would be raised."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:624
msgid "``Polygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:628
msgid ""
"``Polygon`` objects may be instantiated by passing in one or more parameters"
" that represent the rings of the polygon.  The parameters must either be "
":class:`LinearRing` instances, or a sequence that may be used to construct a"
" :class:`LinearRing`::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:640
msgid ""
"Returns a polygon object from the given bounding-box, a 4-tuple comprising "
"``(xmin, ymin, xmax, ymax)``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:645
msgid "Returns the number of interior rings in this geometry."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:647
msgid "Comparing Polygons"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:649
msgid ""
"Note that it is possible to compare ``Polygon`` objects directly with ``<`` "
"or ``>``, but as the comparison is made through Polygon's "
":class:`LineString`, it does not mean much (but is consistent and quick). "
"You can always force the comparison with the :attr:`~GEOSGeometry.area` "
"property::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:659
msgid "Geometry Collections"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:662
msgid "``MultiPoint``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:666
msgid ""
"``MultiPoint`` objects may be instantiated by passing in one or more "
":class:`Point` objects as arguments, or a single sequence of :class:`Point` "
"objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:674
msgid "``MultiLineString``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:678
msgid ""
"``MultiLineString`` objects may be instantiated by passing in one or more "
":class:`LineString` objects as arguments, or a single sequence of "
":class:`LineString` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:689
msgid ""
"Returns a :class:`LineString` representing the line merge of all the "
"components in this ``MultiLineString``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:694
msgid "``MultiPolygon``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:698
msgid ""
"``MultiPolygon`` objects may be instantiated by passing one or more "
":class:`Polygon` objects as arguments, or a single sequence of "
":class:`Polygon` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:709
msgid ""
"Returns a :class:`Polygon` that is the union of all of the component "
"polygons in this collection.  The algorithm employed is significantly more "
"efficient (faster) than trying to union the geometries together "
"individually. [#fncascadedunion]_"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:715
msgid "``GeometryCollection``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:719
msgid ""
"``GeometryCollection`` objects may be instantiated by passing in one or more"
" other :class:`GEOSGeometry` as arguments, or a single sequence of "
":class:`GEOSGeometry` objects::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:730
msgid "Prepared Geometries"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:732
msgid ""
"In order to obtain a prepared geometry, just access the "
":attr:`GEOSGeometry.prepared` property.  Once you have a "
"``PreparedGeometry`` instance its spatial predicate methods, listed below, "
"may be used with other ``GEOSGeometry`` objects.  An operation with a "
"prepared geometry can be orders of magnitude faster -- the more complex the "
"geometry that is prepared, the larger the speedup in the operation.  For "
"more information, please consult the `GEOS wiki page on prepared geometries "
"<http://trac.osgeo.org/geos/wiki/PreparedGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:749
msgid "``PreparedGeometry``"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:753
msgid ""
"All methods on ``PreparedGeometry`` take an ``other`` argument, which must "
"be a :class:`GEOSGeometry` instance."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:768 ../../ref/contrib/gis/geos.txt:776
#: ../../ref/contrib/gis/geos.txt:786 ../../ref/contrib/gis/geos.txt:794
#: ../../ref/contrib/gis/geos.txt:802
msgid "GEOS 3.3 is *required* to use this predicate."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:805
msgid "Geometry Factories"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:809
msgid "input file that contains spatial data"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:811
msgid "a :class:`GEOSGeometry` corresponding to the spatial data in the file"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:820
msgid "string that contains spatial data"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:824
msgid ""
"a :class:`GEOSGeometry` corresponding to the spatial data in the string"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:826
msgid ""
"``fromstr(string, srid)`` is equivalent to :class:`GEOSGeometry(string, "
"srid) <GEOSGeometry>`."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:835
msgid "I/O Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:838
msgid "Reader Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:840
msgid ""
"The reader I/O classes simply return a :class:`GEOSGeometry` instance from "
"the WKB and/or WKT input given to their ``read(geom)`` method."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:862
msgid "Writer Objects"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:864
msgid ""
"All writer objects have a ``write(geom)`` method that returns either the WKB"
" or WKT of the given geometry.  In addition, :class:`WKBWriter` objects also"
" have properties that may be used to change the byte order, and or include "
"the SRID value (in other words, EWKB)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:871
msgid ""
"``WKBWriter`` provides the most control over its output.  By default it "
"returns OGC-compliant WKB when its ``write`` method is called.  However, it "
"has properties that allow for the creation of EWKB, a superset of the WKB "
"standard that includes additional information."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:878
msgid ""
"Returns the WKB of the given geometry as a Python ``buffer`` object. "
"Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:889
msgid "Returns WKB of the geometry in hexadecimal.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:899
msgid ""
"This property may be set to change the byte-order of the geometry "
"representation."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:903
msgid "Byteorder Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:905
msgid "Big Endian (e.g., compatible with RISC systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:906
msgid "Little Endian (e.g., compatible with x86 systems)"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:921
msgid ""
"This property may be set to change the output dimension of the geometry "
"representation.  In other words, if you have a 3D geometry then set to 3 so "
"that the Z value is included in the WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:926
msgid "Outdim Value"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:928
msgid "The default, output 2D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:929
msgid "Output 3D WKB."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:947
msgid ""
"Set this property with a boolean to indicate whether the SRID of the "
"geometry should be included with the WKB representation.  Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:963
msgid "Returns the WKT of the given geometry. Example::"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:973
msgid ""
"*See* `PostGIS EWKB, EWKT and Canonical Forms "
"<http://postgis.net/docs/using_postgis_dbmanagement.html#EWKB_EWKT>`_, "
"PostGIS documentation at Ch. 4.1.2."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:974
msgid ""
"For more information, read Paul Ramsey's blog post about `(Much) Faster "
"Unions in PostGIS 1.4 <http://blog.cleverelephant.ca/2009/01/must-faster-"
"unions-in-postgis-14.html>`_ and Martin Davis' blog post on `Fast polygon "
"merging in JTS using Cascaded Union <http://lin-ear-th-"
"inking.blogspot.com/2007/11/fast-polygon-merging-in-jts-using.html>`_."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:982
msgid "GEOS_LIBRARY_PATH"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:984
msgid ""
"A string specifying the location of the GEOS C library.  Typically, this "
"setting is only used if the GEOS C library is in a non-standard location "
"(e.g., ``/home/bob/lib/libgeos_c.so``)."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:990
#: ../../ref/contrib/gis/install/geolibs.txt:156
msgid ""
"The setting must be the *full* path to the **C** shared library; in other "
"words you want to use ``libgeos_c.so``, not ``libgeos.so``."
msgstr ""

#: ../../ref/contrib/gis/geos.txt:994
msgid "Exceptions"
msgstr ""

#: ../../ref/contrib/gis/geos.txt:998
msgid "The base GEOS exception, indicates a GEOS-related error."
msgstr ""

#: ../../ref/contrib/gis/index.txt:3
msgid "GeoDjango"
msgstr ""

#: ../../ref/contrib/gis/index.txt:8
msgid ""
"GeoDjango intends to be a world-class geographic Web framework. Its goal is "
"to make it as easy as possible to build GIS Web applications and harness the"
" power of spatially enabled data."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:3
msgid "Installing Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:5
msgid ""
"GeoDjango uses and/or provides interfaces for the following open source "
"geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:9
msgid "Program"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:9
msgid "Required"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:9
#: ../../ref/contrib/gis/install/index.txt:59
msgid "Supported Versions"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
msgid ":doc:`GEOS <../geos>`"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
msgid "Geometry Engine Open Source"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
msgid "Yes"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:11
msgid "3.4, 3.3, 3.2"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:12
msgid "`PROJ.4`_"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:12
msgid "Cartographic Projections library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:12
msgid "Yes (PostgreSQL and SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:12
msgid "4.8, 4.7, 4.6, 4.5, 4.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
msgid ":doc:`GDAL <../gdal>`"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
msgid "Geospatial Data Abstraction Library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
#: ../../ref/contrib/gis/install/geolibs.txt:16
msgid "Yes (SQLite only)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:13
msgid "1.10, 1.9, 1.8, 1.7"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
msgid ":doc:`GeoIP <../geoip>`"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
msgid "IP-based geolocation library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
msgid "No"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:14
msgid "1.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
msgid "`PostGIS`__"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
msgid "Spatial extensions for PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
msgid "Yes (PostgreSQL only)"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:15
msgid "2.1, 2.0, 1.5"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
msgid "`SpatiaLite`__"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
msgid "Spatial extensions for SQLite"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:16
msgid "4.1, 4.0, 3.0, 2.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:19
msgid ""
"Note that older or more recent versions of these libraries *may* also work "
"totally fine with GeoDjango. Your mileage may vary."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:40
msgid "Install GDAL"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:42
msgid ""
"While :ref:`gdalbuild` is technically not required, it is *recommended*. "
"Important features of GeoDjango (including the :doc:`../layermapping`, "
"geometry reprojection, and the geographic admin) depend on its "
"functionality."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:49
msgid ""
"The GeoDjango interfaces to GEOS, GDAL, and GeoIP may be used independently "
"of Django.  In other words, no database or settings file required -- just "
"import them as normal from :mod:`django.contrib.gis`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:58
msgid ""
"On Debian/Ubuntu, you are advised to install the following packages which "
"will install, directly or by dependency, the required geospatial libraries:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:65
msgid "Optional packages to consider:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:67
msgid "``libgeoip1``: for :doc:`GeoIP <../geoip>` support"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:68
msgid "``gdal-bin``: for GDAL command line programs like ``ogr2ogr``"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:69
msgid ""
"``python-gdal`` for GDAL's own Python bindings -- includes interfaces for "
"raster manipulation"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:71
msgid ""
"Please also consult platform-specific instructions if you are on "
":ref:`macosx` or :ref:`windows`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:77
#: ../../ref/contrib/gis/install/postgis.txt:25
msgid "Building from source"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:79
msgid ""
"When installing from source on UNIX and GNU/Linux systems, please follow the"
" installation instructions carefully, and install the libraries in the given"
" order.  If using MySQL or Oracle as the spatial database, only GEOS is "
"required."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:86
msgid ""
"On Linux platforms, it may be necessary to run the ``ldconfig`` command "
"after installing each library.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:94
msgid ""
"OS X users are required to install `Apple Developer Tools`_ in order to "
"compile software from source.  This is typically included on your OS X "
"installation DVDs."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:103
#: ../../ref/contrib/gis/install/index.txt:62
#: ../../ref/contrib/gis/install/index.txt:63
#: ../../ref/contrib/gis/install/index.txt:286
msgid "GEOS"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:105
msgid ""
"GEOS is a C++ library for performing geometric operations, and is the "
"default internal geometry representation used by GeoDjango (it's behind the "
"\"lazy\" geometries).  Specifically, the C API library is called (e.g., "
"``libgeos_c.so``) directly from Python using ctypes."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:110
msgid ""
"First, download GEOS 3.3.8 from the GEOS Web site and untar the source "
"archive::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:116
msgid ""
"Next, change into the directory where GEOS was unpacked, run the configure "
"script, compile, and install::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:129
msgid "Can't find GEOS library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:131
msgid "When GeoDjango can't find GEOS, this error is raised:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:137
msgid ""
"The most common solution is to properly configure your :ref:`libsettings` "
"*or* set :ref:`geoslibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:140
msgid ""
"If using a binary package of GEOS (e.g., on Ubuntu), you may need to "
":ref:`binutils`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:145
msgid "``GEOS_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:147
msgid ""
"If your GEOS library is in a non-standard location, or you don't want to "
"modify the system's library path then the :setting:`GEOS_LIBRARY_PATH` "
"setting may be added to your Django settings file with the full path to the "
"GEOS C library.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:159
msgid ""
"See also :ref:`My logs are filled with GEOS-related errors <geos-exceptions-"
"in-logfile>`."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:164
msgid "PROJ.4"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:166
msgid ""
"`PROJ.4`_ is a library for converting geospatial data to different "
"coordinate reference systems."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:169
msgid "First, download the PROJ.4 source code and datum shifting files [#]_::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:174
msgid ""
"Next, untar the source code archive, and extract the datum shifting files in"
" the ``nad`` subdirectory.  This must be done *prior* to configuration::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:182
msgid "Finally, configure, make and install PROJ.4::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:192
#: ../../ref/contrib/gis/install/index.txt:288
msgid "GDAL"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:194
msgid ""
"`GDAL`__ is an excellent open source geospatial library that has support for"
" reading most vector and raster spatial data formats.  Currently, GeoDjango "
"only supports :doc:`GDAL's vector data <../gdal>` capabilities [#]_. "
":ref:`geosbuild` and :ref:`proj4` should be installed prior to building "
"GDAL."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:199
msgid "First download the latest GDAL release version and untar the archive::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:205
msgid "Configure, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:214
msgid ""
"Because GeoDjango has its own Python interface, the preceding instructions "
"do not build GDAL's own Python bindings.  The bindings may be built by "
"adding the ``--with-python`` flag when running ``configure``.  See `GDAL/OGR"
" In Python`__ for more information on GDAL's bindings."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:219
msgid ""
"If you have any problems, please see the troubleshooting section below for "
"suggestions and solutions."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:231
msgid "Can't find GDAL library"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:233
msgid ""
"When GeoDjango can't find the GDAL library, the ``HAS_GDAL`` flag will be "
"false:"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:242
msgid ""
"The solution is to properly configure your :ref:`libsettings` *or* set "
":ref:`gdallibrarypath` in your settings."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:248
msgid "``GDAL_LIBRARY_PATH``"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:250
msgid ""
"If your GDAL library is in a non-standard location, or you don't want to "
"modify the system's library path then the :setting:`GDAL_LIBRARY_PATH` "
"setting may be added to your Django settings file with the full path to the "
"GDAL library.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:259
msgid ""
"The datum shifting files are needed for converting data to and from certain "
"projections. For example, the PROJ.4 string for the `Google projection "
"(900913 or 3857) <http://spatialreference.org/ref/sr-org/6864/prj/>`_ "
"requires the ``null`` grid file only included in the extra datum shifting "
"files. It is easier to install the shifting files now, then to have debug a "
"problem caused by their absence later."
msgstr ""

#: ../../ref/contrib/gis/install/geolibs.txt:266
msgid ""
"Specifically, GeoDjango provides support for the `OGR "
"<http://gdal.org/ogr>`_ library, a component of GDAL."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:3
msgid "GeoDjango Installation"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:9
msgid "In general, GeoDjango installation requires:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:11
msgid ":ref:`Python and Django <django>`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:12
msgid ":ref:`spatial_database`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:13
msgid ":doc:`geolibs`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:15
msgid ""
"Details for each of the requirements and installation instructions are "
"provided in the sections below. In addition, platform-specific instructions "
"are available for:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:19
msgid ":ref:`macosx`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:20
msgid ":ref:`windows`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:22
msgid "Use the Source"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:24
msgid ""
"Because GeoDjango takes advantage of the latest in the open source "
"geospatial software technology, recent versions of the libraries are "
"necessary. If binary packages aren't available for your platform, "
"installation from source may be required. When compiling the libraries from "
"source, please follow the directions closely, especially if you're a "
"beginner."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:31
msgid "Requirements"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:36
msgid "Python and Django"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:38
msgid ""
"Because GeoDjango is included with Django, please refer to Django's "
":ref:`installation instructions <installing-official-release>` for details "
"on how to install."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:45
msgid "Spatial database"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:46
msgid ""
"PostgreSQL (with PostGIS), MySQL (mostly with MyISAM engine), Oracle, and "
"SQLite (with SpatiaLite) are the spatial databases currently supported."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:51
msgid ""
"PostGIS is recommended, because it is the most mature and feature-rich open "
"source spatial database."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:54
msgid ""
"The geospatial libraries required for a GeoDjango installation depends on "
"the spatial database used.  The following lists the library requirements, "
"supported versions, and any notes for each of the supported database "
"backends:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:59
msgid "Library Requirements"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:59
#: ../../ref/templates/language.txt:576
msgid "Notes"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:61
#: ../../ref/contrib/gis/install/index.txt:401
msgid "PostgreSQL"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:61
msgid "GEOS, PROJ.4, PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:61
msgid "9.0+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:61
msgid "Requires PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:62
msgid "5.5+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:62
msgid ""
"Not OGC-compliant; :ref:`limited functionality <mysql-spatial-limitations>`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:63
msgid "11.1+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:63
msgid "XE not supported."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
#: ../../ref/contrib/gis/install/spatialite.txt:29
#: ../../ref/models/querysets.txt:2903 ../../ref/models/querysets.txt:2937
msgid "SQLite"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
msgid "GEOS, GDAL, PROJ.4, SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
msgid "3.6.+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:64
msgid "Requires SpatiaLite 2.4+, pysqlite2 2.5+"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:67
msgid ""
"See also `this comparison matrix`__ on the OSGeo Wiki for "
"PostgreSQL/PostGIS/GEOS/GDAL possible combinations."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:76
msgid "Geospatial libraries"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:84
msgid "Database installation"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:93
msgid "Add ``django.contrib.gis`` to :setting:`INSTALLED_APPS`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:95
msgid ""
"Like other Django contrib applications, you will *only* need to add "
":mod:`django.contrib.gis` to :setting:`INSTALLED_APPS` in your settings. "
"This is the so that ``gis`` templates can be located -- if not done, then "
"features such as the geographic admin or KML sitemaps will not function "
"properly."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:103
msgid ""
"If you can't find the solution to your problem here then participate in the "
"community!  You can:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:106
msgid ""
"Join the ``#geodjango`` IRC channel on Freenode. Please be patient and "
"polite -- while you may not get an immediate response, someone will attempt "
"to answer your question as soon as they see it."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:109
msgid "Ask your question on the `GeoDjango`__ mailing list."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:110
msgid ""
"File a ticket on the `Django trac`__ if you think there's a bug.  Make sure "
"to provide a complete description of the problem, versions used, and specify"
" the component as \"GIS\"."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:120
msgid "Library environment settings"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:122
msgid ""
"By far, the most common problem when installing GeoDjango is that the "
"external shared libraries (e.g., for GEOS and GDAL) cannot be located. [#]_ "
"Typically, the cause of this problem is that the operating system isn't "
"aware of the directory where the libraries built from source were installed."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:127
msgid ""
"In general, the library path may be set on a per-user basis by setting an "
"environment variable, or by configuring the library path for the entire "
"system."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:132
msgid "``LD_LIBRARY_PATH`` environment variable"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:134
msgid ""
"A user may set this environment variable to customize the library paths they"
" want to use.  The typical library directory for software built from source "
"is ``/usr/local/lib``.  Thus, ``/usr/local/lib`` needs to be included in the"
" ``LD_LIBRARY_PATH`` variable.  For example, the user could place the "
"following in their bash profile::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:143
msgid "Setting system library path"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:145
msgid ""
"On GNU/Linux systems, there is typically a file in ``/etc/ld.so.conf``, "
"which may include additional paths from files in another directory, such as "
"``/etc/ld.so.conf.d``. As the root user, add the custom library path (like "
"``/usr/local/lib``) on a new line in ``ld.so.conf``.  This is *one* example "
"of how to do so::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:153
msgid ""
"For OpenSolaris users, the system library path may be modified using the "
"``crle`` utility.  Run ``crle`` with no options to see the current "
"configuration and use ``crle -l`` to set with the new library path.  Be "
"*very* careful when modifying the system library path::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:163
msgid "Install ``binutils``"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:165
msgid ""
"GeoDjango uses the ``find_library`` function (from the ``ctypes.util`` "
"Python module) to discover libraries.  The ``find_library`` routine uses a "
"program called ``objdump`` (part of the ``binutils`` package) to verify a "
"shared library on GNU/Linux systems.  Thus, if ``binutils`` is not installed"
" on your Linux system then Python's ctypes may not be able to find your "
"library even if your library path is set correctly and geospatial libraries "
"were built perfectly."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:172
msgid ""
"The ``binutils`` package may be installed on Debian and Ubuntu systems using"
" the following command::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:177
msgid "Similarly, on Red Hat and CentOS systems::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:182
msgid "Platform-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:187
msgid "Mac OS X"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:189
msgid ""
"Because of the variety of packaging systems available for OS X, users have "
"several different options for installing GeoDjango. These options are:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:192
msgid ":ref:`postgresapp` (easiest and recommended)"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:193
msgid ":ref:`homebrew`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:194
msgid ":ref:`kyngchaos`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:195
msgid ":ref:`fink`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:196
msgid ":ref:`macports`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:197
msgid ":ref:`build_from_source`"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:199
msgid ""
"This section also includes instructions for installing an upgraded version "
"of :ref:`macosx_python` from packages provided by the Python Software "
"Foundation, however, this is not required."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:206
#: ../../ref/contrib/gis/install/index.txt:385
msgid "Python"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:208
msgid ""
"Although OS X comes with Python installed, users can use framework "
"installers (`2.7`__, `3.2`__ and `3.3`__ are available) provided by the "
"Python Software Foundation.  An advantage to using the installer is that OS "
"X's Python will remain \"pristine\" for internal operating system use."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:220
msgid ""
"You will need to modify the ``PATH`` environment variable in your "
"``.profile`` file so that the new version of Python is used when ``python`` "
"is entered at the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:229
msgid "Postgres.app"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:231
msgid ""
"`Postgres.app <http://postgresapp.com/>`_ is a standalone PostgreSQL server "
"that includes the PostGIS extension. You will also need to install ``gdal`` "
"and ``libgeoip`` with :ref:`homebrew`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:235
msgid ""
"After installing Postgres.app, add the following to your ``.bash_profile`` "
"so you can run the package's programs from the command-line. Replace ``X.Y``"
" with the version of PostgreSQL in the Postgres.app you installed:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:243
msgid ""
"You can check if the path is set up correctly by typing ``which psql`` at a "
"terminal prompt."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:249
#: ../../ref/contrib/gis/install/spatialite.txt:166
msgid "Homebrew"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:251
msgid ""
"`Homebrew`__ provides \"recipes\" for building binaries and packages from "
"source. It provides recipes for the GeoDjango prerequisites on Macintosh "
"computers running OS X. Because Homebrew still builds the software from "
"source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:256
#: ../../ref/contrib/gis/install/index.txt:346
msgid "Summary::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:269
msgid "KyngChaos packages"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:271
msgid ""
"William Kyngesburye provides a number of `geospatial library binary "
"packages`__ that make it simple to get GeoDjango installed on OS X without "
"compiling them from source.  However, the `Apple Developer Tools`_ are still"
" necessary for compiling the Python database adapters "
":ref:`psycopg2_kyngchaos` (for PostGIS) and :ref:`pysqlite2` (for "
"SpatiaLite)."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:279
msgid ""
"SpatiaLite users should consult the :ref:`spatialite_macosx` section after "
"installing the packages for additional instructions."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:282
msgid "Download the framework packages for:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:284
msgid "UnixImageIO"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:285
msgid "PROJ"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:287
msgid "SQLite3 (includes the SpatiaLite library)"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:290
msgid ""
"Install the packages in the order they are listed above, as the GDAL and "
"SQLite packages require the packages listed before them."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:293
msgid ""
"Afterwards, you can also install the KyngChaos binary packages for "
"`PostgreSQL and PostGIS`__."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:296
msgid ""
"After installing the binary packages, you'll want to add the following to "
"your ``.profile`` to be able to run the package programs from the command-"
"line::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:312
#: ../../ref/contrib/gis/install/index.txt:452
msgid "psycopg2"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:314
msgid ""
"After you've installed the KyngChaos binaries and modified your ``PATH``, as"
" described above, ``psycopg2`` may be installed using the following "
"command::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:321
msgid ""
"If you don't have ``pip``, follow the :ref:`installation instructions "
"<installing-official-release>` to install it."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:327
msgid "Fink"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:329
msgid ""
"`Kurt Schwehr`__ has been gracious enough to create GeoDjango packages for "
"users of the `Fink`__ package system. `Different packages are available`__ "
"(starting with \"django-gis\"), depending on which version of Python you "
"want to use."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:340
msgid "MacPorts"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:342
msgid ""
"`MacPorts`__ may be used to install GeoDjango prerequisites on Macintosh "
"computers running OS X.  Because MacPorts still builds the software from "
"source, the `Apple Developer Tools`_ are required."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:357
msgid ""
"You will also have to modify the ``PATH`` in your ``.profile`` so that the "
"MacPorts programs are accessible from the command-line::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:362
msgid ""
"In addition, add the ``DYLD_FALLBACK_LIBRARY_PATH`` setting so that the "
"libraries can be found by Python::"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:372
#: ../../ref/contrib/gis/testing.txt:93
msgid "Windows"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:374
msgid ""
"Proceed through the following sections sequentially in order to install "
"GeoDjango on Windows."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:379
msgid ""
"These instructions assume that you are using 32-bit versions of all "
"programs.  While 64-bit versions of Python and PostgreSQL 9.x are available,"
" 64-bit versions of spatial libraries, like GEOS and GDAL, are not yet "
"provided by the :ref:`OSGeo4W` installer."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:387
msgid ""
"First, download the latest `Python 2.7 installer`__ from the Python Web "
"site. Next, run the installer and keep the defaults -- for example, keep "
"'Install for all users' checked and the installation path set as "
"``C:\\Python27``."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:394
msgid ""
"You may already have a version of Python installed in ``C:\\python`` as ESRI"
" products sometimes install a copy there.  *You should still install a fresh"
" version of Python 2.7.*"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:403
msgid ""
"First, download the latest `PostgreSQL 9.x installer`__ from the "
"`EnterpriseDB`__ Web site.  After downloading, simply run the installer, "
"follow the on-screen directions, and keep the default options unless you "
"know the consequences of changing them."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:410
msgid ""
"The PostgreSQL installer creates both a new Windows user to be the 'postgres"
" service account' and a ``postgres`` database superuser You will be prompted"
" once to set the password for both accounts -- make sure to remember it!"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:415
msgid ""
"When the installer completes, it will ask to launch the Application Stack "
"Builder (ASB) on exit -- keep this checked, as it is necessary to install "
":ref:`postgisasb`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:421
msgid ""
"If installed successfully, the PostgreSQL server will run in the background "
"each time the system as started as a Windows service. A "
":menuselection:`PostgreSQL 9.x` start menu group will created and contains "
"shortcuts for the ASB as well as the 'SQL Shell', which will launch a "
"``psql`` command window."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:435
msgid ""
"From within the Application Stack Builder (to run outside of the installer, "
":menuselection:`Start --> Programs --> PostgreSQL 9.x`), select "
":menuselection:`PostgreSQL Database Server 9.x on port 5432` from the drop "
"down menu.  Next, expand the :menuselection:`Categories --> Spatial "
"Extensions` menu tree and select :menuselection:`PostGIS X.Y for PostgreSQL "
"9.x`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:441
msgid ""
"After clicking next, you will be prompted to select your mirror, PostGIS "
"will be downloaded, and the PostGIS installer will begin.  Select only the "
"default options during install (e.g., do not uncheck the option to create a "
"default PostGIS database)."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:448
msgid ""
"You will be prompted to enter your ``postgres`` database superuser password "
"in the 'Database Connection Information' dialog."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:454
msgid ""
"The ``psycopg2`` Python module provides the interface between Python and the"
" PostgreSQL database.  Download the latest `Windows installer`__ for your "
"version of Python and PostgreSQL and run using the default settings. [#]_"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:463
msgid "OSGeo4W"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:465
msgid ""
"The `OSGeo4W installer`_ makes it simple to install the PROJ.4, GDAL, and "
"GEOS libraries required by GeoDjango.  First, download the `OSGeo4W "
"installer`_, and run it.  Select :menuselection:`Express Web-GIS Install` "
"and click next. In the 'Select Packages' list, ensure that GDAL is selected;"
" MapServer and Apache are also enabled by default, but are not required by "
"GeoDjango and may be unchecked safely.  After clicking next, the packages "
"will be automatically downloaded and installed, after which you may exit the"
" installer."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:477
msgid "Modify Windows environment"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:479
msgid ""
"In order to use GeoDjango, you will need to add your Python and OSGeo4W "
"directories to your Windows system ``Path``, as well as create ``GDAL_DATA``"
" and ``PROJ_LIB`` environment variables.  The following set of commands, "
"executable with ``cmd.exe``, will set this up:"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:495
msgid ""
"For your convenience, these commands are available in the executable batch "
"script, :download:`geodjango_setup.bat`."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:500
msgid ""
"Administrator privileges are required to execute these commands. To do this,"
" right-click on :download:`geodjango_setup.bat` and select "
":menuselection:`Run as administrator`. You need to log out and log back in "
"again for the settings to take effect."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:507
msgid ""
"If you customized the Python or OSGeo4W installation directories, then you "
"will need to modify the ``OSGEO4W_ROOT`` and/or ``PYTHON_ROOT`` variables "
"accordingly."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:512
msgid "Install Django and set up database"
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:514
msgid ""
"Finally, :ref:`install Django <installing-official-release>` on your system."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:517
msgid ""
"GeoDjango uses the :func:`~ctypes.util.find_library` routine from "
"``ctypes.util`` to locate shared libraries."
msgstr ""

#: ../../ref/contrib/gis/install/index.txt:519
msgid ""
"The ``psycopg2`` Windows installers are packaged and maintained by `Jason "
"Erickson <http://www.stickpeople.com/projects/python/win-psycopg/>`_."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:3
msgid "Installing PostGIS"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:5
msgid ""
"`PostGIS`__ adds geographic object support to PostgreSQL, turning it into a "
"spatial database. :ref:`geosbuild`, :ref:`proj4` and :ref:`gdalbuild` should"
" be installed prior to building PostGIS. You might also need additional "
"libraries, see `PostGIS requirements`_."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:12
msgid ""
"The `psycopg2`_ module is required for use as the database adapter when "
"using GeoDjango with PostGIS."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:18
msgid ""
"On Debian/Ubuntu, you are advised to install the following packages: "
"postgresql-x.x, postgresql-x.x-postgis, postgresql-server-dev-x.x, python-"
"psycopg2 (x.x matching the PostgreSQL version you want to install). Please "
"also consult platform-specific instructions if you are on :ref:`macosx` or "
":ref:`windows`."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:27
msgid "First download the source archive, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:33
msgid "Next, configure, make and install PostGIS::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:37
msgid "Finally, make and install::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:45
msgid ""
"GeoDjango does not automatically create a spatial database.  Please consult "
"the section on :ref:`spatialdb_template91` or "
":ref:`spatialdb_template_earlier` for more information."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:52
msgid "Post-installation"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:58
msgid "Creating a spatial database with PostGIS 2.0 and PostgreSQL 9.1+"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:60
msgid ""
"PostGIS 2 includes an extension for Postgres 9.1+ that can be used to enable"
" spatial functionality::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:67
msgid ""
"GeoDjango does not currently leverage any `PostGIS topology "
"functionality`__. If you plan to use those features at some point, you can "
"also install the ``postgis_topology`` extension by issuing ``CREATE "
"EXTENSION postgis_topology;``."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:76
msgid ""
"The ``CREATE EXTENSION postgis`` command is now automatically run during the"
" :djadmin:`migrate` process. You can still create it manually if you wish."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:83
msgid "Creating a spatial database template for earlier versions"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:85
msgid ""
"If you have an earlier version of PostGIS or PostgreSQL, the CREATE "
"EXTENSION isn't available and you need to create the spatial database using "
"the following instructions."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:89
msgid ""
"Creating a spatial database with PostGIS is different than normal because "
"additional SQL must be loaded to enable spatial functionality.  Because of "
"the steps in this process, it's better to create a database template that "
"can be reused later."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:94
msgid ""
"First, you need to be able to execute the commands as a privileged database "
"user.  For example, you can use the following to become the ``postgres`` "
"user::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:101
msgid ""
"The location *and* name of the PostGIS SQL files (e.g., from "
"``POSTGIS_SQL_PATH`` below) depends on the version of PostGIS. Version 1.5 "
"uses ``<sharedir>/contrib/postgis-1.5/postgis.sql``."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:105
msgid ""
"To complicate matters, Debian/Ubuntu distributions have their own separate "
"directory naming system that might change with time. In this case, use the "
":download:`create_template_postgis-debian.sh` script."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:109
msgid ""
"The example below assumes PostGIS 1.5, thus you may need to modify "
"``POSTGIS_SQL_PATH`` and the name of the SQL file for the specific version "
"of PostGIS you are using."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:113
msgid ""
"Once you're a database super user, then you may execute the following "
"commands to create a PostGIS spatial database template::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:130
msgid ""
"These commands may be placed in a shell script for later use; for "
"convenience the following scripts are available:"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:134
msgid "PostGIS version"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:134
msgid "Bash shell script"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:136
msgid "1.5"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:136
msgid ":download:`create_template_postgis-1.5.sh`"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:137
msgid "Debian/Ubuntu"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:137
msgid ":download:`create_template_postgis-debian.sh`"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:140
msgid ""
"Afterwards, you may create a spatial database by simply specifying "
"``template_postgis`` as the template to use (via the ``-T`` option)::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:147
msgid ""
"While the ``createdb`` command does not require database super-user "
"privileges, it must be executed by a database user that has permissions to "
"create databases. You can create such a user with the following command::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:154
msgid "PostgreSQL's createdb fails"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:156
msgid ""
"When the PostgreSQL cluster uses a non-UTF8 encoding, the "
":file:`create_template_postgis-*.sh` script will fail when executing "
"``createdb``::"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:163
msgid ""
"The `current workaround`__ is to re-create the cluster using UTF8 (back up "
"any databases before dropping the cluster)."
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:169
msgid "Managing the database"
msgstr ""

#: ../../ref/contrib/gis/install/postgis.txt:171
msgid ""
"To administer the database, you can either use the pgAdmin III program "
"(:menuselection:`Start --> PostgreSQL 9.x --> pgAdmin III`) or the SQL Shell"
" (:menuselection:`Start --> PostgreSQL 9.x --> SQL Shell`). For example, to "
"create a ``geodjango`` spatial database and user, the following may be "
"executed from the SQL Shell as the ``postgres`` user::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:3
msgid "Installing Spatialite"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:5
msgid ""
"`SpatiaLite`__ adds spatial support to SQLite, turning it into a full-"
"featured spatial database."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:8
msgid ""
"Check first if you can install Spatialite from system packages or binaries. "
"For example, on Debian-based distributions, try to install the ``spatialite-"
"bin`` package. For Mac OS X, follow the :ref:`specific instructions "
"below<spatialite_macosx>`. For Windows, you may find binaries on `Gaia-"
"SINS`__ home page. In any case, you should always be able to :ref:`install "
"from source<spatialite_source>`."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:15
msgid ""
"When you are done with the installation process, skip to "
":ref:`create_spatialite_db`."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:23
msgid "Installing from source"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:25
msgid ""
":doc:`GEOS and PROJ.4</ref/contrib/gis/install/geolibs>` should be installed"
" prior to building SpatiaLite."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:31
msgid ""
"Check first if SQLite is compiled with the `R*Tree module`__. Run the "
"sqlite3 command line interface and enter the following query::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:36
msgid ""
"If you obtain an error, you will have to recompile SQLite from source. "
"Otherwise, just skip this section."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:39
msgid ""
"To install from sources, download the latest amalgamation source archive "
"from the `SQLite download page`__, and extract::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:46
msgid ""
"Next, run the ``configure`` script -- however the ``CFLAGS`` environment "
"variable needs to be customized so that SQLite knows to build the R*Tree "
"module::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:60
msgid "SpatiaLite library (``libspatialite``)"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:62
msgid ""
"Get the latest SpatiaLite library source bundle from the `download page`__::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:74
msgid ""
"For Mac OS X users building from source, the SpatiaLite library *and* tools "
"need to have their ``target`` configured::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:84
msgid "pysqlite2"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:86
msgid ""
"If you've decided to use a :ref:`newer version of pysqlite2 <using-newer-"
"versions-of-pysqlite>` instead of the ``sqlite3`` Python stdlib module, then"
" you need to make sure it can load external extensions (i.e. the required "
"``enable_load_extension`` method is available so ``SpatiaLite`` can be "
"loaded)."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:92
msgid ""
"This might involve building it yourself. For this, download pysqlite2 2.6, "
"and untar::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:99
msgid ""
"Next, use a text editor to edit the ``setup.cfg`` file to look like the "
"following:"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:111
msgid "or if you are on Mac OS X:"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:124
msgid ""
"The important thing here is to make sure you comment out the "
"``define=SQLITE_OMIT_LOAD_EXTENSION`` flag and that the ``include_dirs`` and"
" ``library_dirs`` settings are uncommented and set to the appropriate path "
"if the SQLite header files and libraries are not in ``/usr/include`` and "
"``/usr/lib``, respectively."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:130
msgid ""
"After modifying ``setup.cfg`` appropriately, then run the ``setup.py`` "
"script to build and install::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:138
msgid "Mac OS X-specific instructions"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:140
msgid ""
"To install the SpatiaLite library and tools, Mac OS X users can choose "
"between :ref:`kyngchaos` and `Homebrew`_."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:144
msgid "KyngChaos"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:146
msgid "First, follow the instructions in the :ref:`kyngchaos` section."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:148
msgid ""
"When :ref:`create_spatialite_db`, the ``spatialite`` program is required. "
"However, instead of attempting to compile the SpatiaLite tools from source, "
"download the `SpatiaLite Binaries`__ for OS X, and install ``spatialite`` in"
" a location available in your ``PATH``.  For example::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:158
msgid ""
"Finally, for GeoDjango to be able to find the KyngChaos SpatiaLite library, "
"add the following to your ``settings.py``::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:168
msgid ""
"`Homebrew`_ handles all the SpatiaLite related packages on your behalf, "
"including SQLite3, SpatiaLite, PROJ, and GEOS. Install them like this::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:175
msgid ""
"Finally, for GeoDjango to be able to find the SpatiaLite library, add the "
"following to your ``settings.py``::"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:185
msgid "Creating a spatial database for SpatiaLite"
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:187
msgid ""
"When running ``manage.py migrate`` with a SQLite or SpatiaLite database, the"
" database file will be automatically created if it doesn't exist. Django "
"will also ensure that the spatial metadata are initialized in the database."
msgstr ""

#: ../../ref/contrib/gis/install/spatialite.txt:193
msgid ""
"Prior to Django 1.8, you had to initialize spatial metadata tables yourself "
"by manually running the \"SELECT InitSpatialMetaData();\" query."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:3
msgid "``LayerMapping`` data import utility"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:10
msgid ""
"The :class:`LayerMapping` class provides a way to map the contents of vector"
" spatial data files (e.g. shapefiles) into GeoDjango models."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:13
msgid ""
"This utility grew out of the author's personal needs to eliminate the code "
"repetition that went into pulling geometries and fields out of a vector "
"layer, converting to another coordinate system (e.g. WGS84), and then "
"inserting into a GeoDjango model."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:20
msgid "Use of :class:`LayerMapping` requires GDAL."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:24
msgid ""
"GIS data sources, like shapefiles, may be very large.  If you find that "
":class:`LayerMapping` is using too much memory, set :setting:`DEBUG` to "
"``False`` in your settings.  When :setting:`DEBUG` is set to ``True``, "
"Django :ref:`automatically logs <faq-see-raw-sql-queries>` *every* SQL query"
" -- thus, when SQL statements contain geometries, it is easy to consume more"
" memory than is typical."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:34
msgid ""
"You need a GDAL-supported data source, like a shapefile (here we're using a "
"simple polygon shapefile, ``test_poly.shp``, with three features)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:53
msgid ""
"Now we define our corresponding Django model (make sure to use "
":djadmin:`migrate`)::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:65
msgid ""
"Use :class:`LayerMapping` to extract all the features and place them in the "
"database::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:79
msgid ""
"Here, :class:`LayerMapping` just transformed the three geometries from the "
"shapefile in their original spatial reference system (WGS84) to the spatial "
"reference system of the GeoDjango model (NAD83).  If no spatial reference "
"system is defined for the layer, use the ``source_srs`` keyword with a "
":class:`~django.contrib.gis.gdal.SpatialReference` object to specify one."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:86
msgid "``LayerMapping`` API"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:90
msgid ""
"The following are the arguments and keywords that may be used during "
"instantiation of ``LayerMapping`` objects."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:94 ../../ref/models/fields.txt:644
#: ../../ref/signals.txt:74 ../../ref/signals.txt:298
#: ../../ref/signals.txt:325 ../../ref/templates/builtins.txt:738
#: ../../ref/templates/builtins.txt:1016 ../../ref/templates/builtins.txt:2460
msgid "Argument"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:96 ../../ref/signals.txt:255
#: ../../ref/signals.txt:310 ../../ref/signals.txt:337
msgid "``model``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:96
msgid "The geographic model, *not* an instance."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:98
msgid "``data_source``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:98
msgid ""
"The path to the OGR-supported data source file (e.g., a shapefile).  Also "
"accepts :class:`django.contrib.gis.gdal.DataSource` instances."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:102
#: ../../ref/contrib/gis/ogrinspect.txt:17
msgid "``mapping``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:102
msgid ""
"A dictionary: keys are strings corresponding to the model field, and values "
"correspond to string field names for the OGR feature, or if the model field "
"is a geographic then it should correspond to the OGR geometry type, e.g., "
"``'POINT'``, ``'LINESTRING'``, ``'POLYGON'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:113
msgid "``layer``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:113
msgid "The index of the layer to use from the Data Source (defaults to 0)"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:116
msgid "``source_srs``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:116
msgid ""
"Use this to specify the source SRS manually (for example, some shapefiles "
"don't come with a ``'.prj'`` file).  An integer SRID, WKT or PROJ.4 strings,"
" and :class:`django.contrib.gis.gdal.SpatialReference` objects are accepted."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:122
msgid "``encoding``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:122
msgid ""
"Specifies the character set encoding of the strings in the OGR data source."
"  For example, ``'latin-1'``, ``'utf-8'``, and ``'cp437'`` are all valid "
"encoding parameters."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:127
msgid "``transaction_mode``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:127
msgid "May be ``'commit_on_success'`` (default) or ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:130
msgid ""
"Setting this to False will disable coordinate transformations.  In other "
"words, geometries will be inserted into the database unmodified from their "
"original state in the data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:135 ../../ref/models/fields.txt:300
msgid "``unique``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:135
msgid ""
"Setting this to the name, or a tuple of names, from the given  model will "
"create models unique only to the given name(s). Geometries will from each "
"feature will be added into the collection associated with the unique model."
"  Forces the transaction mode to be ``'autocommit'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:142 ../../ref/signals.txt:124
#: ../../ref/signals.txt:157 ../../ref/signals.txt:181
#: ../../ref/signals.txt:205 ../../ref/signals.txt:265
#: ../../ref/signals.txt:315 ../../ref/signals.txt:343
#: ../../ref/signals.txt:406 ../../ref/signals.txt:494
#: ../../ref/template-response.txt:107 ../../ref/template-response.txt:244
msgid "``using``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:142
msgid ""
"Sets the database to use when importing spatial data. Default is "
"``'default'``."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:147
msgid "``save()`` Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:151
msgid ""
"The ``save()`` method also accepts keywords.  These keywords are used for "
"controlling output logging, error handling, and for importing specific "
"feature ranges."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:156
msgid "Save Keyword Arguments"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:158
msgid "``fid_range``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:158
msgid ""
"May be set with a slice or tuple of (begin, end) feature ID's to map from "
"the data source.  In other words, this keyword enables the user to "
"selectively import a subset range of features in the geographic data source."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:165
msgid "``progress``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:165
msgid ""
"When this keyword is set, status information will be printed giving the "
"number of features processed and successfully saved.  By default, progress "
"information will be printed every 1000 features processed, however, this "
"default may be overridden by setting this keyword with an integer for the "
"desired interval."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:173
msgid "``silent``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:173
msgid ""
"By default, non-fatal error notifications are printed to ``sys.stdout``, but"
" this keyword may be set to disable these notifications."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:177
msgid "``step``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:177
msgid ""
"If set with an integer, transactions will occur at every step interval. For "
"example, if ``step=1000``, a commit would occur after the 1,000th feature, "
"the 2,000th feature etc."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:183
msgid "``stream``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:183
msgid ""
"Status information will be written to this file handle.  Defaults to using "
"``sys.stdout``, but any object with a ``write`` method is supported."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:187
msgid "``strict``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:187
msgid ""
"Execution of the model mapping will cease upon the first error encountered."
"  The default value (``False``) behavior is to attempt to continue."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:192
msgid "``verbose``"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:192
msgid ""
"If set, information will be printed subsequent to each model save executed "
"on the database."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:201
msgid "Running out of memory"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:203
msgid ""
"As noted in the warning at the top of this section, Django stores all SQL "
"queries when ``DEBUG=True``.  Set ``DEBUG=False`` in your settings, and this"
" should stop excessive memory use when running ``LayerMapping`` scripts."
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:208
msgid "MySQL: ``max_allowed_packet`` error"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:210
msgid ""
"If you encounter the following error when using ``LayerMapping`` and MySQL::"
msgstr ""

#: ../../ref/contrib/gis/layermapping.txt:214
msgid ""
"Then the solution is to increase the value of the ``max_allowed_packet`` "
"setting in your MySQL configuration.  For example, the default value may be "
"something low like one megabyte -- the setting may be modified in MySQL's "
"configuration file (``my.cnf``) in the ``[mysqld]`` section::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:3
msgid "Measurement Objects"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:8
msgid ""
"The :mod:`django.contrib.gis.measure` module contains objects that allow for"
" convenient representation of distance and area units of measure. [#]_ "
"Specifically, it implements two objects, :class:`Distance` and :class:`Area`"
" -- both of which may be accessed via the :class:`D` and :class:`A` "
"convenience aliases, respectively."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:17
msgid ""
":class:`Distance` objects may be instantiated using a keyword argument "
"indicating the context of the units.  In the example below, two different "
"distance objects are instantiated in units of kilometers (``km``) and miles "
"(``mi``)::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:29
msgid ""
"Conversions are easy, just access the preferred unit attribute to get a "
"converted distance quantity::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:37
msgid ""
"Moreover, arithmetic operations may be performed between the distance "
"objects::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:45
msgid ""
"Two :class:`Distance` objects multiplied together will yield an "
":class:`Area` object, which uses squared units of measure::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:52
msgid ""
"To determine what the attribute abbreviation of a unit is, the "
"``unit_attname`` class method may be used::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:63
msgid "Supported units"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:66
msgid "Unit Attribute"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:66
msgid "Full name or alias(es)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
msgid "``km``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:68
msgid "Kilometre, Kilometer"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:69
msgid "``mi``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:69
msgid "Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
msgid "``m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:70
msgid "Meter, Metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
msgid "``yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:71
msgid "Yard"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
msgid "``ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:72
msgid "Foot, Foot (International)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
msgid "``survey_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:73
msgid "U.S. Foot, US survey foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
msgid "``inch``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:74
msgid "Inches"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
msgid "``cm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:75
msgid "Centimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
msgid "``mm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:76
msgid "Millimetre, Millimeter"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
msgid "``um``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:77
msgid "Micrometer, Micrometre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
msgid "``british_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:78
msgid "British foot (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
msgid "``british_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:79
msgid "British yard (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
msgid "``british_chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:80
msgid "British chain (Sears 1922)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
msgid "``indian_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:81
msgid "Indian yard, Yard (Indian)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
msgid "``sears_yd``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:82
msgid "Yard (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
msgid "``clarke_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:83
msgid "Clarke's Foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
msgid "``chain``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:84
msgid "Chain"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
msgid "``chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:85
msgid "Chain (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
msgid "``chain_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:86
msgid "Chain (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
msgid "``british_chain_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:87
msgid "British chain (Benoit 1895 B)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
msgid "``british_chain_sears_truncated``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:88
msgid "British chain (Sears 1922 truncated)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
msgid "``gold_coast_ft``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:89
msgid "Gold Coast foot"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90 ../../ref/contrib/syndication.txt:901
#: ../../ref/contrib/syndication.txt:929
msgid "``link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:90
msgid "Link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
msgid "``link_benoit``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:91
msgid "Link (Benoit)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
msgid "``link_sears``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:92
msgid "Link (Sears)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
msgid "``clarke_link``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:93
msgid "Clarke's link"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
msgid "``fathom``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:94
msgid "Fathom"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
msgid "``rod``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:95
msgid "Rod"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
msgid "``nm``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:96
msgid "Nautical Mile"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
msgid "``nm_uk``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:97
msgid "Nautical Mile (UK)"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
msgid "``german_m``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:98
msgid "German legal metre"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:103
msgid ""
":class:`Area` attributes are the same as :class:`Distance` attributes, "
"except they are prefixed with ``sq_`` (area units are square in nature). For"
" example, ``Area(sq_m=2)`` creates an :class:`Area` object representing two "
"square meters."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:109
msgid "Measurement API"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:112
msgid "``Distance``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:116
msgid ""
"To initialize a distance object, pass in a keyword corresponding to the "
"desired :ref:`unit attribute name <supported_units>` set with desired value."
"  For example, the following creates a distance object representing 5 "
"miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:125
msgid ""
"Returns the distance value in units corresponding to the given unit "
"attribute.  For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:133
msgid ""
"Returns the distance unit attribute name for the given full unit name. For "
"example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:141
msgid "Alias for :class:`Distance` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:144
msgid "``Area``"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:148
msgid ""
"To initialize an area object, pass in a keyword corresponding to the desired"
" :ref:`unit attribute name <supported_units>` set with desired value.  For "
"example, the following creates an area object representing 5 square miles::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:157
msgid ""
"Returns the area value in units corresponding to the given unit attribute.  "
"For example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:165
msgid ""
"Returns the area unit attribute name for the given full unit name. For "
"example::"
msgstr ""

#: ../../ref/contrib/gis/measure.txt:173
msgid "Alias for :class:`Area` class."
msgstr ""

#: ../../ref/contrib/gis/measure.txt:176
msgid ""
"`Robert Coup <https://koordinates.com/>`_ is the initial author of the "
"measure objects, and was inspired by Brian Beck's work in `geopy "
"<http://code.google.com/p/geopy/>`_ and Geoff Biggs' PhD work on dimensioned"
" units for robotics."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:3
msgid "GeoDjango Model API"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:8
msgid ""
"This document explores the details of the GeoDjango Model API.  Throughout "
"this section, we'll be using the following geographic model of a `ZIP "
"code`__ as our example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:22
msgid "Geometry Field Types"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:24
msgid ""
"Each of the following geometry field types correspond with the OpenGIS "
"Simple Features specification [#fnogc]_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:70
msgid "Geometry Field Options"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:72
msgid ""
"In addition to the regular :ref:`common-model-field-options` available for "
"Django model fields, geometry fields have the following additional options. "
"All are optional."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:81
msgid ""
"Sets the SRID [#fnogcsrid]_ (Spatial Reference System Identity) of the "
"geometry field to the given value. Defaults to 4326 (also known as "
"`WGS84`__, units are in degrees of longitude and latitude)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:90
msgid "Selecting an SRID"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:92
msgid ""
"Choosing an appropriate SRID for your model is an important decision that "
"the developer should consider carefully.  The SRID is an integer specifier "
"that corresponds to the projection system that will be used to interpret the"
" data in the spatial database. [#fnsrid]_  Projection systems give the "
"context to the coordinates that specify a location.  Although the details of"
" `geodesy`__ are beyond the scope of this documentation, the general problem"
" is that the earth is spherical and representations of the earth (e.g., "
"paper maps, Web maps) are not."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:101
msgid ""
"Most people are familiar with using latitude and longitude to reference a "
"location on the earth's surface.  However, latitude and longitude are "
"angles, not distances. [#fnharvard]_  In other words, while the shortest "
"path between two points on a flat surface is a straight line, the shortest "
"path between two points on a curved surface (such as the earth) is an *arc* "
"of a `great circle`__. [#fnthematic]_  Thus, additional computation is "
"required to obtain distances in planar units (e.g., kilometers and miles).  "
"Using a geographic coordinate system may introduce complications for the "
"developer later on. For example, Spatialite does not have the capability to "
"perform distance calculations between geometries using geographic coordinate"
" systems, e.g. constructing a query to  find all points within 5 miles of a "
"county boundary stored as WGS84. [#fndist]_"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:114
msgid ""
"Portions of the earth's surface may projected onto a two-dimensional, or "
"Cartesian, plane.  Projected coordinate systems are especially convenient "
"for region-specific applications, e.g., if you know that your database will "
"only cover geometries in `North Kansas`__, then you may consider using "
"projection system specific to that region.  Moreover, projected coordinate "
"systems are defined in Cartesian units (such as meters or feet), easing "
"distance calculations."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:124
msgid ""
"If you wish to perform arbitrary distance queries using non-point geometries"
" in WGS84 in PostGIS and you want decent performance, enable the "
":attr:`GeometryField.geography` keyword so that :ref:`geography database "
"type <geography-type>` is used instead."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:129
msgid "Additional Resources:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:131
msgid ""
"`spatialreference.org`__: A Django-powered database of spatial reference "
"systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:133
msgid ""
"`The State Plane Coordinate System`__: A Web site covering the various "
"projection systems used in the United States.  Much of the U.S. spatial data"
" encountered will be in one of these coordinate systems rather than in a "
"geographic coordinate system such as WGS84."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:145
msgid "``spatial_index``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:149
msgid ""
"Defaults to ``True``.  Creates a spatial index for the given geometry field."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:154
msgid ""
"This is different from the ``db_index`` field option because spatial indexes"
" are created in a different manner than regular database indexes.  "
"Specifically, spatial indexes are typically created using a variant of the "
"R-Tree, while regular database indexes typically use B-Trees."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:161
msgid "``dim``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:165
msgid ""
"This option may be used for customizing the coordinate dimension of the "
"geometry field.  By default, it is set to 2, for representing two-"
"dimensional geometries.  For spatial backends that support it, it may be set"
" to 3 for three-dimensional support."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:172
msgid "At this time 3D support is limited to the PostGIS spatial backend."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:175
msgid "``geography``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:179
msgid ""
"If set to ``True``, this option will create a database column of type "
"geography, rather than geometry.  Please refer to the :ref:`geography type "
"<geography-type>` section below for more details."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:186
msgid ""
"Geography support is limited to PostGIS and will force the SRID to be 4326."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:191
msgid "Geography Type"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:193
msgid ""
"The geography type provides native support for spatial features represented "
"with geographic coordinates (e.g., WGS84 longitude/latitude). "
"[#fngeography]_ Unlike the plane used by a geometry type, the geography type"
" uses a spherical representation of its data.  Distance and measurement "
"operations performed on a geography column automatically employ great circle"
" arc calculations and return linear units.  In other words, when "
"``ST_Distance`` is called on two geographies, a value in meters is returned "
"(as opposed to degrees if called on a geometry column in WGS84)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:202
msgid ""
"Because geography calculations involve more mathematics, only a subset of "
"the PostGIS spatial lookups are available for the geography type. "
"Practically, this means that in addition to the :ref:`distance lookups "
"<distance-lookups>` only the following additional :ref:`spatial lookups "
"<spatial-lookups>` are available for geography columns:"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:213
msgid ""
"For more information, the PostGIS documentation contains a helpful section "
"on determining `when to use geography data type over geometry data type "
"<http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#PostGIS_GeographyVSGeometry>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:218
msgid "``GeoManager``"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:223
msgid ""
"In order to conduct geographic queries, each geographic model requires a "
"``GeoManager`` model manager.  This manager allows for the proper SQL "
"construction for geographic queries; thus, without it, all geographic "
"filters will fail.  It should also be noted that ``GeoManager`` is required "
"even if the model does not have a geographic field itself, e.g., in the case"
" of a ``ForeignKey`` relation to a model with a geographic field.  For "
"example, if we had an ``Address`` model with a ``ForeignKey`` to our "
"``Zipcode`` model::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:242
msgid ""
"The geographic manager is needed to do spatial queries on related "
"``Zipcode`` objects, for example::"
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:248
msgid ""
"OpenGIS Consortium, Inc., `Simple Feature Specification For SQL "
"<http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:249
msgid ""
"*See id.* at Ch. 2.3.8, p. 39 (Geometry Values and Spatial Reference "
"Systems)."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:250
msgid ""
"Typically, SRID integer corresponds to an EPSG (`European Petroleum Survey "
"Group <http://www.epsg.org>`_) identifier.  However, it may also be "
"associated with custom projections defined in spatial database's spatial "
"reference systems table."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:251
msgid ""
"Harvard Graduate School of Design, `An Overview of Geodesy and Geographic "
"Referencing Systems "
"<http://www.gsd.harvard.edu/gis/manual/projections/fundamentals/>`_.  This "
"is an excellent resource for an overview of principles relating to "
"geographic and Cartesian coordinate systems."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:252
msgid ""
"Terry A. Slocum, Robert B. McMaster, Fritz C. Kessler, & Hugh H. Howard, "
"*Thematic Cartography and Geographic Visualization* (Prentice Hall, 2nd "
"edition), at Ch. 7.1.3."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:253
msgid "This limitation does not apply to PostGIS."
msgstr ""

#: ../../ref/contrib/gis/model-api.txt:254
msgid ""
"Please refer to the `PostGIS Geography Type "
"<http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#PostGIS_Geography>`_"
" documentation for more details."
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:3
msgid "OGR Inspection"
msgstr ""

#: ../../ref/contrib/gis/ogrinspect.txt:11
msgid "``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:3
msgid "GeoJSON Serializer"
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:10
msgid ""
"GeoDjango provides a specific serializer for the `GeoJSON`__ format. The "
"GDAL library is required for this serializer. See "
":doc:`/topics/serialization` for more information on serialization."
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:16
msgid ""
"The ``geojson`` serializer is not meant for round-tripping data, as it has "
"no deserializer equivalent. For example, you cannot use :djadmin:`loaddata` "
"to reload the output produced by this serializer. If you plan to reload the "
"outputted data, use the plain :ref:`json serializer <serialization-formats-"
"json>` instead."
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:22
msgid ""
"In addition to the options of the ``json`` serializer, the ``geojson`` "
"serializer accepts the following additional option when it is called by "
"``serializers.serialize()``:"
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:26
msgid ""
"``geometry_field``: A string containing the name of a geometry field to use "
"for the ``geometry`` key of the GeoJSON feature. This is only needed when "
"you have a model with more than one geometry field and you don't want to use"
" the first defined geometry field (by default, the first geometry field is "
"picked)."
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:31
msgid ""
"``srid``: The SRID to use for the ``geometry`` content. Defaults to 4326 "
"(WGS 84)."
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:34
msgid ""
"The :ref:`fields <subset-of-fields>` option can be used to limit fields that"
" will be present in the ``properties`` key, as it works with all other "
"serializers."
msgstr ""

#: ../../ref/contrib/gis/serializers.txt:47
msgid "Would output::"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:3
msgid "Geographic Sitemaps"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:5
msgid ""
"KML is an XML language focused on geographic visualization [#]_. "
"``KMLSitemap`` and its compressed counterpart ``KMZSitemap`` allow you to "
"present geolocated data in a machine-readable format."
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:13
msgid "Reference"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:16
msgid "``KMLSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:19
msgid "``KMZSitemap``"
msgstr ""

#: ../../ref/contrib/gis/sitemaps.txt:22
msgid "http://www.opengeospatial.org/standards/kml"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:3
msgid "Testing GeoDjango apps"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:5
msgid ""
"Included in this documentation are some additional notes and settings for "
":ref:`testing-postgis` and :ref:`testing-spatialite` users."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:18
msgid ""
"The settings below have sensible defaults, and shouldn't require manual "
"setting."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:23
msgid "``POSTGIS_TEMPLATE``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:25
msgid ""
"This setting may be used to customize the name of the PostGIS template "
"database to use. It automatically defaults to ``'template_postgis'`` (the "
"same name used in the :ref:`installation documentation "
"<spatialdb_template>`)."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:33
msgid "``POSTGIS_VERSION``"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:35
msgid ""
"When GeoDjango's spatial backend initializes on PostGIS, it has to perform "
"an SQL query to determine the version in order to figure out what features "
"are available. Advanced users wishing to prevent this additional query may "
"set the version manually using a 3-tuple of integers specifying the major, "
"minor, and micro version numbers for PostGIS. For example, to configure for "
"PostGIS X.Y.Z you would use::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:45
msgid "Obtaining sufficient privileges"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:47
msgid ""
"Depending on your configuration, this section describes several methods to "
"configure a database user with sufficient privileges to run tests for "
"GeoDjango applications on PostgreSQL. If your :ref:`spatial database "
"template <spatialdb_template>` was created like in the instructions, then "
"your testing database user only needs to have the ability to create "
"databases. In other configurations, you may be required to use a database "
"superuser."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:56
msgid "Create database user"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:58
msgid ""
"To make a database user with the ability to create databases, use the "
"following command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:63
msgid ""
"The ``-R -S`` flags indicate that we do not want the user to have the "
"ability to create additional users (roles) or to be a superuser, "
"respectively."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:66
msgid ""
"Alternatively, you may alter an existing user's role from the SQL shell "
"(assuming this is done from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:72
msgid "Create database superuser"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:74
msgid "This may be done at the time the user is created, for example::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:78
msgid ""
"Or you may alter the user's role from the SQL shell (assuming this is done "
"from an existing superuser account)::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:84
msgid "Create a database using PostGIS version 2"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:86
msgid ""
"When testing projects using :ref:`PostGIS 2 <spatialdb_template91>`, the "
"test database is created using the ``CREATE EXTENSION postgis`` instruction,"
" provided that no template ``template_postgis`` (or named accordingly to "
":setting:`POSTGIS_TEMPLATE`) exists in the current database."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:95
msgid ""
"On Windows platforms the pgAdmin III utility may also be used as a simple "
"way to add superuser privileges to your database user."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:98
msgid ""
"By default, the PostGIS installer on Windows includes a template spatial "
"database entitled ``template_postgis``."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:106
msgid ""
"Make sure the necessary spatial tables are created in your test spatial "
"database, as described in :ref:`create_spatialite_db`. Then just do this::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:114
msgid "GeoDjango tests"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:116
msgid ""
"To have the GeoDjango tests executed when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` all of the databases in the"
" settings file must be using one of the :ref:`spatial database backends "
"<spatial-backends>`."
msgstr ""

#: ../../ref/contrib/gis/testing.txt:125
msgid ""
"The following is an example bare-bones settings file with spatial backends "
"that can be used to run the entire Django test suite, including those in "
":mod:`django.contrib.gis`::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:144
msgid ""
"Assuming the settings above were in a ``postgis.py`` file in the same "
"directory as ``runtests.py``, then all Django and GeoDjango tests would be "
"performed when executing the command::"
msgstr ""

#: ../../ref/contrib/gis/testing.txt:150
msgid "To run only the GeoDjango test suite, specify ``gis_tests``::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:3
msgid "GeoDjango Tutorial"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:8
msgid ""
"GeoDjango is an included contrib module for Django that turns it into a "
"world-class geographic Web framework.  GeoDjango strives to make it as "
"simple as possible to create geographic Web applications, like location-"
"based services. Its features include:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:13
msgid "Django model fields for `OGC`_ geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:14
msgid "Extensions to Django's ORM for querying and manipulating spatial data."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:15
msgid ""
"Loosely-coupled, high-level Python interfaces for GIS geometry operations "
"and data formats."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:17
msgid "Editing geometry fields from the admin."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:19
msgid ""
"This tutorial assumes familiarity with Django; thus, if you're brand new to "
"Django, please read through the :doc:`regular tutorial </intro/tutorial01>` "
"to familiarize yourself with Django first."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:25
msgid ""
"GeoDjango has additional requirements beyond what Django requires -- please "
"consult the :doc:`installation documentation <install/index>` for more "
"details."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:29
msgid ""
"This tutorial will guide you through the creation of a geographic web "
"application for viewing the `world borders`_. [#]_ Some of the code used in "
"this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ "
"project. [#]_"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:36
msgid ""
"Proceed through the tutorial sections sequentially for step-by-step "
"instructions."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:44
msgid "Setting Up"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:47
msgid "Create a Spatial Database"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:51
msgid ""
"MySQL and Oracle users can skip this section because spatial types are "
"already built into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:54
msgid "First, create a spatial database for your project."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:56
msgid ""
"If you are using PostGIS, create the database from the :ref:`spatial "
"database template <spatialdb_template>`:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:65
msgid ""
"This command must be issued by a database user with enough privileges to "
"create a database.  To create a user with ``CREATE DATABASE`` privileges in "
"PostgreSQL, use the following commands:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:75
msgid ""
"Replace ``geo`` with your Postgres database user's username. (In PostgreSQL,"
" this user will also be an OS-level user.)"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:78
msgid ""
"If you are using SQLite and SpatiaLite, consult the instructions on how to "
"create a :ref:`SpatiaLite database <create_spatialite_db>`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:82
msgid "Create a New Project"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:84
msgid ""
"Use the standard ``django-admin`` script to create a project called "
"``geodjango``:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:91
msgid ""
"This will initialize a new project. Now, create a ``world`` Django "
"application within the ``geodjango`` project:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:100
msgid "Configure ``settings.py``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:102
msgid ""
"The ``geodjango`` project settings are stored in the "
"``geodjango/settings.py`` file. Edit the database connection settings to "
"match your setup::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:113
msgid ""
"In addition, modify the :setting:`INSTALLED_APPS` setting to include "
":mod:`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (your "
"newly created application)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:129
msgid "Geographic Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:134
msgid "World Borders"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:136
msgid ""
"The world borders data is available in this `zip file`__.  Create a ``data``"
" directory in the ``world`` application, download the world borders data, "
"and unzip. On GNU/Linux platforms, use the following commands:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:148
msgid ""
"The world borders ZIP file contains a set of data files collectively known "
"as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  "
"When unzipped, the world borders dataset includes files with the following "
"extensions:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:153
msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:154
msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:155
msgid ""
"``.dbf``: Database file for holding non-geometric attribute data (e.g., "
"integer and character fields)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:157
msgid ""
"``.prj``: Contains the spatial reference information for the geographic data"
" stored in the shapefile."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:164
msgid "Use ``ogrinfo`` to examine spatial data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:166
msgid ""
"The GDAL ``ogrinfo`` utility allows examining the metadata of shapefiles or "
"other vector data sources:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:176
msgid ""
"``ogrinfo`` tells us that the shapefile has one layer, and that this layer "
"contains polygon data.  To find out more, we'll specify the layer name and "
"use the ``-so`` option to get only the important summary information:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:208
msgid ""
"This detailed summary information tells us the number of features in the "
"layer (246), the geographic bounds of the data, the spatial reference system"
" (\"SRS WKT\"), as well as type information for each attribute field. For "
"example, ``FIPS: String (2.0)`` indicates that the ``FIPS`` character field "
"has a maximum length of 2.  Similarly, ``LON: Real (8.3)`` is a floating-"
"point field that holds a maximum of 8 digits up to three decimal places."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:216
msgid "Geographic Models"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:219
msgid "Defining a Geographic Model"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:221
msgid ""
"Now that you've examined your dataset using ``ogrinfo``, create a GeoDjango "
"model to represent this data::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:250
msgid "Please note two important things:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:252
msgid "The ``models`` module is imported from ``django.contrib.gis.db``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:253
msgid ""
"You must override the model's default manager with "
":class:`~django.contrib.gis.db.models.GeoManager` to perform spatial "
"queries."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:256
msgid ""
"The default spatial reference system for geometry fields is WGS84 (meaning "
"the `SRID`__ is 4326) -- in other words, the field coordinates are in "
"longitude, latitude pairs in units of degrees.  To use a different "
"coordinate system, set the SRID of the geometry field with the ``srid`` "
"argument. Use an integer representing the coordinate system's EPSG code."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:265
msgid "Run ``migrate``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:267
msgid ""
"After defining your model, you need to sync it with the database. First, "
"create a database migration:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:277
msgid ""
"Let's look at the SQL that will generate the table for the ``WorldBorder`` "
"model:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:284
msgid "This command should produce the following output:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:310
msgid ""
"With PostGIS < 2.0, the output is slightly different. The ``mpoly`` geometry"
" column is added through a separate ``SELECT AddGeometryColumn(...)`` "
"statement."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:314
msgid ""
"If this looks correct, run :djadmin:`migrate` to create this table in the "
"database:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:327
msgid "Importing Spatial Data"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:329
msgid ""
"This section will show you how to import the world borders shapefile into "
"the database via GeoDjango models using the :doc:`layermapping`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:332
msgid ""
"There are many different ways to import data into a spatial database -- "
"besides the tools included within GeoDjango, you may also use the following:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:335
msgid ""
"`ogr2ogr`_: A command-line utility included with GDAL that can import many "
"vector data formats into PostGIS, MySQL, and Oracle databases."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:337
msgid ""
"`shp2pgsql`_: This utility included with PostGIS imports ESRI shapefiles "
"into PostGIS."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:346
msgid "GDAL Interface"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:348
msgid ""
"Earlier, you used ``ogrinfo`` to examine the contents of the world borders "
"shapefile.  GeoDjango also includes a Pythonic interface to GDAL's powerful "
"OGR library that can work with all the vector data sources that OGR "
"supports."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:352
msgid "First, invoke the Django shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:358
msgid ""
"If you downloaded the :ref:`worldborders` data earlier in the tutorial, then"
" you can determine its path using Python's built-in ``os`` module::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:367
msgid ""
"Now, open the world borders shapefile using GeoDjango's "
":class:`~django.contrib.gis.gdal.DataSource` interface::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:375
msgid ""
"Data source objects can have different layers of geospatial features; "
"however, shapefiles are only allowed to have one layer::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:384
msgid ""
"You can see the layer's geometry type and how many features it contains::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:393
msgid ""
"Unfortunately, the shapefile data format does not allow for greater "
"specificity with regards to geometry types.  This shapefile, like many "
"others, actually includes ``MultiPolygon`` geometries, not Polygons. It's "
"important to use a more general field type in models: a GeoDjango "
"``MultiPolygonField`` will accept a ``Polygon`` geometry, but a "
"``PolygonField`` will not accept a ``MultiPolygon`` type geometry.  This is "
"why the ``WorldBorder`` model defined above uses a ``MultiPolygonField``."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:401
msgid ""
"The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial "
"reference system associated with it.  If it does, the ``srs`` attribute will"
" return a :class:`~django.contrib.gis.gdal.SpatialReference` object::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:415
msgid ""
"This shapefile is in the popular WGS84 spatial reference system -- in other "
"words, the data uses longitude, latitude pairs in units of degrees."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:419
msgid ""
"In addition, shapefiles also support attribute fields that may contain "
"additional data.  Here are the fields on the World Borders layer:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:425
msgid ""
"The following code will let you examine the OGR types (e.g. integer or "
"string) associated with each of the fields:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:431
msgid ""
"You can iterate over each feature in the layer and extract information from "
"both the feature's geometry (accessed via the ``geom`` attribute) as well as"
" the feature's attribute fields (whose **values** are accessed via ``get()``"
" method)::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:444
msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:449
msgid "And individual features may be retrieved by their feature ID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:455
msgid "Boundary geometries may be exported as WKT and GeoJSON::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:465
msgid "``LayerMapping``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:467
msgid ""
"To import the data, use a LayerMapping in a Python script. Create a file "
"called ``load.py`` inside the ``world`` application, with the following "
"code::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:498
msgid "A few notes about what's going on:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:500
msgid ""
"Each key in the ``world_mapping`` dictionary corresponds to a field in the "
"``WorldBorder`` model.  The value is the name of the shapefile field that "
"data will be loaded from."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:503
msgid ""
"The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry "
"type GeoDjango will import the field as.  Even simple polygons in the "
"shapefile will automatically be converted into collections prior to "
"insertion into the database."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:507
msgid ""
"The path to the shapefile is not absolute -- in other words, if you move the"
" ``world`` application (with ``data`` subdirectory) to a different location,"
" the script will still work."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:510
msgid ""
"The ``transform`` keyword is set to ``False`` because the data in the "
"shapefile does not need to be converted -- it's already in WGS84 "
"(SRID=4326)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:512
msgid ""
"The ``encoding`` keyword is set to the character encoding of the string "
"values in the shapefile. This ensures that string values are read and saved "
"correctly from their original encoding system."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:516
msgid ""
"Afterwards, invoke the Django shell from the ``geodjango`` project "
"directory:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:522
msgid ""
"Next, import the ``load`` module, call the ``run`` routine, and watch "
"``LayerMapping`` do the work::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:531
msgid "Try ``ogrinspect``"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:532
msgid ""
"Now that you've seen how to define geographic models and import data with "
"the :doc:`layermapping`, it's possible to further automate this process with"
" use of the :djadmin:`ogrinspect` management command.  The "
":djadmin:`ogrinspect` command  introspects a GDAL-supported vector data "
"source (e.g., a shapefile) and generates a model definition and "
"``LayerMapping`` dictionary automatically."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:538
msgid "The general usage of the command goes as follows:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:544
msgid ""
"``data_source`` is the path to the GDAL-supported data source and "
"``model_name`` is the name to use for the model.  Command-line options may "
"be used to further define how the model is generated."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:548
msgid ""
"For example, the following command nearly reproduces the ``WorldBorder`` "
"model and mapping dictionary created above, automatically:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:556
msgid "A few notes about the command-line options given above:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:558
msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:559
msgid ""
"The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping "
"dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:562
msgid ""
"The ``--multi`` option is specified so that the geographic field is a "
":class:`~django.contrib.gis.db.models.MultiPolygonField` instead of just a "
":class:`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:566
msgid ""
"The command produces the following output, which may be copied directly into"
" the ``models.py`` of a GeoDjango application::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:604
msgid "Spatial Queries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:608
msgid ""
"GeoDjango adds spatial lookups to the Django ORM.  For example, you can find"
" the country in the ``WorldBorder`` table that contains a particular point."
"  First, fire up the management shell:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:616
msgid "Now, define a point of interest [#]_::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:620
msgid ""
"The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, "
"29.7245 degrees latitude.  The geometry is in a format known as Well Known "
"Text (WKT), a standard issued by the Open Geospatial Consortium (OGC). [#]_"
"  Import the ``WorldBorder`` model, and perform a ``contains`` lookup using "
"the ``pnt_wkt`` as the parameter::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:631
msgid ""
"Here, you retrieved a ``GeoQuerySet`` with only one model: the border of the"
" United States (exactly what you would expect)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:634
msgid ""
"Similarly, you may also use a :doc:`GEOS geometry object <geos>`. Here, you "
"can combine the ``intersects`` spatial lookup with the ``get`` method to "
"retrieve only the ``WorldBorder`` instance for San Marino instead of a "
"queryset::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:645
msgid ""
"The ``contains`` and ``intersects`` lookups are just a subset of the "
"available queries -- the :doc:`db-api` documentation has more."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:649
msgid "Automatic Spatial Transformations"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:650
msgid ""
"When doing spatial queries, GeoDjango automatically transforms geometries if"
" they're in a different coordinate system.  In the following example, "
"coordinates will be expressed in `EPSG SRID 32140`__, a coordinate system "
"specific to south Texas **only** and in units of **meters**, not degrees::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:659
msgid ""
"Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of"
" WKT that includes the SRID::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:664
msgid ""
"GeoDjango's ORM will automatically wrap geometry values in transformation "
"SQL, allowing the developer to work at a higher level of abstraction::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:681
msgid "Raw queries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:683
msgid ""
"When using :doc:`raw queries </topics/db/sql>`, you should generally wrap "
"your geometry fields with the ``asText()`` SQL function (or ``ST_AsText`` "
"for PostGIS) so that the field value will be recognized by GEOS::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:689
msgid ""
"This is not absolutely required by PostGIS, but generally you should only "
"use raw queries when you know exactly what you are doing."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:693
msgid "Lazy Geometries"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:694
msgid ""
"GeoDjango loads geometries in a standardized textual representation.  When "
"the geometry field is first accessed, GeoDjango creates a `GEOS geometry "
"object <ref-geos>`, exposing powerful functionality, such as serialization "
"properties for popular geospatial formats::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:709
msgid ""
"This includes access to all of the advanced geometric operations provided by"
" the GEOS library::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:723
msgid "Putting your data on the map"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:726
msgid "Geographic Admin"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:728
msgid ""
"GeoDjango extends :doc:`Django's admin application "
"</ref/contrib/admin/index>` with support for editing geometry fields."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:732
msgid "Basics"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:734
msgid ""
"GeoDjango also supplements the Django admin by allowing users to create and "
"modify geometries on a JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:737
msgid ""
"Let's dive right in.  Create a file called ``admin.py`` inside the ``world``"
" application with the following code::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:745
msgid ""
"Next, edit your ``urls.py`` in the ``geodjango`` application folder as "
"follows::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:754
msgid "Create an admin user:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:760
msgid "Next, start up the Django development server:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:766
msgid ""
"Finally, browse to ``http://localhost:8000/admin/``, and log in with the "
"user you just created. Browse to any of the ``WorldBorder`` entries -- the "
"borders may be edited by clicking on a polygon and dragging the vertexes to "
"the desired position."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:781
msgid ""
"With the :class:`~django.contrib.gis.admin.OSMGeoAdmin`, GeoDjango uses a "
"`Open Street Map`_ layer in the admin. This provides more context (including"
" street and thoroughfare details) than available with the "
":class:`~django.contrib.gis.admin.GeoModelAdmin` (which uses the `Vector Map"
" Level 0`_ WMS dataset hosted at `OSGeo`_)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:787
msgid "First, there are some important requirements:"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:789
msgid ""
":class:`~django.contrib.gis.admin.OSMGeoAdmin` requires that :doc:`GDAL "
"<gdal>` is installed."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:792
msgid ""
"The PROJ.4 datum shifting files must be installed (see the :ref:`PROJ.4 "
"installation instructions <proj4>` for more details)."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:795
msgid ""
"If you meet this requirement, then just substitute the ``OSMGeoAdmin`` "
"option class in your ``admin.py`` file::"
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:802
msgid ""
"Special thanks to Bjørn Sandvik of `thematicmapping.org "
"<http://thematicmapping.org>`_ for providing and maintaining this dataset."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:805
msgid ""
"GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and "
"Christopher Schmidt."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:807
msgid ""
"This point is the `University of Houston Law Center "
"<http://www.law.uh.edu/>`_."
msgstr ""

#: ../../ref/contrib/gis/tutorial.txt:809
msgid ""
"Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For "
"SQL <http://www.opengeospatial.org/standards/sfs>`_."
msgstr ""

#: ../../ref/contrib/gis/utils.txt:3
msgid "GeoDjango Utilities"
msgstr ""

#: ../../ref/contrib/gis/utils.txt:8
msgid ""
"The :mod:`django.contrib.gis.utils` module contains various utilities that "
"are useful in creating geospatial Web applications."
msgstr ""

#: ../../ref/contrib/humanize.txt:3 ../../ref/templates/builtins.txt:2513
msgid "django.contrib.humanize"
msgstr ""

#: ../../ref/contrib/humanize.txt:9 ../../ref/contrib/index.txt:85
msgid ""
"A set of Django template filters useful for adding a \"human touch\" to "
"data."
msgstr ""

#: ../../ref/contrib/humanize.txt:11
msgid ""
"To activate these filters, add ``'django.contrib.humanize'`` to your "
":setting:`INSTALLED_APPS` setting. Once you've done that, use ``{% load "
"humanize %}`` in a template, and you'll have access to the following "
"filters."
msgstr ""

#: ../../ref/contrib/humanize.txt:19
msgid "apnumber"
msgstr ""

#: ../../ref/contrib/humanize.txt:21
msgid ""
"For numbers 1-9, returns the number spelled out. Otherwise, returns the "
"number. This follows Associated Press style."
msgstr ""

#: ../../ref/contrib/humanize.txt:24 ../../ref/contrib/humanize.txt:39
#: ../../ref/contrib/humanize.txt:62 ../../ref/contrib/humanize.txt:137
#: ../../ref/django-admin.txt:1514 ../../ref/templates/builtins.txt:749
msgid "Examples:"
msgstr ""

#: ../../ref/contrib/humanize.txt:26
msgid "``1`` becomes ``one``."
msgstr ""

#: ../../ref/contrib/humanize.txt:27
msgid "``2`` becomes ``two``."
msgstr ""

#: ../../ref/contrib/humanize.txt:28
msgid "``10`` becomes ``10``."
msgstr ""

#: ../../ref/contrib/humanize.txt:30 ../../ref/contrib/humanize.txt:52
#: ../../ref/contrib/humanize.txt:77 ../../ref/contrib/humanize.txt:143
msgid ""
"You can pass in either an integer or a string representation of an integer."
msgstr ""

#: ../../ref/contrib/humanize.txt:35
msgid "intcomma"
msgstr ""

#: ../../ref/contrib/humanize.txt:37
msgid "Converts an integer to a string containing commas every three digits."
msgstr ""

#: ../../ref/contrib/humanize.txt:41
msgid "``4500`` becomes ``4,500``."
msgstr ""

#: ../../ref/contrib/humanize.txt:42
msgid "``45000`` becomes ``45,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:43
msgid "``450000`` becomes ``450,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:44
msgid "``4500000`` becomes ``4,500,000``."
msgstr ""

#: ../../ref/contrib/humanize.txt:46 ../../ref/contrib/humanize.txt:70
msgid ""
":ref:`Format localization <format-localization>` will be respected if "
"enabled, e.g. with the ``'de'`` language:"
msgstr ""

#: ../../ref/contrib/humanize.txt:49
msgid "``45000`` becomes ``'45.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:50
msgid "``450000`` becomes ``'450.000'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:57
msgid "intword"
msgstr ""

#: ../../ref/contrib/humanize.txt:59
msgid ""
"Converts a large integer to a friendly text representation. Works best for "
"numbers over 1 million."
msgstr ""

#: ../../ref/contrib/humanize.txt:64
msgid "``1000000`` becomes ``1.0 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:65
msgid "``1200000`` becomes ``1.2 million``."
msgstr ""

#: ../../ref/contrib/humanize.txt:66
msgid "``1200000000`` becomes ``1.2 billion``."
msgstr ""

#: ../../ref/contrib/humanize.txt:68
msgid "Values up to 10^100 (Googol) are supported."
msgstr ""

#: ../../ref/contrib/humanize.txt:73
msgid "``1000000`` becomes ``'1,0 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:74
msgid "``1200000`` becomes ``'1,2 Million'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:75
msgid "``1200000000`` becomes ``'1,2 Milliarden'``."
msgstr ""

#: ../../ref/contrib/humanize.txt:82
msgid "naturalday"
msgstr ""

#: ../../ref/contrib/humanize.txt:84
msgid ""
"For dates that are the current day or within one day, return \"today\", "
"\"tomorrow\" or \"yesterday\", as appropriate. Otherwise, format the date "
"using the passed in format string."
msgstr ""

#: ../../ref/contrib/humanize.txt:88
msgid ""
"**Argument:** Date formatting string as described in the :tfilter:`date` "
"tag."
msgstr ""

#: ../../ref/contrib/humanize.txt:90
msgid "Examples (when 'today' is 17 Feb 2007):"
msgstr ""

#: ../../ref/contrib/humanize.txt:92
msgid "``16 Feb 2007`` becomes ``yesterday``."
msgstr ""

#: ../../ref/contrib/humanize.txt:93
msgid "``17 Feb 2007`` becomes ``today``."
msgstr ""

#: ../../ref/contrib/humanize.txt:94
msgid "``18 Feb 2007`` becomes ``tomorrow``."
msgstr ""

#: ../../ref/contrib/humanize.txt:95
msgid ""
"Any other day is formatted according to given argument or the "
":setting:`DATE_FORMAT` setting if no argument is given."
msgstr ""

#: ../../ref/contrib/humanize.txt:101
msgid "naturaltime"
msgstr ""

#: ../../ref/contrib/humanize.txt:103
msgid ""
"For datetime values, returns a string representing how many seconds, minutes"
" or hours ago it was -- falling back to the :tfilter:`timesince` format if "
"the value is more than a day old. In case the datetime value is in the "
"future the return value will automatically use an appropriate phrase."
msgstr ""

#: ../../ref/contrib/humanize.txt:108
msgid "Examples (when 'now' is 17 Feb 2007 16:30:00):"
msgstr ""

#: ../../ref/contrib/humanize.txt:110
msgid "``17 Feb 2007 16:30:00`` becomes ``now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:111
msgid "``17 Feb 2007 16:29:31`` becomes ``29 seconds ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:112
msgid "``17 Feb 2007 16:29:00`` becomes ``a minute ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:113
msgid "``17 Feb 2007 16:25:35`` becomes ``4 minutes ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:114
msgid "``17 Feb 2007 15:30:29`` becomes ``59 minutes ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:115
msgid "``17 Feb 2007 15:30:01`` becomes ``59 minutes ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:116
msgid "``17 Feb 2007 15:30:00`` becomes ``an hour ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:117
msgid "``17 Feb 2007 13:31:29`` becomes ``2 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:118
msgid "``16 Feb 2007 13:31:29`` becomes ``1 day, 2 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:119
msgid "``16 Feb 2007 13:30:01`` becomes ``1 day, 2 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:120
msgid "``16 Feb 2007 13:30:00`` becomes ``1 day, 3 hours ago``."
msgstr ""

#: ../../ref/contrib/humanize.txt:121
msgid "``17 Feb 2007 16:30:30`` becomes ``30 seconds from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:122
msgid "``17 Feb 2007 16:30:29`` becomes ``29 seconds from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:123
msgid "``17 Feb 2007 16:31:00`` becomes ``a minute from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:124
msgid "``17 Feb 2007 16:34:35`` becomes ``4 minutes from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:125
msgid "``17 Feb 2007 17:30:29`` becomes ``an hour from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:126
msgid "``17 Feb 2007 18:31:29`` becomes ``2 hours from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:127
msgid "``18 Feb 2007 16:31:29`` becomes ``1 day from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:128
msgid "``26 Feb 2007 18:31:29`` becomes ``1 week, 2 days from now``."
msgstr ""

#: ../../ref/contrib/humanize.txt:133
msgid "ordinal"
msgstr ""

#: ../../ref/contrib/humanize.txt:135
msgid "Converts an integer to its ordinal as a string."
msgstr ""

#: ../../ref/contrib/humanize.txt:139
msgid "``1`` becomes ``1st``."
msgstr ""

#: ../../ref/contrib/humanize.txt:140
msgid "``2`` becomes ``2nd``."
msgstr ""

#: ../../ref/contrib/humanize.txt:141
msgid "``3`` becomes ``3rd``."
msgstr ""

#: ../../ref/contrib/index.txt:3
msgid "``contrib`` packages"
msgstr ""

#: ../../ref/contrib/index.txt:5
msgid ""
"Django aims to follow Python's `\"batteries included\" philosophy`_. It "
"ships with a variety of extra, optional tools that solve common Web-"
"development problems."
msgstr ""

#: ../../ref/contrib/index.txt:9
msgid ""
"This code lives in ``django/contrib`` in the Django distribution. This "
"document gives a rundown of the packages in ``contrib``, along with any "
"dependencies those packages have."
msgstr ""

#: ../../ref/contrib/index.txt:15
msgid ""
"For most of these add-ons -- specifically, the add-ons that include either "
"models or template tags -- you'll need to add the package name (e.g., "
"``'django.contrib.redirects'``) to your :setting:`INSTALLED_APPS` setting "
"and re-run ``manage.py migrate``."
msgstr ""

#: ../../ref/contrib/index.txt:42
msgid "admin"
msgstr ""

#: ../../ref/contrib/index.txt:44
msgid ""
"The automatic Django administrative interface. For more information, see "
":doc:`Tutorial 2 </intro/tutorial02>` and the :doc:`admin documentation "
"</ref/contrib/admin/index>`."
msgstr ""

#: ../../ref/contrib/index.txt:48
msgid "Requires the auth_ and contenttypes_ contrib packages to be installed."
msgstr ""

#: ../../ref/contrib/index.txt:51
msgid "auth"
msgstr ""

#: ../../ref/contrib/index.txt:53
msgid "Django's authentication framework."
msgstr ""

#: ../../ref/contrib/index.txt:55
msgid "See :doc:`/topics/auth/index`."
msgstr ""

#: ../../ref/contrib/index.txt:58
msgid "contenttypes"
msgstr ""

#: ../../ref/contrib/index.txt:60
msgid ""
"A light framework for hooking into \"types\" of content, where each "
"installed Django model is a separate content type."
msgstr ""

#: ../../ref/contrib/index.txt:63
msgid "See the :doc:`contenttypes documentation </ref/contrib/contenttypes>`."
msgstr ""

#: ../../ref/contrib/index.txt:66
msgid "flatpages"
msgstr ""

#: ../../ref/contrib/index.txt:68
msgid "A framework for managing simple \"flat\" HTML content in a database."
msgstr ""

#: ../../ref/contrib/index.txt:70
msgid "See the :doc:`flatpages documentation </ref/contrib/flatpages>`."
msgstr ""

#: ../../ref/contrib/index.txt:72
msgid "Requires the sites_ contrib package to be installed as well."
msgstr ""

#: ../../ref/contrib/index.txt:75
msgid "gis"
msgstr ""

#: ../../ref/contrib/index.txt:77
msgid ""
"A world-class geospatial framework built on top of Django, that enables "
"storage, manipulation and display of spatial data."
msgstr ""

#: ../../ref/contrib/index.txt:80
msgid "See the :doc:`/ref/contrib/gis/index` documentation for more."
msgstr ""

#: ../../ref/contrib/index.txt:83
msgid "humanize"
msgstr ""

#: ../../ref/contrib/index.txt:87
msgid "See the :doc:`humanize documentation </ref/contrib/humanize>`."
msgstr ""

#: ../../ref/contrib/index.txt:90
msgid "messages"
msgstr ""

#: ../../ref/contrib/index.txt:92
msgid ""
"A framework for storing and retrieving temporary cookie- or session-based "
"messages"
msgstr ""

#: ../../ref/contrib/index.txt:95
msgid "See the :doc:`messages documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/contrib/index.txt:98
msgid "postgres"
msgstr ""

#: ../../ref/contrib/index.txt:100
msgid "A collection of PostgreSQL specific features."
msgstr ""

#: ../../ref/contrib/index.txt:102
msgid ""
"See the :doc:`contrib.postgres documentation </ref/contrib/postgres/index>`."
msgstr ""

#: ../../ref/contrib/index.txt:105
msgid "redirects"
msgstr ""

#: ../../ref/contrib/index.txt:107
msgid "A framework for managing redirects."
msgstr ""

#: ../../ref/contrib/index.txt:109
msgid "See the :doc:`redirects documentation </ref/contrib/redirects>`."
msgstr ""

#: ../../ref/contrib/index.txt:112
msgid "sessions"
msgstr ""

#: ../../ref/contrib/index.txt:114
msgid "A framework for storing data in anonymous sessions."
msgstr ""

#: ../../ref/contrib/index.txt:116
msgid "See the :doc:`sessions documentation </topics/http/sessions>`."
msgstr ""

#: ../../ref/contrib/index.txt:119
msgid "sites"
msgstr ""

#: ../../ref/contrib/index.txt:121
msgid ""
"A light framework that lets you operate multiple Web sites off of the same "
"database and Django installation. It gives you hooks for associating objects"
" to one or more sites."
msgstr ""

#: ../../ref/contrib/index.txt:125
msgid "See the :doc:`sites documentation </ref/contrib/sites>`."
msgstr ""

#: ../../ref/contrib/index.txt:128
msgid "sitemaps"
msgstr ""

#: ../../ref/contrib/index.txt:130
msgid "A framework for generating Google sitemap XML files."
msgstr ""

#: ../../ref/contrib/index.txt:132
msgid "See the :doc:`sitemaps documentation </ref/contrib/sitemaps>`."
msgstr ""

#: ../../ref/contrib/index.txt:135
msgid "syndication"
msgstr ""

#: ../../ref/contrib/index.txt:137
msgid ""
"A framework for generating syndication feeds, in RSS and Atom, quite easily."
msgstr ""

#: ../../ref/contrib/index.txt:139
msgid "See the :doc:`syndication documentation </ref/contrib/syndication>`."
msgstr ""

#: ../../ref/contrib/index.txt:142
msgid "webdesign"
msgstr ""

#: ../../ref/contrib/index.txt:144
msgid ""
"Helpers and utilities targeted primarily at Web *designers* rather than Web "
"*developers*."
msgstr ""

#: ../../ref/contrib/index.txt:147
msgid ""
"See the :doc:`Web design helpers documentation </ref/contrib/webdesign>`."
msgstr ""

#: ../../ref/contrib/index.txt:150
msgid "Other add-ons"
msgstr ""

#: ../../ref/contrib/index.txt:152
msgid ""
"If you have an idea for functionality to include in ``contrib``, let us "
"know! Code it up, and post it to the |django-users| mailing list."
msgstr ""

#: ../../ref/contrib/messages.txt:3
msgid "The messages framework"
msgstr ""

#: ../../ref/contrib/messages.txt:8
msgid ""
"Quite commonly in web applications, you need to display a one-time "
"notification message (also known as \"flash message\") to the user after "
"processing a form or some other types of user input."
msgstr ""

#: ../../ref/contrib/messages.txt:12
msgid ""
"For this, Django provides full support for cookie- and session-based "
"messaging, for both anonymous and authenticated users. The messages "
"framework allows you to temporarily store messages in one request and "
"retrieve them for display in a subsequent request (usually the next one). "
"Every message is tagged with a specific ``level`` that determines its "
"priority (e.g., ``info``, ``warning``, or ``error``)."
msgstr ""

#: ../../ref/contrib/messages.txt:20
msgid "Enabling messages"
msgstr ""

#: ../../ref/contrib/messages.txt:22
msgid ""
"Messages are implemented through a :doc:`middleware </ref/middleware>` class"
" and corresponding :doc:`context processor </ref/templates/api>`."
msgstr ""

#: ../../ref/contrib/messages.txt:25
msgid ""
"The default ``settings.py`` created by ``django-admin startproject`` already"
" contains all the settings required to enable message functionality:"
msgstr ""

#: ../../ref/contrib/messages.txt:28
msgid "``'django.contrib.messages'`` is in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/messages.txt:30
msgid ""
":setting:`MIDDLEWARE_CLASSES` contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'`` and "
"``'django.contrib.messages.middleware.MessageMiddleware'``."
msgstr ""

#: ../../ref/contrib/messages.txt:34
msgid ""
"The default :ref:`storage backend <message-storage-backends>` relies on "
":doc:`sessions </topics/http/sessions>`. That's why ``SessionMiddleware`` "
"must be enabled and appear before ``MessageMiddleware`` in "
":setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../ref/contrib/messages.txt:39
msgid ""
"The ``'context_processors'`` option of the ``DjangoTemplates`` backend "
"defined in your :setting:`TEMPLATES` setting contains "
"``'django.contrib.messages.context_processors.messages'``."
msgstr ""

#: ../../ref/contrib/messages.txt:43
msgid ""
"If you don't want to use messages, you can remove "
"``'django.contrib.messages'`` from your :setting:`INSTALLED_APPS`, the "
"``MessageMiddleware`` line from :setting:`MIDDLEWARE_CLASSES`, and the "
"``messages`` context processor from :setting:`TEMPLATES`."
msgstr ""

#: ../../ref/contrib/messages.txt:49
msgid "Configuring the message engine"
msgstr ""

#: ../../ref/contrib/messages.txt:54
msgid "Storage backends"
msgstr ""

#: ../../ref/contrib/messages.txt:56
msgid ""
"The messages framework can use different backends to store temporary "
"messages."
msgstr ""

#: ../../ref/contrib/messages.txt:58
msgid ""
"Django provides three built-in storage classes in "
":mod:`django.contrib.messages`:"
msgstr ""

#: ../../ref/contrib/messages.txt:63
msgid ""
"This class stores all messages inside of the request's session. Therefore it"
" requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:68
msgid ""
"This class stores the message data in a cookie (signed with a secret hash to"
" prevent manipulation) to persist notifications across requests. Old "
"messages are dropped if the cookie data size would exceed 2048 bytes."
msgstr ""

#: ../../ref/contrib/messages.txt:74
msgid ""
"This class first uses ``CookieStorage``, and falls back to using "
"``SessionStorage`` for the messages that could not fit in a single cookie. "
"It also requires Django's ``contrib.sessions`` application."
msgstr ""

#: ../../ref/contrib/messages.txt:78
msgid ""
"This behavior avoids writing to the session whenever possible. It should "
"provide the best performance in the general case."
msgstr ""

#: ../../ref/contrib/messages.txt:81
msgid ""
":class:`~django.contrib.messages.storage.fallback.FallbackStorage` is the "
"default storage class. If it isn't suitable to your needs, you can select "
"another storage class by setting :setting:`MESSAGE_STORAGE` to its full "
"import path, for example::"
msgstr ""

#: ../../ref/contrib/messages.txt:90
msgid ""
"To write your own storage class, subclass the ``BaseStorage`` class in "
"``django.contrib.messages.storage.base`` and implement the ``_get`` and "
"``_store`` methods."
msgstr ""

#: ../../ref/contrib/messages.txt:97
msgid "Message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:99
msgid ""
"The messages framework is based on a configurable level architecture similar"
" to that of the Python logging module. Message levels allow you to group "
"messages by type so they can be filtered or displayed differently in views "
"and templates."
msgstr ""

#: ../../ref/contrib/messages.txt:104
msgid ""
"The built-in levels, which can be imported from ``django.contrib.messages`` "
"directly, are:"
msgstr ""

#: ../../ref/contrib/messages.txt:108
msgid "Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:108
msgid "Purpose"
msgstr ""

#: ../../ref/contrib/messages.txt:110 ../../ref/contrib/messages.txt:137
#: ../../ref/contrib/messages.txt:281
msgid "``DEBUG``"
msgstr ""

#: ../../ref/contrib/messages.txt:110
msgid ""
"Development-related messages that will be ignored (or removed) in a "
"production deployment"
msgstr ""

#: ../../ref/contrib/messages.txt:111 ../../ref/contrib/messages.txt:138
#: ../../ref/contrib/messages.txt:282
msgid "``INFO``"
msgstr ""

#: ../../ref/contrib/messages.txt:111
msgid "Informational messages for the user"
msgstr ""

#: ../../ref/contrib/messages.txt:112 ../../ref/contrib/messages.txt:139
#: ../../ref/contrib/messages.txt:283
msgid "``SUCCESS``"
msgstr ""

#: ../../ref/contrib/messages.txt:112
msgid "An action was successful, e.g. \"Your profile was updated successfully\""
msgstr ""

#: ../../ref/contrib/messages.txt:113 ../../ref/contrib/messages.txt:140
#: ../../ref/contrib/messages.txt:284
msgid "``WARNING``"
msgstr ""

#: ../../ref/contrib/messages.txt:113
msgid "A failure did not occur but may be imminent"
msgstr ""

#: ../../ref/contrib/messages.txt:114 ../../ref/contrib/messages.txt:141
#: ../../ref/contrib/messages.txt:285
msgid "``ERROR``"
msgstr ""

#: ../../ref/contrib/messages.txt:114
msgid "An action was **not** successful or some other failure occurred"
msgstr ""

#: ../../ref/contrib/messages.txt:117
msgid ""
"The :setting:`MESSAGE_LEVEL` setting can be used to change the minimum "
"recorded level (or it can be `changed per request`_). Attempts to add "
"messages of a level less than this will be ignored."
msgstr ""

#: ../../ref/contrib/messages.txt:124
msgid "Message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:126
msgid ""
"Message tags are a string representation of the message level plus any extra"
" tags that were added directly in the view (see `Adding extra message tags`_"
" below for more details). Tags are stored in a string and are separated by "
"spaces. Typically, message tags are used as CSS classes to customize message"
" style based on message type. By default, each level has a single tag that's"
" a lowercase version of its own constant:"
msgstr ""

#: ../../ref/contrib/messages.txt:135 ../../ref/contrib/messages.txt:279
msgid "Level Constant"
msgstr ""

#: ../../ref/contrib/messages.txt:135
msgid "Tag"
msgstr ""

#: ../../ref/contrib/messages.txt:137
msgid "``debug``"
msgstr ""

#: ../../ref/contrib/messages.txt:138
msgid "``info``"
msgstr ""

#: ../../ref/contrib/messages.txt:139
msgid "``success``"
msgstr ""

#: ../../ref/contrib/messages.txt:140
msgid "``warning``"
msgstr ""

#: ../../ref/contrib/messages.txt:141
msgid "``error``"
msgstr ""

#: ../../ref/contrib/messages.txt:144
msgid ""
"To change the default tags for a message level (either built-in or custom), "
"set the :setting:`MESSAGE_TAGS` setting to a dictionary containing the "
"levels you wish to change. As this extends the default tags, you only need "
"to provide tags for the levels you wish to override::"
msgstr ""

#: ../../ref/contrib/messages.txt:156
msgid "Using messages in views and templates"
msgstr ""

#: ../../ref/contrib/messages.txt:161
msgid "Adding a message"
msgstr ""

#: ../../ref/contrib/messages.txt:163
msgid "To add a message, call::"
msgstr ""

#: ../../ref/contrib/messages.txt:168
msgid ""
"Some shortcut methods provide a standard way to add messages with commonly "
"used tags (which are usually represented as HTML classes for the message)::"
msgstr ""

#: ../../ref/contrib/messages.txt:180
msgid "Displaying messages"
msgstr ""

#: ../../ref/contrib/messages.txt:183
msgid "**In your template**, use something like::"
msgstr ""

#: ../../ref/contrib/messages.txt:193
msgid ""
"If you're using the context processor, your template should be rendered with"
" a ``RequestContext``. Otherwise, ensure ``messages`` is available to the "
"template context."
msgstr ""

#: ../../ref/contrib/messages.txt:197
msgid ""
"Even if you know there is only just one message, you should still iterate "
"over the ``messages`` sequence, because otherwise the message storage will "
"not be cleared for the next request."
msgstr ""

#: ../../ref/contrib/messages.txt:203
msgid ""
"The context processor also provides a ``DEFAULT_MESSAGE_LEVELS`` variable "
"which is a mapping of the message level names to their numeric value::"
msgstr ""

#: ../../ref/contrib/messages.txt:219
msgid ""
"**Outside of templates**, you can use "
":func:`~django.contrib.messages.get_messages`::"
msgstr ""

#: ../../ref/contrib/messages.txt:228
msgid ""
"For instance, you can fetch all the messages to return them in a "
":ref:`JSONResponseMixin <jsonresponsemixin-example>` instead of a "
":class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

#: ../../ref/contrib/messages.txt:232
msgid ""
":func:`~django.contrib.messages.get_messages` will return an instance of the"
" configured storage backend."
msgstr ""

#: ../../ref/contrib/messages.txt:237
msgid "The ``Message`` class"
msgstr ""

#: ../../ref/contrib/messages.txt:241
msgid ""
"When you loop over the list of messages in a template, what you get are "
"instances of the ``Message`` class. It's quite a simple object, with only a "
"few attributes:"
msgstr ""

#: ../../ref/contrib/messages.txt:245
msgid "``message``: The actual text of the message."
msgstr ""

#: ../../ref/contrib/messages.txt:247
msgid ""
"``level``: An integer describing the type of the message (see the `message "
"levels`_ section above)."
msgstr ""

#: ../../ref/contrib/messages.txt:250
msgid ""
"``tags``: A string combining all the message's tags (``extra_tags`` and "
"``level_tag``) separated by spaces."
msgstr ""

#: ../../ref/contrib/messages.txt:253
msgid ""
"``extra_tags``: A string containing custom tags for this message, separated "
"by spaces. It's empty by default."
msgstr ""

#: ../../ref/contrib/messages.txt:258
msgid ""
"``level_tag``: The string representation of the level. By default, it's the "
"lowercase version of the name of the associated constant, but this can be "
"changed if you need by using the :setting:`MESSAGE_TAGS` setting."
msgstr ""

#: ../../ref/contrib/messages.txt:263
msgid "Creating custom message levels"
msgstr ""

#: ../../ref/contrib/messages.txt:265
msgid ""
"Messages levels are nothing more than integers, so you can define your own "
"level constants and use them to create more customized user feedback, e.g.::"
msgstr ""

#: ../../ref/contrib/messages.txt:273
msgid ""
"When creating custom message levels you should be careful to avoid "
"overloading existing levels. The values for the built-in levels are:"
msgstr ""

#: ../../ref/contrib/messages.txt:279 ../../ref/signals.txt:74
#: ../../ref/signals.txt:298 ../../ref/signals.txt:325
#: ../../ref/templates/builtins.txt:2460
msgid "Value"
msgstr ""

#: ../../ref/contrib/messages.txt:281
msgid "10"
msgstr ""

#: ../../ref/contrib/messages.txt:282
msgid "20"
msgstr ""

#: ../../ref/contrib/messages.txt:283
msgid "25"
msgstr ""

#: ../../ref/contrib/messages.txt:284
msgid "30"
msgstr ""

#: ../../ref/contrib/messages.txt:285
msgid "40"
msgstr ""

#: ../../ref/contrib/messages.txt:288
msgid ""
"If you need to identify the custom levels in your HTML or CSS, you need to "
"provide a mapping via the :setting:`MESSAGE_TAGS` setting."
msgstr ""

#: ../../ref/contrib/messages.txt:292
msgid ""
"If you are creating a reusable application, it is recommended to use only "
"the built-in `message levels`_ and not rely on any custom levels."
msgstr ""

#: ../../ref/contrib/messages.txt:296
msgid "Changing the minimum recorded level per-request"
msgstr ""

#: ../../ref/contrib/messages.txt:298
msgid ""
"The minimum recorded level can be set per request via the ``set_level`` "
"method::"
msgstr ""

#: ../../ref/contrib/messages.txt:315
msgid ""
"Similarly, the current effective level can be retrieved with ``get_level``::"
msgstr ""

#: ../../ref/contrib/messages.txt:320
msgid ""
"For more information on how the minimum recorded level functions, see "
"`Message levels`_ above."
msgstr ""

#: ../../ref/contrib/messages.txt:324
msgid "Adding extra message tags"
msgstr ""

#: ../../ref/contrib/messages.txt:326
msgid ""
"For more direct control over message tags, you can optionally provide a "
"string containing extra tags to any of the add methods::"
msgstr ""

#: ../../ref/contrib/messages.txt:333
msgid ""
"Extra tags are added before the default tag for that level and are space "
"separated."
msgstr ""

#: ../../ref/contrib/messages.txt:337
msgid "Failing silently when the message framework is disabled"
msgstr ""

#: ../../ref/contrib/messages.txt:339
msgid ""
"If you're writing a reusable app (or other piece of code) and want to "
"include messaging functionality, but don't want to require your users to "
"enable it if they don't want to, you may pass an additional keyword argument"
" ``fail_silently=True`` to any of the ``add_message`` family of methods. For"
" example::"
msgstr ""

#: ../../ref/contrib/messages.txt:350
msgid ""
"Setting ``fail_silently=True`` only hides the ``MessageFailure`` that would "
"otherwise occur when the messages framework disabled and one attempts to use"
" one of the ``add_message`` family of methods. It does not hide failures "
"that may occur for other reasons."
msgstr ""

#: ../../ref/contrib/messages.txt:356
msgid "Adding messages in class-based views"
msgstr ""

#: ../../ref/contrib/messages.txt:360
msgid ""
"Adds a success message attribute to "
":class:`~django.views.generic.edit.FormView` based classes"
msgstr ""

#: ../../ref/contrib/messages.txt:365
msgid ""
"``cleaned_data`` is the cleaned data from the form which is used for string "
"formatting"
msgstr ""

#: ../../ref/contrib/messages.txt:379
msgid ""
"The cleaned data from the ``form`` is available for string interpolation "
"using the ``%(field_name)s`` syntax. For ModelForms, if you need access to "
"fields from the saved ``object`` override the "
":meth:`~django.contrib.messages.views.SuccessMessageMixin.get_success_message`"
" method."
msgstr ""

#: ../../ref/contrib/messages.txt:385
msgid "**Example views.py for ModelForms**::"
msgstr ""

#: ../../ref/contrib/messages.txt:403
msgid "Expiration of messages"
msgstr ""

#: ../../ref/contrib/messages.txt:405
msgid ""
"The messages are marked to be cleared when the storage instance is iterated "
"(and cleared when the response is processed)."
msgstr ""

#: ../../ref/contrib/messages.txt:408
msgid ""
"To avoid the messages being cleared, you can set the messages storage to "
"``False`` after iterating::"
msgstr ""

#: ../../ref/contrib/messages.txt:417
msgid "Behavior of parallel requests"
msgstr ""

#: ../../ref/contrib/messages.txt:419
msgid ""
"Due to the way cookies (and hence sessions) work, **the behavior of any "
"backends that make use of cookies or sessions is undefined when the same "
"client makes multiple requests that set or get messages in parallel**. For "
"example, if a client initiates a request that creates a message in one "
"window (or tab) and then another that fetches any uniterated messages in "
"another window, before the first window redirects, the message may appear in"
" the second window instead of the first window where it may be expected."
msgstr ""

#: ../../ref/contrib/messages.txt:427
msgid ""
"In short, when multiple simultaneous requests from the same client are "
"involved, messages are not guaranteed to be delivered to the same window "
"that created them nor, in some cases, at all. Note that this is typically "
"not a problem in most applications and will become a non-issue in HTML5, "
"where each window/tab will have its own browsing context."
msgstr ""

#: ../../ref/contrib/messages.txt:436
msgid ""
"A few :ref:`settings<settings-messages>` give you control over message "
"behavior:"
msgstr ""

#: ../../ref/contrib/messages.txt:439
msgid ":setting:`MESSAGE_LEVEL`"
msgstr ""

#: ../../ref/contrib/messages.txt:440
msgid ":setting:`MESSAGE_STORAGE`"
msgstr ""

#: ../../ref/contrib/messages.txt:441
msgid ":setting:`MESSAGE_TAGS`"
msgstr ""

#: ../../ref/contrib/messages.txt:445
msgid ""
"For backends that use cookies, the settings for the cookie are taken from "
"the session cookie settings:"
msgstr ""

#: ../../ref/contrib/messages.txt:448
msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

#: ../../ref/contrib/messages.txt:449
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

#: ../../ref/contrib/messages.txt:450
msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:2
msgid "PostgreSQL specific model fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:4
msgid ""
"All of these fields are available from the "
"``django.contrib.postgres.fields`` module."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:10
msgid "ArrayField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:14
msgid ""
"A field for storing lists of data. Most field types can be used, you simply "
"pass another field instance as the :attr:`base_field "
"<ArrayField.base_field>`. You may also specify a :attr:`size "
"<ArrayField.size>`. ``ArrayField`` can be nested to store multi-dimensional "
"arrays."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:20
msgid ""
"If you give the field a :attr:`~django.db.models.Field.default`, ensure it's"
" a callable such as ``list`` (for an empty default) or a callable that "
"returns a list (such as a function). Incorrectly using ``default=[]`` "
"creates a mutable default that is shared between all instances of "
"``ArrayField``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:28
#: ../../ref/contrib/postgres/forms.txt:19
msgid "This is a required argument."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:30
msgid ""
"Specifies the underlying data type and behavior for the array. It should be "
"an instance of a subclass of :class:`~django.db.models.Field`. For example, "
"it could be an :class:`~django.db.models.IntegerField` or a "
":class:`~django.db.models.CharField`. Most field types are permitted, with "
"the exception of those handling relational data "
"(:class:`~django.db.models.ForeignKey`, "
":class:`~django.db.models.OneToOneField` and "
":class:`~django.db.models.ManyToManyField`)."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:40
msgid ""
"It is possible to nest array fields - you can specify an instance of "
"``ArrayField`` as the ``base_field``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:55
msgid ""
"Transformation of values between the database and the model, validation of "
"data and configuration, and serialization are all delegated to the "
"underlying base field."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:61
msgid "This is an optional argument."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:63
msgid ""
"If passed, the array will have a maximum size as specified. This will be "
"passed to the database, although PostgreSQL at present does not enforce the "
"restriction."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:69
msgid ""
"When nesting ``ArrayField``, whether you use the `size` parameter or not, "
"PostgreSQL requires that the arrays are rectangular::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:90
msgid ""
"If irregular shapes are required, then the underlying field should be made "
"nullable and the values padded with ``None``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:94
msgid "Querying ArrayField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:96
msgid ""
"There are a number of custom lookups and transforms for :class:`ArrayField`."
" We will use the following example model::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:114
msgid ""
"The :lookup:`contains` lookup is overridden on :class:`ArrayField`. The "
"returned objects will be those where the values passed are a subset of the "
"data. It uses the SQL operator ``@>``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:134
#: ../../ref/contrib/postgres/fields.txt:363
#: ../../ref/contrib/postgres/fields.txt:549
msgid "contained_by"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:136
msgid ""
"This is the inverse of the :lookup:`contains <arrayfield.contains>` lookup -"
" the objects returned will be those where the data is a subset of the values"
" passed. It uses the SQL operator ``<@``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:153
#: ../../ref/contrib/postgres/fields.txt:557
msgid "overlap"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:155
msgid ""
"Returns objects where the data shares any results with the values passed. "
"Uses the SQL operator ``&&``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:171
msgid "len"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:173
msgid ""
"Returns the length of the array. The lookups available afterwards are those "
"available for :class:`~django.db.models.IntegerField`. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:185
msgid "Index transforms"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:187
msgid ""
"This class of transforms allows you to index into the array in queries. Any "
"non-negative integer can be used. There are no errors if it exceeds the "
":attr:`size <ArrayField.size>` of the array. The lookups available after the"
" transform are those from the :attr:`base_field <ArrayField.base_field>`. "
"For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:207
msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these indexes and those used in :lookup:`slices <arrayfield.slice>` "
"use 0-based indexing to be consistent with Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:214
msgid "Slice transforms"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:216
msgid ""
"This class of transforms allow you to take a slice of the array. Any two "
"non-negative integers can be used, separated by a single underscore. The "
"lookups available after the transform do not change. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:232
msgid ""
"PostgreSQL uses 1-based indexing for array fields when writing raw SQL. "
"However these slices and those used in :lookup:`indexes <arrayfield.index>` "
"use 0-based indexing to be consistent with Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:236
msgid "Multidimensional arrays with indexes and slices"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:238
msgid ""
"PostgreSQL has some rather esoteric behavior when using indexes and slices "
"on multidimensional arrays. It will always work to use indexes to reach down"
" to the final underlying data, but most other slices behave strangely at the"
" database level and cannot be supported in a logical, consistent fashion by "
"Django."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:245
msgid "Indexing ArrayField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:247
msgid ""
"At present using :attr:`~django.db.models.Field.db_index` will create a "
"``btree`` index. This does not offer particularly significant help to "
"querying. A more useful index is a ``GIN`` index, which you should create "
"using a :class:`~django.db.migrations.operations.RunSQL` operation."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:253
#: ../../ref/contrib/postgres/forms.txt:138
msgid "HStoreField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:257
msgid ""
"A field for storing mappings of strings to strings. The Python data type "
"used is a ``dict``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:260
msgid "To use this field, you'll need to:"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:262
msgid "Add ``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:263
msgid ""
"Setup the hstore extension in PostgreSQL before the first ``CreateModel`` or"
" ``AddField`` operation by adding a migration with the "
":class:`~django.contrib.postgres.operations.HStoreExtension` operation. For "
"example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:278
msgid ""
"Creating the extension requires a database user with superuser privileges. "
"If the Django database user doesn't have superuser privileges, you'll have "
"to create the extension outside of Django migrations with a user that has "
"the appropriate privileges. In that case, connect to your Django database "
"and run the query ``CREATE EXTENSION IF NOT EXISTS hstore;``"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:285
msgid ""
"You'll see an error like ``can't adapt type 'dict'`` if you skip the first "
"step, or ``type \"hstore\" does not exist`` if you skip the second."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:290
#: ../../ref/contrib/postgres/forms.txt:154
msgid ""
"On occasions it may be useful to require or restrict the keys which are "
"valid for a given field. This can be done using the "
":class:`~django.contrib.postgres.validators.KeysValidator`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:295
msgid "Querying HStoreField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:297
msgid ""
"In addition to the ability to query by key, there are a number of custom "
"lookups available for ``HStoreField``."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:300
msgid "We will use the following example model::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:315
msgid "Key lookups"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:317
msgid ""
"To query based on a given key, you simply use that key as the lookup name::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:325
msgid "You can chain other lookups after key lookups::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:330
msgid ""
"If the key you wish to query by clashes with the name of another lookup, you"
" need to use the :lookup:`hstorefield.contains` lookup instead."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:335
msgid ""
"Since any string could be a key in a hstore value, any lookup other than "
"those listed below will be interpreted as a key lookup. No errors are "
"raised. Be extra careful for typing mistakes, and always check your queries "
"work as you intend."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:345
msgid ""
"The :lookup:`contains` lookup is overridden on "
":class:`~django.contrib.postgres.fields.HStoreField`. The returned objects "
"are those where the given ``dict`` of key-value pairs are all contained in "
"the field. It uses the SQL operator ``@>``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:365
msgid ""
"This is the inverse of the :lookup:`contains <hstorefield.contains>` lookup "
"- the objects returned will be those where the key-value pairs on the object"
" are a subset of those in the value passed. It uses the SQL operator ``<@``."
" For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:383
msgid "has_key"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:385
msgid ""
"Returns objects where the given key is in the data. Uses the SQL operator "
"``?``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:397
msgid "has_keys"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:399
msgid ""
"Returns objects where all of the given keys are in the data. Uses the SQL "
"operator ``?&``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:411
msgid "keys"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:413
msgid ""
"Returns objects where the array of keys is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on "
":class:`~django.contrib.postgres.fields.ArrayField`. Uses the SQL function "
"``akeys()``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:428
#: ../../ref/models/querysets.txt:518
msgid "values"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:430
msgid ""
"Returns objects where the array of values is the given value. Note that the "
"order is not guaranteed to be reliable, so this transform is mainly useful "
"for using in conjunction with lookups on "
":class:`~django.contrib.postgres.fields.ArrayField`. Uses the SQL function "
"``avalues()``. For example::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:445
#: ../../ref/contrib/postgres/forms.txt:159
msgid "Range Fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:447
msgid ""
"There are five range field types, corresponding to the built-in range types "
"in PostgreSQL. These fields are used to store a range of values; for example"
" the start and end timestamps of an event, or the range of ages an activity "
"is suitable for."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:452
msgid ""
"All of the range fields translate to :ref:`psycopg2 Range objects <psycopg2"
":adapt-range>` in python, but also accept tuples as input if no bounds "
"information is necessary. The default is lower bound included, upper bound "
"excluded."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:458
#: ../../ref/contrib/postgres/forms.txt:168
msgid "IntegerRangeField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:462
msgid ""
"Stores a range of integers. Based on an "
":class:`~django.db.models.IntegerField`. Represented by an ``int4range`` in "
"the database and a :class:`~psycopg2:psycopg2.extras.NumericRange` in "
"Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:468
msgid "BigIntegerRangeField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:472
msgid ""
"Stores a range of large integers. Based on a "
":class:`~django.db.models.BigIntegerField`. Represented by an ``int8range`` "
"in the database and a :class:`~psycopg2:psycopg2.extras.NumericRange` in "
"Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:478
#: ../../ref/contrib/postgres/forms.txt:178
msgid "FloatRangeField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:482
msgid ""
"Stores a range of floating point values. Based on a "
":class:`~django.db.models.FloatField`. Represented by a ``numrange`` in the "
"database and a :class:`~psycopg2:psycopg2.extras.NumericRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:487
#: ../../ref/contrib/postgres/forms.txt:187
msgid "DateTimeRangeField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:491
msgid ""
"Stores a range of timestamps. Based on a "
":class:`~django.db.models.DateTimeField`. Represented by a ``tztsrange`` in "
"the database and a :class:`~psycopg2:psycopg2.extras.DateTimeTZRange` in "
"Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:497
#: ../../ref/contrib/postgres/forms.txt:196
msgid "DateRangeField"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:501
msgid ""
"Stores a range of dates. Based on a :class:`~django.db.models.DateField`. "
"Represented by a ``daterange`` in the database and a "
":class:`~psycopg2:psycopg2.extras.DateRange` in Python."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:506
msgid "Querying Range Fields"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:508
msgid ""
"There are a number of custom lookups and transforms for range fields. They "
"are available on all the above fields, but we will use the following example"
" model::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:522
msgid "We will also use the following example objects::"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:527
msgid "and ``NumericRange``:"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:532
msgid "Containment functions"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:534
msgid ""
"As with other PostgreSQL fields, there are three standard containment "
"operators: ``contains``, ``contained_by`` and ``overlap``, using the SQL "
"operators ``@>``, ``<@``, and ``&&`` respectively."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:563
msgid "Comparison functions"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:565
msgid ""
"Range fields support the standard lookups: :lookup:`lt`, :lookup:`gt`, "
":lookup:`lte` and :lookup:`gte`. These are not particularly helpful - they "
"compare the lower bounds first and then the upper bounds only if necessary. "
"This is also the strategy used to order by a range field. It is better to "
"use the specific range comparison operators."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:574
msgid "fully_lt"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:576
msgid ""
"The returned ranges are strictly less than the passed range. In other words,"
" all the points in the returned range are less than all those in the passed "
"range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:586
msgid "fully_gt"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:588
msgid ""
"The returned ranges are strictly greater than the passed range. In other "
"words, the all the points in the returned range are greater than all those "
"in the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:598
msgid "not_lt"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:600
msgid ""
"The returned ranges do not contain any points less than the passed range, "
"that is the lower bound of the returned range is at least the lower bound of"
" the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:610
msgid "not_gt"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:612
msgid ""
"The returned ranges do not contain any points greater than the passed range,"
" that is the upper bound of the returned range is at most the upper bound of"
" the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:622
msgid "adjacent_to"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:624
msgid "The returned ranges share a bound with the passed range."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:630
msgid "Querying using the bounds"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:632
msgid ""
"There are three transforms available for use in queries. You can extract the"
" lower or upper bound, or query based on emptiness."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:638
#: ../../ref/models/querysets.txt:2425
msgid "startswith"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:640
msgid ""
"Returned objects have the given lower bound. Can be chained to valid lookups"
" for the base field."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:649
#: ../../ref/models/querysets.txt:2464
msgid "endswith"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:651
msgid ""
"Returned objects have the given upper bound. Can be chained to valid lookups"
" for the base field."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:660
msgid "isempty"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:662
msgid ""
"Returned objects are empty ranges. Can be chained to valid lookups for a "
":class:`~django.db.models.BooleanField`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:669
msgid "Defining your own range types"
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:671
msgid ""
"PostgreSQL allows the definition of custom range types. Django's model and "
"form field implementations use base classes below, and psycopg2 provides a "
":func:`~psycopg2:psycopg2.extras.register_range` to allow use of custom "
"range types."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:678
msgid "Base class for model range fields."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:682
msgid "The model field to use."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:686
#: ../../ref/contrib/postgres/fields.txt:703
msgid "The psycopg2 range type to use."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:690
msgid ""
"The form field class to use. Should be a subclass of "
":class:`django.contrib.postgres.forms.BaseRangeField`."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:695
msgid "Base class for form range fields."
msgstr ""

#: ../../ref/contrib/postgres/fields.txt:699
msgid "The form field to use."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:2
msgid "PostgreSQL specific form fields and widgets"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:4
msgid ""
"All of these fields and widgets are available from the "
"``django.contrib.postgres.forms`` module."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:10
msgid "SimpleArrayField"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:14
msgid ""
"A simple field which maps to an array. It is represented by an HTML "
"``<input>``."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:21
msgid ""
"It specifies the underlying form field for the array. This is not used to "
"render any HTML, but it is used to process the submitted data and validate "
"it. For example::"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:43
msgid ""
"This is an optional argument which defaults to a comma: ``,``. This value is"
" used to split the submitted data. It allows you to chain "
"``SimpleArrayField`` for multidimensional data::"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:61
msgid ""
"The field does not support escaping of the delimiter, so be careful in cases"
" where the delimiter is a valid character in the underlying field. The "
"delimiter does not need to be only one character."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:67
msgid ""
"This is an optional argument which validates that the array does not exceed "
"the stated length."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:72
msgid ""
"This is an optional argument which validates that the array reaches at least"
" the stated length."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:75
#: ../../ref/contrib/postgres/forms.txt:146
msgid "User friendly forms"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:77
msgid ""
"``SimpleArrayField`` is not particularly user friendly in most cases, "
"however it is a useful way to format data from a client-side widget for "
"submission to the server."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:82
msgid "SplitArrayField"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:86
msgid ""
"This field handles arrays by reproducing the underlying field a fixed number"
" of times."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:91
msgid ""
"This is a required argument. It specifies the form field to be repeated."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:96
msgid "This is the fixed number of times the underlying field will be used."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:100
msgid ""
"By default, this is set to ``False``. When ``False``, each value from the "
"repeated fields is stored. When set to ``True``, any trailing values which "
"are blank will be stripped from the result. If the underlying field has "
"``required=True``, but ``remove_trailing_nulls`` is ``True``, then null "
"values are only allowed at the end, and will be stripped."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:107
#: ../../ref/models/conditional-expressions.txt:51
msgid "Some examples::"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:142
msgid ""
"A field which accepts JSON encoded data for an "
":class:`~django.contrib.postgres.fields.HStoreField`. It will cast all the "
"values to strings. It is represented by an HTML ``<textarea>``."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:148
msgid ""
"``HStoreField`` is not particularly user friendly in most cases, however it "
"is a useful way to format data from a client-side widget for submission to "
"the server."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:161
msgid ""
"This group of fields all share similar functionality for accepting range "
"data. They are based on :class:`~django.forms.MultiValueField`. They treat "
"one omitted value as an unbounded range. They also validate that the lower "
"bound is not greater than the upper bound. All of these fields use "
":class:`~django.contrib.postgres.forms.RangeWidget`."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:172
msgid ""
"Based on :class:`~django.forms.IntegerField` and translates its input into "
":class:`~psycopg2:psycopg2.extras.NumericRange`. Default for "
":class:`~django.contrib.postgres.fields.IntegerRangeField` and "
":class:`~django.contrib.postgres.fields.BigIntegerRangeField`."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:182
msgid ""
"Based on :class:`~django.forms.FloatField` and translates its input into "
":class:`~psycopg2:psycopg2.extras.NumericRange`. Default for "
":class:`~django.contrib.postgres.fields.FloatRangeField`."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:191
msgid ""
"Based on :class:`~django.forms.DateTimeField` and translates its input into "
":class:`~psycopg2:psycopg2.extras.DateTimeTZRange`. Default for "
":class:`~django.contrib.postgres.fields.DateTimeRangeField`."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:200
msgid ""
"Based on :class:`~django.forms.DateField` and translates its input into "
":class:`~psycopg2:psycopg2.extras.DateRange`. Default for "
":class:`~django.contrib.postgres.fields.DateRangeField`."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:205 ../../ref/forms/widgets.txt:3
msgid "Widgets"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:208
msgid "RangeWidget"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:212
msgid ""
"Widget used by all of the range fields. Based on "
":class:`~django.forms.MultiWidget`."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:215
msgid ":class:`~RangeWidget` has one required argument:"
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:219
msgid "A :class:`~RangeWidget` comprises a 2-tuple of ``base_widget``."
msgstr ""

#: ../../ref/contrib/postgres/forms.txt:223
msgid ""
"Takes a single \"compressed\" value of a field, for example a "
":class:`~django.contrib.postgres.fields.DateRangeField`, and returns a tuple"
" representing and lower and upper bound."
msgstr ""

#: ../../ref/contrib/postgres/index.txt:2
msgid "``django.contrib.postgres``"
msgstr ""

#: ../../ref/contrib/postgres/index.txt:9
msgid ""
"PostgreSQL has a number of features which are not shared by the other "
"databases Django supports. This optional module contains model fields and "
"form fields for a number of PostgreSQL specific data types."
msgstr ""

#: ../../ref/contrib/postgres/index.txt:13
msgid "Psycopg2 2.5 or higher is required."
msgstr ""

#: ../../ref/contrib/postgres/index.txt:16
msgid ""
"Django is, and will continue to be, a database-agnostic web framework. We "
"would encourage those writing reusable applications for the Django community"
" to write database-agnostic code where practical. However, we recognize that"
" real world projects written using Django need not be database-agnostic. In "
"fact, once a project reaches a given size changing the underlying data store"
" is already a significant challenge and is likely to require changing the "
"code base in some ways to handle differences between the data stores."
msgstr ""

#: ../../ref/contrib/postgres/index.txt:25
msgid ""
"Django provides support for a number of data types which will only work with"
" PostgreSQL. There is no fundamental reason why (for example) a "
"``contrib.mysql`` module does not exist, except that PostgreSQL has the "
"richest feature set of the supported databases so its users have the most to"
" gain."
msgstr ""

#: ../../ref/contrib/postgres/lookups.txt:3
msgid "PostgreSQL specific lookups"
msgstr ""

#: ../../ref/contrib/postgres/lookups.txt:6
msgid "Unaccent"
msgstr ""

#: ../../ref/contrib/postgres/lookups.txt:10
msgid ""
"The ``unaccent`` lookup allows you to perform accent-insensitive lookups "
"using a dedicated PostgreSQL extension."
msgstr ""

#: ../../ref/contrib/postgres/lookups.txt:13
msgid ""
"This lookup is implemented using :class:`~django.db.models.Transform`, so it"
" can be chained with other lookup functions. To use it, you need to add "
"``'django.contrib.postgres'`` in your :setting:`INSTALLED_APPS` and activate"
" the `unaccent extension on PostgreSQL`_. The "
":class:`~django.contrib.postgres.operations.UnaccentExtension` migration "
"operation is available if you want to perform this activation using "
"migrations)."
msgstr ""

#: ../../ref/contrib/postgres/lookups.txt:22
msgid ""
"The ``unaccent`` lookup can be used on :class:`~django.db.models.CharField` "
"and :class:`~django.db.models.TextField`::"
msgstr ""

#: ../../ref/contrib/postgres/lookups.txt:33
msgid ""
"``unaccent`` lookups should perform fine in most use cases. However, queries"
" using this filter will generally perform full table scans, which can be "
"slow on large tables. In those cases, using dedicated full text indexing "
"tools might be appropriate."
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:2
msgid "Database migration operations"
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:4
msgid ""
"All of these :doc:`operations </ref/migration-operations>` are available "
"from the ``django.contrib.postgres.operations`` module."
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:10
msgid "CreateExtension"
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:14
msgid "An ``Operation`` subclass which installs PostgreSQL extensions."
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:18
msgid ""
"This is a required argument. The name of the extension to be installed."
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:21
msgid "HStoreExtension"
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:25
msgid ""
"A subclass of :class:`~django.contrib.postgres.operations.CreateExtension` "
"which will install the ``hstore`` extension and also immediately set up the "
"connection to interpret hstore data."
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:30
msgid "UnaccentExtension"
msgstr ""

#: ../../ref/contrib/postgres/operations.txt:34
msgid ""
"A subclass of :class:`~django.contrib.postgres.operations.CreateExtension` "
"which will install the ``unaccent`` extension."
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:3 ../../ref/validators.txt:3
msgid "Validators"
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:8
msgid "``KeysValidator``"
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:12
msgid ""
"Validates that the given keys are contained in the value. If ``strict`` is "
"``True``, then it also checks that there are no other keys present."
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:15
msgid ""
"The ``messages`` passed should be a dict containing the keys "
"``missing_keys`` and/or ``extra_keys``."
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:19
msgid ""
"Note that this checks only for the existence of a given key, not that the "
"value of a key is non-empty."
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:23
msgid "Range validators"
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:27
msgid ""
"Validates that the upper bound of the range is not greater than "
"``limit_value``."
msgstr ""

#: ../../ref/contrib/postgres/validators.txt:32
msgid ""
"Validates that the lower bound of the range is not less than the "
"``limit_value``."
msgstr ""

#: ../../ref/contrib/redirects.txt:3
msgid "The redirects app"
msgstr ""

#: ../../ref/contrib/redirects.txt:8
msgid ""
"Django comes with an optional redirects application. It lets you store "
"simple redirects in a database and handles the redirecting for you. It uses "
"the HTTP response status code ``301 Moved Permanently`` by default."
msgstr ""

#: ../../ref/contrib/redirects.txt:15
msgid "To install the redirects app, follow these steps:"
msgstr ""

#: ../../ref/contrib/redirects.txt:17
msgid ""
"Ensure that the ``django.contrib.sites`` framework :ref:`is installed "
"<enabling-the-sites-framework>`."
msgstr ""

#: ../../ref/contrib/redirects.txt:19
msgid ""
"Add ``'django.contrib.redirects'`` to your :setting:`INSTALLED_APPS` "
"setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:20
msgid ""
"Add ``'django.contrib.redirects.middleware.RedirectFallbackMiddleware'`` to "
"your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:27
msgid ""
"``manage.py migrate`` creates a ``django_redirect`` table in your database. "
"This is a simple lookup table with ``site_id``, ``old_path`` and "
"``new_path`` fields."
msgstr ""

#: ../../ref/contrib/redirects.txt:30
msgid ""
"The :class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`"
" does all of the work. Each time any Django application raises a 404 error, "
"this middleware checks the redirects database for the requested URL as a "
"last resort. Specifically, it checks for a redirect with the given "
"``old_path`` with a site ID that corresponds to the :setting:`SITE_ID` "
"setting."
msgstr ""

#: ../../ref/contrib/redirects.txt:37
msgid ""
"If it finds a match, and ``new_path`` is not empty, it redirects to "
"``new_path`` using a 301 (\"Moved Permanently\") redirect. You can subclass "
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` and"
" set "
":attr:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class`"
" to :class:`django.http.HttpResponseRedirect` to use a ``302 Moved "
"Temporarily`` redirect instead."
msgstr ""

#: ../../ref/contrib/redirects.txt:44
msgid ""
"If it finds a match, and ``new_path`` is empty, it sends a 410 (\"Gone\") "
"HTTP header and empty (content-less) response."
msgstr ""

#: ../../ref/contrib/redirects.txt:52
msgid ""
"Note that the order of :setting:`MIDDLEWARE_CLASSES` matters. Generally, you"
" can put "
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` at "
"the end of the list, because it's a last resort."
msgstr ""

#: ../../ref/contrib/redirects.txt:60
msgid "How to add, change and delete redirects"
msgstr ""

#: ../../ref/contrib/redirects.txt:65
msgid ""
"If you've activated the automatic Django admin interface, you should see a "
"\"Redirects\" section on the admin index page. Edit redirects as you edit "
"any other object in the system."
msgstr ""

#: ../../ref/contrib/redirects.txt:74
msgid ""
"Redirects are represented by a standard :doc:`Django model "
"</topics/db/models>`, which lives in `django/contrib/redirects/models.py`_. "
"You can access redirect objects via the :doc:`Django database API "
"</topics/db/queries>`."
msgstr ""

#: ../../ref/contrib/redirects.txt:81 ../../ref/middleware.txt:3
msgid "Middleware"
msgstr ""

#: ../../ref/contrib/redirects.txt:85
msgid ""
"You can change the :class:`~django.http.HttpResponse` classes used by the "
"middleware by creating a subclass of "
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware` and"
" overriding ``response_gone_class`` and/or ``response_redirect_class``."
msgstr ""

#: ../../ref/contrib/redirects.txt:94
msgid ""
"The :class:`~django.http.HttpResponse` class used when a "
":class:`~django.contrib.redirects.models.Redirect` is not found for the "
"requested path or has a blank ``new_path`` value."
msgstr ""

#: ../../ref/contrib/redirects.txt:99
msgid "Defaults to :class:`~django.http.HttpResponseGone`."
msgstr ""

#: ../../ref/contrib/redirects.txt:105
msgid ""
"The :class:`~django.http.HttpResponse` class that handles the redirect."
msgstr ""

#: ../../ref/contrib/redirects.txt:108
msgid "Defaults to :class:`~django.http.HttpResponsePermanentRedirect`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:3
msgid "The sitemap framework"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:8
msgid ""
"Django comes with a high-level sitemap-generating framework that makes "
"creating sitemap_ XML files easy."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:16
msgid ""
"A sitemap is an XML file on your Web site that tells search-engine indexers "
"how frequently your pages change and how \"important\" certain pages are in "
"relation to other pages on your site. This information helps search engines "
"index your site."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:21
msgid ""
"The Django sitemap framework automates the creation of this XML file by "
"letting you express this information in Python code."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:24
msgid ""
"It works much like Django's :doc:`syndication framework "
"</ref/contrib/syndication>`. To create a sitemap, just write a "
":class:`~django.contrib.sitemaps.Sitemap` class and point to it in your "
":doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:32
msgid "To install the sitemap app, follow these steps:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:34
msgid ""
"Add ``'django.contrib.sitemaps'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:37
msgid ""
"Make sure your :setting:`TEMPLATES` setting contains a ``DjangoTemplates`` "
"backend whose ``APP_DIRS`` options is set to ``True``. It's in there by "
"default, so you'll only need to change this if you've changed that setting."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:41
msgid ""
"Make sure you've installed the :mod:`sites framework "
"<django.contrib.sites>`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:44
msgid ""
"(Note: The sitemap application doesn't install any database tables. The only"
" reason it needs to go into :setting:`INSTALLED_APPS` is so that the "
":func:`~django.template.loaders.app_directories.Loader` template loader can "
"find the default templates.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:50
msgid "Initialization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:54
msgid ""
"To activate sitemap generation on your Django site, add this line to your "
":doc:`URLconf </topics/http/urls>`::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:62
msgid ""
"This tells Django to build a sitemap when a client accesses "
":file:`/sitemap.xml`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:64
msgid ""
"The name of the sitemap file is not important, but the location is. Search "
"engines will only index links in your sitemap for the current URL level and "
"below. For instance, if :file:`sitemap.xml` lives in your root directory, it"
" may reference any URL in your site. However, if your sitemap lives at "
":file:`/content/sitemap.xml`, it may only reference URLs that begin with "
":file:`/content/`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:71
msgid ""
"The sitemap view takes an extra, required argument: ``{'sitemaps': "
"sitemaps}``. ``sitemaps`` should be a dictionary that maps a short section "
"label (e.g., ``blog`` or ``news``) to its "
":class:`~django.contrib.sitemaps.Sitemap` class (e.g., ``BlogSitemap`` or "
"``NewsSitemap``). It may also map to an *instance* of a "
":class:`~django.contrib.sitemaps.Sitemap` class (e.g., "
"``BlogSitemap(some_var)``)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:79
msgid "Sitemap classes"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:81
msgid ""
"A :class:`~django.contrib.sitemaps.Sitemap` class is a simple Python class "
"that represents a \"section\" of entries in your sitemap. For example, one "
":class:`~django.contrib.sitemaps.Sitemap` class could represent all the "
"entries of your Weblog, while another could represent all of the events in "
"your events calendar."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:87
msgid ""
"In the simplest case, all these sections get lumped together into one "
":file:`sitemap.xml`, but it's also possible to use the framework to generate"
" a sitemap index that references individual sitemap files, one per section. "
"(See `Creating a sitemap index`_ below.)"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:92
msgid ""
":class:`~django.contrib.sitemaps.Sitemap` classes must subclass "
"``django.contrib.sitemaps.Sitemap``. They can live anywhere in your "
"codebase."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:96 ../../ref/contrib/syndication.txt:50
msgid "A simple example"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:98
msgid ""
"Let's assume you have a blog system, with an ``Entry`` model, and you want "
"your sitemap to include all the links to your individual blog entries. "
"Here's how your sitemap class might look::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:115 ../../ref/contrib/syndication.txt:89
msgid "Note:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:117
msgid ""
":attr:`~Sitemap.changefreq` and :attr:`~Sitemap.priority` are class "
"attributes corresponding to ``<changefreq>`` and ``<priority>`` elements, "
"respectively. They can be made callable as functions, as "
":attr:`~Sitemap.lastmod` was in the example."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:121
msgid ""
":attr:`~Sitemap.items()` is simply a method that returns a list of objects. "
"The objects returned will get passed to any callable methods corresponding "
"to a sitemap property (:attr:`~Sitemap.location`, :attr:`~Sitemap.lastmod`, "
":attr:`~Sitemap.changefreq`, and :attr:`~Sitemap.priority`)."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:126
msgid ":attr:`~Sitemap.lastmod` should return a Python ``datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:127
msgid ""
"There is no :attr:`~Sitemap.location` method in this example, but you can "
"provide it in order to specify the URL for your object. By default, "
":attr:`~Sitemap.location()` calls ``get_absolute_url()`` on each object and "
"returns the result."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:133
msgid "Sitemap class reference"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:137
msgid "A ``Sitemap`` class can define the following methods/attributes:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:141
msgid ""
"**Required.** A method that returns a list of objects. The framework doesn't"
" care what *type* of objects they are; all that matters is that these "
"objects get passed to the :attr:`~Sitemap.location()`, "
":attr:`~Sitemap.lastmod()`, :attr:`~Sitemap.changefreq()` and "
":attr:`~Sitemap.priority()` methods."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:149 ../../ref/contrib/sitemaps.txt:174
#: ../../ref/contrib/sitemaps.txt:195 ../../ref/contrib/sitemaps.txt:215
msgid "**Optional.** Either a method or attribute."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:151
msgid ""
"If it's a method, it should return the absolute path for a given object as "
"returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:154
msgid ""
"If it's an attribute, its value should be a string representing an absolute "
"path to use for *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:158
msgid ""
"In both cases, \"absolute path\" means a URL that doesn't include the "
"protocol or domain. Examples:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:161
msgid "Good: :file:`'/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:162
msgid "Bad: :file:`'example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:163
msgid "Bad: :file:`'http://example.com/foo/bar/'`"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:165
msgid ""
"If :attr:`~Sitemap.location` isn't provided, the framework will call the "
"``get_absolute_url()`` method on each object as returned by "
":attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:169
msgid ""
"To specify a protocol other than ``'http'``, use :attr:`~Sitemap.protocol`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:176
msgid ""
"If it's a method, it should take one argument -- an object as returned by "
":attr:`~Sitemap.items()` -- and return that object's last-modified "
"date/time, as a Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:180
msgid ""
"If it's an attribute, its value should be a Python ``datetime.datetime`` "
"object representing the last-modified date/time for *every* object returned "
"by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:186
msgid ""
"If all items in a sitemap have a :attr:`~Sitemap.lastmod`, the sitemap "
"generated by :func:`views.sitemap` will have a ``Last-Modified`` header "
"equal to the latest ``lastmod``. You can activate the "
":class:`~django.middleware.http.ConditionalGetMiddleware` to make Django "
"respond appropriately to requests with an ``If-Modified-Since`` header which"
" will prevent sending the sitemap if it hasn't changed."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:197
msgid ""
"If it's a method, it should take one argument -- an object as returned by "
":attr:`~Sitemap.items()` -- and return that object's change frequency, as a "
"Python string."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:200
msgid ""
"If it's an attribute, its value should be a string representing the change "
"frequency of *every* object returned by :attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:203
msgid ""
"Possible values for :attr:`~Sitemap.changefreq`, whether you use a method or"
" attribute, are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:205
msgid "``'always'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:206
msgid "``'hourly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:207
msgid "``'daily'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:208
msgid "``'weekly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:209
msgid "``'monthly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:210
msgid "``'yearly'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:211
msgid "``'never'``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:217
msgid ""
"If it's a method, it should take one argument -- an object as returned by "
":attr:`~Sitemap.items()` -- and return that object's priority, as either a "
"string or float."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:220
msgid ""
"If it's an attribute, its value should be either a string or float "
"representing the priority of *every* object returned by "
":attr:`~Sitemap.items()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:223
msgid ""
"Example values for :attr:`~Sitemap.priority`: ``0.4``, ``1.0``. The default "
"priority of a page is ``0.5``. See the `sitemaps.org documentation`_ for "
"more."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:230 ../../ref/contrib/sitemaps.txt:239
#: ../../ref/contrib/sitemaps.txt:250
msgid "**Optional.**"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:232
msgid ""
"This attribute defines the protocol (``'http'`` or ``'https'``) of the URLs "
"in the sitemap. If it isn't set, the protocol with which the sitemap was "
"requested is used. If the sitemap is built outside the context of a request,"
" the default is ``'http'``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:241
msgid ""
"This attribute defines the maximum number of URLs included on each page of "
"the sitemap. Its value should not exceed the default value of ``50000``, "
"which is the upper limit allowed in the `Sitemaps protocol "
"<http://www.sitemaps.org/protocol.html#index>`_."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:252
msgid ""
"A boolean attribute that defines if the URLs of this sitemap should be "
"generated using all of your :setting:`LANGUAGES`. The default is ``False``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:257
msgid "Shortcuts"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:259
msgid ""
"The sitemap framework provides a couple convenience classes for common "
"cases:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:265
msgid ""
"Use :class:`django.contrib.flatpages.sitemaps.FlatPageSitemap` instead."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:267
msgid ""
"The :class:`django.contrib.sitemaps.FlatPageSitemap` class looks at all "
"publicly visible :mod:`flatpages <django.contrib.flatpages>` defined for the"
" current :setting:`SITE_ID` (see the :mod:`sites documentation "
"<django.contrib.sites>`) and creates an entry in the sitemap. These entries "
"include only the :attr:`~Sitemap.location` attribute -- not "
":attr:`~Sitemap.lastmod`, :attr:`~Sitemap.changefreq` or "
":attr:`~Sitemap.priority`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:277
msgid ""
"The :class:`django.contrib.sitemaps.GenericSitemap` class allows you to "
"create a sitemap by passing it a dictionary which has to contain at least a "
"``queryset`` entry. This queryset will be used to generate the items of the "
"sitemap. It may also have a ``date_field`` entry that specifies a date field"
" for objects retrieved from the ``queryset``. This will be used for the "
":attr:`~Sitemap.lastmod` attribute in the generated sitemap. You may also "
"pass :attr:`~Sitemap.priority` and :attr:`~Sitemap.changefreq` keyword "
"arguments to the :class:`~django.contrib.sitemaps.GenericSitemap`  "
"constructor to specify these attributes for all URLs."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:291
msgid ""
"Here's an example of a :doc:`URLconf </topics/http/urls>` using "
":class:`GenericSitemap`::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:317
msgid "Sitemap for static views"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:319
msgid ""
"Often you want the search engine crawlers to index views which are neither "
"object detail pages nor flatpages. The solution is to explicitly list URL "
"names for these views in ``items`` and call "
":func:`~django.core.urlresolvers.reverse` in the ``location`` method of the "
"sitemap. For example::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:361
msgid "Creating a sitemap index"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:365
msgid ""
"The sitemap framework also has the ability to create a sitemap index that "
"references individual sitemap files, one per each section defined in your "
"``sitemaps`` dictionary. The only differences in usage are:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:369
msgid ""
"You use two views in your URLconf: "
":func:`django.contrib.sitemaps.views.index` and "
":func:`django.contrib.sitemaps.views.sitemap`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:371
msgid ""
"The :func:`django.contrib.sitemaps.views.sitemap` view should take a "
"``section`` keyword argument."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:374
msgid ""
"Here's what the relevant URLconf lines would look like for the example "
"above::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:383
msgid ""
"This will automatically generate a :file:`sitemap.xml` file that references "
"both :file:`sitemap-flatpages.xml` and :file:`sitemap-blog.xml`. The "
":class:`~django.contrib.sitemaps.Sitemap` classes and the ``sitemaps`` dict "
"don't change at all."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:388
msgid ""
"You should create an index file if one of your sitemaps has more than 50,000"
" URLs. In this case, Django will automatically paginate the sitemap, and the"
" index will reflect that."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:392
msgid ""
"If you're not using the vanilla sitemap view -- for example, if it's wrapped"
" with a caching decorator -- you must name your sitemap view and pass "
"``sitemap_url_name`` to the index view::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:410
msgid "Template customization"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:412
msgid ""
"If you wish to use a different template for each sitemap or sitemap index "
"available on your site, you may specify it by passing a ``template_name`` "
"parameter to the ``sitemap`` and ``index`` views via the URLconf::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:436
msgid "Context variables"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:438
msgid ""
"When customizing the templates for the "
":func:`~django.contrib.sitemaps.views.index` and "
":func:`~django.contrib.sitemaps.views.sitemap` views, you can rely on the "
"following context variables."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:446
msgid ""
"The variable ``sitemaps`` is a list of absolute URLs to each of the "
"sitemaps."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:449
msgid "Sitemap"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:451
msgid ""
"The variable ``urlset`` is a list of URLs that should appear in the sitemap."
" Each URL exposes attributes as defined in the "
":class:`~django.contrib.sitemaps.Sitemap` class:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:455
msgid "``changefreq``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:456
msgid "``item``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:457
msgid "``lastmod``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:458
msgid "``location``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:459
msgid "``priority``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:461
msgid ""
"The ``item`` attribute has been added for each URL to allow more flexible "
"customization of the templates, such as `Google news sitemaps`_. Assuming "
"Sitemap's :attr:`~Sitemap.items()` would return a list of items with "
"``publication_data`` and a ``tags`` field something like this would generate"
" a Google News compatible sitemap:"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:492
msgid "Pinging Google"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:494
msgid ""
"You may want to \"ping\" Google when your sitemap changes, to let it know to"
" reindex your site. The sitemaps framework provides a function to do just "
"that: :func:`django.contrib.sitemaps.ping_google()`."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:500
msgid ""
":func:`ping_google` takes an optional argument, ``sitemap_url``, which "
"should be the absolute path to your site's sitemap (e.g., "
":file:`'/sitemap.xml'`). If this argument isn't provided, "
":func:`ping_google` will attempt to figure out your sitemap by performing a "
"reverse looking in your URLconf."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:506
msgid ""
":func:`ping_google` raises the exception "
"``django.contrib.sitemaps.SitemapNotFound`` if it cannot determine your "
"sitemap URL."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:510
msgid "Register with Google first!"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:512
msgid ""
"The :func:`ping_google` command only works if you have registered your site "
"with `Google Webmaster Tools`_."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:517
msgid ""
"One useful way to call :func:`ping_google` is from a model's ``save()`` "
"method::"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:533
msgid ""
"A more efficient solution, however, would be to call :func:`ping_google` "
"from a cron script, or some other scheduled task. The function makes an HTTP"
" request to Google's servers, so you may not want to introduce that network "
"overhead each time you call ``save()``."
msgstr ""

#: ../../ref/contrib/sitemaps.txt:539
msgid "Pinging Google via ``manage.py``"
msgstr ""

#: ../../ref/contrib/sitemaps.txt:543
msgid ""
"Once the sitemaps application is added to your project, you may also ping "
"Google using the ``ping_google`` management command::"
msgstr ""

#: ../../ref/contrib/sites.txt:3
msgid "The \"sites\" framework"
msgstr ""

#: ../../ref/contrib/sites.txt:9
msgid ""
"Django comes with an optional \"sites\" framework. It's a hook for "
"associating objects and functionality to particular Web sites, and it's a "
"holding place for the domain names and \"verbose\" names of your Django-"
"powered sites."
msgstr ""

#: ../../ref/contrib/sites.txt:13
msgid ""
"Use it if your single Django installation powers more than one site and you "
"need to differentiate between those sites in some way."
msgstr ""

#: ../../ref/contrib/sites.txt:16
msgid "The sites framework is mainly based on a simple model:"
msgstr ""

#: ../../ref/contrib/sites.txt:20
msgid ""
"A model for storing the ``domain`` and ``name`` attributes of a Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:24
msgid ""
"The fully qualified domain name associated with the Web site. For example, "
"``www.example.com``."
msgstr ""

#: ../../ref/contrib/sites.txt:29
msgid "A human-readable \"verbose\" name for the Web site."
msgstr ""

#: ../../ref/contrib/sites.txt:31
msgid ""
"The :setting:`SITE_ID` setting specifies the database ID of the "
":class:`~django.contrib.sites.models.Site` object associated with that "
"particular settings file. If the setting is omitted, the "
":func:`~django.contrib.sites.shortcuts.get_current_site` function will try "
"to get the current site by comparing the "
":attr:`~django.contrib.sites.models.Site.domain` with the host name from the"
" :meth:`request.get_host() <django.http.HttpRequest.get_host>` method."
msgstr ""

#: ../../ref/contrib/sites.txt:39
msgid ""
"How you use this is up to you, but Django uses it in a couple of ways "
"automatically via simple conventions."
msgstr ""

#: ../../ref/contrib/sites.txt:43
msgid "Example usage"
msgstr ""

#: ../../ref/contrib/sites.txt:45
msgid "Why would you use sites? It's best explained through examples."
msgstr ""

#: ../../ref/contrib/sites.txt:48
msgid "Associating content with multiple sites"
msgstr ""

#: ../../ref/contrib/sites.txt:50
msgid ""
"The Django-powered sites LJWorld.com_ and Lawrence.com_ are operated by the "
"same news organization -- the Lawrence Journal-World newspaper in Lawrence, "
"Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local "
"entertainment. But sometimes editors want to publish an article on *both* "
"sites."
msgstr ""

#: ../../ref/contrib/sites.txt:56
msgid ""
"The naive way of solving the problem would be to require site producers to "
"publish the same story twice: once for LJWorld.com and again for "
"Lawrence.com. But that's inefficient for site producers, and it's redundant "
"to store multiple copies of the same story in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:61
msgid ""
"The better solution is simple: Both sites use the same article database, and"
" an article is associated with one or more sites. In Django model "
"terminology, that's represented by a "
":class:`~django.db.models.ManyToManyField` in the ``Article`` model::"
msgstr ""

#: ../../ref/contrib/sites.txt:74
msgid "This accomplishes several things quite nicely:"
msgstr ""

#: ../../ref/contrib/sites.txt:76
msgid ""
"It lets the site producers edit all content -- on both sites -- in a single "
"interface (the Django admin)."
msgstr ""

#: ../../ref/contrib/sites.txt:79
msgid ""
"It means the same story doesn't have to be published twice in the database; "
"it only has a single record in the database."
msgstr ""

#: ../../ref/contrib/sites.txt:82
msgid ""
"It lets the site developers use the same Django view code for both sites. "
"The view code that displays a given story just checks to make sure the "
"requested story is on the current site. It looks something like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:99
msgid "Associating content with a single site"
msgstr ""

#: ../../ref/contrib/sites.txt:101
msgid ""
"Similarly, you can associate a model to the "
":class:`~django.contrib.sites.models.Site` model in a many-to-one "
"relationship, using :class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/contrib/sites.txt:106
msgid ""
"For example, if an article is only allowed on a single site, you'd use a "
"model like this::"
msgstr ""

#: ../../ref/contrib/sites.txt:117
msgid "This has the same benefits as described in the last section."
msgstr ""

#: ../../ref/contrib/sites.txt:122
msgid "Hooking into the current site from views"
msgstr ""

#: ../../ref/contrib/sites.txt:124
msgid ""
"You can use the sites framework in your Django views to do particular things"
" based on the site in which the view is being called. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:138
msgid ""
"Of course, it's ugly to hard-code the site IDs like that. This sort of hard-"
"coding is best for hackish fixes that you need done quickly. The cleaner way"
" of accomplishing the same thing is to check the current site's domain::"
msgstr ""

#: ../../ref/contrib/sites.txt:154
msgid ""
"This has also the advantage of checking if the sites framework is installed,"
" and return a :class:`~django.contrib.sites.requests.RequestSite` instance "
"if it is not."
msgstr ""

#: ../../ref/contrib/sites.txt:158
msgid ""
"If you don't have access to the request object, you can use the "
"``get_current()`` method of the :class:`~django.contrib.sites.models.Site` "
"model's manager. You should then ensure that your settings file does contain"
" the :setting:`SITE_ID` setting. This example is equivalent to the previous "
"one::"
msgstr ""

#: ../../ref/contrib/sites.txt:175
msgid "Getting the current domain for display"
msgstr ""

#: ../../ref/contrib/sites.txt:177
msgid ""
"LJWorld.com and Lawrence.com both have email alert functionality, which lets"
" readers sign up to get notifications when news happens. It's pretty basic: "
"A reader signs up on a Web form and immediately gets an email saying, "
"\"Thanks for your subscription.\""
msgstr ""

#: ../../ref/contrib/sites.txt:182
msgid ""
"It'd be inefficient and redundant to implement this sign up processing code "
"twice, so the sites use the same code behind the scenes. But the \"thank you"
" for signing up\" notice needs to be different for each site. By using "
":class:`~django.contrib.sites.models.Site` objects, we can abstract the "
"\"thank you\" notice to use the values of the current site's "
":attr:`~django.contrib.sites.models.Site.name` and "
":attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""

#: ../../ref/contrib/sites.txt:190
msgid "Here's an example of what the form-handling view looks like::"
msgstr ""

#: ../../ref/contrib/sites.txt:207
msgid ""
"On Lawrence.com, this email has the subject line \"Thanks for subscribing to"
" lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks "
"for subscribing to LJWorld.com alerts.\" Same goes for the email's message "
"body."
msgstr ""

#: ../../ref/contrib/sites.txt:211
msgid ""
"Note that an even more flexible (but more heavyweight) way of doing this "
"would be to use Django's template system. Assuming Lawrence.com and "
"LJWorld.com have different template directories (:setting:`DIRS <TEMPLATES-"
"DIRS>`), you could simply farm out to the template system like so::"
msgstr ""

#: ../../ref/contrib/sites.txt:229
msgid ""
"In this case, you'd have to create :file:`subject.txt` and "
":file:`message.txt` template files for both the LJWorld.com and Lawrence.com"
" template directories. That gives you more flexibility, but it's also more "
"complex."
msgstr ""

#: ../../ref/contrib/sites.txt:233
msgid ""
"It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` "
"objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""

#: ../../ref/contrib/sites.txt:237
msgid "Getting the current domain for full URLs"
msgstr ""

#: ../../ref/contrib/sites.txt:239
msgid ""
"Django's ``get_absolute_url()`` convention is nice for getting your objects'"
" URL without the domain name, but in some cases you might want to display "
"the full URL -- with ``http://`` and the domain and everything -- for an "
"object. To do this, you can use the sites framework. A simple example::"
msgstr ""

#: ../../ref/contrib/sites.txt:256
msgid "Enabling the sites framework"
msgstr ""

#: ../../ref/contrib/sites.txt:258
msgid "To enable the sites framework, follow these steps:"
msgstr ""

#: ../../ref/contrib/sites.txt:260
msgid ""
"Add ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:263
msgid "Define a :setting:`SITE_ID` setting::"
msgstr ""

#: ../../ref/contrib/sites.txt:267
msgid "Run :djadmin:`migrate`."
msgstr ""

#: ../../ref/contrib/sites.txt:269
msgid ""
"``django.contrib.sites`` registers a "
":data:`~django.db.models.signals.post_migrate` signal handler which creates "
"a default site named ``example.com`` with the domain ``example.com``. This "
"site will also be created after Django creates the test database. To set the"
" correct name and domain for your project, you can use a :ref:`data "
"migration <data-migrations>`."
msgstr ""

#: ../../ref/contrib/sites.txt:276
msgid ""
"In order to serve different sites in production, you'd create a separate "
"settings file with each ``SITE_ID`` (perhaps importing from a common "
"settings file to avoid duplicating shared settings) and then specify the "
"appropriate :envvar:`DJANGO_SETTINGS_MODULE` for each site."
msgstr ""

#: ../../ref/contrib/sites.txt:282
msgid "Caching the current ``Site`` object"
msgstr ""

#: ../../ref/contrib/sites.txt:284
msgid ""
"As the current site is stored in the database, each call to "
"``Site.objects.get_current()`` could result in a database query. But Django "
"is a little cleverer than that: on the first request, the current site is "
"cached, and any subsequent call returns the cached data instead of hitting "
"the database."
msgstr ""

#: ../../ref/contrib/sites.txt:289
msgid ""
"If for any reason you want to force a database query, you can tell Django to"
" clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""

#: ../../ref/contrib/sites.txt:305
msgid "The ``CurrentSiteManager``"
msgstr ""

#: ../../ref/contrib/sites.txt:309
msgid ""
"If :class:`~django.contrib.sites.models.Site` plays a key role in your "
"application, consider using the helpful "
":class:`~django.contrib.sites.managers.CurrentSiteManager` in your model(s)."
" It's a model :doc:`manager </topics/db/managers>` that automatically "
"filters its queries to include only objects associated with the current "
":class:`~django.contrib.sites.models.Site`."
msgstr ""

#: ../../ref/contrib/sites.txt:316
msgid "Mandatory :setting:`SITE_ID`"
msgstr ""

#: ../../ref/contrib/sites.txt:318
msgid ""
"The ``CurrentSiteManager`` is only usable when the :setting:`SITE_ID` "
"setting is defined in your settings."
msgstr ""

#: ../../ref/contrib/sites.txt:321
msgid ""
"Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it "
"to your model explicitly. For example::"
msgstr ""

#: ../../ref/contrib/sites.txt:336
msgid ""
"With this model, ``Photo.objects.all()`` will return all ``Photo`` objects "
"in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` "
"objects associated with the current site, according to the "
":setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:340
msgid "Put another way, these two statements are equivalent::"
msgstr ""

#: ../../ref/contrib/sites.txt:345
msgid ""
"How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know "
"which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`?"
" By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` "
"looks for a either a :class:`~django.db.models.ForeignKey` called ``site`` "
"or a :class:`~django.db.models.ManyToManyField` called ``sites`` to filter "
"on. If you use a field named something other than ``site`` or ``sites`` to "
"identify which :class:`~django.contrib.sites.models.Site` objects your "
"object is related to, then you need to explicitly pass the custom field name"
" as a parameter to "
":class:`~django.contrib.sites.managers.CurrentSiteManager` on your model. "
"The following model, which has a field called ``publish_on``, demonstrates "
"this::"
msgstr ""

#: ../../ref/contrib/sites.txt:373
msgid ""
"If you attempt to use "
":class:`~django.contrib.sites.managers.CurrentSiteManager` and pass a field "
"name that doesn't exist, Django will raise a ``ValueError``."
msgstr ""

#: ../../ref/contrib/sites.txt:376
msgid ""
"Finally, note that you'll probably want to keep a normal (non-site-specific)"
" ``Manager`` on your model, even if you use "
":class:`~django.contrib.sites.managers.CurrentSiteManager`. As explained in "
"the :doc:`manager documentation </topics/db/managers>`, if you define a "
"manager manually, then Django won't create the automatic ``objects = "
"models.Manager()`` manager for you. Also note that certain parts of Django "
"-- namely, the Django admin site and generic views -- use whichever manager "
"is defined *first* in the model, so if you want your admin site to have "
"access to all objects (not just site-specific ones), put ``objects = "
"models.Manager()`` in your model, before you define "
":class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""

#: ../../ref/contrib/sites.txt:391 ../../ref/middleware.txt:350
msgid "Site middleware"
msgstr ""

#: ../../ref/contrib/sites.txt:395
msgid "If you often use this pattern::"
msgstr ""

#: ../../ref/contrib/sites.txt:403
msgid ""
"there is simple way to avoid repetitions. Add "
":class:`django.contrib.sites.middleware.CurrentSiteMiddleware` to "
":setting:`MIDDLEWARE_CLASSES`. The middleware sets the ``site`` attribute on"
" every request object, so you can use ``request.site`` to get the current "
"site."
msgstr ""

#: ../../ref/contrib/sites.txt:409
msgid "How Django uses the sites framework"
msgstr ""

#: ../../ref/contrib/sites.txt:411
msgid ""
"Although it's not required that you use the sites framework, it's strongly "
"encouraged, because Django takes advantage of it in a few places. Even if "
"your Django installation is powering only a single site, you should take the"
" two seconds to create the site object with your ``domain`` and ``name``, "
"and point to its ID in your :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/sites.txt:417
msgid "Here's how Django uses the sites framework:"
msgstr ""

#: ../../ref/contrib/sites.txt:419
msgid ""
"In the :mod:`redirects framework <django.contrib.redirects>`, each redirect "
"object is associated with a particular site. When Django searches for a "
"redirect, it takes into account the current site."
msgstr ""

#: ../../ref/contrib/sites.txt:423
msgid ""
"In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage "
"is associated with a particular site. When a flatpage is created, you "
"specify its :class:`~django.contrib.sites.models.Site`, and the "
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` "
"checks the current site in retrieving flatpages to display."
msgstr ""

#: ../../ref/contrib/sites.txt:429
msgid ""
"In the :mod:`syndication framework <django.contrib.syndication>`, the "
"templates for ``title`` and ``description`` automatically have access to a "
"variable ``{{ site }}``, which is the "
":class:`~django.contrib.sites.models.Site` object representing the current "
"site. Also, the hook for providing item URLs will use the ``domain`` from "
"the current :class:`~django.contrib.sites.models.Site` object if you don't "
"specify a fully-qualified domain."
msgstr ""

#: ../../ref/contrib/sites.txt:437
msgid ""
"In the :mod:`authentication framework <django.contrib.auth>`, the "
":func:`django.contrib.auth.views.login` view passes the current "
":class:`~django.contrib.sites.models.Site` name to the template as ``{{ "
"site_name }}``."
msgstr ""

#: ../../ref/contrib/sites.txt:442
msgid ""
"The shortcut view (``django.contrib.contenttypes.views.shortcut``) uses the "
"domain of the current :class:`~django.contrib.sites.models.Site` object when"
" calculating an object's URL."
msgstr ""

#: ../../ref/contrib/sites.txt:447
msgid ""
"In the admin framework, the \"view on site\" link uses the current "
":class:`~django.contrib.sites.models.Site` to work out the domain for the "
"site that it will redirect to."
msgstr ""

#: ../../ref/contrib/sites.txt:452
msgid "``RequestSite`` objects"
msgstr ""

#: ../../ref/contrib/sites.txt:456
msgid ""
"Some :doc:`django.contrib </ref/contrib/index>` applications take advantage "
"of the sites framework but are architected in a way that doesn't *require* "
"the sites framework to be installed in your database. (Some people don't "
"want to, or just aren't *able* to install the extra database table that the "
"sites framework requires.) For those cases, the framework provides a "
":class:`django.contrib.sites.requests.RequestSite` class, which can be used "
"as a fallback when the database-backed sites framework is not available."
msgstr ""

#: ../../ref/contrib/sites.txt:466
msgid ""
"A class that shares the primary interface of "
":class:`~django.contrib.sites.models.Site` (i.e., it has ``domain`` and "
"``name`` attributes) but gets its data from a Django "
":class:`~django.http.HttpRequest` object rather than from a database."
msgstr ""

#: ../../ref/contrib/sites.txt:473
msgid ""
"Sets the ``name`` and ``domain`` attributes to the value of "
":meth:`~django.http.HttpRequest.get_host`."
msgstr ""

#: ../../ref/contrib/sites.txt:478
msgid ""
"This class used to be defined in ``django.contrib.sites.models``. The old "
"import location will work until Django 1.9."
msgstr ""

#: ../../ref/contrib/sites.txt:481
msgid ""
"A :class:`~django.contrib.sites.requests.RequestSite` object has a similar "
"interface to a normal :class:`~django.contrib.sites.models.Site` object, "
"except its :meth:`~django.contrib.sites.requests.RequestSite.__init__()` "
"method takes an :class:`~django.http.HttpRequest` object. It's able to "
"deduce the ``domain`` and ``name`` by looking at the request's domain. It "
"has ``save()`` and ``delete()`` methods to match the interface of "
":class:`~django.contrib.sites.models.Site`, but the methods raise "
":exc:`NotImplementedError`."
msgstr ""

#: ../../ref/contrib/sites.txt:491
msgid "``get_current_site`` shortcut"
msgstr ""

#: ../../ref/contrib/sites.txt:493
msgid ""
"Finally, to avoid repetitive fallback code, the framework provides a "
":func:`django.contrib.sites.shortcuts.get_current_site` function."
msgstr ""

#: ../../ref/contrib/sites.txt:498
msgid ""
"A function that checks if ``django.contrib.sites`` is installed and returns "
"either the current :class:`~django.contrib.sites.models.Site` object or a "
":class:`~django.contrib.sites.requests.RequestSite` object based on the "
"request."
msgstr ""

#: ../../ref/contrib/sites.txt:505
msgid ""
"This function used to be defined in ``django.contrib.sites.models``. The old"
" import location will work until Django 1.9."
msgstr ""

#: ../../ref/contrib/sites.txt:510
msgid ""
"This function will now lookup the current site based on "
":meth:`request.get_host() <django.http.HttpRequest.get_host>` if the "
":setting:`SITE_ID` setting is not defined."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:3
msgid "The staticfiles app"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:8
msgid ""
"``django.contrib.staticfiles`` collects static files from each of your "
"applications (and any other places you specify) into a single location that "
"can easily be served in production."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:14
msgid ""
"For an introduction to the static files app and some usage examples, see "
":doc:`/howto/static-files/index`. For guidelines on deploying static files, "
"see :doc:`/howto/static-files/deployment`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:23
msgid ""
"See :ref:`staticfiles settings <settings-staticfiles>` for details on the "
"following settings:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:26
msgid ":setting:`STATIC_ROOT`"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:27
msgid ":setting:`STATIC_URL`"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:28
msgid ":setting:`STATICFILES_DIRS`"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:29
msgid ":setting:`STATICFILES_STORAGE`"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:30
msgid ":setting:`STATICFILES_FINDERS`"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:33
msgid "Management Commands"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:35
msgid "``django.contrib.staticfiles`` exposes three management commands."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:38 ../../ref/django-admin.txt:1650
msgid "collectstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:42
msgid "Collects the static files into :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:44
msgid ""
"Duplicate file names are by default resolved in a similar way to how "
"template resolution works: the file that is first found in one of the "
"specified locations will be used. If you're confused, the "
":djadmin:`findstatic` command can help show you which files are found."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:49
msgid ""
"On subsequent ``collectstatic`` runs (if ``STATIC_ROOT`` isn't empty), files"
" are copied only if they have a modified timestamp greater than the "
"timestamp of the file in ``STATIC_ROOT``. Therefore if you remove an "
"application from :setting:`INSTALLED_APPS`, it's a good idea to use the "
":djadminopt:`--clear` option in order to remove stale static files."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:55
msgid ""
"Files are searched by using the :setting:`enabled finders "
"<STATICFILES_FINDERS>`. The default is to look in all locations defined in "
":setting:`STATICFILES_DIRS` and in the ``'static'`` directory of apps "
"specified by the :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:60
msgid ""
"The :djadmin:`collectstatic` management command calls the "
":meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` "
"method of the :setting:`STATICFILES_STORAGE` after each run and passes a "
"list of paths that have been found by the management command. It also "
"receives all command line options of :djadmin:`collectstatic`. This is used "
"by the :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage`"
" by default."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:68
msgid ""
"By default, collected files receive permissions from "
":setting:`FILE_UPLOAD_PERMISSIONS` and collected directories receive "
"permissions from :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`. If you would "
"like different permissions for these files and/or directories, you can "
"subclass either of the :ref:`static files storage classes <staticfiles-"
"storages>` and specify the ``file_permissions_mode`` and/or "
"``directory_permissions_mode`` parameters, respectively. For example::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:84
msgid ""
"Then set the :setting:`STATICFILES_STORAGE` setting to "
"``'path.to.MyStaticFilesStorage'``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:89
msgid ""
"The ability to override ``file_permissions_mode`` and "
"``directory_permissions_mode`` is new in Django 1.7.  Previously the file "
"permissions always used :setting:`FILE_UPLOAD_PERMISSIONS` and the directory"
" permissions always used :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:96
msgid "Some commonly used options are:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:100
msgid "Do NOT prompt the user for input of any kind."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:105
msgid ""
"Ignore files or directories matching this glob-style pattern. Use multiple "
"times to ignore more."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:111
msgid "Do everything except modify the filesystem."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:116
msgid ""
"Clear the existing files before trying to copy or link the original file."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:121
msgid "Create a symbolic link to each file instead of copying."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:125
msgid ""
"Don't call the "
":meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process` "
"method of the configured :setting:`STATICFILES_STORAGE` storage backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:131
msgid ""
"Don't ignore the common private glob-style patterns ``'CVS'``, ``'.*'`` and "
"``'*~'``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:134
msgid ""
"For a full list of options, refer to the commands own help by running::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:139 ../../ref/django-admin.txt:1659
msgid "findstatic"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:143
msgid "Searches for one or more relative paths with the enabled finders."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:154
msgid ""
"By default, all matching locations are found. To only return the first match"
" for each relative path, use the ``--first`` option::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:161
msgid ""
"This is a debugging aid; it'll show you exactly which static file will be "
"collected for a given path."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:164
msgid ""
"By setting the :djadminopt:`--verbosity` flag to 0, you can suppress the "
"extra output and just get the path names::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:171
msgid ""
"On the other hand, by setting the :djadminopt:`--verbosity` flag to 2, you "
"can get all the directories which were searched::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:185
msgid "The additional output of which directories were searched was added."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:190
msgid "runserver"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:194
msgid ""
"Overrides the core :djadmin:`runserver` command if the ``staticfiles`` app "
"is :setting:`installed<INSTALLED_APPS>` and adds automatic serving of static"
" files and the following new options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:200
msgid ""
"Use the ``--nostatic`` option to disable serving of static files with the "
":doc:`staticfiles </ref/contrib/staticfiles>` app entirely. This option is "
"only available if the :doc:`staticfiles </ref/contrib/staticfiles>` app is "
"in your project's :setting:`INSTALLED_APPS` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:205 ../../ref/contrib/staticfiles.txt:221
#: ../../ref/django-admin.txt:173 ../../ref/django-admin.txt:576
#: ../../ref/django-admin.txt:585 ../../ref/django-admin.txt:602
#: ../../ref/django-admin.txt:632 ../../ref/django-admin.txt:643
#: ../../ref/django-admin.txt:906 ../../ref/django-admin.txt:988
#: ../../ref/django-admin.txt:1003 ../../ref/django-admin.txt:1570
#: ../../ref/django-admin.txt:1675 ../../ref/django-admin.txt:1690
#: ../../ref/django-admin.txt:1704 ../../ref/django-admin.txt:1715
#: ../../ref/django-admin.txt:1731 ../../ref/templates/builtins.txt:943
msgid "Example usage::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:211
msgid ""
"Use the ``--insecure`` option to force serving of static files with the "
":doc:`staticfiles </ref/contrib/staticfiles>` app even if the "
":setting:`DEBUG` setting is ``False``. By using this you acknowledge the "
"fact that it's **grossly inefficient** and probably **insecure**. This is "
"only intended for local development, should **never be used in production** "
"and is only available if the :doc:`staticfiles </ref/contrib/staticfiles>` "
"app is in your project's :setting:`INSTALLED_APPS` setting. "
":djadmin:`runserver` ``--insecure`` doesn't work with "
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:228
msgid "Storages"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:231
msgid "StaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:235
msgid ""
"A subclass of the :class:`~django.core.files.storage.FileSystemStorage` "
"storage backend that uses the :setting:`STATIC_ROOT` setting as the base "
"file system location and the :setting:`STATIC_URL` setting respectively as "
"the base URL."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:242
msgid ""
"This method is called by the :djadmin:`collectstatic` management command "
"after each run and gets passed the local storages and paths of found files "
"as a dictionary, as well as the command line options."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:246
msgid ""
"The :class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"uses this behind the scenes to replace the paths with their hashed "
"counterparts and update the cache appropriately."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:251
msgid "ManifestStaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:257
msgid ""
"A subclass of the "
":class:`~django.contrib.staticfiles.storage.StaticFilesStorage` storage "
"backend which stores the file names it handles by appending the MD5 hash of "
"the file's content to the filename. For example, the file ``css/styles.css``"
" would also be saved as ``css/styles.55e7cbb9ba48.css``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:262
msgid ""
"The purpose of this storage is to keep serving the old files in case some "
"pages still refer to those files, e.g. because they are cached by you or a "
"3rd party proxy server. Additionally, it's very helpful if you want to apply"
" `far future Expires headers`_ to the deployed files to speed up the load "
"time for subsequent page visits."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:268
msgid ""
"The storage backend automatically replaces the paths found in the saved "
"files matching other saved files with the path of the cached copy (using the"
" :meth:`~django.contrib.staticfiles.storage.StaticFilesStorage.post_process`"
" method). The regular expressions used to find those paths "
"(``django.contrib.staticfiles.storage.HashedFilesMixin.patterns``) by "
"default covers the `@import`_ rule and `url()`_ statement of `Cascading "
"Style Sheets`_. For example, the ``'css/styles.css'`` file with the content"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:281
msgid ""
"would be replaced by calling the "
":meth:`~django.core.files.storage.Storage.url` method of the "
"``ManifestStaticFilesStorage`` storage backend, ultimately saving a "
"``'css/styles.55e7cbb9ba48.css'`` file with the following content:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:290
msgid ""
"To enable the ``ManifestStaticFilesStorage`` you have to make sure the "
"following requirements are met:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:293
msgid ""
"the :setting:`STATICFILES_STORAGE` setting is set to "
"``'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:295
msgid "the :setting:`DEBUG` setting is set to ``False``"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:296
msgid ""
"you use the ``staticfiles`` :ttag:`static<staticfiles-static>` template tag "
"to refer to your static files in your templates"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:298
msgid ""
"you've collected all your static files by using the :djadmin:`collectstatic`"
" management command"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:301
msgid ""
"Since creating the MD5 hash can be a performance burden to your website "
"during runtime, ``staticfiles`` will automatically store the mapping with "
"hashed names for all processed files in a file called ``staticfiles.json``. "
"This happens once when you run the :djadmin:`collectstatic` management "
"command."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:307
msgid ""
"Due to the requirement of running :djadmin:`collectstatic`, this storage "
"typically shouldn't be used when running tests as ``collectstatic`` isn't "
"run as part of the normal test setup. During testing, ensure that the "
":setting:`STATICFILES_STORAGE` setting is set to something else like "
"``'django.contrib.staticfiles.storage.StaticFilesStorage'`` (the default)."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:315
msgid ""
"The method that is used when creating the hashed name of a file. Needs to "
"return a hash for the given file name and content. By default it calculates "
"a MD5 hash from the content's chunks as mentioned above. Feel free to "
"override this method to use your own hashing algorithm."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:327
msgid "CachedStaticFilesStorage"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:331
msgid ""
"``CachedStaticFilesStorage`` is a similar class like the "
":class:`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage` "
"class but uses Django's :doc:`caching framework</topics/cache>` for storing "
"the hashed names of processed files instead of a static manifest file called"
" ``staticfiles.json``. This is mostly useful for situations in which you "
"don't have access to the file system."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:338
msgid ""
"If you want to override certain options of the cache backend the storage "
"uses, simply specify a custom entry in the :setting:`CACHES` setting named "
"``'staticfiles'``. It falls back to using the ``'default'`` cache backend."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:348 ../../ref/templates/builtins.txt:2519
#: ../../ref/templates/builtins.txt:2524
msgid "static"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:352
msgid ""
"Uses the configured :setting:`STATICFILES_STORAGE` storage to create the "
"full URL for the given relative path, e.g.:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:360
msgid ""
"The previous example is equal to calling the ``url`` method of an instance "
"of :setting:`STATICFILES_STORAGE` with ``\"images/hi.jpg\"``. This is "
"especially useful when using a non-local storage backend to deploy files as "
"documented in :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:365 ../../ref/templates/builtins.txt:2545
msgid ""
"If you'd like to retrieve a static URL without displaying it, you can use a "
"slightly different call:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:374
msgid "Using Jinja2 templates?"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:376
msgid ""
"See :class:`django.template.backends.jinja2.Jinja2` for information on using"
" the ``static`` tag with Jinja2."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:380
msgid "Finders Module"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:382
msgid ""
"``staticfiles`` finders has a ``searched_locations`` attribute which is a "
"list of directory paths in which the finders searched. Example usage::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:392
msgid "The ``searched_locations`` attribute was added."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:395
msgid "Other Helpers"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:397
msgid ""
"There are a few other helpers outside of the :mod:`staticfiles "
"<django.contrib.staticfiles>` app to work with static files:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:401
msgid ""
"The :func:`django.template.context_processors.static` context processor "
"which adds :setting:`STATIC_URL` to every template context rendered with "
":class:`~django.template.RequestContext` contexts."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:405
msgid ""
"The builtin template tag :ttag:`static` which takes a path and urljoins it "
"with the static prefix :setting:`STATIC_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:408
msgid ""
"The builtin template tag :ttag:`get_static_prefix` which populates a "
"template variable with the static prefix :setting:`STATIC_URL` to be used as"
" a variable or directly."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:412
msgid ""
"The similar template tag :ttag:`get_media_prefix` which works like "
":ttag:`get_static_prefix` but uses :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:418
msgid "Static file development view"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:422
msgid ""
"The static files tools are mostly designed to help with getting static files"
" successfully deployed into production. This usually means a separate, "
"dedicated static file server, which is a lot of overhead to mess with when "
"developing locally. Thus, the ``staticfiles`` app ships with a **quick and "
"dirty helper view** that you can use to serve files locally in development."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:433
msgid "This view function serves static files in development."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:437
msgid "This view will only work if :setting:`DEBUG` is ``True``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:439 ../../ref/contrib/staticfiles.txt:501
msgid ""
"That's because this view is **grossly inefficient** and probably "
"**insecure**. This is only intended for local development, and should "
"**never be used in production**."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:445
msgid ""
"This view will now raise an :exc:`~django.http.Http404` exception instead of"
" :exc:`~django.core.exceptions.ImproperlyConfigured` when :setting:`DEBUG` "
"is ``False``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:451
msgid ""
"To guess the served files' content types, this view relies on the "
":py:mod:`mimetypes` module from the Python standard library, which itself "
"relies on the underlying platform's map files. If you find that this view "
"doesn't return proper content types for certain files, it is most likely "
"that the platform's map files need to be updated. This can be achieved, for "
"example, by installing or updating the ``mailcap`` package on a Red Hat "
"distribution, or ``mime-support`` on a Debian distribution."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:459
msgid ""
"This view is automatically enabled by :djadmin:`runserver` (with a "
":setting:`DEBUG` setting set to ``True``). To use the view with a different "
"local development server, add the following snippet to the end of your "
"primary URL configuration::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:472
msgid ""
"Note, the beginning of the pattern (``r'^static/'``) should be your "
":setting:`STATIC_URL` setting."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:475
msgid ""
"Since this is a bit finicky, there's also a helper function that'll do this "
"for you:"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:480
msgid ""
"This will return the proper URL pattern for serving static files to your "
"already defined pattern list. Use it like this::"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:489
msgid ""
"This will inspect your :setting:`STATIC_URL` setting and wire up the view to"
" serve static files accordingly. Don't forget to set the "
":setting:`STATICFILES_DIRS` setting appropriately to let "
"``django.contrib.staticfiles`` know where to look for files in addition to "
"files in app directories."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:497
msgid ""
"This helper function will only work if :setting:`DEBUG` is ``True`` and your"
" :setting:`STATIC_URL` setting is neither empty nor a full URL such as "
"``http://static.example.com/``."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:506
msgid "Specialized test case to support 'live testing'"
msgstr ""

#: ../../ref/contrib/staticfiles.txt:510
msgid ""
"This unittest TestCase subclass extends "
":class:`django.test.LiveServerTestCase`."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:512
msgid ""
"Just like its parent, you can use it to write tests that involve running the"
" code under test and consuming it with testing tools through HTTP (e.g. "
"Selenium, PhantomJS, etc.), because of which it's needed that the static "
"assets are also published."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:517
msgid ""
"But given the fact that it makes use of the "
":func:`django.contrib.staticfiles.views.serve` view described above, it can "
"transparently overlay at test execution-time the assets provided by the "
"``staticfiles`` finders. This means you don't need to run "
":djadmin:`collectstatic` before or as a part of your tests setup."
msgstr ""

#: ../../ref/contrib/staticfiles.txt:525
msgid ""
"``StaticLiveServerTestCase`` is new in Django 1.7. Previously its "
"functionality was provided by :class:`django.test.LiveServerTestCase`."
msgstr ""

#: ../../ref/contrib/syndication.txt:3
msgid "The syndication feed framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:9
msgid ""
"Django comes with a high-level syndication-feed-generating framework that "
"makes creating RSS_ and Atom_ feeds easy."
msgstr ""

#: ../../ref/contrib/syndication.txt:12
msgid ""
"To create any syndication feed, all you have to do is write a short Python "
"class. You can create as many feeds as you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:15
msgid ""
"Django also comes with a lower-level feed-generating API. Use this if you "
"want to generate feeds outside of a Web context, or in some other lower-"
"level way."
msgstr ""

#: ../../ref/contrib/syndication.txt:23
msgid "The high-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:28
msgid ""
"The high-level feed-generating framework is supplied by the "
":class:`~django.contrib.syndication.views.Feed` class. To create a feed, "
"write a :class:`~django.contrib.syndication.views.Feed` class and point to "
"an instance of it in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:35
msgid "Feed classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:37
msgid ""
"A :class:`~django.contrib.syndication.views.Feed` class is a Python class "
"that represents a syndication feed. A feed can be simple (e.g., a \"site "
"news\" feed, or a basic feed displaying the latest entries of a blog) or "
"more complex (e.g., a feed displaying all the blog entries in a particular "
"category, where the category is variable)."
msgstr ""

#: ../../ref/contrib/syndication.txt:43
msgid ""
"Feed classes subclass :class:`django.contrib.syndication.views.Feed`. They "
"can live anywhere in your codebase."
msgstr ""

#: ../../ref/contrib/syndication.txt:46
msgid ""
"Instances of :class:`~django.contrib.syndication.views.Feed` classes are "
"views which can be used in your :doc:`URLconf </topics/http/urls>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:52
msgid ""
"This simple example, taken from a hypothetical police beat news site "
"describes a feed of the latest five news items::"
msgstr ""

#: ../../ref/contrib/syndication.txt:77
msgid ""
"To connect a URL to this feed, put an instance of the Feed object in your "
":doc:`URLconf </topics/http/urls>`. For example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:91
msgid ""
"The Feed class subclasses :class:`django.contrib.syndication.views.Feed`."
msgstr ""

#: ../../ref/contrib/syndication.txt:93
msgid ""
"``title``, ``link`` and ``description`` correspond to the standard RSS "
"``<title>``, ``<link>`` and ``<description>`` elements, respectively."
msgstr ""

#: ../../ref/contrib/syndication.txt:97
msgid ""
"``items()`` is, simply, a method that returns a list of objects that should "
"be included in the feed as ``<item>`` elements. Although this example "
"returns ``NewsItem`` objects using Django's :doc:`object-relational mapper "
"</ref/models/querysets>`, ``items()`` doesn't have to return model "
"instances. Although you get a few bits of functionality \"for free\" by "
"using Django models, ``items()`` can return any type of object you want."
msgstr ""

#: ../../ref/contrib/syndication.txt:105
msgid ""
"If you're creating an Atom feed, rather than an RSS feed, set the "
"``subtitle`` attribute instead of the ``description`` attribute. See "
"`Publishing Atom and RSS feeds in tandem`_, later, for an example."
msgstr ""

#: ../../ref/contrib/syndication.txt:109
msgid ""
"One thing is left to do. In an RSS feed, each ``<item>`` has a ``<title>``, "
"``<link>`` and ``<description>``. We need to tell the framework what data to"
" put into those elements."
msgstr ""

#: ../../ref/contrib/syndication.txt:113
msgid ""
"For the contents of ``<title>`` and ``<description>``, Django tries calling "
"the methods ``item_title()`` and ``item_description()`` on the "
":class:`~django.contrib.syndication.views.Feed` class. They are passed a "
"single parameter, ``item``, which is the object itself. These are optional; "
"by default, the unicode representation of the object is used for both."
msgstr ""

#: ../../ref/contrib/syndication.txt:120
msgid ""
"If you want to do any special formatting for either the title or "
"description, :doc:`Django templates </ref/templates/language>` can be used "
"instead. Their paths can be specified with the ``title_template`` and "
"``description_template`` attributes on the "
":class:`~django.contrib.syndication.views.Feed` class. The templates are "
"rendered for each item and are passed two template context variables:"
msgstr ""

#: ../../ref/contrib/syndication.txt:127
msgid ""
"``{{ obj }}`` -- The current object (one of whichever objects you returned "
"in ``items()``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:130
msgid ""
"``{{ site }}`` -- A :class:`django.contrib.sites.models.Site` object "
"representing the current site. This is useful for ``{{ site.domain }}`` or "
"``{{ site.name }}``. If you do *not* have the Django sites framework "
"installed, this will be set to a "
":class:`~django.contrib.sites.requests.RequestSite` object. See the "
":ref:`RequestSite section of the sites framework documentation <requestsite-"
"objects>` for more."
msgstr ""

#: ../../ref/contrib/syndication.txt:138
msgid "See `a complex example`_ below that uses a description template."
msgstr ""

#: ../../ref/contrib/syndication.txt:142
msgid ""
"There is also a way to pass additional information to title and description "
"templates, if you need to supply more than the two variables mentioned "
"before. You can provide your implementation of ``get_context_data`` method "
"in your ``Feed`` subclass. For example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:162
msgid "And the template:"
msgstr ""

#: ../../ref/contrib/syndication.txt:168
msgid ""
"This method will be called once per each item in the list returned by "
"``items()`` with the following keyword arguments:"
msgstr ""

#: ../../ref/contrib/syndication.txt:171
msgid ""
"``item``: the current item. For backward compatibility reasons, the name of "
"this context variable is ``{{ obj }}``."
msgstr ""

#: ../../ref/contrib/syndication.txt:174
msgid ""
"``obj``: the object returned by ``get_object()``. By default this is not "
"exposed to the templates to avoid confusion with ``{{ obj }}`` (see above), "
"but you can use it in your implementation of ``get_context_data()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:178
msgid "``site``: current site as described above."
msgstr ""

#: ../../ref/contrib/syndication.txt:180
msgid "``request``: current request."
msgstr ""

#: ../../ref/contrib/syndication.txt:182
msgid ""
"The behavior of ``get_context_data()`` mimics that of :ref:`generic views "
"<adding-extra-context>` - you're supposed to call ``super()`` to retrieve "
"context data from parent class, add your data and return the modified "
"dictionary."
msgstr ""

#: ../../ref/contrib/syndication.txt:187
msgid ""
"To specify the contents of ``<link>``, you have two options. For each item "
"in ``items()``, Django first tries calling the ``item_link()`` method on the"
" :class:`~django.contrib.syndication.views.Feed` class. In a similar way to "
"the title and description, it is passed it a single parameter, ``item``. If "
"that method doesn't exist, Django tries executing a ``get_absolute_url()`` "
"method on that object. Both ``get_absolute_url()`` and ``item_link()`` "
"should return the item's URL as a normal Python string. As with "
"``get_absolute_url()``, the result of ``item_link()`` will be included "
"directly in the URL, so you are responsible for doing all necessary URL "
"quoting and conversion to ASCII inside the method itself."
msgstr ""

#: ../../ref/contrib/syndication.txt:201
msgid "A complex example"
msgstr ""

#: ../../ref/contrib/syndication.txt:203
msgid "The framework also supports more complex feeds, via arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:205
msgid ""
"For example, a website could offer an RSS feed of recent crimes for every "
"police beat in a city. It'd be silly to create a separate "
":class:`~django.contrib.syndication.views.Feed` class for each police beat; "
"that would violate the :ref:`DRY principle <dry>` and would couple data to "
"programming logic. Instead, the syndication framework lets you access the "
"arguments passed from your :doc:`URLconf </topics/http/urls>` so feeds can "
"output items based on information in the feed's URL."
msgstr ""

#: ../../ref/contrib/syndication.txt:213
msgid "The police beat feeds could be accessible via URLs like this:"
msgstr ""

#: ../../ref/contrib/syndication.txt:215
msgid ":file:`/beats/613/rss/` -- Returns recent crimes for beat 613."
msgstr ""

#: ../../ref/contrib/syndication.txt:216
msgid ":file:`/beats/1424/rss/` -- Returns recent crimes for beat 1424."
msgstr ""

#: ../../ref/contrib/syndication.txt:218
msgid ""
"These can be matched with a :doc:`URLconf </topics/http/urls>` line such "
"as::"
msgstr ""

#: ../../ref/contrib/syndication.txt:222
msgid ""
"Like a view, the arguments in the URL are passed to the ``get_object()`` "
"method along with the request object."
msgstr ""

#: ../../ref/contrib/syndication.txt:225
msgid "Here's the code for these beat-specific feeds::"
msgstr ""

#: ../../ref/contrib/syndication.txt:247
msgid ""
"To generate the feed's ``<title>``, ``<link>`` and ``<description>``, Django"
" uses the ``title()``, ``link()`` and ``description()`` methods. In the "
"previous example, they were simple string class attributes, but this example"
" illustrates that they can be either strings *or* methods. For each of "
"``title``, ``link`` and ``description``, Django follows this algorithm:"
msgstr ""

#: ../../ref/contrib/syndication.txt:254
msgid ""
"First, it tries to call a method, passing the ``obj`` argument, where "
"``obj`` is the object returned by ``get_object()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:257
msgid "Failing that, it tries to call a method with no arguments."
msgstr ""

#: ../../ref/contrib/syndication.txt:259
msgid "Failing that, it uses the class attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:261
msgid ""
"Also note that ``items()`` also follows the same algorithm -- first, it "
"tries ``items(obj)``, then ``items()``, then finally an ``items`` class "
"attribute (which should be a list)."
msgstr ""

#: ../../ref/contrib/syndication.txt:265
msgid ""
"We are using a template for the item descriptions. It can be very simple:"
msgstr ""

#: ../../ref/contrib/syndication.txt:271
msgid "However, you are free to add formatting as desired."
msgstr ""

#: ../../ref/contrib/syndication.txt:273
msgid ""
"The ``ExampleFeed`` class below gives full documentation on methods and "
"attributes of :class:`~django.contrib.syndication.views.Feed` classes."
msgstr ""

#: ../../ref/contrib/syndication.txt:277
msgid "Specifying the type of feed"
msgstr ""

#: ../../ref/contrib/syndication.txt:279
msgid "By default, feeds produced in this framework use RSS 2.0."
msgstr ""

#: ../../ref/contrib/syndication.txt:281
msgid ""
"To change that, add a ``feed_type`` attribute to your "
":class:`~django.contrib.syndication.views.Feed` class, like so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:289
msgid "Note that you set ``feed_type`` to a class object, not an instance."
msgstr ""

#: ../../ref/contrib/syndication.txt:291
msgid "Currently available feed types are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:293
msgid ""
":class:`django.utils.feedgenerator.Rss201rev2Feed` (RSS 2.01. Default.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:294
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed` (RSS 0.91.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:295
msgid ":class:`django.utils.feedgenerator.Atom1Feed` (Atom 1.0.)"
msgstr ""

#: ../../ref/contrib/syndication.txt:298
msgid "Enclosures"
msgstr ""

#: ../../ref/contrib/syndication.txt:300
msgid ""
"To specify enclosures, such as those used in creating podcast feeds, use the"
" ``item_enclosure_url``, ``item_enclosure_length`` and "
"``item_enclosure_mime_type`` hooks. See the ``ExampleFeed`` class below for "
"usage examples."
msgstr ""

#: ../../ref/contrib/syndication.txt:306
msgid "Language"
msgstr ""

#: ../../ref/contrib/syndication.txt:308
msgid ""
"Feeds created by the syndication framework automatically include the "
"appropriate ``<language>`` tag (RSS 2.0) or ``xml:lang`` attribute (Atom). "
"This comes directly from your :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:313 ../../ref/settings.txt:3524
msgid "URLs"
msgstr ""

#: ../../ref/contrib/syndication.txt:315
msgid ""
"The ``link`` method/attribute can return either an absolute path (e.g. "
":file:`\"/blog/\"`) or a URL with the fully-qualified domain and protocol "
"(e.g. ``\"http://www.example.com/blog/\"``). If ``link`` doesn't return the "
"domain, the syndication framework will insert the domain of the current "
"site, according to your :setting:`SITE_ID setting <SITE_ID>`."
msgstr ""

#: ../../ref/contrib/syndication.txt:321
msgid ""
"Atom feeds require a ``<link rel=\"self\">`` that defines the feed's current"
" location. The syndication framework populates this automatically, using the"
" domain of the current site according to the :setting:`SITE_ID` setting."
msgstr ""

#: ../../ref/contrib/syndication.txt:326
msgid "Publishing Atom and RSS feeds in tandem"
msgstr ""

#: ../../ref/contrib/syndication.txt:328
msgid ""
"Some developers like to make available both Atom *and* RSS versions of their"
" feeds. That's easy to do with Django: Just create a subclass of your "
":class:`~django.contrib.syndication.views.Feed` class and set the "
"``feed_type`` to something different. Then update your URLconf to add the "
"extra versions."
msgstr ""

#: ../../ref/contrib/syndication.txt:334
msgid "Here's a full example::"
msgstr ""

#: ../../ref/contrib/syndication.txt:353
msgid ""
"In this example, the RSS feed uses a ``description`` while the Atom feed "
"uses a ``subtitle``. That's because Atom feeds don't provide for a feed-"
"level \"description,\" but they *do* provide for a \"subtitle.\""
msgstr ""

#: ../../ref/contrib/syndication.txt:357
msgid ""
"If you provide a ``description`` in your "
":class:`~django.contrib.syndication.views.Feed` class, Django will *not* "
"automatically put that into the ``subtitle`` element, because a subtitle and"
" description are not necessarily the same thing. Instead, you should define "
"a ``subtitle`` attribute."
msgstr ""

#: ../../ref/contrib/syndication.txt:363
msgid ""
"In the above example, we simply set the Atom feed's ``subtitle`` to the RSS "
"feed's ``description``, because it's quite short already."
msgstr ""

#: ../../ref/contrib/syndication.txt:366
msgid "And the accompanying URLconf::"
msgstr ""

#: ../../ref/contrib/syndication.txt:379
msgid "Feed class reference"
msgstr ""

#: ../../ref/contrib/syndication.txt:383
msgid ""
"This example illustrates all possible attributes and methods for a "
":class:`~django.contrib.syndication.views.Feed` class::"
msgstr ""

#: ../../ref/contrib/syndication.txt:868
msgid "The low-level framework"
msgstr ""

#: ../../ref/contrib/syndication.txt:870
msgid ""
"Behind the scenes, the high-level RSS framework uses a lower-level framework"
" for generating feeds' XML. This framework lives in a single module: "
"`django/utils/feedgenerator.py`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:874
msgid ""
"You use this framework on your own, for lower-level feed generation. You can"
" also create custom feed generator subclasses for use with the ``feed_type``"
" ``Feed`` option."
msgstr ""

#: ../../ref/contrib/syndication.txt:881
msgid "``SyndicationFeed`` classes"
msgstr ""

#: ../../ref/contrib/syndication.txt:883
msgid "The :mod:`~django.utils.feedgenerator` module contains a base class:"
msgstr ""

#: ../../ref/contrib/syndication.txt:885
msgid ":class:`django.utils.feedgenerator.SyndicationFeed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:887
msgid "and several subclasses:"
msgstr ""

#: ../../ref/contrib/syndication.txt:889
msgid ":class:`django.utils.feedgenerator.RssUserland091Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:890
msgid ":class:`django.utils.feedgenerator.Rss201rev2Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:891
msgid ":class:`django.utils.feedgenerator.Atom1Feed`"
msgstr ""

#: ../../ref/contrib/syndication.txt:893
msgid ""
"Each of these three classes knows how to render a certain type of feed as "
"XML. They share this interface:"
msgstr ""

#: ../../ref/contrib/syndication.txt:921
msgid ":meth:`.SyndicationFeed.__init__`"
msgstr ""

#: ../../ref/contrib/syndication.txt:897
msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed. Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:900 ../../ref/contrib/syndication.txt:928
msgid "``title``"
msgstr ""

#: ../../ref/contrib/syndication.txt:904
msgid "There's also a bunch of other optional keywords:"
msgstr ""

#: ../../ref/contrib/syndication.txt:906
msgid "``language``"
msgstr ""

#: ../../ref/contrib/syndication.txt:907 ../../ref/contrib/syndication.txt:934
msgid "``author_email``"
msgstr ""

#: ../../ref/contrib/syndication.txt:908 ../../ref/contrib/syndication.txt:935
msgid "``author_name``"
msgstr ""

#: ../../ref/contrib/syndication.txt:909 ../../ref/contrib/syndication.txt:936
msgid "``author_link``"
msgstr ""

#: ../../ref/contrib/syndication.txt:910
msgid "``subtitle``"
msgstr ""

#: ../../ref/contrib/syndication.txt:911 ../../ref/contrib/syndication.txt:941
msgid "``categories``"
msgstr ""

#: ../../ref/contrib/syndication.txt:912
msgid "``feed_url``"
msgstr ""

#: ../../ref/contrib/syndication.txt:913
msgid "``feed_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:914
msgid "``feed_guid``"
msgstr ""

#: ../../ref/contrib/syndication.txt:915 ../../ref/contrib/syndication.txt:943
msgid "``ttl``"
msgstr ""

#: ../../ref/contrib/syndication.txt:917
msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed`` for use with `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:920 ../../ref/utils.txt:367
msgid ""
"All parameters should be Unicode objects, except ``categories``, which "
"should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:958
msgid ":meth:`.SyndicationFeed.add_item`"
msgstr ""

#: ../../ref/contrib/syndication.txt:924
msgid "Add an item to the feed with the given parameters."
msgstr ""

#: ../../ref/contrib/syndication.txt:926
msgid "Required keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:932
msgid "Optional keyword arguments are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:937
msgid "``pubdate``"
msgstr ""

#: ../../ref/contrib/syndication.txt:938
msgid "``comments``"
msgstr ""

#: ../../ref/contrib/syndication.txt:939
msgid "``unique_id``"
msgstr ""

#: ../../ref/contrib/syndication.txt:940
msgid "``enclosure``"
msgstr ""

#: ../../ref/contrib/syndication.txt:942
msgid "``item_copyright``"
msgstr ""

#: ../../ref/contrib/syndication.txt:944
msgid "``updateddate``"
msgstr ""

#: ../../ref/contrib/syndication.txt:946
msgid "Extra keyword arguments will be stored for `custom feed generators`_."
msgstr ""

#: ../../ref/contrib/syndication.txt:948
msgid "All parameters, if given, should be Unicode objects, except:"
msgstr ""

#: ../../ref/contrib/syndication.txt:950
msgid "``pubdate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

#: ../../ref/contrib/syndication.txt:951
msgid ""
"``updateddate`` should be a Python  :class:`~datetime.datetime` object."
msgstr ""

#: ../../ref/contrib/syndication.txt:952
msgid ""
"``enclosure`` should be an instance of "
":class:`django.utils.feedgenerator.Enclosure`."
msgstr ""

#: ../../ref/contrib/syndication.txt:954
msgid "``categories`` should be a sequence of Unicode objects."
msgstr ""

#: ../../ref/contrib/syndication.txt:958 ../../ref/utils.txt:378
msgid "The optional ``updateddate`` argument was added."
msgstr ""

#: ../../ref/contrib/syndication.txt:961
msgid ":meth:`.SyndicationFeed.write`"
msgstr ""

#: ../../ref/contrib/syndication.txt:961
msgid ""
"Outputs the feed in the given encoding to outfile, which is a file-like "
"object."
msgstr ""

#: ../../ref/contrib/syndication.txt:964
msgid ":meth:`.SyndicationFeed.writeString`"
msgstr ""

#: ../../ref/contrib/syndication.txt:964
msgid "Returns the feed as a string in the given encoding."
msgstr ""

#: ../../ref/contrib/syndication.txt:966
msgid ""
"For example, to create an Atom 1.0 feed and print it to standard output::"
msgstr ""

#: ../../ref/contrib/syndication.txt:992
msgid "Custom feed generators"
msgstr ""

#: ../../ref/contrib/syndication.txt:994
msgid ""
"If you need to produce a custom feed format, you've got a couple of options."
msgstr ""

#: ../../ref/contrib/syndication.txt:996
msgid ""
"If the feed format is totally custom, you'll want to subclass "
"``SyndicationFeed`` and completely replace the ``write()`` and "
"``writeString()`` methods."
msgstr ""

#: ../../ref/contrib/syndication.txt:1000
msgid ""
"However, if the feed format is a spin-off of RSS or Atom (i.e. GeoRSS_, "
"Apple's `iTunes podcast format`_, etc.), you've got a better choice. These "
"types of feeds typically add extra elements and/or attributes to the "
"underlying format, and there are a set of methods that ``SyndicationFeed`` "
"calls to get these extra attributes. Thus, you can subclass the appropriate "
"feed generator class (``Atom1Feed`` or ``Rss201rev2Feed``) and extend these "
"callbacks. They are:"
msgstr ""

#: ../../ref/contrib/syndication.txt:1012
msgid "``SyndicationFeed.root_attributes(self, )``"
msgstr ""

#: ../../ref/contrib/syndication.txt:1011
msgid ""
"Return a ``dict`` of attributes to add to the root feed element "
"(``feed``/``channel``)."
msgstr ""

#: ../../ref/contrib/syndication.txt:1018
msgid "``SyndicationFeed.add_root_elements(self, handler)``"
msgstr ""

#: ../../ref/contrib/syndication.txt:1015
msgid ""
"Callback to add elements inside the root feed element "
"(``feed``/``channel``). ``handler`` is an "
":class:`~xml.sax.saxutils.XMLGenerator` from Python's built-in SAX library; "
"you'll call methods on it to add to the XML document in process."
msgstr ""

#: ../../ref/contrib/syndication.txt:1023
msgid "``SyndicationFeed.item_attributes(self, item)``"
msgstr ""

#: ../../ref/contrib/syndication.txt:1021
msgid ""
"Return a ``dict`` of attributes to add to each item (``item``/``entry``) "
"element. The argument, ``item``, is a dictionary of all the data passed to "
"``SyndicationFeed.add_item()``."
msgstr ""

#: ../../ref/contrib/syndication.txt:1027
msgid "``SyndicationFeed.add_item_elements(self, handler, item)``"
msgstr ""

#: ../../ref/contrib/syndication.txt:1026
msgid ""
"Callback to add elements to each item (``item``/``entry``) element. "
"``handler`` and ``item`` are as above."
msgstr ""

#: ../../ref/contrib/syndication.txt:1031
msgid ""
"If you override any of these methods, be sure to call the superclass methods"
" since they add the required elements for each feed format."
msgstr ""

#: ../../ref/contrib/syndication.txt:1034
msgid ""
"For example, you might start implementing an iTunes RSS feed generator like "
"so::"
msgstr ""

#: ../../ref/contrib/syndication.txt:1046
msgid ""
"Obviously there's a lot more work to be done for a complete custom feed "
"class, but the above example should demonstrate the basic idea."
msgstr ""

#: ../../ref/contrib/webdesign.txt:3
msgid "django.contrib.webdesign"
msgstr ""

#: ../../ref/contrib/webdesign.txt:11
msgid ""
"The package contained only a single template tag and it has been moved to "
"the built-in tags (:ttag:`lorem`)."
msgstr ""

#: ../../ref/csrf.txt:3
msgid "Cross Site Request Forgery protection"
msgstr ""

#: ../../ref/csrf.txt:8
msgid ""
"The CSRF middleware and template tag provides easy-to-use protection against"
" `Cross Site Request Forgeries`_.  This type of attack occurs when a "
"malicious Web site contains a link, a form button or some JavaScript that is"
" intended to perform some action on your Web site, using the credentials of "
"a logged-in user who visits the malicious site in their browser.  A related "
"type of attack, 'login CSRF', where an attacking site tricks a user's "
"browser into logging into a site with someone else's credentials, is also "
"covered."
msgstr ""

#: ../../ref/csrf.txt:16
msgid ""
"The first defense against CSRF attacks is to ensure that GET requests (and "
"other 'safe' methods, as defined by 9.1.1 Safe Methods, HTTP 1.1, "
":rfc:`2616#section-9.1.1`) are side-effect free. Requests via 'unsafe' "
"methods, such as POST, PUT and DELETE, can then be protected by following "
"the steps below."
msgstr ""

#: ../../ref/csrf.txt:29
msgid ""
"To take advantage of CSRF protection in your views, follow these steps:"
msgstr ""

#: ../../ref/csrf.txt:31
msgid ""
"The CSRF middleware is activated by default in the "
":setting:`MIDDLEWARE_CLASSES` setting. If you override that setting, "
"remember that ``'django.middleware.csrf.CsrfViewMiddleware'`` should come "
"before any view middleware that assume that CSRF attacks have been dealt "
"with."
msgstr ""

#: ../../ref/csrf.txt:36
msgid ""
"If you disabled it, which is not recommended, you can use "
":func:`~django.views.decorators.csrf.csrf_protect` on particular views you "
"want to protect (see below)."
msgstr ""

#: ../../ref/csrf.txt:40
msgid ""
"In any template that uses a POST form, use the :ttag:`csrf_token` tag inside"
" the ``<form>`` element if the form is for an internal URL, e.g.::"
msgstr ""

#: ../../ref/csrf.txt:45
msgid ""
"This should not be done for POST forms that target external URLs, since that"
" would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""

#: ../../ref/csrf.txt:48
msgid ""
"In the corresponding view functions, ensure that the "
"``'django.template.context_processors.csrf'`` context processor is being "
"used. Usually, this can be done in one of two ways:"
msgstr ""

#: ../../ref/csrf.txt:52
msgid ""
"Use RequestContext, which always uses "
"``'django.template.context_processors.csrf'`` (no matter what template "
"context processors are configured in the :setting:`TEMPLATES` setting). If "
"you are using generic views or contrib apps, you are covered already, since "
"these apps use RequestContext throughout."
msgstr ""

#: ../../ref/csrf.txt:58
msgid ""
"Manually import and use the processor to generate the CSRF token and add it "
"to the template context. e.g.::"
msgstr ""

#: ../../ref/csrf.txt:70
msgid ""
"You may want to write your own "
":func:`~django.shortcuts.render_to_response()` wrapper that takes care of "
"this step for you."
msgstr ""

#: ../../ref/csrf.txt:77
msgid "AJAX"
msgstr ""

#: ../../ref/csrf.txt:79
msgid ""
"While the above method can be used for AJAX POST requests, it has some "
"inconveniences: you have to remember to pass the CSRF token in as POST data "
"with every POST request. For this reason, there is an alternative method: on"
" each XMLHttpRequest, set a custom ``X-CSRFToken`` header to the value of "
"the CSRF token. This is often easier, because many JavaScript frameworks "
"provide hooks that allow headers to be set on every request."
msgstr ""

#: ../../ref/csrf.txt:86
msgid ""
"As a first step, you must get the CSRF token itself. The recommended source "
"for the token is the ``csrftoken`` cookie, which will be set if you've "
"enabled CSRF protection for your views as outlined above."
msgstr ""

#: ../../ref/csrf.txt:92
msgid ""
"The CSRF token cookie is named ``csrftoken`` by default, but you can control"
" the cookie name via the :setting:`CSRF_COOKIE_NAME` setting."
msgstr ""

#: ../../ref/csrf.txt:95
msgid "Acquiring the token is straightforward:"
msgstr ""

#: ../../ref/csrf.txt:117
msgid ""
"The above code could be simplified by using the `JavaScript Cookie library "
"<https://github.com/js-cookie/js-cookie/>`_ to replace ``getCookie``:"
msgstr ""

#: ../../ref/csrf.txt:126
msgid ""
"The CSRF token is also present in the DOM, but only if explicitly included "
"using :ttag:`csrf_token` in a template. The cookie contains the canonical "
"token; the ``CsrfViewMiddleware`` will prefer the cookie to the token in the"
" DOM. Regardless, you're guaranteed to have the cookie if the token is "
"present in the DOM, so you should use the cookie!"
msgstr ""

#: ../../ref/csrf.txt:134
msgid ""
"If your view is not rendering a template containing the :ttag:`csrf_token` "
"template tag, Django might not set the CSRF token cookie. This is common in "
"cases where forms are dynamically added to the page. To address this case, "
"Django provides a view decorator which forces setting of the cookie: "
":func:`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""

#: ../../ref/csrf.txt:140
msgid ""
"Finally, you'll have to actually set the header on your AJAX request, while "
"protecting the CSRF token from being sent to other domains using "
"`settings.crossDomain <http://api.jquery.com/jQuery.ajax>`_ in jQuery 1.5.1 "
"and newer:"
msgstr ""

#: ../../ref/csrf.txt:160
msgid "Other template engines"
msgstr ""

#: ../../ref/csrf.txt:162
msgid ""
"When using a different template engine than Django's built-in engine, you "
"can set the token in your forms manually after making sure it's available in"
" the template context."
msgstr ""

#: ../../ref/csrf.txt:166
msgid ""
"For example, in the Jinja2 template language, your form could contain the "
"following:"
msgstr ""

#: ../../ref/csrf.txt:175
msgid ""
"You can use JavaScript similar to the :ref:`AJAX code <csrf-ajax>` above to "
"get the value of the CSRF token."
msgstr ""

#: ../../ref/csrf.txt:179
msgid "The decorator method"
msgstr ""

#: ../../ref/csrf.txt:183
msgid ""
"Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can "
"use the ``csrf_protect`` decorator, which has exactly the same "
"functionality, on particular views that need the protection. It must be used"
" **both** on views that insert the CSRF token in the output, and on those "
"that accept the POST form data. (These are often the same view function, but"
" not always)."
msgstr ""

#: ../../ref/csrf.txt:189
msgid ""
"Use of the decorator by itself is **not recommended**, since if you forget "
"to use it, you will have a security hole. The 'belt and braces' strategy of "
"using both is fine, and will incur minimal overhead."
msgstr ""

#: ../../ref/csrf.txt:195
msgid ""
"Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr ""

#: ../../ref/csrf.txt:197 ../../ref/templates/builtins.txt:730
msgid "Usage::"
msgstr ""

#: ../../ref/csrf.txt:208 ../../ref/csrf.txt:291
msgid ""
"If you are using class-based views, you can refer to :ref:`Decorating class-"
"based views<decorating-class-based-views>`."
msgstr ""

#: ../../ref/csrf.txt:212
msgid "Rejected requests"
msgstr ""

#: ../../ref/csrf.txt:214
msgid ""
"By default, a '403 Forbidden' response is sent to the user if an incoming "
"request fails the checks performed by ``CsrfViewMiddleware``.  This should "
"usually only be seen when there is a genuine Cross Site Request Forgery, or "
"when, due to a programming error, the CSRF token has not been included with "
"a POST form."
msgstr ""

#: ../../ref/csrf.txt:220
msgid ""
"The error page, however, is not very friendly, so you may want to provide "
"your own view for handling this condition.  To do this, simply set the "
":setting:`CSRF_FAILURE_VIEW` setting."
msgstr ""

#: ../../ref/csrf.txt:229
msgid "The CSRF protection is based on the following things:"
msgstr ""

#: ../../ref/csrf.txt:231
msgid ""
"A CSRF cookie that is set to a random value (a session independent nonce, as"
" it is called), which other sites will not have access to."
msgstr ""

#: ../../ref/csrf.txt:234
msgid ""
"This cookie is set by ``CsrfViewMiddleware``.  It is meant to be permanent, "
"but since there is no way to set a cookie that never expires, it is sent "
"with every response that has called ``django.middleware.csrf.get_token()`` "
"(the function used internally to retrieve the CSRF token)."
msgstr ""

#: ../../ref/csrf.txt:239
msgid ""
"A hidden form field with the name 'csrfmiddlewaretoken' present in all "
"outgoing POST forms.  The value of this field is the value of the CSRF "
"cookie."
msgstr ""

#: ../../ref/csrf.txt:243
msgid "This part is done by the template tag."
msgstr ""

#: ../../ref/csrf.txt:245
msgid ""
"For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or "
"TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field "
"must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""

#: ../../ref/csrf.txt:249
msgid "This check is done by ``CsrfViewMiddleware``."
msgstr ""

#: ../../ref/csrf.txt:251
msgid ""
"In addition, for HTTPS requests, strict referer checking is done by "
"``CsrfViewMiddleware``.  This is necessary to address a Man-In-The-Middle "
"attack that is possible under HTTPS when using a session independent nonce, "
"due to the fact that HTTP 'Set-Cookie' headers are (unfortunately) accepted "
"by clients that are talking to a site under HTTPS.  (Referer checking is not"
" done for HTTP requests because the presence of the Referer header is not "
"reliable enough under HTTP.)"
msgstr ""

#: ../../ref/csrf.txt:259
msgid ""
"This ensures that only forms that have originated from your Web site can be "
"used to POST data back."
msgstr ""

#: ../../ref/csrf.txt:262
msgid ""
"It deliberately ignores GET requests (and other requests that are defined as"
" 'safe' by :rfc:`2616`). These requests ought never to have any potentially "
"dangerous side effects , and so a CSRF attack with a GET request ought to be"
" harmless. :rfc:`2616` defines POST, PUT and DELETE as 'unsafe', and all "
"other methods are assumed to be unsafe, for maximum protection."
msgstr ""

#: ../../ref/csrf.txt:269
msgid "Caching"
msgstr ""

#: ../../ref/csrf.txt:271
msgid ""
"If the :ttag:`csrf_token` template tag is used by a template (or the "
"``get_token`` function is called some other way), ``CsrfViewMiddleware`` "
"will add a cookie and a ``Vary: Cookie`` header to the response. This means "
"that the middleware will play well with the cache middleware if it is used "
"as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""

#: ../../ref/csrf.txt:277
msgid ""
"However, if you use cache decorators on individual views, the CSRF "
"middleware will not yet have been able to set the Vary header or the CSRF "
"cookie, and the response will be cached without either one. In this case, on"
" any views that will require a CSRF token to be inserted you should use the "
":func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""

#: ../../ref/csrf.txt:295 ../../ref/settings.txt:3518
msgid "Testing"
msgstr ""

#: ../../ref/csrf.txt:297
msgid ""
"The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view "
"functions, due to the need for the CSRF token which must be sent with every "
"POST request.  For this reason, Django's HTTP client for tests has been "
"modified to set a flag on requests which relaxes the middleware and the "
"``csrf_protect`` decorator so that they no longer rejects requests.  In "
"every other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""

#: ../../ref/csrf.txt:304
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks::"
msgstr ""

#: ../../ref/csrf.txt:316
msgid ""
"Subdomains within a site will be able to set cookies on the client for the "
"whole domain.  By setting the cookie and using a corresponding token, "
"subdomains will be able to circumvent the CSRF protection.  The only way to "
"avoid this is to ensure that subdomains are controlled by trusted users (or,"
" are at least unable to set cookies).  Note that even without CSRF, there "
"are other vulnerabilities, such as session fixation, that make giving "
"subdomains to untrusted parties a bad idea, and these vulnerabilities cannot"
" easily be fixed with current browsers."
msgstr ""

#: ../../ref/csrf.txt:325
msgid "Edge cases"
msgstr ""

#: ../../ref/csrf.txt:327
msgid ""
"Certain views can have unusual requirements that mean they don't fit the "
"normal pattern envisaged here. A number of utilities can be useful in these "
"situations. The scenarios they might be needed in are described in the "
"following section."
msgstr ""

#: ../../ref/csrf.txt:333
msgid "Utilities"
msgstr ""

#: ../../ref/csrf.txt:335
msgid ""
"The examples below assume you are using function-based views. If you are "
"working with class-based views, you can refer to :ref:`Decorating class-"
"based views<decorating-class-based-views>`."
msgstr ""

#: ../../ref/csrf.txt:341
msgid ""
"This decorator marks a view as being exempt from the protection ensured by "
"the middleware. Example::"
msgstr ""

#: ../../ref/csrf.txt:353
msgid ""
"Normally the :ttag:`csrf_token` template tag will not work if "
"``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` "
"has not run. The view decorator ``requires_csrf_token`` can be used to "
"ensure the template tag does work. This decorator works similarly to "
"``csrf_protect``, but never rejects an incoming request."
msgstr ""

#: ../../ref/csrf.txt:372
msgid "This decorator forces a view to send the CSRF cookie."
msgstr ""

#: ../../ref/csrf.txt:375
msgid "Scenarios"
msgstr ""

#: ../../ref/csrf.txt:378
msgid "CSRF protection should be disabled for just a few views"
msgstr ""

#: ../../ref/csrf.txt:380
msgid "Most views requires CSRF protection, but a few do not."
msgstr ""

#: ../../ref/csrf.txt:382
msgid ""
"Solution: rather than disabling the middleware and applying ``csrf_protect``"
" to all the views that need it, enable the middleware and use "
":func:`~django.views.decorators.csrf.csrf_exempt`."
msgstr ""

#: ../../ref/csrf.txt:387
msgid "CsrfViewMiddleware.process_view not used"
msgstr ""

#: ../../ref/csrf.txt:389
msgid ""
"There are cases when ``CsrfViewMiddleware.process_view`` may not have run "
"before your view is run - 404 and 500 handlers, for example - but you still "
"need the CSRF token in a form."
msgstr ""

#: ../../ref/csrf.txt:393
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""

#: ../../ref/csrf.txt:396
msgid "Unprotected view needs the CSRF token"
msgstr ""

#: ../../ref/csrf.txt:398
msgid ""
"There may be some views that are unprotected and have been exempted by "
"``csrf_exempt``, but still need to include the CSRF token."
msgstr ""

#: ../../ref/csrf.txt:401
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by "
":func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. "
"``requires_csrf_token`` should be the innermost decorator)."
msgstr ""

#: ../../ref/csrf.txt:406
msgid "View needs protection for one path"
msgstr ""

#: ../../ref/csrf.txt:408
msgid ""
"A view needs CSRF protection under one set of conditions only, and mustn't "
"have it for the rest of the time."
msgstr ""

#: ../../ref/csrf.txt:411
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the "
"whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` "
"for the path within it that needs protection. Example::"
msgstr ""

#: ../../ref/csrf.txt:430
msgid "Page uses AJAX without any HTML form"
msgstr ""

#: ../../ref/csrf.txt:432
msgid ""
"A page makes a POST request via AJAX, and the page does not have an HTML "
"form with a :ttag:`csrf_token` that would cause the required CSRF cookie to "
"be sent."
msgstr ""

#: ../../ref/csrf.txt:435
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on "
"the view that sends the page."
msgstr ""

#: ../../ref/csrf.txt:439
msgid "Contrib and reusable apps"
msgstr ""

#: ../../ref/csrf.txt:441
msgid ""
"Because it is possible for the developer to turn off the "
"``CsrfViewMiddleware``, all relevant views in contrib apps use the "
"``csrf_protect`` decorator to ensure the security of these applications "
"against CSRF.  It is recommended that the developers of other reusable apps "
"that want the same guarantees also use the ``csrf_protect`` decorator on "
"their views."
msgstr ""

#: ../../ref/csrf.txt:450
msgid "A number of settings can be used to control Django's CSRF behavior:"
msgstr ""

#: ../../ref/csrf.txt:452
msgid ":setting:`CSRF_COOKIE_AGE`"
msgstr ""

#: ../../ref/csrf.txt:453 ../../ref/settings.txt:3493
msgid ":setting:`CSRF_COOKIE_DOMAIN`"
msgstr ""

#: ../../ref/csrf.txt:454
msgid ":setting:`CSRF_COOKIE_HTTPONLY`"
msgstr ""

#: ../../ref/csrf.txt:455 ../../ref/settings.txt:3494
msgid ":setting:`CSRF_COOKIE_NAME`"
msgstr ""

#: ../../ref/csrf.txt:456 ../../ref/settings.txt:3495
msgid ":setting:`CSRF_COOKIE_PATH`"
msgstr ""

#: ../../ref/csrf.txt:457 ../../ref/settings.txt:3496
msgid ":setting:`CSRF_COOKIE_SECURE`"
msgstr ""

#: ../../ref/csrf.txt:458 ../../ref/settings.txt:3497
msgid ":setting:`CSRF_FAILURE_VIEW`"
msgstr ""

#: ../../ref/databases.txt:3
msgid "Databases"
msgstr ""

#: ../../ref/databases.txt:5
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and we've had to "
"make design decisions on which features to support and which assumptions we "
"can make safely."
msgstr ""

#: ../../ref/databases.txt:10
msgid ""
"This file describes some of the features that might be relevant to Django "
"usage. Of course, it is not intended as a replacement for server-specific "
"documentation or reference manuals."
msgstr ""

#: ../../ref/databases.txt:15
msgid "General notes"
msgstr ""

#: ../../ref/databases.txt:20
msgid "Persistent connections"
msgstr ""

#: ../../ref/databases.txt:22
msgid ""
"Persistent connections avoid the overhead of re-establishing a connection to"
" the database in each request. They're controlled by the "
":setting:`CONN_MAX_AGE` parameter which defines the maximum lifetime of a "
"connection. It can be set independently for each database."
msgstr ""

#: ../../ref/databases.txt:27
msgid ""
"The default value is ``0``, preserving the historical behavior of closing "
"the database connection at the end of each request. To enable persistent "
"connections, set :setting:`CONN_MAX_AGE` to a positive number of seconds. "
"For unlimited persistent connections, set it to ``None``."
msgstr ""

#: ../../ref/databases.txt:33
msgid "Connection management"
msgstr ""

#: ../../ref/databases.txt:35
msgid ""
"Django opens a connection to the database when it first makes a database "
"query. It keeps this connection open and reuses it in subsequent requests. "
"Django closes the connection once it exceeds the maximum age defined by "
":setting:`CONN_MAX_AGE` or when it isn't usable any longer."
msgstr ""

#: ../../ref/databases.txt:40
msgid ""
"In detail, Django automatically opens a connection to the database whenever "
"it needs one and doesn't have one already — either because this is the first"
" connection, or because the previous connection was closed."
msgstr ""

#: ../../ref/databases.txt:44
msgid ""
"At the beginning of each request, Django closes the connection if it has "
"reached its maximum age. If your database terminates idle connections after "
"some time, you should set :setting:`CONN_MAX_AGE` to a lower value, so that "
"Django doesn't attempt to use a connection that has been terminated by the "
"database server. (This problem may only affect very low traffic sites.)"
msgstr ""

#: ../../ref/databases.txt:50
msgid ""
"At the end of each request, Django closes the connection if it has reached "
"its maximum age or if it is in an unrecoverable error state. If any database"
" errors have occurred while processing the requests, Django checks whether "
"the connection still works, and closes it if it doesn't. Thus, database "
"errors affect at most one request; if the connection becomes unusable, the "
"next request gets a fresh connection."
msgstr ""

#: ../../ref/databases.txt:58
msgid "Caveats"
msgstr ""

#: ../../ref/databases.txt:60
msgid ""
"Since each thread maintains its own connection, your database must support "
"at least as many simultaneous connections as you have worker threads."
msgstr ""

#: ../../ref/databases.txt:63
msgid ""
"Sometimes a database won't be accessed by the majority of your views, for "
"example because it's the database of an external system, or thanks to "
"caching. In such cases, you should set :setting:`CONN_MAX_AGE` to a low "
"value or even ``0``, because it doesn't make sense to maintain a connection "
"that's unlikely to be reused. This will help keep the number of simultaneous"
" connections to this database small."
msgstr ""

#: ../../ref/databases.txt:70
msgid ""
"The development server creates a new thread for each request it handles, "
"negating the effect of persistent connections. Don't enable them during "
"development."
msgstr ""

#: ../../ref/databases.txt:74
msgid ""
"When Django establishes a connection to the database, it sets up appropriate"
" parameters, depending on the backend being used. If you enable persistent "
"connections, this setup is no longer repeated every request. If you modify "
"parameters such as the connection's isolation level or time zone, you should"
" either restore Django's defaults at the end of each request, force an "
"appropriate value at the beginning of each request, or disable persistent "
"connections."
msgstr ""

#: ../../ref/databases.txt:83
msgid "Encoding"
msgstr ""

#: ../../ref/databases.txt:85
msgid ""
"Django assumes that all databases use UTF-8 encoding. Using other encodings "
"may result in unexpected behavior such as \"value too long\" errors from "
"your database for data that is valid in Django. See the database specific "
"notes below for information on how to set up your database correctly."
msgstr ""

#: ../../ref/databases.txt:93
msgid "PostgreSQL notes"
msgstr ""

#: ../../ref/databases.txt:95
msgid ""
"Django supports PostgreSQL 9.0 and higher. It requires the use of "
"`psycopg2`_ 2.4.5 or higher (or 2.5+ if you want to use "
":mod:`django.contrib.postgres`)."
msgstr ""

#: ../../ref/databases.txt:101
msgid "PostgreSQL connection settings"
msgstr ""

#: ../../ref/databases.txt:103
msgid "See :setting:`HOST` for details."
msgstr ""

#: ../../ref/databases.txt:106
msgid "Optimizing PostgreSQL's configuration"
msgstr ""

#: ../../ref/databases.txt:108
msgid "Django needs the following parameters for its database connections:"
msgstr ""

#: ../../ref/databases.txt:110
msgid "``client_encoding``: ``'UTF8'``,"
msgstr ""

#: ../../ref/databases.txt:111
msgid ""
"``default_transaction_isolation``: ``'read committed'`` by default, or the "
"value set in the connection options (see below),"
msgstr ""

#: ../../ref/databases.txt:113
msgid ""
"``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of "
":setting:`TIME_ZONE` otherwise."
msgstr ""

#: ../../ref/databases.txt:116
msgid ""
"If these parameters already have the correct values, Django won't set them "
"for every new connection, which improves performance slightly. You can "
"configure them directly in :file:`postgresql.conf` or more conveniently per "
"database user with `ALTER ROLE`_."
msgstr ""

#: ../../ref/databases.txt:121
msgid ""
"Django will work just fine without this optimization, but each new "
"connection will do some additional queries to set these parameters."
msgstr ""

#: ../../ref/databases.txt:129
msgid "Isolation level"
msgstr ""

#: ../../ref/databases.txt:131
msgid ""
"Like PostgreSQL itself, Django defaults to the ``READ COMMITTED`` `isolation"
" level`_. If you need a higher isolation level such as ``REPEATABLE READ`` "
"or ``SERIALIZABLE``, set it in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`::"
msgstr ""

#: ../../ref/databases.txt:147
msgid ""
"Under higher isolation levels, your application should be prepared to handle"
" exceptions raised on serialization failures. This option is designed for "
"advanced uses."
msgstr ""

#: ../../ref/databases.txt:154
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr ""

#: ../../ref/databases.txt:156
msgid ""
"When specifying ``db_index=True`` on your model fields, Django typically "
"outputs a single ``CREATE INDEX`` statement.  However, if the database type "
"for the field is either ``varchar`` or ``text`` (e.g., used by "
"``CharField``, ``FileField``, and ``TextField``), then Django will create an"
" additional index that uses an appropriate `PostgreSQL operator class`_ for "
"the column.  The extra index is necessary to correctly perform lookups that "
"use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and"
" ``startswith`` lookup types."
msgstr ""

#: ../../ref/databases.txt:170
msgid "MySQL notes"
msgstr ""

#: ../../ref/databases.txt:173
msgid "Version support"
msgstr ""

#: ../../ref/databases.txt:175
msgid "Django supports MySQL 5.5 and higher."
msgstr ""

#: ../../ref/databases.txt:177
msgid ""
"Django's ``inspectdb`` feature uses the ``information_schema`` database, "
"which contains detailed data on all database schemas."
msgstr ""

#: ../../ref/databases.txt:180
msgid ""
"Django expects the database to support Unicode (UTF-8 encoding) and "
"delegates to it the task of enforcing transactions and referential "
"integrity. It is important to be aware of the fact that the two latter ones "
"aren't actually enforced by MySQL when using the MyISAM storage engine, see "
"the next section."
msgstr ""

#: ../../ref/databases.txt:188
msgid "Storage engines"
msgstr ""

#: ../../ref/databases.txt:190
msgid ""
"MySQL has several `storage engines`_. You can change the default storage "
"engine in the server configuration."
msgstr ""

#: ../../ref/databases.txt:193
msgid ""
"Until MySQL 5.5.4, the default engine was MyISAM_ [#]_. The main drawbacks "
"of MyISAM are that it doesn't support transactions or enforce foreign-key "
"constraints. On the plus side, it was the only engine that supported full-"
"text indexing and searching until MySQL 5.6.4."
msgstr ""

#: ../../ref/databases.txt:198
msgid ""
"Since MySQL 5.5.5, the default storage engine is InnoDB_. This engine is "
"fully transactional and supports foreign key references. It's probably the "
"best choice at this point. However, note that the InnoDB autoincrement "
"counter is lost on a MySQL restart because it does not remember the "
"``AUTO_INCREMENT`` value, instead recreating it as \"max(id)+1\". This may "
"result in an inadvertent reuse of :class:`~django.db.models.AutoField` "
"values."
msgstr ""

#: ../../ref/databases.txt:205
msgid ""
"If you upgrade an existing project to MySQL 5.5.5 and subsequently add some "
"tables, ensure that your tables are using the same storage engine (i.e. "
"MyISAM vs. InnoDB). Specifically, if tables that have a ``ForeignKey`` "
"between them use different storage engines, you may see an error like the "
"following when running ``migrate``::"
msgstr ""

#: ../../ref/databases.txt:219
msgid ""
"Unless this was changed by the packager of your MySQL package. We've had "
"reports that the Windows Community Server installer sets up InnoDB as the "
"default storage engine, for example."
msgstr ""

#: ../../ref/databases.txt:226
msgid "MySQL DB API Drivers"
msgstr ""

#: ../../ref/databases.txt:228
msgid ""
"The Python Database API is described in :pep:`249`. MySQL has three "
"prominent drivers that implement this API:"
msgstr ""

#: ../../ref/databases.txt:231
msgid ""
"`MySQLdb`_ is a native driver that has been developed and supported for over"
" a decade by Andy Dustman."
msgstr ""

#: ../../ref/databases.txt:233
msgid ""
"`mysqlclient`_ is a fork of ``MySQLdb`` which notably supports Python 3 and "
"can be used as a drop-in replacement for MySQLdb. At the time of this "
"writing, this is **the recommended choice** for using MySQL with Django."
msgstr ""

#: ../../ref/databases.txt:236
msgid ""
"`MySQL Connector/Python`_ is a pure Python driver from Oracle that does not "
"require the MySQL client library or any Python modules outside the standard "
"library."
msgstr ""

#: ../../ref/databases.txt:244
msgid ""
"All these drivers are thread-safe and provide connection pooling. "
"``MySQLdb`` is the only one not supporting Python 3 currently."
msgstr ""

#: ../../ref/databases.txt:247
msgid ""
"In addition to a DB API driver, Django needs an adapter to access the "
"database drivers from its ORM. Django provides an adapter for "
"MySQLdb/mysqlclient while MySQL Connector/Python includes `its own`_."
msgstr ""

#: ../../ref/databases.txt:254
msgid "MySQLdb"
msgstr ""

#: ../../ref/databases.txt:256
msgid "Django requires MySQLdb version 1.2.1p2 or later."
msgstr ""

#: ../../ref/databases.txt:258
msgid ""
"At the time of writing, the latest release of MySQLdb (1.2.5) doesn't "
"support Python 3. In order to use MySQLdb under Python 3, you'll have to "
"install ``mysqlclient`` instead."
msgstr ""

#: ../../ref/databases.txt:263
msgid ""
"There are known issues with the way MySQLdb converts date strings into "
"datetime objects. Specifically, date strings with value ``0000-00-00`` are "
"valid for MySQL but will be converted into ``None`` by MySQLdb."
msgstr ""

#: ../../ref/databases.txt:267
msgid ""
"This means you should be careful while using :djadmin:`loaddata` and "
":djadmin:`dumpdata` with rows that may have ``0000-00-00`` values, as they "
"will be converted to ``None``."
msgstr ""

#: ../../ref/databases.txt:272
msgid "mysqlclient"
msgstr ""

#: ../../ref/databases.txt:274
msgid ""
"Django requires `mysqlclient`_ 1.3.3 or later. Note that Python 3.2 is not "
"supported. Except for the Python 3.3+ support, mysqlclient should mostly "
"behave the same as MySQLDB."
msgstr ""

#: ../../ref/databases.txt:279
msgid "MySQL Connector/Python"
msgstr ""

#: ../../ref/databases.txt:281
msgid ""
"MySQL Connector/Python is available from the `download page`_. The Django "
"adapter is available in versions 1.1.X and later. It may not support the "
"most recent releases of Django."
msgstr ""

#: ../../ref/databases.txt:290
msgid "Time zone definitions"
msgstr ""

#: ../../ref/databases.txt:292
msgid ""
"If you plan on using Django's :doc:`timezone support "
"</topics/i18n/timezones>`, use `mysql_tzinfo_to_sql`_ to load time zone "
"tables into the MySQL database. This needs to be done just once for your "
"MySQL server, not per database."
msgstr ""

#: ../../ref/databases.txt:299
msgid "Creating your database"
msgstr ""

#: ../../ref/databases.txt:301
msgid ""
"You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

#: ../../ref/databases.txt:305
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

#: ../../ref/databases.txt:312
msgid "Collation settings"
msgstr ""

#: ../../ref/databases.txt:314
msgid ""
"The collation setting for a column controls the order in which data is "
"sorted as well as what strings compare as equal. It can be set on a "
"database-wide level and also per-table and per-column. This is `documented "
"thoroughly`_ in the MySQL documentation. In all cases, you set the collation"
" by directly manipulating the database tables; Django doesn't provide a way "
"to set this on the model definition."
msgstr ""

#: ../../ref/databases.txt:323
msgid ""
"By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci`` "
"collation. This results in all string equality comparisons being done in a "
"*case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are "
"considered equal at the database level. If you have a unique constraint on a"
" field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` "
"into the same column, since they compare as equal (and, hence, non-unique) "
"with the default collation."
msgstr ""

#: ../../ref/databases.txt:331
msgid ""
"In many cases, this default will not be a problem. However, if you really "
"want case-sensitive comparisons on a particular column or table, you would "
"change the column or table to use the ``utf8_bin`` collation. The main thing"
" to be aware of in this case is that if you are using MySQLdb 1.2.2, the "
"database backend in Django will then return bytestrings (instead of unicode "
"strings) for any character fields it receive from the database. This is a "
"strong variation from Django's normal practice of *always* returning unicode"
" strings. It is up to you, the developer, to handle the fact that you will "
"receive bytestrings if you configure your table(s) to use ``utf8_bin`` "
"collation. Django itself should mostly work smoothly with such columns "
"(except for the ``contrib.sessions`` ``Session`` and ``contrib.admin`` "
"``LogEntry`` tables described below), but your code must be prepared to call"
" ``django.utils.encoding.smart_text()`` at times if it really wants to work "
"with consistent data -- Django will not do this for you (the database "
"backend layer and the model population layer are separated internally so the"
" database layer doesn't know it needs to make this conversion in this one "
"particular case)."
msgstr ""

#: ../../ref/databases.txt:348
msgid ""
"If you're using MySQLdb 1.2.1p2, Django's standard "
":class:`~django.db.models.CharField` class will return unicode strings even "
"with ``utf8_bin`` collation. However, :class:`~django.db.models.TextField` "
"fields will be returned as an ``array.array`` instance (from Python's "
"standard ``array`` module). There isn't a lot Django can do about that, "
"since, again, the information needed to make the necessary conversions isn't"
" available when the data is read in from the database. This problem was "
"`fixed in MySQLdb 1.2.2`_, so if you want to use "
":class:`~django.db.models.TextField` with ``utf8_bin`` collation, upgrading "
"to version 1.2.2 and then dealing with the bytestrings (which shouldn't be "
"too difficult) as described above is the recommended solution."
msgstr ""

#: ../../ref/databases.txt:360
msgid ""
"Should you decide to use ``utf8_bin`` collation for some of your tables with"
" MySQLdb 1.2.1p2 or 1.2.2, you should still use ``utf8_general_ci`` (the "
"default) collation for the ``django.contrib.sessions.models.Session`` table "
"(usually called ``django_session``) and the "
":class:`django.contrib.admin.models.LogEntry` table (usually called "
"``django_admin_log``). Those are the two standard tables that use "
":class:`~django.db.models.TextField` internally."
msgstr ""

#: ../../ref/databases.txt:370
msgid ""
"Please note that according to `MySQL Unicode Character Sets`_, comparisons "
"for the ``utf8_general_ci`` collation are faster, but slightly less correct,"
" than comparisons for ``utf8_unicode_ci``. If this is acceptable for your "
"application, you should use ``utf8_general_ci`` because it is faster. If "
"this is not acceptable (for example, if you require German dictionary "
"order), use ``utf8_unicode_ci`` because it is more accurate."
msgstr ""

#: ../../ref/databases.txt:381
msgid ""
"Model formsets validate unique fields in a case-sensitive manner. Thus when "
"using a case-insensitive collation, a formset with unique field values that "
"differ only by case will pass validation, but upon calling ``save()``, an "
"``IntegrityError`` will be raised."
msgstr ""

#: ../../ref/databases.txt:387 ../../ref/databases.txt:771
msgid "Connecting to the database"
msgstr ""

#: ../../ref/databases.txt:389
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

#: ../../ref/databases.txt:391
msgid "Connection settings are used in this order:"
msgstr ""

#: ../../ref/databases.txt:393
msgid ":setting:`OPTIONS`."
msgstr ""

#: ../../ref/databases.txt:394
msgid ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, "
":setting:`PORT`"
msgstr ""

#: ../../ref/databases.txt:396
msgid "MySQL option files."
msgstr ""

#: ../../ref/databases.txt:398
msgid ""
"In other words, if you set the name of the database in :setting:`OPTIONS`, "
"this will take precedence over :setting:`NAME`, which would override "
"anything in a `MySQL option file`_."
msgstr ""

#: ../../ref/databases.txt:402
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

#: ../../ref/databases.txt:422
msgid ""
"Several other MySQLdb connection options may be useful, such as ``ssl``, "
"``init_command``, and ``sql_mode``. Consult the `MySQLdb documentation`_ for"
" more details."
msgstr ""

#: ../../ref/databases.txt:430
msgid "Creating your tables"
msgstr ""

#: ../../ref/databases.txt:432
msgid ""
"When Django generates the schema, it doesn't specify a storage engine, so "
"tables will be created with whatever default storage engine your database "
"server is configured for. The easiest solution is to set your database "
"server's default storage engine to the desired engine."
msgstr ""

#: ../../ref/databases.txt:437
msgid ""
"If you're using a hosting service and can't change your server's default "
"storage engine, you have a couple of options."
msgstr ""

#: ../../ref/databases.txt:440
msgid ""
"After the tables are created, execute an ``ALTER TABLE`` statement to "
"convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

#: ../../ref/databases.txt:445
msgid "This can be tedious if you have a lot of tables."
msgstr ""

#: ../../ref/databases.txt:447
msgid ""
"Another option is to use the ``init_command`` option for MySQLdb prior to "
"creating your tables::"
msgstr ""

#: ../../ref/databases.txt:454
msgid ""
"This sets the default storage engine upon connecting to the database. After "
"your tables have been created, you should remove this option as it adds a "
"query that is only needed during table creation to each database connection."
msgstr ""

#: ../../ref/databases.txt:460 ../../ref/models/options.txt:50
msgid "Table names"
msgstr ""

#: ../../ref/databases.txt:462
msgid ""
"There are `known issues`_ in even the latest versions of MySQL that can "
"cause the case of a table name to be altered when certain SQL statements are"
" executed under certain conditions. It is recommended that you use lowercase"
" table names, if possible, to avoid any problems that might arise from this "
"behavior. Django uses lowercase table names when it auto-generates table "
"names from models, so this is mainly a consideration if you are overriding "
"the table name via the :class:`~django.db.models.Options.db_table` "
"parameter."
msgstr ""

#: ../../ref/databases.txt:473
msgid "Savepoints"
msgstr ""

#: ../../ref/databases.txt:475
msgid ""
"Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine "
"<mysql-storage-engines>`) support database :ref:`savepoints <topics-db-"
"transactions-savepoints>`."
msgstr ""

#: ../../ref/databases.txt:479
msgid ""
"If you use the MyISAM storage engine please be aware of the fact that you "
"will receive database-generated errors if you try to use the :ref"
":`savepoint-related methods of the transactions API <topics-db-transactions-"
"savepoints>`. The reason for this is that detecting the storage engine of a "
"MySQL database/table is an expensive operation so it was decided it isn't "
"worth to dynamically convert these methods in no-op's based in the results "
"of such detection."
msgstr ""

#: ../../ref/databases.txt:487
msgid "Notes on specific fields"
msgstr ""

#: ../../ref/databases.txt:490
msgid "Character fields"
msgstr ""

#: ../../ref/databases.txt:492
msgid ""
"Any fields that are stored with ``VARCHAR`` column types have their "
"``max_length`` restricted to 255 characters if you are using ``unique=True``"
" for the field. This affects :class:`~django.db.models.CharField`, "
":class:`~django.db.models.SlugField` and "
":class:`~django.db.models.CommaSeparatedIntegerField`."
msgstr ""

#: ../../ref/databases.txt:499 ../../ref/databases.txt:881
msgid "``TextField`` limitations"
msgstr ""

#: ../../ref/databases.txt:501
msgid ""
"MySQL can index only the first N chars of a ``BLOB`` or ``TEXT`` column. "
"Since ``TextField`` doesn't have a defined length, you can't mark it as "
"``unique=True``. MySQL will report: \"BLOB/TEXT column '<db_column>' used in"
" key specification without a key length\"."
msgstr ""

#: ../../ref/databases.txt:509
msgid "Fractional seconds support for Time and DateTime fields"
msgstr ""

#: ../../ref/databases.txt:511
msgid ""
"MySQL 5.6.4 and later can store fractional seconds, provided that the column"
" definition includes a fractional indication (e.g. ``DATETIME(6)``). Earlier"
" versions do not support them at all. In addition, versions of MySQLdb older"
" than 1.2.5 have `a bug`_ that also prevents the use of fractional seconds "
"with MySQL."
msgstr ""

#: ../../ref/databases.txt:519
msgid ""
"Django will not upgrade existing columns to include fractional seconds if "
"the database server supports it. If you want to enable them on an existing "
"database, it's up to you to either manually update the column on the target "
"database, by executing a command like::"
msgstr ""

#: ../../ref/databases.txt:526
msgid ""
"or using a :class:`~django.db.migrations.operations.RunSQL` operation in a "
":ref:`data migration <data-migrations>`."
msgstr ""

#: ../../ref/databases.txt:531
msgid ""
"Previously, Django truncated fractional seconds from ``datetime`` and "
"``time`` values when using the MySQL backend. Now it lets the database "
"decide whether it should drop that part of the value or not. By default, new"
" ``DateTimeField`` or ``TimeField`` columns are now created with fractional "
"seconds support on MySQL 5.6.4 or later with either mysqlclient or MySQLdb "
"1.2.5 or later."
msgstr ""

#: ../../ref/databases.txt:539
msgid "``TIMESTAMP`` columns"
msgstr ""

#: ../../ref/databases.txt:541
msgid ""
"If you are using a legacy database that contains ``TIMESTAMP`` columns, you "
"must set :setting:`USE_TZ = False <USE_TZ>` to avoid data corruption. "
":djadmin:`inspectdb` maps these columns to "
":class:`~django.db.models.DateTimeField` and if you enable timezone support,"
" both MySQL and Django will attempt to convert the values from UTC to local "
"time."
msgstr ""

#: ../../ref/databases.txt:548
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

#: ../../ref/databases.txt:550
msgid ""
"MySQL does not support the ``NOWAIT`` option to the ``SELECT ... FOR "
"UPDATE`` statement. If ``select_for_update()`` is used with ``nowait=True`` "
"then a ``DatabaseError`` will be raised."
msgstr ""

#: ../../ref/databases.txt:555
msgid "Automatic typecasting can cause unexpected results"
msgstr ""

#: ../../ref/databases.txt:557
msgid ""
"When performing a query on a string type, but with an integer value, MySQL "
"will coerce the types of all values in the table to an integer before "
"performing the comparison. If your table contains the values ``'abc'``, "
"``'def'`` and you query for ``WHERE mycolumn=0``, both rows will match. "
"Similarly, ``WHERE mycolumn=1`` will match the value ``'abc1'``. Therefore, "
"string type fields included in Django will always cast the value to a string"
" before using it in a query."
msgstr ""

#: ../../ref/databases.txt:564
msgid ""
"If you implement custom model fields that inherit from "
":class:`~django.db.models.Field` directly, are overriding "
":meth:`~django.db.models.Field.get_prep_value`, or use "
":class:`~django.db.models.expressions.RawSQL`, "
":meth:`~django.db.models.query.QuerySet.extra`, or "
":meth:`~django.db.models.Manager.raw`, you should ensure that you perform "
"appropriate typecasting."
msgstr ""

#: ../../ref/databases.txt:575
msgid "SQLite notes"
msgstr ""

#: ../../ref/databases.txt:577
msgid ""
"SQLite_ provides an excellent development alternative for applications that "
"are predominantly read-only or require a smaller installation footprint. As "
"with all database servers, though, there are some differences that are "
"specific to SQLite that you should be aware of."
msgstr ""

#: ../../ref/databases.txt:587
msgid "Substring matching and case sensitivity"
msgstr ""

#: ../../ref/databases.txt:589
msgid ""
"For all SQLite versions, there is some slightly counter-intuitive behavior "
"when attempting to match some types of strings.  These are triggered when "
"using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The "
"behavior splits into two cases:"
msgstr ""

#: ../../ref/databases.txt:594
msgid ""
"1. For substring matching, all matches are done case-insensitively. That is "
"a filter such as ``filter(name__contains=\"aa\")`` will match a name of "
"``\"Aabb\"``."
msgstr ""

#: ../../ref/databases.txt:597
msgid ""
"2. For strings containing characters outside the ASCII range, all exact "
"string matches are performed case-sensitively, even when the case-"
"insensitive options are passed into the query. So the :lookup:`iexact` "
"filter will behave exactly the same as the :lookup:`exact` filter in these "
"cases."
msgstr ""

#: ../../ref/databases.txt:602
msgid ""
"Some possible workarounds for this are `documented at sqlite.org`_, but they"
" aren't utilized by the default SQLite backend in Django, as incorporating "
"them would be fairly difficult to do robustly. Thus, Django exposes the "
"default SQLite behavior and you should be aware of this when doing case-"
"insensitive or substring filtering."
msgstr ""

#: ../../ref/databases.txt:611
msgid "Old SQLite and ``CASE`` expressions"
msgstr ""

#: ../../ref/databases.txt:613
msgid ""
"SQLite 3.6.23.1 and older contains a bug when `handling query parameters`_ "
"in a ``CASE`` expression that contains an ``ELSE`` and arithmetic."
msgstr ""

#: ../../ref/databases.txt:616
msgid ""
"SQLite 3.6.23.1 was released in March 2010, and most current binary "
"distributions for different platforms include a newer version of SQLite, "
"with the notable exception of the Python 2.7 installers for Windows."
msgstr ""

#: ../../ref/databases.txt:620
msgid ""
"As of this writing, the latest release for Windows - Python 2.7.10 - "
"includes SQLite 3.6.21. You can install ``pysqlite2`` or replace "
"``sqlite3.dll`` (by default installed in ``C:\\Python27\\DLLs``) with a "
"newer version from http://www.sqlite.org/ to remedy this issue."
msgstr ""

#: ../../ref/databases.txt:630
msgid "Using newer versions of the SQLite DB-API 2.0 driver"
msgstr ""

#: ../../ref/databases.txt:632
msgid ""
"Django will use a ``pysqlite2`` module in preference to ``sqlite3`` as "
"shipped with the Python standard library if it finds one is available."
msgstr ""

#: ../../ref/databases.txt:635
msgid ""
"This provides the ability to upgrade both the DB-API 2.0 interface or SQLite"
" 3 itself to versions newer than the ones included with your particular "
"Python binary distribution, if needed."
msgstr ""

#: ../../ref/databases.txt:640
msgid "\"Database is locked\" errors"
msgstr ""

#: ../../ref/databases.txt:642
msgid ""
"SQLite is meant to be a lightweight database, and thus can't support a high "
"level of concurrency. ``OperationalError: database is locked`` errors "
"indicate that your application is experiencing more concurrency than "
"``sqlite`` can handle in default configuration. This error means that one "
"thread or process has an exclusive lock on the database connection and "
"another thread timed out waiting for the lock the be released."
msgstr ""

#: ../../ref/databases.txt:649
msgid ""
"Python's SQLite wrapper has a default timeout value that determines how long"
" the second thread is allowed to wait on the lock before it times out and "
"raises the ``OperationalError: database is locked`` error."
msgstr ""

#: ../../ref/databases.txt:654
msgid "If you're getting this error, you can solve it by:"
msgstr ""

#: ../../ref/databases.txt:656
msgid ""
"Switching to another database backend. At a certain point SQLite becomes too"
" \"lite\" for real-world applications, and these sorts of concurrency errors"
" indicate you've reached that point."
msgstr ""

#: ../../ref/databases.txt:660
msgid ""
"Rewriting your code to reduce concurrency and ensure that database "
"transactions are short-lived."
msgstr ""

#: ../../ref/databases.txt:663
msgid ""
"Increase the default timeout value by setting the ``timeout`` database "
"option::"
msgstr ""

#: ../../ref/databases.txt:672
msgid ""
"This will simply make SQLite wait a bit longer before throwing \"database is"
" locked\" errors; it won't really do anything to solve them."
msgstr ""

#: ../../ref/databases.txt:676
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

#: ../../ref/databases.txt:678
msgid ""
"SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it "
"will have no effect."
msgstr ""

#: ../../ref/databases.txt:682
msgid "\"pyformat\" parameter style in raw queries not supported"
msgstr ""

#: ../../ref/databases.txt:684
msgid ""
"For most backends, raw queries (``Manager.raw()`` or ``cursor.execute()``) "
"can use the \"pyformat\" parameter style, where placeholders in the query "
"are given as ``'%(name)s'`` and the parameters are passed as a dictionary "
"rather than a list. SQLite does not support this."
msgstr ""

#: ../../ref/databases.txt:692
msgid "Parameters not quoted in ``connection.queries``"
msgstr ""

#: ../../ref/databases.txt:694
msgid ""
"``sqlite3`` does not provide a way to retrieve the SQL after quoting and "
"substituting the parameters. Instead, the SQL in ``connection.queries`` is "
"rebuilt with a simple string interpolation. It may be incorrect. Make sure "
"you add quotes where necessary before copying a query into an SQLite shell."
msgstr ""

#: ../../ref/databases.txt:702
msgid "Oracle notes"
msgstr ""

#: ../../ref/databases.txt:704
msgid ""
"Django supports `Oracle Database Server`_ versions 11.1 and higher. Version "
"4.3.1 or higher of the `cx_Oracle`_ Python driver is required, although we "
"recommend version 5.1.3 or later as these versions support Python 3."
msgstr ""

#: ../../ref/databases.txt:708
msgid ""
"Note that due to a Unicode-corruption bug in ``cx_Oracle`` 5.0, that version"
" of the driver should **not** be used with Django; ``cx_Oracle`` 5.0.1 "
"resolved this issue, so if you'd like to use a more recent ``cx_Oracle``, "
"use version 5.0.1."
msgstr ""

#: ../../ref/databases.txt:713
msgid ""
"``cx_Oracle`` 5.0.1 or greater can optionally be compiled with the "
"``WITH_UNICODE`` environment variable.  This is recommended but not "
"required."
msgstr ""

#: ../../ref/databases.txt:720
msgid ""
"In order for the ``python manage.py migrate`` command to work, your Oracle "
"database user must have privileges to run the following commands:"
msgstr ""

#: ../../ref/databases.txt:723
msgid "CREATE TABLE"
msgstr ""

#: ../../ref/databases.txt:724
msgid "CREATE SEQUENCE"
msgstr ""

#: ../../ref/databases.txt:725
msgid "CREATE PROCEDURE"
msgstr ""

#: ../../ref/databases.txt:726
msgid "CREATE TRIGGER"
msgstr ""

#: ../../ref/databases.txt:728
msgid ""
"To run a project's test suite, the user usually needs these *additional* "
"privileges:"
msgstr ""

#: ../../ref/databases.txt:731
msgid "CREATE USER"
msgstr ""

#: ../../ref/databases.txt:732
msgid "DROP USER"
msgstr ""

#: ../../ref/databases.txt:733
msgid "CREATE TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:734
msgid "DROP TABLESPACE"
msgstr ""

#: ../../ref/databases.txt:735
msgid "CREATE SESSION WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:736
msgid "CREATE TABLE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:737
msgid "CREATE SEQUENCE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:738
msgid "CREATE PROCEDURE WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:739
msgid "CREATE TRIGGER WITH ADMIN OPTION"
msgstr ""

#: ../../ref/databases.txt:741
msgid ""
"Note that, while the RESOURCE role has the required CREATE TABLE, CREATE "
"SEQUENCE, CREATE PROCEDURE and CREATE TRIGGER privileges, and a user granted"
" RESOURCE WITH ADMIN OPTION can grant RESOURCE, such a user cannot grant the"
" individual privileges (e.g. CREATE TABLE), and thus RESOURCE WITH ADMIN "
"OPTION is not usually sufficient for running tests."
msgstr ""

#: ../../ref/databases.txt:747
msgid ""
"Some test suites also create views; to run these, the user also needs the "
"CREATE VIEW WITH ADMIN OPTION privilege. In particular, this is needed for "
"Django's own test suite."
msgstr ""

#: ../../ref/databases.txt:753
msgid ""
"Prior to Django 1.8, the test user was granted the CONNECT and RESOURCE "
"roles, so the extra privileges required for running the test suite were "
"different."
msgstr ""

#: ../../ref/databases.txt:757
msgid ""
"All of these privileges are included in the DBA role, which is appropriate "
"for use on a private developer's database."
msgstr ""

#: ../../ref/databases.txt:760
msgid ""
"The Oracle database backend uses the ``SYS.DBMS_LOB`` and "
"``SYS.DBMS_RANDOM`` packages, so your user will require execute permissions "
"on it. It's normally accessible to all users by default, but in case it is "
"not, you'll need to grant permissions like so:"
msgstr ""

#: ../../ref/databases.txt:773
msgid ""
"To connect using the service name of your Oracle database, your "
"``settings.py`` file should look something like this::"
msgstr ""

#: ../../ref/databases.txt:788
msgid ""
"In this case, you should leave both :setting:`HOST` and :setting:`PORT` "
"empty. However, if you don't use a ``tnsnames.ora`` file or a similar naming"
" method and want to connect using the SID (\"xe\" in this example), then "
"fill in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""

#: ../../ref/databases.txt:804
msgid ""
"You should either supply both :setting:`HOST` and :setting:`PORT`, or leave "
"both as empty strings. Django will use a different connect descriptor "
"depending on that choice."
msgstr ""

#: ../../ref/databases.txt:809
msgid "Threaded option"
msgstr ""

#: ../../ref/databases.txt:811
msgid ""
"If you plan to run Django in a multithreaded environment (e.g. Apache using "
"the default MPM module on any modern operating system), then you **must** "
"set the ``threaded`` option of your Oracle database configuration to True::"
msgstr ""

#: ../../ref/databases.txt:819
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

#: ../../ref/databases.txt:822
msgid "INSERT ... RETURNING INTO"
msgstr ""

#: ../../ref/databases.txt:824
msgid ""
"By default, the Oracle backend uses a ``RETURNING INTO`` clause to "
"efficiently retrieve the value of an ``AutoField`` when inserting new rows."
"  This behavior may result in a ``DatabaseError`` in certain unusual setups,"
" such as when inserting into a remote table, or into a view with an "
"``INSTEAD OF`` trigger. The ``RETURNING INTO`` clause can be disabled by "
"setting the ``use_returning_into`` option of the database configuration to "
"False::"
msgstr ""

#: ../../ref/databases.txt:835
msgid ""
"In this case, the Oracle backend will use a separate ``SELECT`` query to "
"retrieve AutoField values."
msgstr ""

#: ../../ref/databases.txt:839
msgid "Naming issues"
msgstr ""

#: ../../ref/databases.txt:841
msgid ""
"Oracle imposes a name length limit of 30 characters. To accommodate this, "
"the backend truncates database identifiers to fit, replacing the final four "
"characters of the truncated name with a repeatable MD5 hash value. "
"Additionally, the backend turns database identifiers to all-uppercase."
msgstr ""

#: ../../ref/databases.txt:846
msgid ""
"To prevent these transformations (this is usually required only when dealing"
" with legacy databases or accessing tables which belong to other users), use"
" a quoted name as the value for ``db_table``::"
msgstr ""

#: ../../ref/databases.txt:858
msgid ""
"Quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect."
msgstr ""

#: ../../ref/databases.txt:861
msgid ""
"When running ``migrate``, an ``ORA-06552`` error may be encountered if "
"certain Oracle keywords are used as the name of a model field or the value "
"of a ``db_column`` option.  Django quotes all identifiers used in queries to"
" prevent most such problems, but this error can still occur when an Oracle "
"datatype is used as a column name.  In particular, take care to avoid using "
"the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

#: ../../ref/databases.txt:870
msgid "NULL and empty strings"
msgstr ""

#: ../../ref/databases.txt:872
msgid ""
"Django generally prefers to use the empty string ('') rather than NULL, but "
"Oracle treats both identically. To get around this, the Oracle backend "
"ignores an explicit ``null`` option on fields that have the empty string as "
"a possible value and generates DDL as if ``null=True``. When fetching from "
"the database, it is assumed that a ``NULL`` value in one of these fields "
"really means the empty string, and the data is silently converted to reflect"
" this assumption."
msgstr ""

#: ../../ref/databases.txt:883
msgid ""
"The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle "
"imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

#: ../../ref/databases.txt:886
msgid "LOB columns may not be used as primary keys."
msgstr ""

#: ../../ref/databases.txt:888
msgid "LOB columns may not be used in indexes."
msgstr ""

#: ../../ref/databases.txt:890
msgid ""
"LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that "
"attempting to use the ``QuerySet.distinct`` method on a model that includes "
"``TextField`` columns will result in an ``ORA-00932`` error when run against"
" Oracle. As a workaround, use the ``QuerySet.defer`` method in conjunction "
"with ``distinct()`` to prevent ``TextField`` columns from being included in "
"the ``SELECT DISTINCT`` list."
msgstr ""

#: ../../ref/databases.txt:900
msgid "Using a 3rd-party database backend"
msgstr ""

#: ../../ref/databases.txt:902
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

#: ../../ref/databases.txt:905
msgid "`SAP SQL Anywhere`_"
msgstr ""

#: ../../ref/databases.txt:906
msgid "`IBM DB2`_"
msgstr ""

#: ../../ref/databases.txt:907
msgid "`Microsoft SQL Server`_"
msgstr ""

#: ../../ref/databases.txt:908
msgid "Firebird_"
msgstr ""

#: ../../ref/databases.txt:909
msgid "ODBC_"
msgstr ""

#: ../../ref/databases.txt:911
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""

#: ../../ref/django-admin.txt:3
msgid "django-admin and manage.py"
msgstr ""

#: ../../ref/django-admin.txt:5
msgid ""
"``django-admin`` is Django's command-line utility for administrative tasks. "
"This document outlines all it can do."
msgstr ""

#: ../../ref/django-admin.txt:10
msgid ""
"Prior to Django 1.7, ``django-admin`` was only installed as ``django-"
"admin.py``."
msgstr ""

#: ../../ref/django-admin.txt:13
msgid ""
"In addition, ``manage.py`` is automatically created in each Django project. "
"``manage.py`` does the same thing as ``django-admin`` but takes care of a "
"few things for you:"
msgstr ""

#: ../../ref/django-admin.txt:17
msgid "It puts your project's package on ``sys.path``."
msgstr ""

#: ../../ref/django-admin.txt:19
msgid ""
"It sets the :envvar:`DJANGO_SETTINGS_MODULE` environment variable so that it"
" points to your project's ``settings.py`` file."
msgstr ""

#: ../../ref/django-admin.txt:22
msgid ""
"The ``django-admin`` script should be on your system path if you installed "
"Django via its ``setup.py`` utility. If it's not on your path, you can find "
"it in ``site-packages/django/bin`` within your Python installation. Consider"
" symlinking it from some place on your path, such as ``/usr/local/bin``."
msgstr ""

#: ../../ref/django-admin.txt:27
msgid ""
"For Windows users, who do not have symlinking functionality available, you "
"can copy ``django-admin.exe`` to a location on your existing path or edit "
"the ``PATH`` settings (under ``Settings - Control Panel - System - Advanced "
"- Environment...``) to point to its installed location."
msgstr ""

#: ../../ref/django-admin.txt:32
msgid ""
"Generally, when working on a single Django project, it's easier to use "
"``manage.py`` than ``django-admin``. If you need to switch between multiple "
"Django settings files, use ``django-admin`` with "
":envvar:`DJANGO_SETTINGS_MODULE` or the :djadminopt:`--settings` command "
"line option."
msgstr ""

#: ../../ref/django-admin.txt:38
msgid ""
"The command-line examples throughout this document use ``django-admin`` to "
"be consistent, but any example can use ``manage.py`` just as well."
msgstr ""

#: ../../ref/django-admin.txt:42 ../../ref/request-response.txt:582
#: ../../ref/request-response.txt:925
msgid "Usage"
msgstr ""

#: ../../ref/django-admin.txt:49
msgid ""
"``command`` should be one of the commands listed in this document. "
"``options``, which is optional, should be zero or more of the options "
"available for the given command."
msgstr ""

#: ../../ref/django-admin.txt:54
msgid "Getting runtime help"
msgstr ""

#: ../../ref/django-admin.txt:58
msgid ""
"Run ``django-admin help`` to display usage information and a list of the "
"commands provided by each application."
msgstr ""

#: ../../ref/django-admin.txt:61
msgid ""
"Run ``django-admin help --commands`` to display a list of all available "
"commands."
msgstr ""

#: ../../ref/django-admin.txt:64
msgid ""
"Run ``django-admin help <command>`` to display a description of the given "
"command and a list of its available options."
msgstr ""

#: ../../ref/django-admin.txt:68
msgid "App names"
msgstr ""

#: ../../ref/django-admin.txt:70
msgid ""
"Many commands take a list of \"app names.\" An \"app name\" is the basename "
"of the package containing your models. For example, if your "
":setting:`INSTALLED_APPS` contains the string ``'mysite.blog'``, the app "
"name is ``blog``."
msgstr ""

#: ../../ref/django-admin.txt:75
msgid "Determining the version"
msgstr ""

#: ../../ref/django-admin.txt:79
msgid "Run ``django-admin version`` to display the current Django version."
msgstr ""

#: ../../ref/django-admin.txt:81
msgid "The output follows the schema described in :pep:`386`::"
msgstr ""

#: ../../ref/django-admin.txt:88
msgid "Displaying debug output"
msgstr ""

#: ../../ref/django-admin.txt:90
msgid ""
"Use :djadminopt:`--verbosity` to specify the amount of notification and "
"debug information that ``django-admin`` should print to the console. For "
"more details, see the documentation for the :djadminopt:`--verbosity` "
"option."
msgstr ""

#: ../../ref/django-admin.txt:95
msgid "Available commands"
msgstr ""

#: ../../ref/django-admin.txt:98
msgid "check <appname appname ...>"
msgstr ""

#: ../../ref/django-admin.txt:104
msgid ""
"Uses the :doc:`system check framework </ref/checks>` to inspect the entire "
"Django project for common problems."
msgstr ""

#: ../../ref/django-admin.txt:107
msgid ""
"The system check framework will confirm that there aren't any problems with "
"your installed models or your admin registrations. It will also provide "
"warnings of common compatibility problems introduced by upgrading Django to "
"a new version. Custom checks may be introduced by other libraries and "
"applications."
msgstr ""

#: ../../ref/django-admin.txt:112
msgid ""
"By default, all apps will be checked. You can check a subset of apps by "
"providing a list of app labels as arguments::"
msgstr ""

#: ../../ref/django-admin.txt:117
msgid "If you do not specify any app, all apps will be checked."
msgstr ""

#: ../../ref/django-admin.txt:121
msgid ""
"The :doc:`system check framework </ref/checks>` performs many different "
"types of checks. These check types are categorized with tags. You can use "
"these tags to restrict the checks performed to just those in a particular "
"category. For example, to perform only security and compatibility checks, "
"you would run::"
msgstr ""

#: ../../ref/django-admin.txt:130
msgid "List all available tags."
msgstr ""

#: ../../ref/django-admin.txt:136
msgid ""
"The ``--deploy`` option activates some additional checks that are only "
"relevant in a deployment setting."
msgstr ""

#: ../../ref/django-admin.txt:139
msgid ""
"You can use this option in your local development environment, but since "
"your local development settings module may not have many of your production "
"settings, you will probably want to point the ``check`` command at a "
"different settings module, either by setting the ``DJANGO_SETTINGS_MODULE`` "
"environment variable, or by passing the ``--settings`` option::"
msgstr ""

#: ../../ref/django-admin.txt:147
msgid ""
"Or you could run it directly on a production or staging deployment to verify"
" that the correct settings are in use (omitting ``--settings``). You could "
"even make it part of your integration test suite."
msgstr ""

#: ../../ref/django-admin.txt:152
msgid "compilemessages"
msgstr ""

#: ../../ref/django-admin.txt:156
msgid ""
"Compiles .po files created by :djadmin:`makemessages` to .mo files for use "
"with the builtin gettext support. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/django-admin.txt:159
msgid ""
"Use the :djadminopt:`--locale` option (or its shorter version ``-l``) to "
"specify the locale(s) to process. If not provided, all locales are "
"processed."
msgstr ""

#: ../../ref/django-admin.txt:162 ../../ref/django-admin.txt:598
msgid ""
"Use the :djadminopt:`--exclude` option (or its shorter version ``-x``) to "
"specify the locale(s) to exclude from processing. If not provided, no "
"locales are excluded."
msgstr ""

#: ../../ref/django-admin.txt:166
msgid ""
"You can pass ``--use-fuzzy`` option (or ``-f``) to include fuzzy "
"translations into compiled files."
msgstr ""

#: ../../ref/django-admin.txt:171
msgid "Added ``--exclude`` and ``--use-fuzzy`` options."
msgstr ""

#: ../../ref/django-admin.txt:185
msgid "createcachetable"
msgstr ""

#: ../../ref/django-admin.txt:189
msgid ""
"Creates the cache tables for use with the database cache backend. See "
":doc:`/topics/cache` for more information."
msgstr ""

#: ../../ref/django-admin.txt:192
msgid ""
"The :djadminopt:`--database` option can be used to specify the database onto"
" which the cachetable will be installed."
msgstr ""

#: ../../ref/django-admin.txt:197
msgid ""
"It is no longer necessary to provide the cache table name or the "
":djadminopt:`--database` option. Django takes this information from your "
"settings file. If you have configured multiple caches or multiple databases,"
" all cache tables are created."
msgstr ""

#: ../../ref/django-admin.txt:203
msgid "dbshell"
msgstr ""

#: ../../ref/django-admin.txt:207
msgid ""
"Runs the command-line client for the database engine specified in your "
"``ENGINE`` setting, with the connection parameters specified in your "
":setting:`USER`, :setting:`PASSWORD`, etc., settings."
msgstr ""

#: ../../ref/django-admin.txt:211
msgid "For PostgreSQL, this runs the ``psql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:212
msgid "For MySQL, this runs the ``mysql`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:213
msgid "For SQLite, this runs the ``sqlite3`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:214
msgid "For Oracle, this runs the ``sqlplus`` command-line client."
msgstr ""

#: ../../ref/django-admin.txt:216
msgid ""
"This command assumes the programs are on your ``PATH`` so that a simple call"
" to the program name (``psql``, ``mysql``, ``sqlite3``, ``sqlplus``) will "
"find the program in the right place. There's no way to specify the location "
"of the program manually."
msgstr ""

#: ../../ref/django-admin.txt:221
msgid ""
"The :djadminopt:`--database` option can be used to specify the database onto"
" which to open a shell."
msgstr ""

#: ../../ref/django-admin.txt:225
msgid "diffsettings"
msgstr ""

#: ../../ref/django-admin.txt:229
msgid ""
"Displays differences between the current settings file and Django's default "
"settings."
msgstr ""

#: ../../ref/django-admin.txt:232
msgid ""
"Settings that don't appear in the defaults are followed by ``\"###\"``. For "
"example, the default settings don't define :setting:`ROOT_URLCONF`, so "
":setting:`ROOT_URLCONF` is followed by ``\"###\"`` in the output of "
"``diffsettings``."
msgstr ""

#: ../../ref/django-admin.txt:237
msgid ""
"The :djadminopt:`--all` option may be provided to display all settings, even"
" if they have Django's default value. Such settings are prefixed by "
"``\"###\"``."
msgstr ""

#: ../../ref/django-admin.txt:241
msgid "dumpdata <app_label app_label app_label.Model ...>"
msgstr ""

#: ../../ref/django-admin.txt:245
msgid ""
"Outputs to standard output all data in the database associated with the "
"named application(s)."
msgstr ""

#: ../../ref/django-admin.txt:248
msgid ""
"If no application name is provided, all installed applications will be "
"dumped."
msgstr ""

#: ../../ref/django-admin.txt:250
msgid ""
"The output of ``dumpdata`` can be used as input for :djadmin:`loaddata`."
msgstr ""

#: ../../ref/django-admin.txt:252
msgid ""
"Note that ``dumpdata`` uses the default manager on the model for selecting "
"the records to dump. If you're using a :ref:`custom manager <custom-"
"managers>` as the default manager and it filters some of the available "
"records, not all of the objects will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:257
msgid ""
"The :djadminopt:`--all` option may be provided to specify that ``dumpdata`` "
"should use Django's base manager, dumping records which might otherwise be "
"filtered or modified by a custom manager."
msgstr ""

#: ../../ref/django-admin.txt:263
msgid ""
"By default, ``dumpdata`` will format its output in JSON, but you can use the"
" ``--format`` option to specify another format. Currently supported formats "
"are listed in :ref:`serialization-formats`."
msgstr ""

#: ../../ref/django-admin.txt:269
msgid ""
"By default, ``dumpdata`` will output all data on a single line. This isn't "
"easy for humans to read, so you can use the ``--indent`` option to pretty-"
"print the output with a number of indentation spaces."
msgstr ""

#: ../../ref/django-admin.txt:273
msgid ""
"The :djadminopt:`--exclude` option may be provided to prevent specific "
"applications or models (specified as in the form of ``app_label.ModelName``)"
" from being dumped. If you specify a model name to ``dumpdata``, the dumped "
"output will be restricted to that model, rather than the entire application."
" You can also mix application names and model names."
msgstr ""

#: ../../ref/django-admin.txt:279
msgid ""
"The :djadminopt:`--database` option can be used to specify the database from"
" which data will be dumped."
msgstr ""

#: ../../ref/django-admin.txt:286
msgid ""
"When this option is specified, Django will use the ``natural_key()`` model "
"method to serialize any foreign key and many-to-many relationship to objects"
" of the type that defines the method. If you are dumping ``contrib.auth`` "
"``Permission`` objects or ``contrib.contenttypes`` ``ContentType`` objects, "
"you should probably be using this flag. See the :ref:`natural keys <topics-"
"serialization-natural-keys>` documentation for more details on this and the "
"next option."
msgstr ""

#: ../../ref/django-admin.txt:298
msgid ""
"When this option is specified, Django will not provide the primary key in "
"the serialized data of this object since it can be calculated during "
"deserialization."
msgstr ""

#: ../../ref/django-admin.txt:304
msgid ""
"Equivalent to the :djadminopt:`--natural-foreign` option; use that instead."
msgstr ""

#: ../../ref/django-admin.txt:307
msgid ""
"Use :ref:`natural keys <topics-serialization-natural-keys>` to represent any"
" foreign key and many-to-many relationship with a model that provides a "
"natural key definition."
msgstr ""

#: ../../ref/django-admin.txt:313
msgid ""
"By default, ``dumpdata`` will output all the records of the model, but you "
"can use the ``--pks`` option to specify a comma separated list of primary "
"keys on which to filter.  This is only available when dumping one model."
msgstr ""

#: ../../ref/django-admin.txt:322
msgid ""
"By default ``dumpdata`` will output all the serialized data to standard "
"output. This option allows you to specify the file to which the data is to "
"be written."
msgstr ""

#: ../../ref/django-admin.txt:326
msgid "flush"
msgstr ""

#: ../../ref/django-admin.txt:330
msgid ""
"Removes all data from the database, re-executes any post-synchronization "
"handlers, and reinstalls any initial data fixtures."
msgstr ""

#: ../../ref/django-admin.txt:333 ../../ref/django-admin.txt:1529
msgid ""
"The :djadminopt:`--noinput` option may be provided to suppress all user "
"prompts."
msgstr ""

#: ../../ref/django-admin.txt:336
msgid ""
"The :djadminopt:`--database` option may be used to specify the database to "
"flush."
msgstr ""

#: ../../ref/django-admin.txt:340
msgid "``--no-initial-data``"
msgstr ""

#: ../../ref/django-admin.txt:342
msgid "Use ``--no-initial-data`` to avoid loading the initial_data fixture."
msgstr ""

#: ../../ref/django-admin.txt:350
msgid ""
"Introspects the database tables in the database pointed-to by the "
":setting:`NAME` setting and outputs a Django model module (a ``models.py`` "
"file) to standard output."
msgstr ""

#: ../../ref/django-admin.txt:354
msgid ""
"Use this if you have a legacy database with which you'd like to use Django. "
"The script will inspect the database and create a model for each table "
"within it."
msgstr ""

#: ../../ref/django-admin.txt:358
msgid ""
"As you might expect, the created models will have an attribute for every "
"field in the table. Note that ``inspectdb`` has a few special cases in its "
"field-name output:"
msgstr ""

#: ../../ref/django-admin.txt:362
msgid ""
"If ``inspectdb`` cannot map a column's type to a model field type, it'll use"
" ``TextField`` and will insert the Python comment ``'This field type is a "
"guess.'`` next to the field in the generated model."
msgstr ""

#: ../../ref/django-admin.txt:367
msgid ""
"If the database column name is a Python reserved word (such as ``'pass'``, "
"``'class'`` or ``'for'``), ``inspectdb`` will append ``'_field'`` to the "
"attribute name. For example, if a table has a column ``'for'``, the "
"generated model will have a field ``'for_field'``, with the ``db_column`` "
"attribute set to ``'for'``. ``inspectdb`` will insert the Python comment "
"``'Field renamed because it was a Python reserved word.'`` next to the "
"field."
msgstr ""

#: ../../ref/django-admin.txt:376
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. "
"After you run it, you'll want to look over the generated models yourself to "
"make customizations. In particular, you'll need to rearrange models' order, "
"so that models that refer to other models are ordered properly."
msgstr ""

#: ../../ref/django-admin.txt:381
msgid ""
"Primary keys are automatically introspected for PostgreSQL, MySQL and "
"SQLite, in which case Django puts in the ``primary_key=True`` where needed."
msgstr ""

#: ../../ref/django-admin.txt:385
msgid ""
"``inspectdb`` works with PostgreSQL, MySQL and SQLite. Foreign-key detection"
" only works in PostgreSQL and with certain types of MySQL tables."
msgstr ""

#: ../../ref/django-admin.txt:388
msgid ""
"Django doesn't create database defaults when a "
":attr:`~django.db.models.Field.default` is specified on a model field. "
"Similarly, database defaults aren't translated to model field defaults or "
"detected in any fashion by ``inspectdb``."
msgstr ""

#: ../../ref/django-admin.txt:393
msgid ""
"By default, ``inspectdb`` creates unmanaged models. That is, ``managed = "
"False`` in the model's ``Meta`` class tells Django not to manage each "
"table's creation, modification, and deletion. If you do want to allow Django"
" to manage the table's lifecycle, you'll need to change the "
":attr:`~django.db.models.Options.managed` option to ``True`` (or simply "
"remove it because ``True`` is its default value)."
msgstr ""

#: ../../ref/django-admin.txt:400
msgid ""
"The :djadminopt:`--database` option may be used to specify the database to "
"introspect."
msgstr ""

#: ../../ref/django-admin.txt:404
msgid "loaddata <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:408
msgid ""
"Searches for and loads the contents of the named fixture into the database."
msgstr ""

#: ../../ref/django-admin.txt:410
msgid ""
"The :djadminopt:`--database` option can be used to specify the database onto"
" which the data will be loaded."
msgstr ""

#: ../../ref/django-admin.txt:415
msgid ""
"The :djadminopt:`--ignorenonexistent` option can be used to ignore fields "
"and models that may have been removed since the fixture was originally "
"generated."
msgstr ""

#: ../../ref/django-admin.txt:420
msgid ""
"The :djadminopt:`--app` option can be used to specify a single app to look "
"for fixtures in rather than looking through all apps."
msgstr ""

#: ../../ref/django-admin.txt:425
msgid "``--app`` was added."
msgstr ""

#: ../../ref/django-admin.txt:429
msgid "``--ignorenonexistent`` also ignores non-existent models."
msgstr ""

#: ../../ref/django-admin.txt:432
msgid "What's a \"fixture\"?"
msgstr ""

#: ../../ref/django-admin.txt:434
msgid ""
"A *fixture* is a collection of files that contain the serialized contents of"
" the database. Each fixture has a unique name, and the files that comprise "
"the fixture can be distributed over multiple directories, in multiple "
"applications."
msgstr ""

#: ../../ref/django-admin.txt:438
msgid "Django will search in three locations for fixtures:"
msgstr ""

#: ../../ref/django-admin.txt:440
msgid "In the ``fixtures`` directory of every installed application"
msgstr ""

#: ../../ref/django-admin.txt:441
msgid "In any directory named in the :setting:`FIXTURE_DIRS` setting"
msgstr ""

#: ../../ref/django-admin.txt:442
msgid "In the literal path named by the fixture"
msgstr ""

#: ../../ref/django-admin.txt:444
msgid ""
"Django will load any and all fixtures it finds in these locations that match"
" the provided fixture names."
msgstr ""

#: ../../ref/django-admin.txt:447
msgid ""
"If the named fixture has a file extension, only fixtures of that type will "
"be loaded. For example::"
msgstr ""

#: ../../ref/django-admin.txt:452
msgid ""
"would only load JSON fixtures called ``mydata``. The fixture extension must "
"correspond to the registered name of a :ref:`serializer <serialization-"
"formats>` (e.g., ``json`` or ``xml``)."
msgstr ""

#: ../../ref/django-admin.txt:456
msgid ""
"If you omit the extensions, Django will search all available fixture types "
"for a matching fixture. For example::"
msgstr ""

#: ../../ref/django-admin.txt:461
msgid ""
"would look for any fixture of any fixture type called ``mydata``. If a "
"fixture directory contained ``mydata.json``, that fixture would be loaded as"
" a JSON fixture."
msgstr ""

#: ../../ref/django-admin.txt:465
msgid ""
"The fixtures that are named can include directory components. These "
"directories will be included in the search path. For example::"
msgstr ""

#: ../../ref/django-admin.txt:470
msgid ""
"would search ``<app_label>/fixtures/foo/bar/mydata.json`` for each installed"
" application,  ``<dirname>/foo/bar/mydata.json`` for each directory in "
":setting:`FIXTURE_DIRS`, and the literal path ``foo/bar/mydata.json``."
msgstr ""

#: ../../ref/django-admin.txt:474
msgid ""
"When fixture files are processed, the data is saved to the database as is. "
"Model defined :meth:`~django.db.models.Model.save` methods are not called, "
"and any :data:`~django.db.models.signals.pre_save` or "
":data:`~django.db.models.signals.post_save` signals will be called with "
"``raw=True`` since the instance only contains attributes that are local to "
"the model. You may, for example, want to disable handlers that access "
"related fields that aren't present during fixture loading and would "
"otherwise raise an exception::"
msgstr ""

#: ../../ref/django-admin.txt:494
msgid "You could also write a simple decorator to encapsulate this logic::"
msgstr ""

#: ../../ref/django-admin.txt:513
msgid ""
"Just be aware that this logic will disable the signals whenever fixtures are"
" deserialized, not just during ``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:516
msgid ""
"Note that the order in which fixture files are processed is undefined. "
"However, all fixture data is installed as a single transaction, so data in "
"one fixture can reference data in another fixture. If the database backend "
"supports row-level constraints, these constraints will be checked at the end"
" of the transaction."
msgstr ""

#: ../../ref/django-admin.txt:522
msgid ""
"The :djadmin:`dumpdata` command can be used to generate input for "
"``loaddata``."
msgstr ""

#: ../../ref/django-admin.txt:525
msgid "Compressed fixtures"
msgstr ""

#: ../../ref/django-admin.txt:527
msgid ""
"Fixtures may be compressed in ``zip``, ``gz``, or ``bz2`` format. For "
"example::"
msgstr ""

#: ../../ref/django-admin.txt:531
msgid ""
"would look for any of ``mydata.json``, ``mydata.json.zip``, "
"``mydata.json.gz``, or ``mydata.json.bz2``. The first file contained within "
"a zip-compressed archive is used."
msgstr ""

#: ../../ref/django-admin.txt:535
msgid ""
"Note that if two fixtures with the same name but different fixture type are "
"discovered (for example, if ``mydata.json`` and ``mydata.xml.gz`` were found"
" in the same fixture directory), fixture installation will be aborted, and "
"any data installed in the call to ``loaddata`` will be removed from the "
"database."
msgstr ""

#: ../../ref/django-admin.txt:541
msgid "MySQL with MyISAM and fixtures"
msgstr ""

#: ../../ref/django-admin.txt:543
msgid ""
"The MyISAM storage engine of MySQL doesn't support transactions or "
"constraints, so if you use MyISAM, you won't get validation of fixture data,"
" or a rollback if multiple transaction files are found."
msgstr ""

#: ../../ref/django-admin.txt:548
msgid "Database-specific fixtures"
msgstr ""

#: ../../ref/django-admin.txt:550
msgid ""
"If you're in a multi-database setup, you might have fixture data that you "
"want to load onto one database, but not onto another. In this situation, you"
" can add a database identifier into the names of your fixtures."
msgstr ""

#: ../../ref/django-admin.txt:554
msgid ""
"For example, if your :setting:`DATABASES` setting has a 'master' database "
"defined, name the fixture ``mydata.master.json`` or "
"``mydata.master.json.gz`` and the fixture will only be loaded when you "
"specify you want to load data into the ``master`` database."
msgstr ""

#: ../../ref/django-admin.txt:560
msgid "makemessages"
msgstr ""

#: ../../ref/django-admin.txt:564
msgid ""
"Runs over the entire source tree of the current directory and pulls out all "
"strings marked for translation. It creates (or updates) a message file in "
"the conf/locale (in the Django tree) or locale (for project and application)"
" directory. After making changes to the messages files you need to compile "
"them with :djadmin:`compilemessages` for use with the builtin gettext "
"support. See the :ref:`i18n documentation <how-to-create-language-files>` "
"for details."
msgstr ""

#: ../../ref/django-admin.txt:573
msgid ""
"Use the ``--all`` or ``-a`` option to update the message files for all "
"available languages."
msgstr ""

#: ../../ref/django-admin.txt:582
msgid ""
"Use the ``--extension`` or ``-e`` option to specify a list of file "
"extensions to examine (default: \".html\", \".txt\")."
msgstr ""

#: ../../ref/django-admin.txt:589
msgid ""
"Separate multiple extensions with commas or use -e or --extension multiple "
"times::"
msgstr ""

#: ../../ref/django-admin.txt:593
msgid ""
"Use the :djadminopt:`--locale` option (or its shorter version ``-l``) to "
"specify the locale(s) to process."
msgstr ""

#: ../../ref/django-admin.txt:616
msgid ""
"Added the ``--previous`` option to the ``msgmerge`` command when merging "
"with existing po files."
msgstr ""

#: ../../ref/django-admin.txt:621
msgid ""
"Use the ``--domain`` or ``-d`` option to change the domain of the messages "
"files. Currently supported:"
msgstr ""

#: ../../ref/django-admin.txt:624
msgid "``django`` for all ``*.py``, ``*.html`` and ``*.txt`` files (default)"
msgstr ""

#: ../../ref/django-admin.txt:625
msgid "``djangojs`` for ``*.js`` files"
msgstr ""

#: ../../ref/django-admin.txt:629
msgid ""
"Use the ``--symlinks`` or ``-s`` option to follow symlinks to directories "
"when looking for new translation strings."
msgstr ""

#: ../../ref/django-admin.txt:638
msgid ""
"Use the ``--ignore`` or ``-i`` option to ignore files or directories "
"matching the given :mod:`glob`-style pattern. Use multiple times to ignore "
"more."
msgstr ""

#: ../../ref/django-admin.txt:641
msgid ""
"These patterns are used by default: ``'CVS'``, ``'.*'``, ``'*~'``, "
"``'*.pyc'``"
msgstr ""

#: ../../ref/django-admin.txt:649
msgid ""
"Use the ``--no-default-ignore`` option to disable the default values of "
":djadminopt:`--ignore`."
msgstr ""

#: ../../ref/django-admin.txt:654
msgid ""
"Use the ``--no-wrap`` option to disable breaking long message lines into "
"several lines in language files."
msgstr ""

#: ../../ref/django-admin.txt:659
msgid ""
"Use the ``--no-location`` option to suppress writing '``#: filename:line``’ "
"comment lines in language files. Note that using this option makes it harder"
" for technically skilled translators to understand each message's context."
msgstr ""

#: ../../ref/django-admin.txt:665
msgid ""
"Use the ``--keep-pot`` option to prevent Django from deleting the temporary "
"``.pot`` files it generates before creating the .po file. This is useful for"
" debugging errors which may prevent the final language files from being "
"created."
msgstr ""

#: ../../ref/django-admin.txt:671
msgid ""
"See :ref:`customizing-makemessages` for instructions on how to customize the"
" keywords that :djadmin:`makemessages` passes to ``xgettext``."
msgstr ""

#: ../../ref/django-admin.txt:675
msgid "makemigrations [<app_label>]"
msgstr ""

#: ../../ref/django-admin.txt:681
msgid ""
"Creates new migrations based on the changes detected to your models. "
"Migrations, their relationship with apps and more are covered in depth in "
":doc:`the migrations documentation</topics/migrations>`."
msgstr ""

#: ../../ref/django-admin.txt:685
msgid ""
"Providing one or more app names as arguments will limit the migrations "
"created to the app(s) specified and any dependencies needed (the table at "
"the other end of a ``ForeignKey``, for example)."
msgstr ""

#: ../../ref/django-admin.txt:691
msgid ""
"The ``--empty`` option will cause ``makemigrations`` to output an empty "
"migration for the specified apps, for manual editing. This option is only "
"for advanced users and should not be used unless you are familiar with the "
"migration format, migration operations, and the dependencies between your "
"migrations."
msgstr ""

#: ../../ref/django-admin.txt:699
msgid ""
"The ``--dry-run`` option shows what migrations would be made without "
"actually writing any migrations files to disk. Using this option along with "
"``--verbosity 3`` will also show the complete migrations files that would be"
" written."
msgstr ""

#: ../../ref/django-admin.txt:706
msgid ""
"The ``--merge`` option enables fixing of migration conflicts. The "
":djadminopt:`--noinput` option may be provided to suppress user prompts "
"during a merge."
msgstr ""

#: ../../ref/django-admin.txt:714
msgid ""
"The ``--name`` option allows you to give the migration(s) a custom name "
"instead of a generated one."
msgstr ""

#: ../../ref/django-admin.txt:721
msgid ""
"The ``--exit`` option will cause ``makemigrations`` to exit with error code "
"1 when no migrations are created (or would have been created, if combined "
"with ``--dry-run``)."
msgstr ""

#: ../../ref/django-admin.txt:726
msgid "migrate [<app_label> [<migrationname>]]"
msgstr ""

#: ../../ref/django-admin.txt:732
msgid ""
"Synchronizes the database state with the current set of models and "
"migrations. Migrations, their relationship with apps and more are covered in"
" depth in :doc:`the migrations documentation</topics/migrations>`."
msgstr ""

#: ../../ref/django-admin.txt:736
msgid ""
"The behavior of this command changes depending on the arguments provided:"
msgstr ""

#: ../../ref/django-admin.txt:738
msgid ""
"No arguments: All migrated apps have all of their migrations run, and all "
"unmigrated apps are synchronized with the database,"
msgstr ""

#: ../../ref/django-admin.txt:740
msgid ""
"``<app_label>``: The specified app has its migrations run, up to the most "
"recent migration. This may involve running other apps' migrations too, due "
"to dependencies."
msgstr ""

#: ../../ref/django-admin.txt:743
msgid ""
"``<app_label> <migrationname>``: Brings the database schema to a state where"
" the named migration is applied, but no later migrations in the same app are"
" applied. This may involve unapplying migrations if you have previously "
"migrated past the named migration. Use the name ``zero`` to unapply all "
"migrations for an app."
msgstr ""

#: ../../ref/django-admin.txt:749
msgid ""
"Unlike ``syncdb``, this command does not prompt you to create a superuser if"
" one doesn't exist (assuming you are using :mod:`django.contrib.auth`). Use "
":djadmin:`createsuperuser` to do that if you wish."
msgstr ""

#: ../../ref/django-admin.txt:753
msgid ""
"The :djadminopt:`--database` option can be used to specify the database to "
"migrate."
msgstr ""

#: ../../ref/django-admin.txt:758
msgid ""
"The ``--fake`` option tells Django to mark the migrations as having been "
"applied or unapplied, but without actually running the SQL to change your "
"database schema."
msgstr ""

#: ../../ref/django-admin.txt:762
msgid ""
"This is intended for advanced users to manipulate the current migration "
"state directly if they're manually applying changes; be warned that using "
"``--fake`` runs the risk of putting the migration state table into a state "
"where manual recovery will be needed to make migrations run correctly."
msgstr ""

#: ../../ref/django-admin.txt:772
msgid ""
"The ``--fake-initial`` option can be used to allow Django to skip an app's "
"initial migration if all database tables with the names of all models "
"created by all :class:`~django.db.migrations.operations.CreateModel` "
"operations in that migration already exist. This option is intended for use "
"when first running migrations against a database that preexisted the use of "
"migrations. This option does not, however, check for matching database "
"schema beyond matching table names and so is only safe to use if you are "
"confident that your existing schema matches what is recorded in your initial"
" migration."
msgstr ""

#: ../../ref/django-admin.txt:783
msgid ""
"The ``--list`` option has been moved to the :djadmin:`showmigrations` "
"command."
msgstr ""

#: ../../ref/django-admin.txt:787
msgid "runfcgi [options]"
msgstr ""

#: ../../ref/django-admin.txt:791
msgid "FastCGI support is deprecated and will be removed in Django 1.9."
msgstr ""

#: ../../ref/django-admin.txt:794
msgid ""
"Starts a set of FastCGI processes suitable for use with any Web server that "
"supports the FastCGI protocol. See the :doc:`FastCGI deployment "
"documentation </howto/deployment/fastcgi>` for details. Requires the Python "
"FastCGI module from `flup`_."
msgstr ""

#: ../../ref/django-admin.txt:799
msgid ""
"Internally, this wraps the WSGI application object specified by the "
":setting:`WSGI_APPLICATION` setting."
msgstr ""

#: ../../ref/django-admin.txt:804
msgid ""
"The options accepted by this command are passed to the FastCGI library and "
"don't use the ``'--'`` prefix as is usual for other Django management "
"commands."
msgstr ""

#: ../../ref/django-admin.txt:809
msgid "``protocol=PROTOCOL``"
msgstr ""

#: ../../ref/django-admin.txt:811
msgid ""
"Protocol to use. *PROTOCOL* can be ``fcgi``, ``scgi``, ``ajp``, etc. "
"(default is ``fcgi``)"
msgstr ""

#: ../../ref/django-admin.txt:816
msgid "``host=HOSTNAME``"
msgstr ""

#: ../../ref/django-admin.txt:818
msgid "Hostname to listen on."
msgstr ""

#: ../../ref/django-admin.txt:822
msgid "``port=PORTNUM``"
msgstr ""

#: ../../ref/django-admin.txt:824
msgid "Port to listen on."
msgstr ""

#: ../../ref/django-admin.txt:828
msgid "``socket=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:830
msgid "UNIX socket to listen on."
msgstr ""

#: ../../ref/django-admin.txt:834
msgid "``method=IMPL``"
msgstr ""

#: ../../ref/django-admin.txt:836
msgid "Possible values: ``prefork`` or ``threaded`` (default ``prefork``)"
msgstr ""

#: ../../ref/django-admin.txt:840
msgid "``maxrequests=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:842
msgid ""
"Number of requests a child handles before it is killed and a new child is "
"forked (0 means no limit)."
msgstr ""

#: ../../ref/django-admin.txt:847
msgid "``maxspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:849
msgid "Max number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:853
msgid "``minspare=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:855
msgid "Min number of spare processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:859
msgid "``maxchildren=NUMBER``"
msgstr ""

#: ../../ref/django-admin.txt:861
msgid "Hard limit number of processes / threads."
msgstr ""

#: ../../ref/django-admin.txt:865
msgid "``daemonize=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:867
msgid "Whether to detach from terminal."
msgstr ""

#: ../../ref/django-admin.txt:871
msgid "``pidfile=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:873
msgid "Write the spawned process-id to file *FILE*."
msgstr ""

#: ../../ref/django-admin.txt:877
msgid "``workdir=DIRECTORY``"
msgstr ""

#: ../../ref/django-admin.txt:879
msgid "Change to directory *DIRECTORY* when daemonizing."
msgstr ""

#: ../../ref/django-admin.txt:883
msgid "``debug=BOOL``"
msgstr ""

#: ../../ref/django-admin.txt:885
msgid "Set to true to enable flup tracebacks."
msgstr ""

#: ../../ref/django-admin.txt:889
msgid "``outlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:891
msgid "Write stdout to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:895
msgid "``errlog=FILE``"
msgstr ""

#: ../../ref/django-admin.txt:897
msgid "Write stderr to the *FILE* file."
msgstr ""

#: ../../ref/django-admin.txt:901
msgid "``umask=UMASK``"
msgstr ""

#: ../../ref/django-admin.txt:903
msgid ""
"Umask to use when daemonizing. The value is interpreted as an octal number "
"(default value is ``0o22``)."
msgstr ""

#: ../../ref/django-admin.txt:911
msgid "Run a FastCGI server as a daemon and write the spawned PID in a file."
msgstr ""

#: ../../ref/django-admin.txt:914
msgid "runserver [port or address:port]"
msgstr ""

#: ../../ref/django-admin.txt:918
msgid ""
"Starts a lightweight development Web server on the local machine. By "
"default, the server runs on port 8000 on the IP address ``127.0.0.1``. You "
"can pass in an IP address and port number explicitly."
msgstr ""

#: ../../ref/django-admin.txt:922
msgid ""
"If you run this script as a user with normal privileges (recommended), you "
"might not have access to start a port on a low port number. Low port numbers"
" are reserved for the superuser (root)."
msgstr ""

#: ../../ref/django-admin.txt:926
msgid ""
"This server uses the WSGI application object specified by the "
":setting:`WSGI_APPLICATION` setting."
msgstr ""

#: ../../ref/django-admin.txt:929
msgid ""
"DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through "
"security audits or performance tests. (And that's how it's gonna stay. We're"
" in the business of making Web frameworks, not Web servers, so improving "
"this server to be able to handle a production environment is outside the "
"scope of Django.)"
msgstr ""

#: ../../ref/django-admin.txt:935
msgid ""
"The development server automatically reloads Python code for each request, "
"as needed. You don't need to restart the server for code changes to take "
"effect. However, some actions like adding files don't trigger a restart, so "
"you'll have to restart the server in these cases."
msgstr ""

#: ../../ref/django-admin.txt:942
msgid "Compiling translation files now also restarts the development server."
msgstr ""

#: ../../ref/django-admin.txt:944
msgid ""
"If you are using Linux and install `pyinotify`_, kernel signals will be used"
" to autoreload the server (rather than polling file modification timestamps "
"each second). This offers better scaling to large projects, reduction in "
"response time to code modification, more robust change detection, and "
"battery usage reduction."
msgstr ""

#: ../../ref/django-admin.txt:954
msgid "``pyinotify`` support was added."
msgstr ""

#: ../../ref/django-admin.txt:956
msgid ""
"When you start the server, and each time you change Python code while the "
"server is running, the system check framework will check your entire Django "
"project for some common errors (see the :djadmin:`check` command). If any "
"errors are found, they will be printed to standard output."
msgstr ""

#: ../../ref/django-admin.txt:961
msgid ""
"You can run as many concurrent servers as you want, as long as they're on "
"separate ports. Just execute ``django-admin runserver`` more than once."
msgstr ""

#: ../../ref/django-admin.txt:964
msgid ""
"Note that the default IP address, ``127.0.0.1``, is not accessible from "
"other machines on your network. To make your development server viewable to "
"other machines on the network, use its own IP address (e.g. ``192.168.2.1``)"
" or ``0.0.0.0`` or ``::`` (with IPv6 enabled)."
msgstr ""

#: ../../ref/django-admin.txt:969
msgid ""
"You can provide an IPv6 address surrounded by brackets (e.g. "
"``[200a::1]:8000``). This will automatically enable IPv6 support."
msgstr ""

#: ../../ref/django-admin.txt:972
msgid "A hostname containing ASCII-only characters can also be used."
msgstr ""

#: ../../ref/django-admin.txt:974
msgid ""
"If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled "
"(default in new projects) the :djadmin:`runserver` command will be "
"overridden with its own :ref:`runserver<staticfiles-runserver>` command."
msgstr ""

#: ../../ref/django-admin.txt:978
msgid ""
"If :djadmin:`migrate` was not previously executed, the table that stores the"
" history of migrations is created at first run of ``runserver``."
msgstr ""

#: ../../ref/django-admin.txt:983
msgid ""
"Use the ``--noreload`` option to disable the use of the auto-reloader. This "
"means any Python code changes you make while the server is running will "
"*not* take effect if the particular Python modules have already been loaded "
"into memory."
msgstr ""

#: ../../ref/django-admin.txt:994
msgid ""
"The development server is multithreaded by default. Use the "
"``--nothreading`` option to disable the use of threading in the development "
"server."
msgstr ""

#: ../../ref/django-admin.txt:999
msgid ""
"Use the ``--ipv6`` (or shorter ``-6``) option to tell Django to use IPv6 for"
" the development server. This changes the default IP address from "
"``127.0.0.1`` to ``::1``."
msgstr ""

#: ../../ref/django-admin.txt:1008
msgid "Examples of using different ports and addresses"
msgstr ""

#: ../../ref/django-admin.txt:1010
msgid "Port 8000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:1014
msgid "Port 8000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:1018
msgid "Port 7000 on IP address ``127.0.0.1``::"
msgstr ""

#: ../../ref/django-admin.txt:1022
msgid "Port 7000 on IP address ``1.2.3.4``::"
msgstr ""

#: ../../ref/django-admin.txt:1026
msgid "Port 8000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:1030
msgid "Port 7000 on IPv6 address ``::1``::"
msgstr ""

#: ../../ref/django-admin.txt:1034
msgid "Port 7000 on IPv6 address ``2001:0db8:1234:5678::9``::"
msgstr ""

#: ../../ref/django-admin.txt:1038
msgid "Port 8000 on IPv4 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:1042
msgid "Port 8000 on IPv6 address of host ``localhost``::"
msgstr ""

#: ../../ref/django-admin.txt:1047
msgid "Serving static files with the development server"
msgstr ""

#: ../../ref/django-admin.txt:1049
msgid ""
"By default, the development server doesn't serve any static files for your "
"site (such as CSS files, images, things under :setting:`MEDIA_URL` and so "
"forth). If you want to configure Django to serve static media, read "
":doc:`/howto/static-files/index`."
msgstr ""

#: ../../ref/django-admin.txt:1055
msgid "shell"
msgstr ""

#: ../../ref/django-admin.txt:1059
msgid "Starts the Python interactive interpreter."
msgstr ""

#: ../../ref/django-admin.txt:1061
msgid ""
"Django will use IPython_ or bpython_ if either is installed. If you have a "
"rich shell installed but want to force use of the \"plain\" Python "
"interpreter, use the ``--plain`` option, like so::"
msgstr ""

#: ../../ref/django-admin.txt:1067
msgid ""
"If you would like to specify either IPython or bpython as your interpreter "
"if you have both installed you can specify an alternative interpreter "
"interface with the ``-i`` or ``--interface`` options like so:"
msgstr ""

#: ../../ref/django-admin.txt:1071
msgid "IPython::"
msgstr ""

#: ../../ref/django-admin.txt:1077
msgid "bpython::"
msgstr ""

#: ../../ref/django-admin.txt:1086
msgid ""
"When the \"plain\" Python interactive interpreter starts (be it because "
"``--plain`` was specified or because no other interactive interface is "
"available) it reads the script pointed to by the :envvar:`PYTHONSTARTUP` "
"environment variable and the ``~/.pythonrc.py`` script. If you don't wish "
"this behavior you can use the ``--no-startup`` option. e.g.::"
msgstr ""

#: ../../ref/django-admin.txt:1095
msgid "showmigrations [<app_label> [<app_label>]]"
msgstr ""

#: ../../ref/django-admin.txt:1101
msgid "Shows all migrations in a project."
msgstr ""

#: ../../ref/django-admin.txt:1105
msgid ""
"The ``--list`` option lists all of the apps Django knows about, the "
"migrations available for each app, and whether or not each migration is "
"applied (marked by an ``[X]`` next to the migration name)."
msgstr ""

#: ../../ref/django-admin.txt:1109
msgid ""
"Apps without migrations are also listed, but have ``(no migrations)`` "
"printed under them."
msgstr ""

#: ../../ref/django-admin.txt:1114
msgid ""
"The ``--plan`` option shows the migration plan Django will follow to apply "
"migrations. Any supplied app labels are ignored because the plan might go "
"beyond those apps. Same as ``--list``, applied migrations are marked by an "
"``[X]``. For a verbosity of 2 and above, all dependencies of a migration "
"will also be shown."
msgstr ""

#: ../../ref/django-admin.txt:1121
msgid "sql <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1125
msgid "Prints the CREATE TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1127 ../../ref/django-admin.txt:1140
#: ../../ref/django-admin.txt:1157 ../../ref/django-admin.txt:1181
#: ../../ref/django-admin.txt:1191 ../../ref/django-admin.txt:1202
#: ../../ref/django-admin.txt:1212 ../../ref/django-admin.txt:1248
msgid ""
"The :djadminopt:`--database` option can be used to specify the database for "
"which to print the SQL."
msgstr ""

#: ../../ref/django-admin.txt:1131
msgid "sqlall <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1135
msgid ""
"Prints the CREATE TABLE and initial-data SQL statements for the given app "
"name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1137
msgid ""
"Refer to the description of :djadmin:`sqlcustom` for an explanation of how "
"to specify initial data."
msgstr ""

#: ../../ref/django-admin.txt:1145
msgid ""
"The ``sql*`` management commands now respect the ``allow_migrate()`` method "
"of :setting:`DATABASE_ROUTERS`. If you have models synced to non-default "
"databases, use the :djadminopt:`--database` flag to get SQL for those models"
" (previously they would always be included in the output)."
msgstr ""

#: ../../ref/django-admin.txt:1151
msgid "sqlclear <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1155
msgid "Prints the DROP TABLE SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1161
msgid "sqlcustom <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1165
msgid "Prints the custom SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1167
msgid ""
"For each model in each specified app, this command looks for the file "
"``<app_label>/sql/<modelname>.sql``, where ``<app_label>`` is the given app "
"name and ``<modelname>`` is the model's name in lowercase. For example, if "
"you have an app ``news`` that includes a ``Story`` model, ``sqlcustom`` will"
" attempt to read a file ``news/sql/story.sql`` and append it to the output "
"of this command."
msgstr ""

#: ../../ref/django-admin.txt:1174
msgid ""
"Each of the SQL files, if given, is expected to contain valid SQL. The SQL "
"files are piped directly into the database after all of the models' table-"
"creation statements have been executed. Use this SQL hook to make any table "
"modifications, or insert any SQL functions into the database."
msgstr ""

#: ../../ref/django-admin.txt:1179
msgid "Note that the order in which the SQL files are processed is undefined."
msgstr ""

#: ../../ref/django-admin.txt:1185
msgid "sqldropindexes <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1189
msgid "Prints the DROP INDEX SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1195
msgid "sqlflush"
msgstr ""

#: ../../ref/django-admin.txt:1199
msgid ""
"Prints the SQL statements that would be executed for the :djadmin:`flush` "
"command."
msgstr ""

#: ../../ref/django-admin.txt:1206
msgid "sqlindexes <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1210
msgid "Prints the CREATE INDEX SQL statements for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1216
msgid "sqlmigrate <app_label> <migrationname>"
msgstr ""

#: ../../ref/django-admin.txt:1220
msgid ""
"Prints the SQL for the named migration. This requires an active database "
"connection, which it will use to resolve constraint names; this means you "
"must generate the SQL against a copy of the database you wish to later apply"
" it on."
msgstr ""

#: ../../ref/django-admin.txt:1224
msgid "Note that ``sqlmigrate`` doesn't colorize its output."
msgstr ""

#: ../../ref/django-admin.txt:1226
msgid ""
"The :djadminopt:`--database` option can be used to specify the database for "
"which to generate the SQL."
msgstr ""

#: ../../ref/django-admin.txt:1231
msgid ""
"By default, the SQL created is for running the migration in the forwards "
"direction. Pass ``--backwards`` to generate the SQL for unapplying the "
"migration instead."
msgstr ""

#: ../../ref/django-admin.txt:1236
msgid "sqlsequencereset <app_label app_label ...>"
msgstr ""

#: ../../ref/django-admin.txt:1240
msgid ""
"Prints the SQL statements for resetting sequences for the given app name(s)."
msgstr ""

#: ../../ref/django-admin.txt:1242
msgid ""
"Sequences are indexes used by some database engines to track the next "
"available number for automatically incremented fields."
msgstr ""

#: ../../ref/django-admin.txt:1245
msgid ""
"Use this command to generate SQL which will fix cases where a sequence is "
"out of sync with its automatically incremented field data."
msgstr ""

#: ../../ref/django-admin.txt:1252
msgid "squashmigrations <app_label> <migration_name>"
msgstr ""

#: ../../ref/django-admin.txt:1256
msgid ""
"Squashes the migrations for ``app_label`` up to and including "
"``migration_name`` down into fewer migrations, if possible. The resulting "
"squashed migrations can live alongside the unsquashed ones safely. For more "
"information, please read :ref:`migration-squashing`."
msgstr ""

#: ../../ref/django-admin.txt:1263
msgid ""
"By default, Django will try to optimize the operations in your migrations to"
" reduce the size of the resulting file. Pass ``--no-optimize`` if this "
"process is failing for you or creating incorrect migrations, though please "
"also file a Django bug report about the behavior, as optimization is meant "
"to be safe."
msgstr ""

#: ../../ref/django-admin.txt:1271
msgid "startapp <app_label> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:1275
msgid ""
"Creates a Django app directory structure for the given app name in the "
"current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:1278
msgid ""
"By default the directory created contains a ``models.py`` file and other app"
" template files. (See the `source`_ for more details.) If only the app name "
"is given, the app directory will be created in the current working "
"directory."
msgstr ""

#: ../../ref/django-admin.txt:1283
msgid ""
"If the optional destination is provided, Django will use that existing "
"directory rather than creating a new one. You can use '.' to denote the "
"current working directory."
msgstr ""

#: ../../ref/django-admin.txt:1295
msgid ""
"With the ``--template`` option, you can use a custom app template by "
"providing either the path to a directory with the app template file, or a "
"path to a compressed file (``.tar.gz``, ``.tar.bz2``, ``.tgz``, ``.tbz``, "
"``.zip``) containing the app template files."
msgstr ""

#: ../../ref/django-admin.txt:1300
msgid ""
"For example, this would look for an app template in the given directory when"
" creating the ``myapp`` app::"
msgstr ""

#: ../../ref/django-admin.txt:1305
msgid ""
"Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed "
"archives with the app template files, downloading and extracting them on the"
" fly."
msgstr ""

#: ../../ref/django-admin.txt:1309 ../../ref/django-admin.txt:1379
msgid ""
"For example, taking advantage of Github's feature to expose repositories as "
"zip files, you can use a URL like::"
msgstr ""

#: ../../ref/django-admin.txt:1314
msgid ""
"When Django copies the app template files, it also renders certain files "
"through the template engine: the files whose extensions match the "
"``--extension`` option (``py`` by default) and the files whose names are "
"passed with the ``--name`` option. The :class:`template context "
"<django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:1320
msgid ""
"Any option passed to the ``startapp`` command (among the command's supported"
" options)"
msgstr ""

#: ../../ref/django-admin.txt:1322
msgid "``app_name`` -- the app name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:1323
msgid "``app_directory`` -- the full path of the newly created app"
msgstr ""

#: ../../ref/django-admin.txt:1324 ../../ref/django-admin.txt:1395
msgid ""
"``docs_version`` -- the version of the documentation: ``'dev'`` or ``'1.x'``"
msgstr ""

#: ../../ref/django-admin.txt:1330
msgid ""
"When the app template files are rendered with the Django template engine (by"
" default all ``*.py`` files), Django will also replace all stray template "
"variables contained. For example, if one of the Python files contains a "
"docstring explaining a particular feature related to template rendering, it "
"might result in an incorrect example."
msgstr ""

#: ../../ref/django-admin.txt:1336
msgid ""
"To work around this problem, you can use the :ttag:`templatetag` templatetag"
" to \"escape\" the various parts of the template syntax."
msgstr ""

#: ../../ref/django-admin.txt:1342
msgid "startproject <projectname> [destination]"
msgstr ""

#: ../../ref/django-admin.txt:1346
msgid ""
"Creates a Django project directory structure for the given project name in "
"the current directory or the given destination."
msgstr ""

#: ../../ref/django-admin.txt:1349
msgid ""
"By default, the new directory contains ``manage.py`` and a project package "
"(containing a ``settings.py`` and other files). See the `template source`_ "
"for details."
msgstr ""

#: ../../ref/django-admin.txt:1353
msgid ""
"If only the project name is given, both the project directory and project "
"package will be named ``<projectname>`` and the project directory will be "
"created in the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:1357
msgid ""
"If the optional destination is provided, Django will use that existing "
"directory as the project directory, and create ``manage.py`` and the project"
" package within it. Use '.' to denote the current working directory."
msgstr ""

#: ../../ref/django-admin.txt:1365
msgid ""
"As with the :djadmin:`startapp` command, the ``--template`` option lets you "
"specify a directory, file path or URL of a custom project template. See the "
":djadmin:`startapp` documentation for details of supported project template "
"formats."
msgstr ""

#: ../../ref/django-admin.txt:1370
msgid ""
"For example, this would look for a project template in the given directory "
"when creating the ``myproject`` project::"
msgstr ""

#: ../../ref/django-admin.txt:1375
msgid ""
"Django will also accept URLs (``http``, ``https``, ``ftp``) to compressed "
"archives with the project template files, downloading and extracting them on"
" the fly."
msgstr ""

#: ../../ref/django-admin.txt:1384
msgid ""
"When Django copies the project template files, it also renders certain files"
" through the template engine: the files whose extensions match the "
"``--extension`` option (``py`` by default) and the files whose names are "
"passed with the ``--name`` option. The :class:`template context "
"<django.template.Context>` used is:"
msgstr ""

#: ../../ref/django-admin.txt:1390
msgid ""
"Any option passed to the ``startproject`` command (among the command's "
"supported options)"
msgstr ""

#: ../../ref/django-admin.txt:1392
msgid "``project_name`` -- the project name as passed to the command"
msgstr ""

#: ../../ref/django-admin.txt:1393
msgid "``project_directory`` -- the full path of the newly created project"
msgstr ""

#: ../../ref/django-admin.txt:1394
msgid "``secret_key`` -- a random key for the :setting:`SECRET_KEY` setting"
msgstr ""

#: ../../ref/django-admin.txt:1397
msgid ""
"Please also see the :ref:`rendering warning <render_warning>` as mentioned "
"for :djadmin:`startapp`."
msgstr ""

#: ../../ref/django-admin.txt:1403
msgid "syncdb"
msgstr ""

#: ../../ref/django-admin.txt:1409
msgid ""
"This command has been deprecated in favor of the :djadmin:`migrate` command,"
" which performs both the old behavior as well as executing migrations."
msgstr ""

#: ../../ref/django-admin.txt:1413
msgid ""
"Alias for :djadmin:`migrate`, except that it also prompts you to create a "
"superuser if one doesn't exist (assuming you are using "
"``django.contrib.auth``)."
msgstr ""

#: ../../ref/django-admin.txt:1417
msgid "test <app or test identifier>"
msgstr ""

#: ../../ref/django-admin.txt:1421
msgid ""
"Runs tests for all installed models. See :doc:`/topics/testing/index` for "
"more information."
msgstr ""

#: ../../ref/django-admin.txt:1426
msgid ""
"The ``--failfast`` option can be used to stop running tests and report the "
"failure immediately after a test fails."
msgstr ""

#: ../../ref/django-admin.txt:1431
msgid ""
"The ``--testrunner`` option can be used to control the test runner class "
"that is used to execute tests. If this value is provided, it overrides the "
"value provided by the :setting:`TEST_RUNNER` setting."
msgstr ""

#: ../../ref/django-admin.txt:1437
msgid ""
"The ``--liveserver`` option can be used to override the default address "
"where the live server (used with :class:`~django.test.LiveServerTestCase`) "
"is expected to run from. The default value is ``localhost:8081``."
msgstr ""

#: ../../ref/django-admin.txt:1445
msgid ""
"The ``--keepdb`` option can be used to preserve the test database between "
"test runs. This has the advantage of skipping both the create and destroy "
"actions which can greatly decrease the time to run tests, especially those "
"in a large test suite. If the test database does not exist, it will be "
"created on the first run and then preserved for each subsequent run. Any "
"unapplied migrations will also be applied to the test database before "
"running the test suite."
msgstr ""

#: ../../ref/django-admin.txt:1456
msgid ""
"The ``--reverse`` option can be used to sort test cases in the opposite "
"order. This may help in debugging the side effects of tests that aren't "
"properly isolated. :ref:`Grouping by test class <order-of-tests>` is "
"preserved when using this option."
msgstr ""

#: ../../ref/django-admin.txt:1465
msgid ""
"The ``--debug-sql`` option can be used to enable :ref:`SQL logging <django-"
"db-logger>` for failing tests. If :djadminopt:`--verbosity` is ``2``, then "
"queries in passing tests are also output."
msgstr ""

#: ../../ref/django-admin.txt:1470
msgid "testserver <fixture fixture ...>"
msgstr ""

#: ../../ref/django-admin.txt:1474
msgid ""
"Runs a Django development server (as in :djadmin:`runserver`) using data "
"from the given fixture(s)."
msgstr ""

#: ../../ref/django-admin.txt:1477
msgid "For example, this command::"
msgstr ""

#: ../../ref/django-admin.txt:1481
msgid "...would perform the following steps:"
msgstr ""

#: ../../ref/django-admin.txt:1483
msgid "Create a test database, as described in :ref:`the-test-database`."
msgstr ""

#: ../../ref/django-admin.txt:1484
msgid ""
"Populate the test database with fixture data from the given fixtures. (For "
"more on fixtures, see the documentation for :djadmin:`loaddata` above.)"
msgstr ""

#: ../../ref/django-admin.txt:1486
msgid ""
"Runs the Django development server (as in :djadmin:`runserver`), pointed at "
"this newly created test database instead of your production database."
msgstr ""

#: ../../ref/django-admin.txt:1489
msgid "This is useful in a number of ways:"
msgstr ""

#: ../../ref/django-admin.txt:1491
msgid ""
"When you're writing :doc:`unit tests </topics/testing/overview>` of how your"
" views act with certain fixture data, you can use ``testserver`` to interact"
" with the views in a Web browser, manually."
msgstr ""

#: ../../ref/django-admin.txt:1495
msgid ""
"Let's say you're developing your Django application and have a \"pristine\" "
"copy of a database that you'd like to interact with. You can dump your "
"database to a fixture (using the :djadmin:`dumpdata` command, explained "
"above), then use ``testserver`` to run your Web application with that data. "
"With this arrangement, you have the flexibility of messing up your data in "
"any way, knowing that whatever data changes you're making are only being "
"made to a test database."
msgstr ""

#: ../../ref/django-admin.txt:1503
msgid ""
"Note that this server does *not* automatically detect changes to your Python"
" source code (as :djadmin:`runserver` does). It does, however, detect "
"changes to templates."
msgstr ""

#: ../../ref/django-admin.txt:1509
msgid ""
"Use ``--addrport`` to specify a different port, or IP address and port, from"
" the default of ``127.0.0.1:8000``. This value follows exactly the same "
"format and serves exactly the same function as the argument to the "
":djadmin:`runserver` command."
msgstr ""

#: ../../ref/django-admin.txt:1516
msgid ""
"To run the test server on port 7000 with ``fixture1`` and ``fixture2``::"
msgstr ""

#: ../../ref/django-admin.txt:1521
msgid ""
"(The above statements are equivalent. We include both of them to demonstrate"
" that it doesn't matter whether the options come before or after the fixture"
" arguments.)"
msgstr ""

#: ../../ref/django-admin.txt:1525
msgid "To run on 1.2.3.4:7000 with a ``test`` fixture::"
msgstr ""

#: ../../ref/django-admin.txt:1533
msgid "validate"
msgstr ""

#: ../../ref/django-admin.txt:1537
msgid "Replaced by the :djadmin:`check` command."
msgstr ""

#: ../../ref/django-admin.txt:1540
msgid ""
"Validates all installed models (according to the :setting:`INSTALLED_APPS` "
"setting) and prints validation errors to standard output."
msgstr ""

#: ../../ref/django-admin.txt:1544
msgid "Commands provided by applications"
msgstr ""

#: ../../ref/django-admin.txt:1546
msgid ""
"Some commands are only available when the ``django.contrib`` application "
"that :doc:`implements </howto/custom-management-commands>` them has been "
":setting:`enabled <INSTALLED_APPS>`. This section describes them grouped by "
"their application."
msgstr ""

#: ../../ref/django-admin.txt:1555
msgid "changepassword"
msgstr ""

#: ../../ref/django-admin.txt:1559 ../../ref/django-admin.txt:1579
msgid ""
"This command is only available if Django's :doc:`authentication system "
"</topics/auth/index>` (``django.contrib.auth``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1562
msgid ""
"Allows changing a user's password. It prompts you to enter a new password "
"twice for the given user. If the entries are identical, this immediately "
"becomes the new password. If you do not supply a user, the command will "
"attempt to change the password whose username matches the current user."
msgstr ""

#: ../../ref/django-admin.txt:1567
msgid ""
"Use the ``--database`` option to specify the database to query for the user."
" If it's not supplied, Django will use the ``default`` database."
msgstr ""

#: ../../ref/django-admin.txt:1575
msgid "createsuperuser"
msgstr ""

#: ../../ref/django-admin.txt:1582
msgid ""
"Creates a superuser account (a user who has all permissions). This is useful"
" if you need to create an initial superuser account or if you need to "
"programmatically generate superuser accounts for your site(s)."
msgstr ""

#: ../../ref/django-admin.txt:1586
msgid ""
"When run interactively, this command will prompt for a password for the new "
"superuser account. When run non-interactively, no password will be set, and "
"the superuser account will not be able to log in until a password has been "
"manually set for it."
msgstr ""

#: ../../ref/django-admin.txt:1594
msgid ""
"The username and email address for the new account can be supplied by using "
"the ``--username`` and ``--email`` arguments on the command line. If either "
"of those is not supplied, ``createsuperuser`` will prompt for it when "
"running interactively."
msgstr ""

#: ../../ref/django-admin.txt:1599
msgid ""
"Use the ``--database`` option to specify the database into which the "
"superuser object will be saved."
msgstr ""

#: ../../ref/django-admin.txt:1604
msgid ""
"You can subclass the management command and override ``get_input_data()`` if"
" you want to customize data input and validation. Consult the source code "
"for details on the existing implementation and the method's parameters. For "
"example, it could be useful if you have a ``ForeignKey`` in "
":attr:`~django.contrib.auth.models.CustomUser.REQUIRED_FIELDS` and want to "
"allow creating an instance instead of entering the primary key of an "
"existing instance."
msgstr ""

#: ../../ref/django-admin.txt:1613
msgid "``django.contrib.gis``"
msgstr ""

#: ../../ref/django-admin.txt:1616
msgid "ogrinspect"
msgstr ""

#: ../../ref/django-admin.txt:1618
msgid ""
"This command is only available if :doc:`GeoDjango </ref/contrib/gis/index>` "
"(``django.contrib.gis``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1621
msgid ""
"Please refer to its :djadmin:`description <ogrinspect>` in the GeoDjango "
"documentation."
msgstr ""

#: ../../ref/django-admin.txt:1625
msgid "``django.contrib.sessions``"
msgstr ""

#: ../../ref/django-admin.txt:1628
msgid "clearsessions"
msgstr ""

#: ../../ref/django-admin.txt:1632
msgid "Can be run as a cron job or directly to clean out expired sessions."
msgstr ""

#: ../../ref/django-admin.txt:1635
msgid "``django.contrib.sitemaps``"
msgstr ""

#: ../../ref/django-admin.txt:1638
msgid "ping_google"
msgstr ""

#: ../../ref/django-admin.txt:1640
msgid ""
"This command is only available if the :doc:`Sitemaps framework "
"</ref/contrib/sitemaps>` (``django.contrib.sitemaps``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1643
msgid ""
"Please refer to its :djadmin:`description <ping_google>` in the Sitemaps "
"documentation."
msgstr ""

#: ../../ref/django-admin.txt:1647
msgid "``django.contrib.staticfiles``"
msgstr ""

#: ../../ref/django-admin.txt:1652 ../../ref/django-admin.txt:1661
msgid ""
"This command is only available if the :doc:`static files application </howto"
"/static-files/index>` (``django.contrib.staticfiles``) is installed."
msgstr ""

#: ../../ref/django-admin.txt:1655
msgid ""
"Please refer to its :djadmin:`description <collectstatic>` in the "
":doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1664
msgid ""
"Please refer to its :djadmin:`description <findstatic>` in the "
":doc:`staticfiles </ref/contrib/staticfiles>` documentation."
msgstr ""

#: ../../ref/django-admin.txt:1668
msgid "Default options"
msgstr ""

#: ../../ref/django-admin.txt:1670
msgid ""
"Although some commands may allow their own custom options, every command "
"allows for the following options:"
msgstr ""

#: ../../ref/django-admin.txt:1679
msgid ""
"Adds the given filesystem path to the Python `import search path`_. If this "
"isn't provided, ``django-admin`` will use the ``PYTHONPATH`` environment "
"variable."
msgstr ""

#: ../../ref/django-admin.txt:1683
msgid ""
"Note that this option is unnecessary in ``manage.py``, because it takes care"
" of setting the Python path for you."
msgstr ""

#: ../../ref/django-admin.txt:1694
msgid ""
"Explicitly specifies the settings module to use. The settings module should "
"be in Python package syntax, e.g. ``mysite.settings``. If this isn't "
"provided, ``django-admin`` will use the ``DJANGO_SETTINGS_MODULE`` "
"environment variable."
msgstr ""

#: ../../ref/django-admin.txt:1699
msgid ""
"Note that this option is unnecessary in ``manage.py``, because it uses "
"``settings.py`` from the current project by default."
msgstr ""

#: ../../ref/django-admin.txt:1708
msgid ""
"By default, ``django-admin`` will show a simple error message whenever a "
":class:`~django.core.management.CommandError` occurs, but a full stack trace"
" for any other exception. If you specify ``--traceback``, ``django-admin`` "
"will also output a full stack trace when a ``CommandError`` is raised."
msgstr ""

#: ../../ref/django-admin.txt:1719
msgid ""
"Use ``--verbosity`` to specify the amount of notification and debug "
"information that ``django-admin`` should print to the console."
msgstr ""

#: ../../ref/django-admin.txt:1722
msgid "``0`` means no output."
msgstr ""

#: ../../ref/django-admin.txt:1723
msgid "``1`` means normal output (default)."
msgstr ""

#: ../../ref/django-admin.txt:1724
msgid "``2`` means verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1725
msgid "``3`` means *very* verbose output."
msgstr ""

#: ../../ref/django-admin.txt:1735
msgid ""
"By default, ``django-admin`` will format the output to be colorized. For "
"example, errors will be printed to the console in red and SQL statements "
"will be syntax highlighted. To prevent this and have a plain text output, "
"pass the ``--no-color`` option when running your command."
msgstr ""

#: ../../ref/django-admin.txt:1741
msgid "Common options"
msgstr ""

#: ../../ref/django-admin.txt:1743
msgid ""
"The following options are not available on every command, but they are "
"common to a number of commands."
msgstr ""

#: ../../ref/django-admin.txt:1748
msgid ""
"Used to specify the database on which a command will operate. If not "
"specified, this option will default to an alias of ``default``."
msgstr ""

#: ../../ref/django-admin.txt:1751
msgid ""
"For example, to dump data from the database with the alias ``master``::"
msgstr ""

#: ../../ref/django-admin.txt:1757
msgid ""
"Exclude a specific application from the applications whose contents is "
"output. For example, to specifically exclude the ``auth`` application from "
"the output of dumpdata, you would call::"
msgstr ""

#: ../../ref/django-admin.txt:1763
msgid ""
"If you want to exclude multiple applications, use multiple ``--exclude`` "
"directives::"
msgstr ""

#: ../../ref/django-admin.txt:1770
msgid ""
"Use the ``--locale`` or ``-l`` option to specify the locale to process. If "
"not provided all locales are processed."
msgstr ""

#: ../../ref/django-admin.txt:1775
msgid ""
"Use the ``--noinput`` option to suppress all user prompting, such as \"Are "
"you sure?\" confirmation messages. This is useful if ``django-admin`` is "
"being executed as an unattended, automated script."
msgstr ""

#: ../../ref/django-admin.txt:1780
msgid "Extra niceties"
msgstr ""

#: ../../ref/django-admin.txt:1785
msgid "Syntax coloring"
msgstr ""

#: ../../ref/django-admin.txt:1787
msgid ""
"The ``django-admin`` / ``manage.py`` commands will use pretty color-coded "
"output if your terminal supports ANSI-colored output. It won't use the color"
" codes if you're piping the command's output to another program."
msgstr ""

#: ../../ref/django-admin.txt:1792
msgid ""
"Under Windows, the native console doesn't support ANSI escape sequences so "
"by default there is no color output. But you can install the `ANSICON`_ "
"third-party tool, the Django commands will detect its presence and will make"
" use of its services to color output just like on Unix-based platforms."
msgstr ""

#: ../../ref/django-admin.txt:1797
msgid ""
"The colors used for syntax highlighting can be customized. Django ships with"
" three color palettes:"
msgstr ""

#: ../../ref/django-admin.txt:1800
msgid ""
"``dark``, suited to terminals that show white text on a black background. "
"This is the default palette."
msgstr ""

#: ../../ref/django-admin.txt:1803
msgid ""
"``light``, suited to terminals that show black text on a white background."
msgstr ""

#: ../../ref/django-admin.txt:1806
msgid "``nocolor``, which disables syntax highlighting."
msgstr ""

#: ../../ref/django-admin.txt:1808
msgid ""
"You select a palette by setting a ``DJANGO_COLORS`` environment variable to "
"specify the palette you want to use. For example, to specify the ``light`` "
"palette under a Unix or OS/X BASH shell, you would run the following at a "
"command prompt::"
msgstr ""

#: ../../ref/django-admin.txt:1815
msgid ""
"You can also customize the colors that are used. Django specifies a number "
"of roles in which color is used:"
msgstr ""

#: ../../ref/django-admin.txt:1818
msgid "``error`` - A major error."
msgstr ""

#: ../../ref/django-admin.txt:1819
msgid "``notice`` - A minor error."
msgstr ""

#: ../../ref/django-admin.txt:1820
msgid "``warning`` - A warning."
msgstr ""

#: ../../ref/django-admin.txt:1821
msgid "``sql_field`` - The name of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1822
msgid "``sql_coltype`` - The type of a model field in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1823
msgid "``sql_keyword`` - An SQL keyword."
msgstr ""

#: ../../ref/django-admin.txt:1824
msgid "``sql_table`` - The name of a model in SQL."
msgstr ""

#: ../../ref/django-admin.txt:1825
msgid "``http_info`` - A 1XX HTTP Informational server response."
msgstr ""

#: ../../ref/django-admin.txt:1826
msgid "``http_success`` - A 2XX HTTP Success server response."
msgstr ""

#: ../../ref/django-admin.txt:1827
msgid "``http_not_modified`` - A 304 HTTP Not Modified server response."
msgstr ""

#: ../../ref/django-admin.txt:1828
msgid ""
"``http_redirect`` - A 3XX HTTP Redirect server response other than 304."
msgstr ""

#: ../../ref/django-admin.txt:1829
msgid "``http_not_found`` - A 404 HTTP Not Found server response."
msgstr ""

#: ../../ref/django-admin.txt:1830
msgid ""
"``http_bad_request`` - A 4XX HTTP Bad Request server response other than "
"404."
msgstr ""

#: ../../ref/django-admin.txt:1831
msgid "``http_server_error`` - A 5XX HTTP Server Error response."
msgstr ""

#: ../../ref/django-admin.txt:1832
msgid "``migrate_heading`` - A heading in a migrations management command."
msgstr ""

#: ../../ref/django-admin.txt:1833
msgid "``migrate_label`` - A migration name."
msgstr ""

#: ../../ref/django-admin.txt:1835
msgid ""
"Each of these roles can be assigned a specific foreground and background "
"color, from the following list:"
msgstr ""

#: ../../ref/django-admin.txt:1838
msgid "``black``"
msgstr ""

#: ../../ref/django-admin.txt:1839
msgid "``red``"
msgstr ""

#: ../../ref/django-admin.txt:1840
msgid "``green``"
msgstr ""

#: ../../ref/django-admin.txt:1841
msgid "``yellow``"
msgstr ""

#: ../../ref/django-admin.txt:1842
msgid "``blue``"
msgstr ""

#: ../../ref/django-admin.txt:1843
msgid "``magenta``"
msgstr ""

#: ../../ref/django-admin.txt:1844
msgid "``cyan``"
msgstr ""

#: ../../ref/django-admin.txt:1845
msgid "``white``"
msgstr ""

#: ../../ref/django-admin.txt:1847
msgid ""
"Each of these colors can then be modified by using the following display "
"options:"
msgstr ""

#: ../../ref/django-admin.txt:1850
msgid "``bold``"
msgstr ""

#: ../../ref/django-admin.txt:1851
msgid "``underscore``"
msgstr ""

#: ../../ref/django-admin.txt:1852
msgid "``blink``"
msgstr ""

#: ../../ref/django-admin.txt:1853 ../../ref/signals.txt:251
#: ../../ref/signals.txt:306 ../../ref/signals.txt:333
msgid "``reverse``"
msgstr ""

#: ../../ref/django-admin.txt:1854
msgid "``conceal``"
msgstr ""

#: ../../ref/django-admin.txt:1856
msgid "A color specification follows one of the following patterns:"
msgstr ""

#: ../../ref/django-admin.txt:1858
msgid "``role=fg``"
msgstr ""

#: ../../ref/django-admin.txt:1859
msgid "``role=fg/bg``"
msgstr ""

#: ../../ref/django-admin.txt:1860
msgid "``role=fg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1861
msgid "``role=fg/bg,option,option``"
msgstr ""

#: ../../ref/django-admin.txt:1863
msgid ""
"where ``role`` is the name of a valid color role, ``fg`` is the foreground "
"color, ``bg`` is the background color and each ``option`` is one of the "
"color modifying options. Multiple color specifications are then separated by"
" a semicolon. For example::"
msgstr ""

#: ../../ref/django-admin.txt:1870
msgid ""
"would specify that errors be displayed using blinking yellow on blue, and "
"notices displayed using magenta. All other color roles would be left "
"uncolored."
msgstr ""

#: ../../ref/django-admin.txt:1874
msgid ""
"Colors can also be specified by extending a base palette. If you put a "
"palette name in a color specification, all the colors implied by that "
"palette will be loaded. So::"
msgstr ""

#: ../../ref/django-admin.txt:1880
msgid ""
"would specify the use of all the colors in the light color palette, *except*"
" for the colors for errors and notices which would be overridden as "
"specified."
msgstr ""

#: ../../ref/django-admin.txt:1886
msgid ""
"Support for color-coded output from ``django-admin`` / ``manage.py`` "
"utilities on Windows by relying on the ANSICON application was added in "
"Django 1.7."
msgstr ""

#: ../../ref/django-admin.txt:1893
msgid "Bash completion"
msgstr ""

#: ../../ref/django-admin.txt:1895
msgid ""
"If you use the Bash shell, consider installing the Django bash completion "
"script, which lives in ``extras/django_bash_completion`` in the Django "
"distribution. It enables tab-completion of ``django-admin`` and "
"``manage.py`` commands, so you can, for instance..."
msgstr ""

#: ../../ref/django-admin.txt:1900
msgid "Type ``django-admin``."
msgstr ""

#: ../../ref/django-admin.txt:1901
msgid "Press [TAB] to see all available options."
msgstr ""

#: ../../ref/django-admin.txt:1902
msgid ""
"Type ``sql``, then [TAB], to see all available options whose names start "
"with ``sql``."
msgstr ""

#: ../../ref/django-admin.txt:1906
msgid ""
"See :doc:`/howto/custom-management-commands` for how to add customized "
"actions."
msgstr ""

#: ../../ref/django-admin.txt:1911
msgid "Running management commands from your code"
msgstr ""

#: ../../ref/django-admin.txt:1917
msgid "To call a management command from code use ``call_command``."
msgstr ""

#: ../../ref/django-admin.txt:1920
msgid "``name``"
msgstr ""

#: ../../ref/django-admin.txt:1920
msgid "the name of the command to call."
msgstr ""

#: ../../ref/django-admin.txt:1923
msgid "``*args``"
msgstr ""

#: ../../ref/django-admin.txt:1923
msgid "a list of arguments accepted by the command."
msgstr ""

#: ../../ref/django-admin.txt:1926
msgid "``**options``"
msgstr ""

#: ../../ref/django-admin.txt:1926
msgid "named options accepted on the command-line."
msgstr ""

#: ../../ref/django-admin.txt:1928 ../../ref/models/querysets.txt:687
#: ../../ref/models/querysets.txt:753 ../../ref/models/querysets.txt:2230
msgid "Examples::"
msgstr ""

#: ../../ref/django-admin.txt:1934
msgid ""
"Note that command options that take no arguments are passed as keywords with"
" ``True`` or ``False``, as you can see with the ``interactive`` option "
"above."
msgstr ""

#: ../../ref/django-admin.txt:1937
msgid ""
"Named arguments can be passed by using either one of the following "
"syntaxes::"
msgstr ""

#: ../../ref/django-admin.txt:1951
msgid ""
"The first syntax is now supported thanks to management commands using the "
":py:mod:`argparse` module. For the second syntax, Django previously passed "
"the option name as-is to the command, now it is always using the ``dest`` "
"variable name (which may or may not be the same as the option name)."
msgstr ""

#: ../../ref/django-admin.txt:1956
msgid "Command options which take multiple options are passed a list::"
msgstr ""

#: ../../ref/django-admin.txt:1961
msgid "Output redirection"
msgstr ""

#: ../../ref/django-admin.txt:1963
msgid ""
"Note that you can redirect standard output and error streams as all commands"
" support the ``stdout`` and ``stderr`` options. For example, you could "
"write::"
msgstr ""

#: ../../ref/exceptions.txt:3
msgid "Django Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:5
msgid ""
"Django raises some of its own exceptions as well as standard Python "
"exceptions."
msgstr ""

#: ../../ref/exceptions.txt:8
msgid "Django Core Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:13
msgid ""
"Django core exception classes are defined in ``django.core.exceptions``."
msgstr ""

#: ../../ref/exceptions.txt:16
msgid "``ObjectDoesNotExist``"
msgstr ""

#: ../../ref/exceptions.txt:20
msgid ""
"The base class for :exc:`~django.db.models.Model.DoesNotExist` exceptions; a"
" ``try/except`` for ``ObjectDoesNotExist`` will catch "
":exc:`~django.db.models.Model.DoesNotExist` exceptions for all models."
msgstr ""

#: ../../ref/exceptions.txt:24
msgid ""
"See :meth:`~django.db.models.query.QuerySet.get()` for further information "
"on :exc:`ObjectDoesNotExist` and "
":exc:`~django.db.models.Model.DoesNotExist`."
msgstr ""

#: ../../ref/exceptions.txt:28
msgid "``FieldDoesNotExist``"
msgstr ""

#: ../../ref/exceptions.txt:32
msgid ""
"The ``FieldDoesNotExist`` exception is raised by a model's "
"``_meta.get_field()`` method when the requested field does not exist on the "
"model or on the model's parents."
msgstr ""

#: ../../ref/exceptions.txt:38
msgid ""
"This exception was previously defined only in ``django.db.models.fields`` "
"and wasn't part of the public API."
msgstr ""

#: ../../ref/exceptions.txt:42
msgid "``MultipleObjectsReturned``"
msgstr ""

#: ../../ref/exceptions.txt:46
msgid ""
"The :exc:`MultipleObjectsReturned` exception is raised by a query if only "
"one object is expected, but multiple objects are returned. A base version of"
" this exception is provided in :mod:`django.core.exceptions`; each model "
"class contains a subclassed version that can be used to identify the "
"specific object type that has returned multiple objects."
msgstr ""

#: ../../ref/exceptions.txt:52
msgid ""
"See :meth:`~django.db.models.query.QuerySet.get()` for further information."
msgstr ""

#: ../../ref/exceptions.txt:55
msgid "``SuspiciousOperation``"
msgstr ""

#: ../../ref/exceptions.txt:59
msgid ""
"The :exc:`SuspiciousOperation` exception is raised when a user has performed"
" an operation that should be considered suspicious from a security "
"perspective, such as tampering with a session cookie. Subclasses of "
"``SuspiciousOperation`` include:"
msgstr ""

#: ../../ref/exceptions.txt:64
msgid "``DisallowedHost``"
msgstr ""

#: ../../ref/exceptions.txt:65
msgid "``DisallowedModelAdminLookup``"
msgstr ""

#: ../../ref/exceptions.txt:66
msgid "``DisallowedModelAdminToField``"
msgstr ""

#: ../../ref/exceptions.txt:67
msgid "``DisallowedRedirect``"
msgstr ""

#: ../../ref/exceptions.txt:68
msgid "``InvalidSessionKey``"
msgstr ""

#: ../../ref/exceptions.txt:69
msgid "``SuspiciousFileOperation``"
msgstr ""

#: ../../ref/exceptions.txt:70
msgid "``SuspiciousMultipartForm``"
msgstr ""

#: ../../ref/exceptions.txt:71
msgid "``SuspiciousSession``"
msgstr ""

#: ../../ref/exceptions.txt:73
msgid ""
"If a ``SuspiciousOperation`` exception reaches the WSGI handler level it is "
"logged at the ``Error`` level and results in a "
":class:`~django.http.HttpResponseBadRequest`. See the :doc:`logging "
"documentation </topics/logging/>` for more information."
msgstr ""

#: ../../ref/exceptions.txt:79
msgid "``PermissionDenied``"
msgstr ""

#: ../../ref/exceptions.txt:83
msgid ""
"The :exc:`PermissionDenied` exception is raised when a user does not have "
"permission to perform the action requested."
msgstr ""

#: ../../ref/exceptions.txt:87
msgid "``ViewDoesNotExist``"
msgstr ""

#: ../../ref/exceptions.txt:91
msgid ""
"The :exc:`ViewDoesNotExist` exception is raised by "
":mod:`django.core.urlresolvers` when a requested view does not exist."
msgstr ""

#: ../../ref/exceptions.txt:95
msgid "``MiddlewareNotUsed``"
msgstr ""

#: ../../ref/exceptions.txt:99
msgid ""
"The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not "
"used in the server configuration."
msgstr ""

#: ../../ref/exceptions.txt:103
msgid "``ImproperlyConfigured``"
msgstr ""

#: ../../ref/exceptions.txt:107
msgid ""
"The :exc:`ImproperlyConfigured` exception is raised when Django is somehow "
"improperly configured -- for example, if a value in ``settings.py`` is "
"incorrect or unparseable."
msgstr ""

#: ../../ref/exceptions.txt:112
msgid "``FieldError``"
msgstr ""

#: ../../ref/exceptions.txt:116
msgid ""
"The :exc:`FieldError` exception is raised when there is a problem with a "
"model field. This can happen for several reasons:"
msgstr ""

#: ../../ref/exceptions.txt:119
msgid ""
"A field in a model clashes with a field of the same name from an abstract "
"base class"
msgstr ""

#: ../../ref/exceptions.txt:121
msgid "An infinite loop is caused by ordering"
msgstr ""

#: ../../ref/exceptions.txt:122
msgid "A keyword cannot be parsed from the filter parameters"
msgstr ""

#: ../../ref/exceptions.txt:123
msgid "A field cannot be determined from a keyword in the query parameters"
msgstr ""

#: ../../ref/exceptions.txt:125
msgid "A join is not permitted on the specified field"
msgstr ""

#: ../../ref/exceptions.txt:126
msgid "A field name is invalid"
msgstr ""

#: ../../ref/exceptions.txt:127
msgid "A query contains invalid order_by arguments"
msgstr ""

#: ../../ref/exceptions.txt:130
msgid "``ValidationError``"
msgstr ""

#: ../../ref/exceptions.txt:134
msgid ""
"The :exc:`ValidationError` exception is raised when data fails form or model"
" field validation. For more information about validation, see :doc:`Form and"
" Field Validation </ref/forms/validation>`, :ref:`Model Field Validation "
"<validating-objects>` and the :doc:`Validator Reference </ref/validators>`."
msgstr ""

#: ../../ref/exceptions.txt:141
msgid "``NON_FIELD_ERRORS``"
msgstr ""

#: ../../ref/exceptions.txt:145
msgid ""
"``ValidationError``\\s that don't belong to a particular field in a form or "
"model are classified as ``NON_FIELD_ERRORS``. This constant is used as a key"
" in dictionaries that otherwise map fields to their respective list of "
"errors."
msgstr ""

#: ../../ref/exceptions.txt:153
msgid "URL Resolver exceptions"
msgstr ""

#: ../../ref/exceptions.txt:155
msgid "URL Resolver exceptions are defined in ``django.core.urlresolvers``."
msgstr ""

#: ../../ref/exceptions.txt:158
msgid "``Resolver404``"
msgstr ""

#: ../../ref/exceptions.txt:162
msgid ""
"The :exc:`Resolver404` exception is raised by "
":func:`django.core.urlresolvers.resolve()` if the path passed to "
"``resolve()`` doesn't map to a view. It's a subclass of "
":class:`django.http.Http404`."
msgstr ""

#: ../../ref/exceptions.txt:168
msgid "``NoReverseMatch``"
msgstr ""

#: ../../ref/exceptions.txt:172
msgid ""
"The :exc:`NoReverseMatch` exception is raised by "
":mod:`django.core.urlresolvers` when a matching URL in your URLconf cannot "
"be identified based on the parameters supplied."
msgstr ""

#: ../../ref/exceptions.txt:179
msgid "Database Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:181
msgid "Database exceptions may be imported from ``django.db``."
msgstr ""

#: ../../ref/exceptions.txt:183
msgid ""
"Django wraps the standard database exceptions so that your Django code has a"
" guaranteed common implementation of these classes."
msgstr ""

#: ../../ref/exceptions.txt:196
msgid ""
"The Django wrappers for database exceptions behave exactly the same as the "
"underlying database exceptions. See :pep:`249`, the Python Database API "
"Specification v2.0, for further information."
msgstr ""

#: ../../ref/exceptions.txt:200
msgid ""
"As per :pep:`3134`, a ``__cause__`` attribute is set with the original "
"(underlying) database exception, allowing access to any additional "
"information provided. (Note that this attribute is available under both "
"Python 2 and Python 3, although :pep:`3134` normally only applies to Python "
"3.)"
msgstr ""

#: ../../ref/exceptions.txt:208
msgid ""
"Raised to prevent deletion of referenced objects when using "
":attr:`django.db.models.PROTECT`. :exc:`models.ProtectedError` is a subclass"
" of :exc:`IntegrityError`."
msgstr ""

#: ../../ref/exceptions.txt:215
msgid "Http Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:217
msgid "Http exceptions may be imported from ``django.http``."
msgstr ""

#: ../../ref/exceptions.txt:220
msgid "``UnreadablePostError``"
msgstr ""

#: ../../ref/exceptions.txt:224
msgid ":exc:`UnreadablePostError` is raised when a user cancels an upload."
msgstr ""

#: ../../ref/exceptions.txt:227
msgid "Transaction Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:231
msgid "Transaction exceptions are defined in ``django.db.transaction``."
msgstr ""

#: ../../ref/exceptions.txt:234
msgid "``TransactionManagementError``"
msgstr ""

#: ../../ref/exceptions.txt:238
msgid ""
":exc:`TransactionManagementError` is raised for any and all problems related"
" to database transactions."
msgstr ""

#: ../../ref/exceptions.txt:244
msgid "Testing Framework Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:246
msgid "Exceptions provided by the ``django.test`` package."
msgstr ""

#: ../../ref/exceptions.txt:249
msgid "``RedirectCycleError``"
msgstr ""

#: ../../ref/exceptions.txt:255
msgid ""
":exc:`~client.RedirectCycleError` is raised when the test client detects a "
"loop or an overly long chain of redirects."
msgstr ""

#: ../../ref/exceptions.txt:259
msgid "Python Exceptions"
msgstr ""

#: ../../ref/exceptions.txt:261
msgid ""
"Django raises built-in Python exceptions when appropriate as well. See the "
"Python documentation for further information on the :ref:`bltin-exceptions`."
msgstr ""

#: ../../ref/files/file.txt:2
msgid "The ``File`` object"
msgstr ""

#: ../../ref/files/file.txt:4
msgid ""
"The :mod:`django.core.files` module and its submodules contain built-in "
"classes for basic file handling in Django."
msgstr ""

#: ../../ref/files/file.txt:10
msgid "The ``File`` Class"
msgstr ""

#: ../../ref/files/file.txt:14
msgid ""
"The :class:`File` class is a thin wrapper around a Python :py:term:`file "
"object` with some Django-specific additions. Internally, Django uses this "
"class when it needs to represent a file."
msgstr ""

#: ../../ref/files/file.txt:18
msgid ":class:`File` objects have the following attributes and methods:"
msgstr ""

#: ../../ref/files/file.txt:22
msgid ""
"The name of the file including the relative path from :setting:`MEDIA_ROOT`."
msgstr ""

#: ../../ref/files/file.txt:27
msgid "The size of the file in bytes."
msgstr ""

#: ../../ref/files/file.txt:31
msgid "The underlying :py:term:`file object` that this class wraps."
msgstr ""

#: ../../ref/files/file.txt:35
msgid "The read/write mode for the file."
msgstr ""

#: ../../ref/files/file.txt:39
msgid ""
"Open or reopen the file (which also does ``File.seek(0)``). The ``mode`` "
"argument allows the same values as Python's built-in :func:`python:open()`."
msgstr ""

#: ../../ref/files/file.txt:43
msgid ""
"When reopening a file, ``mode`` will override whatever mode the file was "
"originally opened with; ``None`` means to reopen with the original mode."
msgstr ""

#: ../../ref/files/file.txt:49
msgid ""
"Read content from the file. The optional ``size`` is the number of bytes to "
"read; if not specified, the file will be read to the end."
msgstr ""

#: ../../ref/files/file.txt:54
msgid "Iterate over the file yielding one line at a time."
msgstr ""

#: ../../ref/files/file.txt:58
msgid ""
"``File`` now uses `universal newlines`_. The following are recognized as "
"ending a line: the Unix end-of-line convention ``'\\n'``, the Windows "
"convention ``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
msgstr ""

#: ../../ref/files/file.txt:67
msgid ""
"Iterate over the file yielding \"chunks\" of a given size. ``chunk_size`` "
"defaults to 64 KB."
msgstr ""

#: ../../ref/files/file.txt:70
msgid ""
"This is especially useful with very large files since it allows them to be "
"streamed off disk and avoids storing the whole file in memory."
msgstr ""

#: ../../ref/files/file.txt:75
msgid ""
"Returns ``True`` if the file is large enough to require multiple chunks to "
"access all of its content give some ``chunk_size``."
msgstr ""

#: ../../ref/files/file.txt:80
msgid ""
"Writes the specified content string to the file. Depending on the storage "
"system behind the scenes, this content might not be fully committed until "
":func:`close()` is called on the file."
msgstr ""

#: ../../ref/files/file.txt:86
msgid "Close the file."
msgstr ""

#: ../../ref/files/file.txt:88
msgid ""
"In addition to the listed methods, :class:`~django.core.files.File` exposes "
"the following attributes and methods of its ``file`` object: ``encoding``, "
"``fileno``, ``flush``, ``isatty``, ``newlines``, ``read``, ``readinto``, "
"``readlines``, ``seek``, ``softspace``, ``tell``, ``truncate``, "
"``writelines``, ``xreadlines``."
msgstr ""

#: ../../ref/files/file.txt:97
msgid "The ``ContentFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:101
msgid ""
"The ``ContentFile`` class inherits from :class:`~django.core.files.File`, "
"but unlike :class:`~django.core.files.File` it operates on string content "
"(bytes also supported), rather than an actual file. For example::"
msgstr ""

#: ../../ref/files/file.txt:114
msgid "The ``ImageFile`` Class"
msgstr ""

#: ../../ref/files/file.txt:118
msgid ""
"Django provides a built-in class specifically for images. "
":class:`django.core.files.images.ImageFile` inherits all the attributes and "
"methods of :class:`~django.core.files.File`, and additionally provides the "
"following:"
msgstr ""

#: ../../ref/files/file.txt:125
msgid "Width of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:129
msgid "Height of the image in pixels."
msgstr ""

#: ../../ref/files/file.txt:134
msgid "Additional methods on files attached to objects"
msgstr ""

#: ../../ref/files/file.txt:136
msgid ""
"Any :class:`File` that is associated with an object (as with ``Car.photo``, "
"below) will also have a couple of extra methods:"
msgstr ""

#: ../../ref/files/file.txt:141
msgid ""
"Saves a new file with the file name and contents provided. This will not "
"replace the existing file, but will create a new file and update the object "
"to point to it. If ``save`` is ``True``, the model's ``save()`` method will "
"be called once the file is saved. That is, these two lines::"
msgstr ""

#: ../../ref/files/file.txt:149
msgid "are equivalent to::"
msgstr ""

#: ../../ref/files/file.txt:153
msgid ""
"Note that the ``content`` argument must be an instance of either "
":class:`File` or of a subclass of :class:`File`, such as "
":class:`~django.core.files.base.ContentFile`."
msgstr ""

#: ../../ref/files/file.txt:159
msgid ""
"Removes the file from the model instance and deletes the underlying file. If"
" ``save`` is ``True``, the model's ``save()`` method will be called once the"
" file is deleted."
msgstr ""

#: ../../ref/files/index.txt:3
msgid "File handling"
msgstr ""

#: ../../ref/files/storage.txt:2
msgid "File storage API"
msgstr ""

#: ../../ref/files/storage.txt:7
msgid "Getting the current storage class"
msgstr ""

#: ../../ref/files/storage.txt:9
msgid ""
"Django provides two convenient ways to access the current storage class:"
msgstr ""

#: ../../ref/files/storage.txt:13
msgid ""
":class:`~django.core.files.storage.DefaultStorage` provides lazy access to "
"the current default storage system as defined by "
":setting:`DEFAULT_FILE_STORAGE`. :class:`DefaultStorage` uses "
":func:`~django.core.files.storage.get_storage_class` internally."
msgstr ""

#: ../../ref/files/storage.txt:20
msgid "Returns a class or module which implements the storage API."
msgstr ""

#: ../../ref/files/storage.txt:22
msgid ""
"When called without the ``import_path`` parameter ``get_storage_class`` will"
" return the current default storage system as defined by "
":setting:`DEFAULT_FILE_STORAGE`. If ``import_path`` is provided, "
"``get_storage_class`` will attempt to import the class or module from the "
"given path and will return it if successful. An exception will be raised if "
"the import is unsuccessful."
msgstr ""

#: ../../ref/files/storage.txt:30
msgid "The FileSystemStorage Class"
msgstr ""

#: ../../ref/files/storage.txt:34
msgid ""
"The :class:`~django.core.files.storage.FileSystemStorage` class implements "
"basic file storage on a local filesystem. It inherits from "
":class:`~django.core.files.storage.Storage` and provides implementations for"
" all the public methods thereof."
msgstr ""

#: ../../ref/files/storage.txt:41
msgid ""
"Absolute path to the directory that will hold the files. Defaults to the "
"value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

#: ../../ref/files/storage.txt:46
msgid ""
"URL that serves the files stored at this location. Defaults to the value of "
"your :setting:`MEDIA_URL` setting."
msgstr ""

#: ../../ref/files/storage.txt:51
msgid ""
"The file system permissions that the file will receive when it is saved. "
"Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`."
msgstr ""

#: ../../ref/files/storage.txt:56
msgid ""
"The ``file_permissions_mode`` attribute was added. Previously files always "
"received :setting:`FILE_UPLOAD_PERMISSIONS` permissions."
msgstr ""

#: ../../ref/files/storage.txt:61
msgid ""
"The file system permissions that the directory will receive when it is "
"saved. Defaults to :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS`."
msgstr ""

#: ../../ref/files/storage.txt:66
msgid ""
"The ``directory_permissions_mode`` attribute was added. Previously "
"directories always received :setting:`FILE_UPLOAD_DIRECTORY_PERMISSIONS` "
"permissions."
msgstr ""

#: ../../ref/files/storage.txt:72
msgid ""
"The ``FileSystemStorage.delete()`` method will not raise an exception if the"
" given file name does not exist."
msgstr ""

#: ../../ref/files/storage.txt:76
msgid "The Storage Class"
msgstr ""

#: ../../ref/files/storage.txt:80
msgid ""
"The :class:`~django.core.files.storage.Storage` class provides a "
"standardized API for storing files, along with a set of default behaviors "
"that all other storage systems can inherit or override as necessary."
msgstr ""

#: ../../ref/files/storage.txt:86
msgid ""
"For methods returning naive ``datetime`` objects, the effective timezone "
"used will be the current value of ``os.environ['TZ']``; note that this is "
"usually set from Django's :setting:`TIME_ZONE`."
msgstr ""

#: ../../ref/files/storage.txt:93
msgid ""
"Returns a naive ``datetime`` object containing the last accessed time of the"
" file. For storage systems that aren't able to return the last accessed time"
" this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:100
msgid ""
"Returns a naive ``datetime`` object containing the creation time of the "
"file.  For storage systems that aren't able to return the creation time this"
" will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:107
msgid ""
"Deletes the file referenced by ``name``. If deletion is not supported on the"
" target storage system this will raise ``NotImplementedError`` instead"
msgstr ""

#: ../../ref/files/storage.txt:113
msgid ""
"Returns ``True`` if a file referenced by the given name already exists in "
"the storage system, or ``False`` if the name is available for a new file."
msgstr ""

#: ../../ref/files/storage.txt:119
msgid ""
"Returns a filename based on the ``name`` parameter that's free and available"
" for new content to be written to on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:123
msgid ""
"The length of the filename will not exceed ``max_length``, if provided. If a"
" free unique filename cannot be found, a :exc:`SuspiciousFileOperation "
"<django.core.exceptions.SuspiciousOperation>` exception will be raised."
msgstr ""

#: ../../ref/files/storage.txt:128
msgid ""
"If a file with ``name`` already exists, an underscore plus a random 7 "
"character alphanumeric string is appended to the filename before the "
"extension."
msgstr ""

#: ../../ref/files/storage.txt:134
msgid ""
"Previously, an underscore followed by a number (e.g. ``\"_1\"``, ``\"_2\"``,"
" etc.) was appended to the filename until an available name in the "
"destination directory was found. A malicious user could exploit this "
"deterministic algorithm to create a denial-of-service attack. This change "
"was also made in Django 1.6.6, 1.5.9, and 1.4.14."
msgstr ""

#: ../../ref/files/storage.txt:143 ../../ref/files/storage.txt:193
msgid "The ``max_length`` argument was added."
msgstr ""

#: ../../ref/files/storage.txt:147
msgid ""
"Returns a filename based on the ``name`` parameter that's suitable for use "
"on the target storage system."
msgstr ""

#: ../../ref/files/storage.txt:152
msgid ""
"Lists the contents of the specified path, returning a 2-tuple of lists; the "
"first item being directories, the second item being files. For storage "
"systems that aren't able to provide such a listing, this will raise a "
"``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:159
msgid ""
"Returns a naive ``datetime`` object containing the last modified time. For "
"storage systems that aren't able to return the last modified time, this will"
" raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:166
msgid ""
"Opens the file given by ``name``. Note that although the returned file is "
"guaranteed to be a ``File`` object, it might actually be some subclass. In "
"the case of remote file storage this means that reading/writing could be "
"quite slow, so be warned."
msgstr ""

#: ../../ref/files/storage.txt:173
msgid ""
"The local filesystem path where the file can be opened using Python's "
"standard ``open()``. For storage systems that aren't accessible from the "
"local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:179
msgid ""
"Saves a new file using the storage system, preferably with the name "
"specified. If there already exists a file with this name ``name``, the "
"storage system may modify the filename as necessary to get a unique name. "
"The actual name of the stored file will be returned."
msgstr ""

#: ../../ref/files/storage.txt:184
msgid ""
"The ``max_length`` argument is passed along to :meth:`get_available_name`."
msgstr ""

#: ../../ref/files/storage.txt:187
msgid ""
"The ``content`` argument must be an instance of "
":class:`django.core.files.File` or of a subclass of "
":class:`~django.core.files.File`."
msgstr ""

#: ../../ref/files/storage.txt:197
msgid ""
"Returns the total size, in bytes, of the file referenced by ``name``. For "
"storage systems that aren't able to return the file size this will raise "
"``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/storage.txt:203
msgid ""
"Returns the URL where the contents of the file referenced by ``name`` can be"
" accessed. For storage systems that don't support access by URL this will "
"raise ``NotImplementedError`` instead."
msgstr ""

#: ../../ref/files/uploads.txt:3
msgid "Uploaded Files and Upload Handlers"
msgstr ""

#: ../../ref/files/uploads.txt:9
msgid "Uploaded files"
msgstr ""

#: ../../ref/files/uploads.txt:13
msgid ""
"During file uploads, the actual file data is stored in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`. Each entry in this dictionary is an "
"``UploadedFile`` object (or a subclass) -- a simple wrapper around an "
"uploaded file. You'll usually use one of these methods to access the "
"uploaded content:"
msgstr ""

#: ../../ref/files/uploads.txt:20
msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if"
" the uploaded file is huge it can overwhelm your system if you try to read "
"it into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

#: ../../ref/files/uploads.txt:27
msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes,"
" but that's configurable; see below."
msgstr ""

#: ../../ref/files/uploads.txt:33
msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

#: ../../ref/files/uploads.txt:36
msgid ""
"In practice, it's often easiest simply to use ``chunks()`` all the time. "
"Looping over ``chunks()`` instead of using ``read()`` ensures that large "
"files don't overwhelm your system's memory."
msgstr ""

#: ../../ref/files/uploads.txt:40
msgid "Here are some useful attributes of ``UploadedFile``:"
msgstr ""

#: ../../ref/files/uploads.txt:44
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

#: ../../ref/files/uploads.txt:48
msgid "The size, in bytes, of the uploaded file."
msgstr ""

#: ../../ref/files/uploads.txt:52
msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""

#: ../../ref/files/uploads.txt:62
msgid ""
"A dictionary containing extra parameters passed to the ``content-type`` "
"header. This is typically provided by services, such as Google App Engine, "
"that intercept and handle file uploads on your behalf. As a result your "
"handler may not receive the uploaded file content, but instead a URL or "
"other pointer to the file. (see `RFC 2388`_ section 5.3)."
msgstr ""

#: ../../ref/files/uploads.txt:72
msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy "
"here."
msgstr ""

#: ../../ref/files/uploads.txt:77
msgid ""
"Like regular Python files, you can read the file line-by-line simply by "
"iterating over the uploaded file:"
msgstr ""

#: ../../ref/files/uploads.txt:85
msgid ""
"Lines are split using `universal newlines`_. The following are recognized as"
" ending a line: the Unix end-of-line convention ``'\\n'``, the Windows "
"convention ``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
msgstr ""

#: ../../ref/files/uploads.txt:93
msgid "Previously lines were only split on the Unix end-of-line ``'\\n'``."
msgstr ""

#: ../../ref/files/uploads.txt:95
msgid "Subclasses of ``UploadedFile`` include:"
msgstr ""

#: ../../ref/files/uploads.txt:99
msgid ""
"A file uploaded to a temporary location (i.e. stream-to-disk). This class is"
" used by the "
":class:`~django.core.files.uploadhandler.TemporaryFileUploadHandler`. In "
"addition to the methods from :class:`UploadedFile`, it has one additional "
"method:"
msgstr ""

#: ../../ref/files/uploads.txt:107
msgid "Returns the full path to the temporary uploaded file."
msgstr ""

#: ../../ref/files/uploads.txt:111
msgid ""
"A file uploaded into memory (i.e. stream-to-memory). This class is used by "
"the :class:`~django.core.files.uploadhandler.MemoryFileUploadHandler`."
msgstr ""

#: ../../ref/files/uploads.txt:115
msgid "Built-in upload handlers"
msgstr ""

#: ../../ref/files/uploads.txt:120
msgid ""
"Together the :class:`MemoryFileUploadHandler` and "
":class:`TemporaryFileUploadHandler` provide Django's default file upload "
"behavior of reading small files into memory and large ones onto disk. They "
"are located in ``django.core.files.uploadhandler``."
msgstr ""

#: ../../ref/files/uploads.txt:127
msgid ""
"File upload handler to stream uploads into memory (used for small files)."
msgstr ""

#: ../../ref/files/uploads.txt:131
msgid ""
"Upload handler that streams data into a temporary file using "
":class:`~django.core.files.uploadedfile.TemporaryUploadedFile`."
msgstr ""

#: ../../ref/files/uploads.txt:137
msgid "Writing custom upload handlers"
msgstr ""

#: ../../ref/files/uploads.txt:141
msgid ""
"All file upload handlers should be subclasses of "
"``django.core.files.uploadhandler.FileUploadHandler``. You can define upload"
" handlers wherever you wish."
msgstr ""

#: ../../ref/files/uploads.txt:146
msgid "Required methods"
msgstr ""

#: ../../ref/files/uploads.txt:148
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

#: ../../ref/files/uploads.txt:152
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

#: ../../ref/files/uploads.txt:154
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

#: ../../ref/files/uploads.txt:156
msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

#: ../../ref/files/uploads.txt:159
msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\""
" for other handlers."
msgstr ""

#: ../../ref/files/uploads.txt:163
msgid ""
"Return ``None`` from ``receive_data_chunk`` to short-circuit remaining "
"upload handlers from getting this chunk. This is useful if you're storing "
"the uploaded data yourself and don't want future handlers to store a copy of"
" the data."
msgstr ""

#: ../../ref/files/uploads.txt:168
msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""

#: ../../ref/files/uploads.txt:173
msgid "Called when a file has finished uploading."
msgstr ""

#: ../../ref/files/uploads.txt:175
msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

#: ../../ref/files/uploads.txt:180
msgid "Optional methods"
msgstr ""

#: ../../ref/files/uploads.txt:182
msgid ""
"Custom upload handlers may also define any of the following optional methods"
" or attributes:"
msgstr ""

#: ../../ref/files/uploads.txt:187
msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

#: ../../ref/files/uploads.txt:191
msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""

#: ../../ref/files/uploads.txt:196
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

#: ../../ref/files/uploads.txt:200
msgid ""
"Callback signaling that a new file upload is starting. This is called before"
" any data has been fed to any upload handlers."
msgstr ""

#: ../../ref/files/uploads.txt:203
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

#: ../../ref/files/uploads.txt:205
msgid ""
"``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

#: ../../ref/files/uploads.txt:207
msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. "
"``'image/jpeg'``."
msgstr ""

#: ../../ref/files/uploads.txt:210
msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""

#: ../../ref/files/uploads.txt:213
msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""

#: ../../ref/files/uploads.txt:216
msgid ""
"``content_type_extra`` is extra information about the file from the "
"``content-type`` header. See :attr:`UploadedFile.content_type_extra "
"<django.core.files.uploadedfile.UploadedFile.content_type_extra>`."
msgstr ""

#: ../../ref/files/uploads.txt:220
msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""

#: ../../ref/files/uploads.txt:225
msgid "The ``content_type_extra`` parameter was added."
msgstr ""

#: ../../ref/files/uploads.txt:229
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

#: ../../ref/files/uploads.txt:233
msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

#: ../../ref/files/uploads.txt:236
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

#: ../../ref/files/uploads.txt:238
msgid "``META`` is the same object as ``request.META``."
msgstr ""

#: ../../ref/files/uploads.txt:240
msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""

#: ../../ref/files/uploads.txt:243
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

#: ../../ref/files/uploads.txt:245
msgid "``encoding`` is the encoding of the request."
msgstr ""

#: ../../ref/files/uploads.txt:247
msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of "
"``(POST, FILES)`` if you want to return the new data structures suitable for"
" the request directly."
msgstr ""

#: ../../ref/forms/api.txt:3
msgid "The Forms API"
msgstr ""

#: ../../ref/forms/api.txt:7
msgid "About this document"
msgstr ""

#: ../../ref/forms/api.txt:9
msgid ""
"This document covers the gritty details of Django's forms API. You should "
"read the :doc:`introduction to working with forms </topics/forms/index>` "
"first."
msgstr ""

#: ../../ref/forms/api.txt:16
msgid "Bound and unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:18
msgid ""
"A :class:`Form` instance is either **bound** to a set of data, or "
"**unbound**."
msgstr ""

#: ../../ref/forms/api.txt:20
msgid ""
"If it's **bound** to a set of data, it's capable of validating that data and"
" rendering the form as HTML with the data displayed in the HTML."
msgstr ""

#: ../../ref/forms/api.txt:23
msgid ""
"If it's **unbound**, it cannot do validation (because there's no data to "
"validate!), but it can still render the blank form as HTML."
msgstr ""

#: ../../ref/forms/api.txt:28
msgid ""
"To create an unbound :class:`Form` instance, simply instantiate the class::"
msgstr ""

#: ../../ref/forms/api.txt:32
msgid ""
"To bind data to a form, pass the data as a dictionary as the first parameter"
" to your :class:`Form` class constructor::"
msgstr ""

#: ../../ref/forms/api.txt:41
msgid ""
"In this dictionary, the keys are the field names, which correspond to the "
"attributes in your :class:`Form` class. The values are the data you're "
"trying to validate. These will usually be strings, but there's no "
"requirement that they be strings; the type of data you pass depends on the "
":class:`Field`, as we'll see in a moment."
msgstr ""

#: ../../ref/forms/api.txt:49
msgid ""
"If you need to distinguish between bound and unbound form instances at "
"runtime, check the value of the form's :attr:`~Form.is_bound` attribute::"
msgstr ""

#: ../../ref/forms/api.txt:59
msgid ""
"Note that passing an empty dictionary creates a *bound* form with empty "
"data::"
msgstr ""

#: ../../ref/forms/api.txt:65
msgid ""
"If you have a bound :class:`Form` instance and want to change the data "
"somehow, or if you want to bind an unbound :class:`Form` instance to some "
"data, create another :class:`Form` instance. There is no way to change data "
"in a :class:`Form` instance. Once a :class:`Form` instance has been created,"
" you should consider its data immutable, whether it has data or not."
msgstr ""

#: ../../ref/forms/api.txt:72
msgid "Using forms to validate data"
msgstr ""

#: ../../ref/forms/api.txt:76
msgid ""
"Implement a ``clean()`` method on your ``Form`` when you must add custom "
"validation for fields that are interdependent. See :ref:`validating-fields-"
"with-clean` for example usage."
msgstr ""

#: ../../ref/forms/api.txt:82
msgid ""
"The primary task of a :class:`Form` object is to validate data. With a bound"
" :class:`Form` instance, call the :meth:`~Form.is_valid` method to run "
"validation and return a boolean designating whether the data was valid::"
msgstr ""

#: ../../ref/forms/api.txt:94
msgid ""
"Let's try with some invalid data. In this case, ``subject`` is blank (an "
"error, because all fields are required by default) and ``sender`` is not a "
"valid email address::"
msgstr ""

#: ../../ref/forms/api.txt:108
msgid ""
"Access the :attr:`~Form.errors` attribute to get a dictionary of error "
"messages::"
msgstr ""

#: ../../ref/forms/api.txt:114
msgid ""
"In this dictionary, the keys are the field names, and the values are lists "
"of Unicode strings representing the error messages. The error messages are "
"stored in lists because a field can have multiple error messages."
msgstr ""

#: ../../ref/forms/api.txt:118
msgid ""
"You can access :attr:`~Form.errors` without having to call "
":meth:`~Form.is_valid` first. The form's data will be validated the first "
"time either you call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""

#: ../../ref/forms/api.txt:122
msgid ""
"The validation routines will only get called once, regardless of how many "
"times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This "
"means that if validation has side effects, those side effects will only be "
"triggered once."
msgstr ""

#: ../../ref/forms/api.txt:130
msgid ""
"Returns a ``dict`` that maps fields to their original ``ValidationError`` "
"instances."
msgstr ""

#: ../../ref/forms/api.txt:137
msgid ""
"Use this method anytime you need to identify an error by its ``code``. This "
"enables things like rewriting the error's message or writing custom logic in"
" a view when a given error is present. It can also be used to serialize the "
"errors in a custom format (e.g. XML); for instance, "
":meth:`~Form.errors.as_json()` relies on ``as_data()``."
msgstr ""

#: ../../ref/forms/api.txt:143
msgid ""
"The need for the ``as_data()`` method is due to backwards compatibility. "
"Previously ``ValidationError`` instances were lost as soon as their "
"**rendered** error messages were added to the ``Form.errors`` dictionary. "
"Ideally ``Form.errors`` would have stored ``ValidationError`` instances and "
"methods with an ``as_`` prefix could render them, but it had to be done the "
"other way around in order not to break code that expects rendered error "
"messages in ``Form.errors``."
msgstr ""

#: ../../ref/forms/api.txt:155
msgid "Returns the errors serialized as JSON."
msgstr ""

#: ../../ref/forms/api.txt:161
msgid ""
"By default, ``as_json()`` does not escape its output. If you are using it "
"for something like AJAX requests to a form view where the client interprets "
"the response and inserts errors into the page, you'll want to be sure to "
"escape the results on the client-side to avoid the possibility of a cross-"
"site scripting attack. It's trivial to do so using a JavaScript library like"
" jQuery - simply use ``$(el).text(errorText)`` rather than ``.html()``."
msgstr ""

#: ../../ref/forms/api.txt:168
msgid ""
"If for some reason you don't want to use client-side escaping, you can also "
"set ``escape_html=True`` and error messages will be escaped so you can use "
"them directly in HTML."
msgstr ""

#: ../../ref/forms/api.txt:176
msgid ""
"This method allows adding errors to specific fields from within the "
"``Form.clean()`` method, or from outside the form altogether; for instance "
"from a view."
msgstr ""

#: ../../ref/forms/api.txt:180
msgid ""
"The ``field`` argument is the name of the field to which the errors should "
"be added. If its value is ``None`` the error will be treated as a non-field "
"error as returned by :meth:`Form.non_field_errors() "
"<django.forms.Form.non_field_errors>`."
msgstr ""

#: ../../ref/forms/api.txt:185
msgid ""
"The ``error`` argument can be a simple string, or preferably an instance of "
"``ValidationError``. See :ref:`raising-validation-error` for best practices "
"when defining form errors."
msgstr ""

#: ../../ref/forms/api.txt:189
msgid ""
"Note that ``Form.add_error()`` automatically removes the relevant field from"
" ``cleaned_data``."
msgstr ""

#: ../../ref/forms/api.txt:196
msgid ""
"This method returns a boolean designating whether a field has an error with "
"a specific error ``code``. If ``code`` is ``None``, it will return ``True`` "
"if the field contains any errors at all."
msgstr ""

#: ../../ref/forms/api.txt:200
msgid ""
"To check for non-field errors use "
":data:`~django.core.exceptions.NON_FIELD_ERRORS` as the ``field`` parameter."
msgstr ""

#: ../../ref/forms/api.txt:205
msgid ""
"This method returns the list of errors from :attr:`Form.errors "
"<django.forms.Form.errors>`  that aren't associated with a particular field."
" This includes ``ValidationError``\\s that are raised in :meth:`Form.clean()"
" <django.forms.Form.clean>` and errors added using "
":meth:`Form.add_error(None, \"...\") <django.forms.Form.add_error>`."
msgstr ""

#: ../../ref/forms/api.txt:212
msgid "Behavior of unbound forms"
msgstr ""

#: ../../ref/forms/api.txt:214
msgid ""
"It's meaningless to validate a form with no data, but, for the record, "
"here's what happens with unbound forms::"
msgstr ""

#: ../../ref/forms/api.txt:224
msgid "Dynamic initial values"
msgstr ""

#: ../../ref/forms/api.txt:228
msgid ""
"Use :attr:`~Form.initial` to declare the initial value of form fields at "
"runtime. For example, you might want to fill in a ``username`` field with "
"the username of the current session."
msgstr ""

#: ../../ref/forms/api.txt:232
msgid ""
"To accomplish this, use the :attr:`~Form.initial` argument to a "
":class:`Form`. This argument, if given, should be a dictionary mapping field"
" names to initial values. Only include the fields for which you're "
"specifying an initial value; it's not necessary to include every field in "
"your form. For example::"
msgstr ""

#: ../../ref/forms/api.txt:239
msgid ""
"These values are only displayed for unbound forms, and they're not used as "
"fallback values if a particular value isn't provided."
msgstr ""

#: ../../ref/forms/api.txt:242
msgid ""
"Note that if a :class:`~django.forms.Field` defines :attr:`~Form.initial` "
"*and* you include ``initial`` when instantiating the ``Form``, then the "
"latter ``initial`` will have precedence. In this example, ``initial`` is "
"provided both at the field level and at the form instance level, and the "
"latter gets precedence::"
msgstr ""

#: ../../ref/forms/api.txt:260
msgid "Checking which form data has changed"
msgstr ""

#: ../../ref/forms/api.txt:264
msgid ""
"Use the ``has_changed()`` method on your ``Form`` when you need to check if "
"the form data has been changed from the initial data."
msgstr ""

#: ../../ref/forms/api.txt:275
msgid ""
"When the form is submitted, we reconstruct it and provide the original data "
"so that the comparison can be done:"
msgstr ""

#: ../../ref/forms/api.txt:281
msgid ""
"``has_changed()`` will be ``True`` if the data from ``request.POST`` differs"
" from what was provided in :attr:`~Form.initial` or ``False`` otherwise. The"
" result is computed by calling :meth:`Field.has_changed` for each field in "
"the form."
msgstr ""

#: ../../ref/forms/api.txt:288
msgid ""
"The ``changed_data`` attribute returns a list of the names of the fields "
"whose values in the form's bound data (usually ``request.POST``) differ from"
" what was provided in :attr:`~Form.initial`. It returns an empty list if no "
"data differs."
msgstr ""

#: ../../ref/forms/api.txt:297
msgid "Accessing the fields from the form"
msgstr ""

#: ../../ref/forms/api.txt:301
msgid ""
"You can access the fields of :class:`Form` instance from its ``fields`` "
"attribute::"
msgstr ""

#: ../../ref/forms/api.txt:312
msgid ""
"You can alter the field of :class:`Form` instance to change the way it is "
"presented in the form::"
msgstr ""

#: ../../ref/forms/api.txt:321
msgid ""
"Beware not to alter the ``base_fields`` attribute because this modification "
"will influence all subsequent ``ContactForm`` instances within the same "
"Python process::"
msgstr ""

#: ../../ref/forms/api.txt:331
msgid "Accessing \"clean\" data"
msgstr ""

#: ../../ref/forms/api.txt:335
msgid ""
"Each field in a :class:`Form` class is responsible not only for validating "
"data, but also for \"cleaning\" it -- normalizing it to a consistent format."
" This is a nice feature, because it allows data for a particular field to be"
" input in a variety of ways, always resulting in consistent output."
msgstr ""

#: ../../ref/forms/api.txt:340
msgid ""
"For example, :class:`~django.forms.DateField` normalizes input into a Python"
" ``datetime.date`` object. Regardless of whether you pass it a string in the"
" format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other "
"formats, ``DateField`` will always normalize it to a ``datetime.date`` "
"object as long as it's valid."
msgstr ""

#: ../../ref/forms/api.txt:346
msgid ""
"Once you've created a :class:`~Form` instance with a set of data and "
"validated it, you can access the clean data via its ``cleaned_data`` "
"attribute::"
msgstr ""

#: ../../ref/forms/api.txt:359
msgid ""
"Note that any text-based field -- such as ``CharField`` or ``EmailField`` --"
" always cleans the input into a Unicode string. We'll cover the encoding "
"implications later in this document."
msgstr ""

#: ../../ref/forms/api.txt:363
msgid ""
"If your data does *not* validate, the ``cleaned_data`` dictionary contains "
"only the valid fields::"
msgstr ""

#: ../../ref/forms/api.txt:376
msgid ""
"``cleaned_data`` will always *only* contain a key for fields defined in the "
"``Form``, even if you pass extra data when you define the ``Form``. In this "
"example, we pass a bunch of extra fields to the ``ContactForm`` constructor,"
" but ``cleaned_data`` contains only the form's fields::"
msgstr ""

#: ../../ref/forms/api.txt:394
msgid ""
"When the ``Form`` is valid, ``cleaned_data`` will include a key and value "
"for *all* its fields, even if the data didn't include a value for some "
"optional fields. In this example, the data dictionary doesn't include a "
"value for the ``nick_name`` field, but ``cleaned_data`` includes it, with an"
" empty value::"
msgstr ""

#: ../../ref/forms/api.txt:411
msgid ""
"In this above example, the ``cleaned_data`` value for ``nick_name`` is set "
"to an empty string, because ``nick_name`` is ``CharField``, and "
"``CharField``\\s treat empty values as an empty string. Each field type "
"knows what its \"blank\" value is -- e.g., for ``DateField``, it's ``None`` "
"instead of the empty string. For full details on each field's behavior in "
"this case, see the \"Empty value\" note for each field in the \"Built-in "
"``Field`` classes\" section below."
msgstr ""

#: ../../ref/forms/api.txt:418
msgid ""
"You can write code to perform validation for particular form fields (based "
"on their name) or for the form as a whole (considering combinations of "
"various fields). More information about this is in "
":doc:`/ref/forms/validation`."
msgstr ""

#: ../../ref/forms/api.txt:425
msgid "Outputting forms as HTML"
msgstr ""

#: ../../ref/forms/api.txt:427
msgid ""
"The second task of a ``Form`` object is to render itself as HTML. To do so, "
"simply ``print`` it::"
msgstr ""

#: ../../ref/forms/api.txt:437
msgid ""
"If the form is bound to data, the HTML output will include that data "
"appropriately. For example, if a field is represented by an ``<input "
"type=\"text\">``, the data will be in the ``value`` attribute. If a field is"
" represented by an ``<input type=\"checkbox\">``, then that HTML will "
"include ``checked=\"checked\"`` if appropriate::"
msgstr ""

#: ../../ref/forms/api.txt:454
msgid ""
"This default output is a two-column HTML table, with a ``<tr>`` for each "
"field. Notice the following:"
msgstr ""

#: ../../ref/forms/api.txt:457
msgid ""
"For flexibility, the output does *not* include the ``<table>`` and "
"``</table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags "
"or an ``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""

#: ../../ref/forms/api.txt:461
msgid ""
"Each field type has a default HTML representation. ``CharField`` is "
"represented by an ``<input type=\"text\">`` and ``EmailField`` by an "
"``<input type=\"email\">``. ``BooleanField`` is represented by an ``<input "
"type=\"checkbox\">``. Note these are merely sensible defaults; you can "
"specify which HTML to use for a given field by using widgets, which we'll "
"explain shortly."
msgstr ""

#: ../../ref/forms/api.txt:468
msgid ""
"The HTML ``name`` for each tag is taken directly from its attribute name in "
"the ``ContactForm`` class."
msgstr ""

#: ../../ref/forms/api.txt:471
msgid ""
"The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and "
"``'Cc myself:'`` is generated from the field name by converting all "
"underscores to spaces and upper-casing the first letter. Again, note these "
"are merely sensible defaults; you can also specify labels manually."
msgstr ""

#: ../../ref/forms/api.txt:476
msgid ""
"Each text label is surrounded in an HTML ``<label>`` tag, which points to "
"the appropriate form field via its ``id``. Its ``id``, in turn, is generated"
" by prepending ``'id_'`` to the field name. The ``id`` attributes and "
"``<label>`` tags are included in the output by default, to follow best "
"practices, but you can change that behavior."
msgstr ""

#: ../../ref/forms/api.txt:482
msgid ""
"Although ``<table>`` output is the default output style when you ``print`` a"
" form, other output styles are available. Each style is available as a "
"method on a form object, and each rendering method returns a Unicode object."
msgstr ""

#: ../../ref/forms/api.txt:487
msgid "``as_p()``"
msgstr ""

#: ../../ref/forms/api.txt:491
msgid ""
"``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` "
"containing one field::"
msgstr ""

#: ../../ref/forms/api.txt:504
msgid "``as_ul()``"
msgstr ""

#: ../../ref/forms/api.txt:508
msgid ""
"``as_ul()`` renders the form as a series of ``<li>`` tags, with each "
"``<li>`` containing one field. It does *not* include the ``<ul>`` or "
"``</ul>``, so that you can specify any HTML attributes on the ``<ul>`` for "
"flexibility::"
msgstr ""

#: ../../ref/forms/api.txt:523
msgid "``as_table()``"
msgstr ""

#: ../../ref/forms/api.txt:527
msgid ""
"Finally, ``as_table()`` outputs the form as an HTML ``<table>``. This is "
"exactly the same as ``print``. In fact, when you ``print`` a form object, it"
" calls its ``as_table()`` method behind the scenes::"
msgstr ""

#: ../../ref/forms/api.txt:543
msgid "Styling required or erroneous form rows"
msgstr ""

#: ../../ref/forms/api.txt:548
msgid ""
"It's pretty common to style form rows and fields that are required or have "
"errors. For example, you might want to present required form rows in bold "
"and highlight errors in red."
msgstr ""

#: ../../ref/forms/api.txt:552
msgid ""
"The :class:`Form` class has a couple of hooks you can use to add ``class`` "
"attributes to required rows or to rows with errors: simply set the "
":attr:`Form.error_css_class` and/or :attr:`Form.required_css_class` "
"attributes::"
msgstr ""

#: ../../ref/forms/api.txt:565
msgid ""
"Once you've done that, rows will be given ``\"error\"`` and/or "
"``\"required\"`` classes, as needed. The HTML will look something like::"
msgstr ""

#: ../../ref/forms/api.txt:581
msgid ""
"The ``required_css_class`` will also be added to the ``<label>`` tag as seen"
" above."
msgstr ""

#: ../../ref/forms/api.txt:587
msgid "Configuring form elements' HTML ``id`` attributes and ``<label>`` tags"
msgstr ""

#: ../../ref/forms/api.txt:591
msgid "By default, the form rendering methods include:"
msgstr ""

#: ../../ref/forms/api.txt:593
msgid "HTML ``id`` attributes on the form elements."
msgstr ""

#: ../../ref/forms/api.txt:595
msgid ""
"The corresponding ``<label>`` tags around the labels. An HTML ``<label>`` "
"tag designates which label text is associated with which form element. This "
"small enhancement makes forms more usable and more accessible to assistive "
"devices. It's always a good idea to use ``<label>`` tags."
msgstr ""

#: ../../ref/forms/api.txt:600
msgid ""
"The ``id`` attribute values are generated by prepending ``id_`` to the form "
"field names.  This behavior is configurable, though, if you want to change "
"the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags "
"entirely."
msgstr ""

#: ../../ref/forms/api.txt:605
msgid ""
"Use the ``auto_id`` argument to the ``Form`` constructor to control the "
"``id`` and label behavior. This argument must be ``True``, ``False`` or a "
"string."
msgstr ""

#: ../../ref/forms/api.txt:608
msgid ""
"If ``auto_id`` is ``False``, then the form output will not include "
"``<label>`` tags nor ``id`` attributes::"
msgstr ""

#: ../../ref/forms/api.txt:628
msgid ""
"If ``auto_id`` is set to ``True``, then the form output *will* include "
"``<label>`` tags and will simply use the field name as its ``id`` for each "
"form field::"
msgstr ""

#: ../../ref/forms/api.txt:649
msgid ""
"If ``auto_id`` is set to a string containing the format character ``'%s'``, "
"then the form output will include ``<label>`` tags, and will generate ``id``"
" attributes based on the format string. For example, for a format string "
"``'field_%s'``, a field named ``subject`` will get the ``id`` value "
"``'field_subject'``. Continuing our example::"
msgstr ""

#: ../../ref/forms/api.txt:672
msgid ""
"If ``auto_id`` is set to any other true value -- such as a string that "
"doesn't include ``%s`` -- then the library will act as if ``auto_id`` is "
"``True``."
msgstr ""

#: ../../ref/forms/api.txt:675
msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr ""

#: ../../ref/forms/api.txt:679
msgid ""
"A translatable string (defaults to a colon (``:``) in English) that will be "
"appended after any label name when a form is rendered."
msgstr ""

#: ../../ref/forms/api.txt:682
msgid ""
"It's possible to customize that character, or omit it entirely, using the "
"``label_suffix`` parameter::"
msgstr ""

#: ../../ref/forms/api.txt:698
msgid ""
"Note that the label suffix is added only if the last character of the label "
"isn't a punctuation character (in English, those are ``.``, ``!``, ``?`` or "
"``:``)."
msgstr ""

#: ../../ref/forms/api.txt:704
msgid ""
"Fields can also define their own :attr:`~django.forms.Field.label_suffix`. "
"This will take precedence over :attr:`Form.label_suffix "
"<django.forms.Form.label_suffix>`. The suffix can also be overridden at "
"runtime using the ``label_suffix`` parameter to "
":meth:`~django.forms.BoundField.label_tag`."
msgstr ""

#: ../../ref/forms/api.txt:711
msgid "Notes on field ordering"
msgstr ""

#: ../../ref/forms/api.txt:713
msgid ""
"In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are "
"displayed in the order in which you define them in your form class. For "
"example, in the ``ContactForm`` example, the fields are defined in the order"
" ``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML "
"output, just change the order in which those fields are listed in the class."
msgstr ""

#: ../../ref/forms/api.txt:720
msgid "How errors are displayed"
msgstr ""

#: ../../ref/forms/api.txt:722
msgid ""
"If you render a bound ``Form`` object, the act of rendering will "
"automatically run the form's validation if it hasn't already happened, and "
"the HTML output will include the validation errors as a ``<ul "
"class=\"errorlist\">`` near the field. The particular positioning of the "
"error messages depends on the output method you're using::"
msgstr ""

#: ../../ref/forms/api.txt:752
msgid "Customizing the error list format"
msgstr ""

#: ../../ref/forms/api.txt:754
msgid ""
"By default, forms use ``django.forms.utils.ErrorList`` to format validation "
"errors. If you'd like to use an alternate class for displaying errors, you "
"can pass that in at construction time (replace ``__str__`` by "
"``__unicode__`` on Python 2)::"
msgstr ""

#: ../../ref/forms/api.txt:777
msgid "``django.forms.util`` was renamed to ``django.forms.utils``."
msgstr ""

#: ../../ref/forms/api.txt:780
msgid "More granular output"
msgstr ""

#: ../../ref/forms/api.txt:782
msgid ""
"The ``as_p()``, ``as_ul()`` and ``as_table()`` methods are simply shortcuts "
"for lazy developers -- they're not the only way a form object can be "
"displayed."
msgstr ""

#: ../../ref/forms/api.txt:787
msgid ""
"Used to display HTML or access attributes for a single field of a "
":class:`Form` instance."
msgstr ""

#: ../../ref/forms/api.txt:790
msgid ""
"The ``__str__()`` (``__unicode__`` on Python 2) method of this object "
"displays the HTML for this field."
msgstr ""

#: ../../ref/forms/api.txt:793
msgid ""
"To retrieve a single ``BoundField``, use dictionary lookup syntax on your "
"form using the field's name as the key::"
msgstr ""

#: ../../ref/forms/api.txt:800
msgid "To retrieve all ``BoundField`` objects, iterate the form::"
msgstr ""

#: ../../ref/forms/api.txt:809
msgid ""
"The field-specific output honors the form object's ``auto_id`` setting::"
msgstr ""

#: ../../ref/forms/api.txt:818
msgid "For a field's list of errors, access the field's ``errors`` attribute."
msgstr ""

#: ../../ref/forms/api.txt:822
msgid ""
"A list-like object that is displayed as an HTML ``<ul class=\"errorlist\">``"
" when printed::"
msgstr ""

#: ../../ref/forms/api.txt:842
msgid ""
"To separately render the label tag of a form field, you can call its "
"``label_tag`` method::"
msgstr ""

#: ../../ref/forms/api.txt:849
msgid ""
"Optionally, you can provide the ``contents`` parameter which will replace "
"the auto-generated label tag. An optional ``attrs`` dictionary may contain "
"additional attributes for the ``<label>`` tag."
msgstr ""

#: ../../ref/forms/api.txt:853
msgid ""
"The HTML that's generated includes the form's "
":attr:`~django.forms.Form.label_suffix` (a colon, by default) or, if set, "
"the current field's :attr:`~django.forms.Field.label_suffix`. The optional "
"``label_suffix`` parameter allows you to override any previously set suffix."
" For example, you can use an empty string to hide the label on selected "
"fields. If you need to do this in a template, you could write a custom "
"filter to allow passing parameters to ``label_tag``."
msgstr ""

#: ../../ref/forms/api.txt:863
msgid "The label includes :attr:`~Form.required_css_class` if applicable."
msgstr ""

#: ../../ref/forms/api.txt:867
msgid ""
"When you use Django's rendering shortcuts, CSS classes are used to indicate "
"required form fields or fields that contain errors. If you're manually "
"rendering a form, you can access these CSS classes using the ``css_classes``"
" method::"
msgstr ""

#: ../../ref/forms/api.txt:876
msgid ""
"If you want to provide some additional classes in addition to the error and "
"required classes that may be required, you can provide those classes as an "
"argument::"
msgstr ""

#: ../../ref/forms/api.txt:886
msgid ""
"Use this method to render the raw value of this field as it would be "
"rendered by a ``Widget``::"
msgstr ""

#: ../../ref/forms/api.txt:899
msgid ""
"Use this property to render the ID of this field. For example, if you are "
"manually constructing a ``<label>`` in your template (despite the fact that "
":meth:`~BoundField.label_tag` will do this for you):"
msgstr ""

#: ../../ref/forms/api.txt:907
msgid ""
"By default, this will be the field's name prefixed by ``id_`` "
"(\"``id_my_field``\" for the example above). You may modify the ID by "
"setting :attr:`~django.forms.Widget.attrs` on the field's widget. For "
"example, declaring a field like this::"
msgstr ""

#: ../../ref/forms/api.txt:914
msgid "and using the template above, would render something like:"
msgstr ""

#: ../../ref/forms/api.txt:923
msgid "Binding uploaded files to a form"
msgstr ""

#: ../../ref/forms/api.txt:925
msgid ""
"Dealing with forms that have ``FileField`` and ``ImageField`` fields is a "
"little more complicated than a normal form."
msgstr ""

#: ../../ref/forms/api.txt:928
msgid ""
"Firstly, in order to upload files, you'll need to make sure that your "
"``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-"
"data\"``::"
msgstr ""

#: ../../ref/forms/api.txt:934
msgid ""
"Secondly, when you use the form, you need to bind the file data. File data "
"is handled separately to normal form data, so when your form contains a "
"``FileField`` and ``ImageField``, you will need to specify a second argument"
" when you bind your form. So if we extend our ContactForm to include an "
"``ImageField`` called ``mugshot``, we need to bind the file data containing "
"the mugshot image::"
msgstr ""

#: ../../ref/forms/api.txt:950
msgid ""
"In practice, you will usually specify ``request.FILES`` as the source of "
"file data (just like you use ``request.POST`` as the source of form data)::"
msgstr ""

#: ../../ref/forms/api.txt:957
msgid ""
"Constructing an unbound form is the same as always -- just omit both form "
"data *and* file data::"
msgstr ""

#: ../../ref/forms/api.txt:964
msgid "Testing for multipart forms"
msgstr ""

#: ../../ref/forms/api.txt:968
msgid ""
"If you're writing reusable views or templates, you may not know ahead of "
"time whether your form is a multipart form or not. The ``is_multipart()`` "
"method tells you whether the form requires multipart encoding for "
"submission::"
msgstr ""

#: ../../ref/forms/api.txt:976
msgid "Here's an example of how you might use this in a template::"
msgstr ""

#: ../../ref/forms/api.txt:987
msgid "Subclassing forms"
msgstr ""

#: ../../ref/forms/api.txt:989
msgid ""
"If you have multiple ``Form`` classes that share fields, you can use "
"subclassing to remove redundancy."
msgstr ""

#: ../../ref/forms/api.txt:992
msgid ""
"When you subclass a custom ``Form`` class, the resulting subclass will "
"include all fields of the parent class(es), followed by the fields you "
"define in the subclass."
msgstr ""

#: ../../ref/forms/api.txt:996
msgid ""
"In this example, ``ContactFormWithPriority`` contains all the fields from "
"``ContactForm``, plus an additional field, ``priority``. The ``ContactForm``"
" fields are ordered first::"
msgstr ""

#: ../../ref/forms/api.txt:1010
msgid ""
"It's possible to subclass multiple forms, treating forms as mixins. In this "
"example, ``BeatleForm`` subclasses both ``PersonForm`` and "
"``InstrumentForm`` (in that order), and its field list includes the fields "
"from the parent classes::"
msgstr ""

#: ../../ref/forms/api.txt:1032
msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name of the field to ``None`` on the subclass. For "
"example::"
msgstr ""

#: ../../ref/forms/api.txt:1050
msgid "Prefixes for forms"
msgstr ""

#: ../../ref/forms/api.txt:1054
msgid ""
"You can put several Django forms inside one ``<form>`` tag. To give each "
"``Form`` its own namespace, use the ``prefix`` keyword argument::"
msgstr ""

#: ../../ref/forms/fields.txt:3
msgid "Form fields"
msgstr ""

#: ../../ref/forms/fields.txt:12
msgid ""
"When you create a ``Form`` class, the most important part is defining the "
"fields of the form. Each field has custom validation logic, along with a few"
" other hooks."
msgstr ""

#: ../../ref/forms/fields.txt:18
msgid ""
"Although the primary way you'll use ``Field`` classes is in ``Form`` "
"classes, you can also instantiate them and use them directly to get a better"
" idea of how they work. Each ``Field`` instance has a ``clean()`` method, "
"which takes a single argument and either raises a "
"``django.forms.ValidationError`` exception or returns the clean value::"
msgstr ""

#: ../../ref/forms/fields.txt:36
msgid "Core field arguments"
msgstr ""

#: ../../ref/forms/fields.txt:38
msgid ""
"Each ``Field`` class constructor takes at least these arguments. Some "
"``Field`` classes take additional, field-specific arguments, but the "
"following should *always* be accepted:"
msgstr ""

#: ../../ref/forms/fields.txt:43
msgid "``required``"
msgstr ""

#: ../../ref/forms/fields.txt:47
msgid ""
"By default, each ``Field`` class assumes the value is required, so if you "
"pass an empty value -- either ``None`` or the empty string (``\"\"``) -- "
"then ``clean()`` will raise a ``ValidationError`` exception::"
msgstr ""

#: ../../ref/forms/fields.txt:72
msgid ""
"To specify that a field is *not* required, pass ``required=False`` to the "
"``Field`` constructor::"
msgstr ""

#: ../../ref/forms/fields.txt:89
msgid ""
"If a ``Field`` has ``required=False`` and you pass ``clean()`` an empty "
"value, then ``clean()`` will return a *normalized* empty value rather than "
"raising ``ValidationError``. For ``CharField``, this will be a Unicode empty"
" string. For other ``Field`` classes, it might be ``None``. (This varies "
"from field to field.)"
msgstr ""

#: ../../ref/forms/fields.txt:96
msgid "``label``"
msgstr ""

#: ../../ref/forms/fields.txt:100
msgid ""
"The ``label`` argument lets you specify the \"human-friendly\" label for "
"this field. This is used when the ``Field`` is displayed in a ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:103
msgid ""
"As explained in \"Outputting forms as HTML\" above, the default label for a "
"``Field`` is generated from the field name by converting all underscores to "
"spaces and upper-casing the first letter. Specify ``label`` if that default "
"behavior doesn't result in an adequate label."
msgstr ""

#: ../../ref/forms/fields.txt:108
msgid ""
"Here's a full example ``Form`` that implements ``label`` for two of its "
"fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:123
msgid "``label_suffix``"
msgstr ""

#: ../../ref/forms/fields.txt:129
msgid ""
"The ``label_suffix`` argument lets you override the form's "
":attr:`~django.forms.Form.label_suffix` on a per-field basis::"
msgstr ""

#: ../../ref/forms/fields.txt:143
msgid "``initial``"
msgstr ""

#: ../../ref/forms/fields.txt:147
msgid ""
"The ``initial`` argument lets you specify the initial value to use when "
"rendering this ``Field`` in an unbound ``Form``."
msgstr ""

#: ../../ref/forms/fields.txt:150
msgid ""
"To specify dynamic initial data, see the :attr:`Form.initial` parameter."
msgstr ""

#: ../../ref/forms/fields.txt:152
msgid ""
"The use-case for this is when you want to display an \"empty\" form in which"
" a field is initialized to a particular value. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:166
msgid ""
"You may be thinking, why not just pass a dictionary of the initial values as"
" data when displaying the form? Well, if you do that, you'll trigger "
"validation, and the HTML output will include any validation errors::"
msgstr ""

#: ../../ref/forms/fields.txt:181
msgid ""
"This is why ``initial`` values are only displayed for unbound forms. For "
"bound forms, the HTML output will use the bound data."
msgstr ""

#: ../../ref/forms/fields.txt:184
msgid ""
"Also note that ``initial`` values are *not* used as \"fallback\" data in "
"validation if a particular field's value is not given. ``initial`` values "
"are *only* intended for initial form display::"
msgstr ""

#: ../../ref/forms/fields.txt:200
msgid "Instead of a constant, you can also pass any callable::"
msgstr ""

#: ../../ref/forms/fields.txt:208
msgid ""
"The callable will be evaluated only when the unbound form is displayed, not "
"when it is defined."
msgstr ""

#: ../../ref/forms/fields.txt:211
msgid "``widget``"
msgstr ""

#: ../../ref/forms/fields.txt:215
msgid ""
"The ``widget`` argument lets you specify a ``Widget`` class to use when "
"rendering this ``Field``. See :doc:`/ref/forms/widgets` for more "
"information."
msgstr ""

#: ../../ref/forms/fields.txt:219 ../../ref/models/fields.txt:260
msgid "``help_text``"
msgstr ""

#: ../../ref/forms/fields.txt:223
msgid ""
"The ``help_text`` argument lets you specify descriptive text for this "
"``Field``. If you provide ``help_text``, it will be displayed next to the "
"``Field`` when the ``Field`` is rendered by one of the convenience ``Form`` "
"methods (e.g., ``as_ul()``)."
msgstr ""

#: ../../ref/forms/fields.txt:228
msgid ""
"Like the model field's :attr:`~django.db.models.Field.help_text`, this value"
" isn't HTML-escaped in automatically-generated forms."
msgstr ""

#: ../../ref/forms/fields.txt:231
msgid ""
"Here's a full example ``Form`` that implements ``help_text`` for two of its "
"fields. We've specified ``auto_id=False`` to simplify the output::"
msgstr ""

#: ../../ref/forms/fields.txt:258 ../../ref/models/fields.txt:243
msgid "``error_messages``"
msgstr ""

#: ../../ref/forms/fields.txt:262
msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override. For example, here is the default error "
"message::"
msgstr ""

#: ../../ref/forms/fields.txt:273
msgid "And here is a custom error message::"
msgstr ""

#: ../../ref/forms/fields.txt:281
msgid ""
"In the `built-in Field classes`_ section below, each ``Field`` defines the "
"error message keys it uses."
msgstr ""

#: ../../ref/forms/fields.txt:285 ../../ref/models/fields.txt:366
msgid "``validators``"
msgstr ""

#: ../../ref/forms/fields.txt:289
msgid ""
"The ``validators`` argument lets you provide a list of validation functions "
"for this field."
msgstr ""

#: ../../ref/forms/fields.txt:292
msgid ""
"See the :doc:`validators documentation </ref/validators>` for more "
"information."
msgstr ""

#: ../../ref/forms/fields.txt:295
msgid "``localize``"
msgstr ""

#: ../../ref/forms/fields.txt:299
msgid ""
"The ``localize`` argument enables the localization of form data input, as "
"well as the rendered output."
msgstr ""

#: ../../ref/forms/fields.txt:302
msgid ""
"See the :ref:`format localization <format-localization>` documentation for "
"more information."
msgstr ""

#: ../../ref/forms/fields.txt:307
msgid "Checking if the field data has changed"
msgstr ""

#: ../../ref/forms/fields.txt:310
msgid "``has_changed()``"
msgstr ""

#: ../../ref/forms/fields.txt:316
msgid "This method was renamed from ``_has_changed()``."
msgstr ""

#: ../../ref/forms/fields.txt:318
msgid ""
"The ``has_changed()`` method is used to determine if the field value has "
"changed from the initial value. Returns ``True`` or ``False``."
msgstr ""

#: ../../ref/forms/fields.txt:321
msgid ""
"See the :class:`Form.has_changed()` documentation for more information."
msgstr ""

#: ../../ref/forms/fields.txt:326
msgid "Built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:328
msgid ""
"Naturally, the ``forms`` library comes with a set of ``Field`` classes that "
"represent common validation needs. This section documents each built-in "
"field."
msgstr ""

#: ../../ref/forms/fields.txt:331
msgid ""
"For each field, we describe the default widget used if you don't specify "
"``widget``. We also specify the value returned when you provide an empty "
"value (see the section on ``required`` above to understand what that means)."
msgstr ""

#: ../../ref/forms/fields.txt:336 ../../ref/models/fields.txt:423
msgid "``BooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:340
msgid "Default widget: :class:`CheckboxInput`"
msgstr ""

#: ../../ref/forms/fields.txt:341
msgid "Empty value: ``False``"
msgstr ""

#: ../../ref/forms/fields.txt:342
msgid "Normalizes to: A Python ``True`` or ``False`` value."
msgstr ""

#: ../../ref/forms/fields.txt:343
msgid ""
"Validates that the value is ``True`` (e.g. the check box is checked) if the "
"field has ``required=True``."
msgstr ""

#: ../../ref/forms/fields.txt:345
msgid "Error message keys: ``required``"
msgstr ""

#: ../../ref/forms/fields.txt:349
msgid ""
"Since all ``Field`` subclasses have ``required=True`` by default, the "
"validation condition here is important. If you want to include a boolean in "
"your form that can be either ``True`` or ``False`` (e.g. a checked or "
"unchecked checkbox), you must remember to pass in ``required=False`` when "
"creating the ``BooleanField``."
msgstr ""

#: ../../ref/forms/fields.txt:356 ../../ref/models/fields.txt:439
msgid "``CharField``"
msgstr ""

#: ../../ref/forms/fields.txt:360 ../../ref/forms/fields.txt:559
#: ../../ref/forms/fields.txt:743 ../../ref/forms/fields.txt:757
#: ../../ref/forms/fields.txt:838 ../../ref/forms/fields.txt:868
#: ../../ref/forms/fields.txt:883 ../../ref/forms/fields.txt:927
#: ../../ref/forms/fields.txt:943 ../../ref/forms/fields.txt:971
msgid "Default widget: :class:`TextInput`"
msgstr ""

#: ../../ref/forms/fields.txt:361 ../../ref/forms/fields.txt:381
#: ../../ref/forms/fields.txt:575 ../../ref/forms/fields.txt:744
#: ../../ref/forms/fields.txt:758 ../../ref/forms/fields.txt:839
#: ../../ref/forms/fields.txt:869 ../../ref/forms/fields.txt:908
#: ../../ref/forms/fields.txt:928 ../../ref/forms/fields.txt:944
#: ../../ref/forms/fields.txt:972
msgid "Empty value: ``''`` (an empty string)"
msgstr ""

#: ../../ref/forms/fields.txt:362 ../../ref/forms/fields.txt:382
#: ../../ref/forms/fields.txt:576 ../../ref/forms/fields.txt:745
#: ../../ref/forms/fields.txt:840 ../../ref/forms/fields.txt:870
#: ../../ref/forms/fields.txt:909 ../../ref/forms/fields.txt:945
msgid "Normalizes to: A Unicode object."
msgstr ""

#: ../../ref/forms/fields.txt:363
msgid ""
"Validates ``max_length`` or ``min_length``, if they are provided. Otherwise,"
" all inputs are valid."
msgstr ""

#: ../../ref/forms/fields.txt:365
msgid "Error message keys: ``required``, ``max_length``, ``min_length``"
msgstr ""

#: ../../ref/forms/fields.txt:367
msgid "Has two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:372
msgid ""
"If provided, these arguments ensure that the string is at most or at least "
"the given length."
msgstr ""

#: ../../ref/forms/fields.txt:376
msgid "``ChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:380 ../../ref/forms/fields.txt:412
#: ../../ref/forms/fields.txt:618 ../../ref/forms/fields.txt:1110
msgid "Default widget: :class:`Select`"
msgstr ""

#: ../../ref/forms/fields.txt:383
msgid "Validates that the given value exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:384 ../../ref/forms/fields.txt:417
#: ../../ref/forms/fields.txt:622 ../../ref/forms/fields.txt:816
#: ../../ref/forms/fields.txt:1114
msgid "Error message keys: ``required``, ``invalid_choice``"
msgstr ""

#: ../../ref/forms/fields.txt:386 ../../ref/forms/fields.txt:797
#: ../../ref/forms/fields.txt:818
msgid ""
"The ``invalid_choice`` error message may contain ``%(value)s``, which will "
"be replaced with the selected choice."
msgstr ""

#: ../../ref/forms/fields.txt:389 ../../ref/forms/fields.txt:950
#: ../../ref/forms/fields.txt:986
msgid "Takes one extra required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:393
msgid ""
"Either an iterable (e.g., a list or tuple) of 2-tuples to use as choices for"
" this field, or a callable that returns such an iterable. This argument "
"accepts the same formats as the ``choices`` argument to a model field. See "
"the :ref:`model field reference documentation on choices <field-choices>` "
"for more details. If the argument is a callable, it is evaluated each time "
"the field's form is initialized."
msgstr ""

#: ../../ref/forms/fields.txt:402
msgid "The ability to pass a callable to ``choices`` was added."
msgstr ""

#: ../../ref/forms/fields.txt:405
msgid "``TypedChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:409
msgid ""
"Just like a :class:`ChoiceField`, except :class:`TypedChoiceField` takes two"
" extra arguments, ``coerce`` and ``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:413 ../../ref/forms/fields.txt:811
msgid "Empty value: Whatever you've given as ``empty_value``"
msgstr ""

#: ../../ref/forms/fields.txt:414
msgid ""
"Normalizes to: A value of the type provided by the ``coerce`` argument."
msgstr ""

#: ../../ref/forms/fields.txt:415
msgid ""
"Validates that the given value exists in the list of choices and can be "
"coerced."
msgstr ""

#: ../../ref/forms/fields.txt:419
msgid "Takes extra arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:423
msgid ""
"A function that takes one argument and returns a coerced value. Examples "
"include the built-in ``int``, ``float``, ``bool`` and other types. Defaults "
"to an identity function. Note that coercion happens after input validation, "
"so it is possible to coerce to a value not present in ``choices``."
msgstr ""

#: ../../ref/forms/fields.txt:431
msgid ""
"The value to use to represent \"empty.\" Defaults to the empty string; "
"``None`` is another common choice here. Note that this value will not be "
"coerced by the function given in the ``coerce`` argument, so choose it "
"accordingly."
msgstr ""

#: ../../ref/forms/fields.txt:437 ../../ref/models/fields.txt:481
msgid "``DateField``"
msgstr ""

#: ../../ref/forms/fields.txt:441
msgid "Default widget: :class:`DateInput`"
msgstr ""

#: ../../ref/forms/fields.txt:442 ../../ref/forms/fields.txt:481
#: ../../ref/forms/fields.txt:521 ../../ref/forms/fields.txt:560
#: ../../ref/forms/fields.txt:591 ../../ref/forms/fields.txt:619
#: ../../ref/forms/fields.txt:663 ../../ref/forms/fields.txt:679
#: ../../ref/forms/fields.txt:717 ../../ref/forms/fields.txt:829
#: ../../ref/forms/fields.txt:884 ../../ref/forms/fields.txt:1057
#: ../../ref/forms/fields.txt:1111
msgid "Empty value: ``None``"
msgstr ""

#: ../../ref/forms/fields.txt:443
msgid "Normalizes to: A Python ``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:444
msgid ""
"Validates that the given value is either a ``datetime.date``, "
"``datetime.datetime`` or string formatted in a particular date format."
msgstr ""

#: ../../ref/forms/fields.txt:446 ../../ref/forms/fields.txt:485
#: ../../ref/forms/fields.txt:579 ../../ref/forms/fields.txt:748
#: ../../ref/forms/fields.txt:762 ../../ref/forms/fields.txt:843
#: ../../ref/forms/fields.txt:888 ../../ref/forms/fields.txt:911
#: ../../ref/forms/fields.txt:930 ../../ref/forms/fields.txt:948
msgid "Error message keys: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:448 ../../ref/forms/fields.txt:487
#: ../../ref/forms/fields.txt:890 ../../ref/forms/widgets.txt:449
#: ../../ref/forms/widgets.txt:536
msgid "Takes one optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:452 ../../ref/forms/fields.txt:1068
msgid ""
"A list of formats used to attempt to convert a string to a valid "
"``datetime.date`` object."
msgstr ""

#: ../../ref/forms/fields.txt:455 ../../ref/forms/fields.txt:494
#: ../../ref/forms/fields.txt:897
msgid ""
"If no ``input_formats`` argument is provided, the default input formats "
"are::"
msgstr ""

#: ../../ref/forms/fields.txt:461
msgid ""
"Additionally, if you specify :setting:`USE_L10N=False<USE_L10N>` in your "
"settings, the following will also be included in the default input formats::"
msgstr ""

#: ../../ref/forms/fields.txt:473 ../../ref/forms/fields.txt:506
msgid "See also :ref:`format localization <format-localization>`."
msgstr ""

#: ../../ref/forms/fields.txt:476 ../../ref/models/fields.txt:531
msgid "``DateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:480
msgid "Default widget: :class:`DateTimeInput`"
msgstr ""

#: ../../ref/forms/fields.txt:482 ../../ref/forms/fields.txt:1058
msgid "Normalizes to: A Python ``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:483
msgid ""
"Validates that the given value is either a ``datetime.datetime``, "
"``datetime.date`` or string formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:491
msgid ""
"A list of formats used to attempt to convert a string to a valid "
"``datetime.datetime`` object."
msgstr ""

#: ../../ref/forms/fields.txt:510
msgid ""
"The ability to use :class:`SplitDateTimeWidget` with ``DateTimeField`` has "
"been deprecated and will be removed in Django 1.9. Use "
":class:`SplitDateTimeField` instead."
msgstr ""

#: ../../ref/forms/fields.txt:515 ../../ref/models/fields.txt:543
msgid "``DecimalField``"
msgstr ""

#: ../../ref/forms/fields.txt:519 ../../ref/forms/fields.txt:661
#: ../../ref/forms/fields.txt:715
msgid ""
"Default widget: :class:`NumberInput` when :attr:`Field.localize` is "
"``False``, else :class:`TextInput`."
msgstr ""

#: ../../ref/forms/fields.txt:522
msgid "Normalizes to: A Python ``decimal``."
msgstr ""

#: ../../ref/forms/fields.txt:523
msgid ""
"Validates that the given value is a decimal. Leading and trailing whitespace"
" is ignored."
msgstr ""

#: ../../ref/forms/fields.txt:525
msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``,"
" ``max_digits``, ``max_decimal_places``, ``max_whole_digits``"
msgstr ""

#: ../../ref/forms/fields.txt:529
msgid ""
"The ``max_value`` and ``min_value`` error messages may contain "
"``%(limit_value)s``, which will be substituted by the appropriate limit. "
"Similarly, the ``max_digits``, ``max_decimal_places`` and "
"``max_whole_digits`` error messages may contain ``%(max)s``."
msgstr ""

#: ../../ref/forms/fields.txt:534
msgid "Takes four optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:539
msgid ""
"These control the range of values permitted in the field, and should be "
"given as ``decimal.Decimal`` values."
msgstr ""

#: ../../ref/forms/fields.txt:544
msgid ""
"The maximum number of digits (those before the decimal point plus those "
"after the decimal point, with leading zeros stripped) permitted in the "
"value."
msgstr ""

#: ../../ref/forms/fields.txt:550
msgid "The maximum number of decimal places permitted."
msgstr ""

#: ../../ref/forms/fields.txt:553 ../../ref/models/fields.txt:580
msgid "``DurationField``"
msgstr ""

#: ../../ref/forms/fields.txt:561
msgid "Normalizes to: A Python :class:`~python:datetime.timedelta`."
msgstr ""

#: ../../ref/forms/fields.txt:562
msgid ""
"Validates that the given value is a string which can be converted into a "
"``timedelta``."
msgstr ""

#: ../../ref/forms/fields.txt:564
msgid "Error message keys: ``required``, ``invalid``."
msgstr ""

#: ../../ref/forms/fields.txt:566
msgid ""
"Accepts any format understood by "
":func:`~django.utils.dateparse.parse_duration`."
msgstr ""

#: ../../ref/forms/fields.txt:570 ../../ref/models/fields.txt:598
msgid "``EmailField``"
msgstr ""

#: ../../ref/forms/fields.txt:574
msgid "Default widget: :class:`EmailInput`"
msgstr ""

#: ../../ref/forms/fields.txt:577
msgid ""
"Validates that the given value is a valid email address, using a moderately "
"complex regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:581
msgid ""
"Has two optional arguments for validation, ``max_length`` and "
"``min_length``. If provided, these arguments ensure that the string is at "
"most or at least the given length."
msgstr ""

#: ../../ref/forms/fields.txt:586 ../../ref/models/fields.txt:611
msgid "``FileField``"
msgstr ""

#: ../../ref/forms/fields.txt:590 ../../ref/forms/fields.txt:678
msgid "Default widget: :class:`ClearableFileInput`"
msgstr ""

#: ../../ref/forms/fields.txt:592 ../../ref/forms/fields.txt:680
msgid ""
"Normalizes to: An ``UploadedFile`` object that wraps the file content and "
"file name into a single object."
msgstr ""

#: ../../ref/forms/fields.txt:594
msgid "Can validate that non-empty file data has been bound to the form."
msgstr ""

#: ../../ref/forms/fields.txt:595
msgid ""
"Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, "
"``max_length``"
msgstr ""

#: ../../ref/forms/fields.txt:598
msgid ""
"Has two optional arguments for validation, ``max_length`` and "
"``allow_empty_file``. If provided, these ensure that the file name is at "
"most the given length, and that validation will succeed even if the file "
"content is empty."
msgstr ""

#: ../../ref/forms/fields.txt:603
msgid ""
"To learn more about the ``UploadedFile`` object, see the :doc:`file uploads "
"documentation </topics/http/file-uploads>`."
msgstr ""

#: ../../ref/forms/fields.txt:606
msgid ""
"When you use a ``FileField`` in a form, you must also remember to :ref:`bind"
" the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:609
msgid ""
"The ``max_length`` error refers to the length of the filename. In the error "
"message for that key, ``%(max)d`` will be replaced with the maximum filename"
" length and ``%(length)d`` will be replaced with the current filename "
"length."
msgstr ""

#: ../../ref/forms/fields.txt:614 ../../ref/models/fields.txt:809
msgid "``FilePathField``"
msgstr ""

#: ../../ref/forms/fields.txt:620
msgid "Normalizes to: A unicode object"
msgstr ""

#: ../../ref/forms/fields.txt:621
msgid "Validates that the selected choice exists in the list of choices."
msgstr ""

#: ../../ref/forms/fields.txt:624
msgid ""
"The field allows choosing from files inside a certain directory. It takes "
"three extra arguments; only ``path`` is required:"
msgstr ""

#: ../../ref/forms/fields.txt:629
msgid ""
"The absolute path to the directory whose contents you want listed. This "
"directory must exist."
msgstr ""

#: ../../ref/forms/fields.txt:634
msgid ""
"If ``False`` (the default) only the direct contents of ``path`` will be "
"offered as choices. If ``True``, the directory will be descended into "
"recursively and all descendants will be listed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:640
msgid ""
"A regular expression pattern; only files with names matching this expression"
" will be allowed as choices."
msgstr ""

#: ../../ref/forms/fields.txt:645
msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or "
":attr:`allow_folders` must be ``True``."
msgstr ""

#: ../../ref/forms/fields.txt:651
msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`allow_files` must be ``True``."
msgstr ""

#: ../../ref/forms/fields.txt:657 ../../ref/models/fields.txt:862
msgid "``FloatField``"
msgstr ""

#: ../../ref/forms/fields.txt:664
msgid "Normalizes to: A Python float."
msgstr ""

#: ../../ref/forms/fields.txt:665
msgid ""
"Validates that the given value is a float. Leading and trailing whitespace "
"is allowed, as in Python's ``float()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:667 ../../ref/forms/fields.txt:721
msgid ""
"Error message keys: ``required``, ``invalid``, ``max_value``, ``min_value``"
msgstr ""

#: ../../ref/forms/fields.txt:670
msgid ""
"Takes two optional arguments for validation, ``max_value`` and "
"``min_value``. These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:674 ../../ref/models/fields.txt:884
msgid "``ImageField``"
msgstr ""

#: ../../ref/forms/fields.txt:682
msgid ""
"Validates that file data has been bound to the form, and that the file is of"
" an image format understood by Pillow."
msgstr ""

#: ../../ref/forms/fields.txt:684
msgid ""
"Error message keys: ``required``, ``invalid``, ``missing``, ``empty``, "
"``invalid_image``"
msgstr ""

#: ../../ref/forms/fields.txt:687
msgid ""
"Using an ``ImageField`` requires that `Pillow`_ is installed with support "
"for the image formats you use. If you encounter a ``corrupt image`` error "
"when you upload an image, it usually means that Pillow doesn't understand "
"its format. To fix this, install the appropriate library and reinstall "
"Pillow."
msgstr ""

#: ../../ref/forms/fields.txt:693
msgid ""
"When you use an ``ImageField`` on a form, you must also remember to "
":ref:`bind the file data to the form <binding-uploaded-files>`."
msgstr ""

#: ../../ref/forms/fields.txt:696
msgid ""
"After the field has been cleaned and validated, the ``UploadedFile`` object "
"will have an additional ``image`` attribute containing the Pillow `Image`_ "
"instance used to check if the file was a valid image. Also, "
"``UploadedFile.content_type`` will be updated with the image's content type "
"if Pillow can determine it, otherwise it will be set to ``None``."
msgstr ""

#: ../../ref/forms/fields.txt:704
msgid ""
"The ``image`` and ``content_type`` attributes described in the last "
"paragraph were added."
msgstr ""

#: ../../ref/forms/fields.txt:711 ../../ref/models/fields.txt:919
msgid "``IntegerField``"
msgstr ""

#: ../../ref/forms/fields.txt:718
msgid "Normalizes to: A Python integer or long integer."
msgstr ""

#: ../../ref/forms/fields.txt:719
msgid ""
"Validates that the given value is an integer. Leading and trailing "
"whitespace is allowed, as in Python's ``int()`` function."
msgstr ""

#: ../../ref/forms/fields.txt:724
msgid ""
"The ``max_value`` and ``min_value`` error messages may contain "
"``%(limit_value)s``, which will be substituted by the appropriate limit."
msgstr ""

#: ../../ref/forms/fields.txt:727
msgid "Takes two optional arguments for validation:"
msgstr ""

#: ../../ref/forms/fields.txt:732
msgid "These control the range of values permitted in the field."
msgstr ""

#: ../../ref/forms/fields.txt:735 ../../ref/models/fields.txt:929
msgid "``IPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:739
msgid ""
"This field has been deprecated in favor of "
":class:`~django.forms.GenericIPAddressField`."
msgstr ""

#: ../../ref/forms/fields.txt:746
msgid ""
"Validates that the given value is a valid IPv4 address, using a regular "
"expression."
msgstr ""

#: ../../ref/forms/fields.txt:751 ../../ref/models/fields.txt:941
msgid "``GenericIPAddressField``"
msgstr ""

#: ../../ref/forms/fields.txt:755
msgid "A field containing either an IPv4 or an IPv6 address."
msgstr ""

#: ../../ref/forms/fields.txt:759
msgid ""
"Normalizes to: A Unicode object. IPv6 addresses are normalized as described "
"below."
msgstr ""

#: ../../ref/forms/fields.txt:761
msgid "Validates that the given value is a valid IP address."
msgstr ""

#: ../../ref/forms/fields.txt:764 ../../ref/models/fields.txt:949
msgid ""
"The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, "
"including using the IPv4 format suggested in paragraph 3 of that section, "
"like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized"
" to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All "
"characters are converted to lowercase."
msgstr ""

#: ../../ref/forms/fields.txt:770 ../../ref/forms/fields.txt:1064
msgid "Takes two optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:774
msgid ""
"Limits valid inputs to the specified protocol. Accepted values are ``both`` "
"(default), ``IPv4`` or ``IPv6``. Matching is case insensitive."
msgstr ""

#: ../../ref/forms/fields.txt:780 ../../ref/models/fields.txt:963
msgid ""
"Unpacks IPv4 mapped addresses like ``::ffff:192.0.2.1``. If this option is "
"enabled that address would be unpacked to ``192.0.2.1``. Default is "
"disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""

#: ../../ref/forms/fields.txt:786
msgid "``MultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:790 ../../ref/forms/fields.txt:810
#: ../../ref/forms/fields.txt:1203
msgid "Default widget: :class:`SelectMultiple`"
msgstr ""

#: ../../ref/forms/fields.txt:791
msgid "Empty value: ``[]`` (an empty list)"
msgstr ""

#: ../../ref/forms/fields.txt:792
msgid "Normalizes to: A list of Unicode objects."
msgstr ""

#: ../../ref/forms/fields.txt:793
msgid ""
"Validates that every value in the given list of values exists in the list of"
" choices."
msgstr ""

#: ../../ref/forms/fields.txt:795
msgid "Error message keys: ``required``, ``invalid_choice``, ``invalid_list``"
msgstr ""

#: ../../ref/forms/fields.txt:800
msgid ""
"Takes one extra required argument, ``choices``, as for ``ChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:803
msgid "``TypedMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:807
msgid ""
"Just like a :class:`MultipleChoiceField`, except "
":class:`TypedMultipleChoiceField` takes two extra arguments, ``coerce`` and "
"``empty_value``."
msgstr ""

#: ../../ref/forms/fields.txt:812
msgid ""
"Normalizes to: A list of values of the type provided by the ``coerce`` "
"argument."
msgstr ""

#: ../../ref/forms/fields.txt:814
msgid ""
"Validates that the given values exists in the list of choices and can be "
"coerced."
msgstr ""

#: ../../ref/forms/fields.txt:821
msgid ""
"Takes two extra arguments, ``coerce`` and ``empty_value``, as for "
"``TypedChoiceField``."
msgstr ""

#: ../../ref/forms/fields.txt:824 ../../ref/models/fields.txt:972
msgid "``NullBooleanField``"
msgstr ""

#: ../../ref/forms/fields.txt:828
msgid "Default widget: :class:`NullBooleanSelect`"
msgstr ""

#: ../../ref/forms/fields.txt:830
msgid "Normalizes to: A Python ``True``, ``False`` or ``None`` value."
msgstr ""

#: ../../ref/forms/fields.txt:831
msgid "Validates nothing (i.e., it never raises a ``ValidationError``)."
msgstr ""

#: ../../ref/forms/fields.txt:834
msgid "``RegexField``"
msgstr ""

#: ../../ref/forms/fields.txt:841
msgid ""
"Validates that the given value matches against a certain regular expression."
msgstr ""

#: ../../ref/forms/fields.txt:845
msgid "Takes one required argument:"
msgstr ""

#: ../../ref/forms/fields.txt:849
msgid ""
"A regular expression specified either as a string or a compiled regular "
"expression object."
msgstr ""

#: ../../ref/forms/fields.txt:852
msgid ""
"Also takes ``max_length`` and ``min_length``, which work just as they do for"
" ``CharField``."
msgstr ""

#: ../../ref/forms/fields.txt:857
msgid ""
"The optional argument ``error_message`` is also accepted for backwards "
"compatibility but will be removed in Django 1.10. The preferred way to "
"provide an error message is to use the :attr:`~Field.error_messages` "
"argument, passing a dictionary with ``'invalid'`` as a key and the error "
"message as the value."
msgstr ""

#: ../../ref/forms/fields.txt:864 ../../ref/models/fields.txt:999
msgid "``SlugField``"
msgstr ""

#: ../../ref/forms/fields.txt:871
msgid ""
"Validates that the given value contains only letters, numbers, underscores, "
"and hyphens."
msgstr ""

#: ../../ref/forms/fields.txt:873
msgid "Error messages: ``required``, ``invalid``"
msgstr ""

#: ../../ref/forms/fields.txt:875
msgid ""
"This field is intended for use in representing a model "
":class:`~django.db.models.SlugField` in forms."
msgstr ""

#: ../../ref/forms/fields.txt:879 ../../ref/models/fields.txt:1050
msgid "``TimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:885
msgid "Normalizes to: A Python ``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:886
msgid ""
"Validates that the given value is either a ``datetime.time`` or string "
"formatted in a particular time format."
msgstr ""

#: ../../ref/forms/fields.txt:894 ../../ref/forms/fields.txt:1076
msgid ""
"A list of formats used to attempt to convert a string to a valid "
"``datetime.time`` object."
msgstr ""

#: ../../ref/forms/fields.txt:903 ../../ref/models/fields.txt:1061
msgid "``URLField``"
msgstr ""

#: ../../ref/forms/fields.txt:907
msgid "Default widget: :class:`URLInput`"
msgstr ""

#: ../../ref/forms/fields.txt:910
msgid "Validates that the given value is a valid URL."
msgstr ""

#: ../../ref/forms/fields.txt:913
msgid "Takes the following optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:918
msgid ""
"These are the same as ``CharField.max_length`` and ``CharField.min_length``."
msgstr ""

#: ../../ref/forms/fields.txt:921 ../../ref/models/fields.txt:1074
msgid "``UUIDField``"
msgstr ""

#: ../../ref/forms/fields.txt:929
msgid "Normalizes to: A :class:`~python:uuid.UUID` object."
msgstr ""

#: ../../ref/forms/fields.txt:932
msgid ""
"This field will accept any string format accepted as the ``hex`` argument to"
" the :class:`~python:uuid.UUID` constructor."
msgstr ""

#: ../../ref/forms/fields.txt:936
msgid "Slightly complex built-in ``Field`` classes"
msgstr ""

#: ../../ref/forms/fields.txt:939
msgid "``ComboField``"
msgstr ""

#: ../../ref/forms/fields.txt:946
msgid ""
"Validates the given value against each of the fields specified as an "
"argument to the ``ComboField``."
msgstr ""

#: ../../ref/forms/fields.txt:954
msgid ""
"The list of fields that should be used to validate the field's value (in the"
" order in which they are provided)."
msgstr ""

#: ../../ref/forms/fields.txt:967
msgid "``MultiValueField``"
msgstr ""

#: ../../ref/forms/fields.txt:973
msgid ""
"Normalizes to: the type returned by the ``compress`` method of the subclass."
msgstr ""

#: ../../ref/forms/fields.txt:974
msgid ""
"Validates the given value against each of the fields specified as an "
"argument to the ``MultiValueField``."
msgstr ""

#: ../../ref/forms/fields.txt:976
msgid "Error message keys: ``required``, ``invalid``, ``incomplete``"
msgstr ""

#: ../../ref/forms/fields.txt:978
msgid ""
"Aggregates the logic of multiple fields that together produce a single "
"value."
msgstr ""

#: ../../ref/forms/fields.txt:981
msgid ""
"This field is abstract and must be subclassed. In contrast with the single-"
"value fields, subclasses of :class:`MultiValueField` must not implement "
":meth:`~django.forms.Field.clean` but instead - implement "
":meth:`~MultiValueField.compress`."
msgstr ""

#: ../../ref/forms/fields.txt:990
msgid ""
"A tuple of fields whose values are cleaned and subsequently combined into a "
"single value.  Each value of the field is cleaned by the corresponding field"
" in ``fields`` -- the first value is cleaned by the first field, the second "
"value is cleaned by the second field, etc. Once all fields are cleaned, the "
"list of clean values is combined into a single value by "
":meth:`~MultiValueField.compress`."
msgstr ""

#: ../../ref/forms/fields.txt:997
msgid "Also takes one extra optional argument:"
msgstr ""

#: ../../ref/forms/fields.txt:1003
msgid ""
"Defaults to ``True``, in which case a ``required`` validation error will be "
"raised if no value is supplied for any field."
msgstr ""

#: ../../ref/forms/fields.txt:1006
msgid ""
"When set to ``False``, the :attr:`Field.required` attribute can be set to "
"``False`` for individual fields to make them optional. If no value is "
"supplied for a required field, an ``incomplete`` validation error will be "
"raised."
msgstr ""

#: ../../ref/forms/fields.txt:1011
msgid ""
"A default ``incomplete`` error message can be defined on the "
":class:`MultiValueField` subclass, or different messages can be defined on "
"each individual field. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:1038
msgid ""
"Must be a subclass of :class:`django.forms.MultiWidget`. Default value is "
":class:`~django.forms.TextInput`, which probably is not very useful in this "
"case."
msgstr ""

#: ../../ref/forms/fields.txt:1044
msgid ""
"Takes a list of valid values and returns  a \"compressed\" version of those "
"values -- in a single value. For example, :class:`SplitDateTimeField` is a "
"subclass which combines a time field and a date field into a ``datetime`` "
"object."
msgstr ""

#: ../../ref/forms/fields.txt:1049
msgid "This method must be implemented in the subclasses."
msgstr ""

#: ../../ref/forms/fields.txt:1052
msgid "``SplitDateTimeField``"
msgstr ""

#: ../../ref/forms/fields.txt:1056
msgid "Default widget: :class:`SplitDateTimeWidget`"
msgstr ""

#: ../../ref/forms/fields.txt:1059
msgid ""
"Validates that the given value is a ``datetime.datetime`` or string "
"formatted in a particular datetime format."
msgstr ""

#: ../../ref/forms/fields.txt:1061
msgid ""
"Error message keys: ``required``, ``invalid``, ``invalid_date``, "
"``invalid_time``"
msgstr ""

#: ../../ref/forms/fields.txt:1071
msgid ""
"If no ``input_date_formats`` argument is provided, the default input formats"
" for ``DateField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:1079
msgid ""
"If no ``input_time_formats`` argument is provided, the default input formats"
" for ``TimeField`` are used."
msgstr ""

#: ../../ref/forms/fields.txt:1083
msgid "Fields which handle relationships"
msgstr ""

#: ../../ref/forms/fields.txt:1085
msgid ""
"Two fields are available for representing relationships between models: "
":class:`ModelChoiceField` and :class:`ModelMultipleChoiceField`.  Both of "
"these fields require a single ``queryset`` parameter that is used to create "
"the choices for the field.  Upon form validation, these fields will place "
"either one model object (in the case of ``ModelChoiceField``) or multiple "
"model objects (in the case of ``ModelMultipleChoiceField``) into the "
"``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/fields.txt:1094
msgid ""
"For more complex uses, you can specify ``queryset=None`` when declaring the "
"form field and then populate the ``queryset`` in the form's ``__init__()`` "
"method::"
msgstr ""

#: ../../ref/forms/fields.txt:1106
msgid "``ModelChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:1112
msgid "Normalizes to: A model instance."
msgstr ""

#: ../../ref/forms/fields.txt:1113
msgid "Validates that the given id exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:1116
msgid ""
"Allows the selection of a single model object, suitable for representing a "
"foreign key. Note that the default widget for ``ModelChoiceField`` becomes "
"impractical when the number of entries increases. You should avoid using it "
"for more than 100 items."
msgstr ""

#: ../../ref/forms/fields.txt:1121
msgid "A single argument is required:"
msgstr ""

#: ../../ref/forms/fields.txt:1125 ../../ref/forms/fields.txt:1222
msgid ""
"A ``QuerySet`` of model objects from which the choices for the field will be"
" derived, and which will be used to validate the user's selection."
msgstr ""

#: ../../ref/forms/fields.txt:1129
msgid "``ModelChoiceField`` also takes two optional arguments:"
msgstr ""

#: ../../ref/forms/fields.txt:1133
msgid ""
"By default the ``<select>`` widget used by ``ModelChoiceField`` will have an"
" empty choice at the top of the list. You can change the text of this label "
"(which is ``\"---------\"`` by default) with the ``empty_label`` attribute, "
"or you can disable the empty label entirely by setting ``empty_label`` to "
"``None``::"
msgstr ""

#: ../../ref/forms/fields.txt:1145
msgid ""
"Note that if a ``ModelChoiceField`` is required and has a default initial "
"value, no empty choice is created (regardless of the value of "
"``empty_label``)."
msgstr ""

#: ../../ref/forms/fields.txt:1151
msgid ""
"This optional argument is used to specify the field to use as the value of "
"the choices in the field's widget. Be sure it's a unique field for the "
"model, otherwise the selected value could match more than one object. By "
"default it is set to ``None``, in which case the primary key of each object "
"will be used. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:1160 ../../ref/forms/fields.txt:1175
msgid "would yield:"
msgstr ""

#: ../../ref/forms/fields.txt:1170 ../../ref/models/querysets.txt:1647
msgid "and::"
msgstr ""

#: ../../ref/forms/fields.txt:1185
msgid ""
"The ``__str__`` (``__unicode__`` on Python 2) method of the model will be "
"called to generate string representations of the objects for use in the "
"field's choices; to provide customized representations, subclass "
"``ModelChoiceField`` and override ``label_from_instance``. This method will "
"receive a model object, and should return a string suitable for representing"
" it. For example::"
msgstr ""

#: ../../ref/forms/fields.txt:1199
msgid "``ModelMultipleChoiceField``"
msgstr ""

#: ../../ref/forms/fields.txt:1204
msgid "Empty value: An empty ``QuerySet`` (self.queryset.none())"
msgstr ""

#: ../../ref/forms/fields.txt:1205
msgid "Normalizes to: A ``QuerySet`` of model instances."
msgstr ""

#: ../../ref/forms/fields.txt:1206
msgid ""
"Validates that every id in the given list of values exists in the queryset."
msgstr ""

#: ../../ref/forms/fields.txt:1208
msgid ""
"Error message keys: ``required``, ``list``, ``invalid_choice``, "
"``invalid_pk_value``"
msgstr ""

#: ../../ref/forms/fields.txt:1211
msgid ""
"The ``invalid_choice`` message may contain ``%(value)s`` and the "
"``invalid_pk_value`` message may contain ``%(pk)s``, which will be "
"substituted by the appropriate values."
msgstr ""

#: ../../ref/forms/fields.txt:1215
msgid ""
"Allows the selection of one or more model objects, suitable for representing"
" a many-to-many relation. As with :class:`ModelChoiceField`, you can use "
"``label_from_instance`` to customize the object representations, and "
"``queryset`` is a required parameter:"
msgstr ""

#: ../../ref/forms/fields.txt:1227
msgid "Creating custom fields"
msgstr ""

#: ../../ref/forms/fields.txt:1229
msgid ""
"If the built-in ``Field`` classes don't meet your needs, you can easily "
"create custom ``Field`` classes. To do this, just create a subclass of "
"``django.forms.Field``. Its only requirements are that it implement a "
"``clean()`` method and that its ``__init__()`` method accept the core "
"arguments mentioned above (``required``, ``label``, ``initial``, ``widget``,"
" ``help_text``)."
msgstr ""

#: ../../ref/forms/formsets.txt:3
msgid "Formset Functions"
msgstr ""

#: ../../ref/forms/formsets.txt:5
msgid ""
"Formset API reference. For introductory material about formsets, see the "
":doc:`/topics/forms/formsets` topic guide."
msgstr ""

#: ../../ref/forms/formsets.txt:13
msgid "Returns a ``FormSet`` class for the given ``form`` class."
msgstr ""

#: ../../ref/forms/formsets.txt:15
msgid "See :ref:`formsets` for example usage."
msgstr ""

#: ../../ref/forms/formsets.txt:19
msgid "The ``min_num`` and ``validate_min`` parameters were added."
msgstr ""

#: ../../ref/forms/index.txt:3
msgid "Forms"
msgstr ""

#: ../../ref/forms/index.txt:5
msgid ""
"Detailed form API reference. For introductory material, see the "
":doc:`/topics/forms/index` topic guide."
msgstr ""

#: ../../ref/forms/models.txt:3
msgid "Model Form Functions"
msgstr ""

#: ../../ref/forms/models.txt:5
msgid ""
"Model Form API reference. For introductory material about model forms, see "
"the :doc:`/topics/forms/modelforms` topic guide."
msgstr ""

#: ../../ref/forms/models.txt:13
msgid ""
"Returns a :class:`~django.forms.ModelForm` class for the given ``model``. "
"You can optionally pass a ``form`` argument to use as a starting point for "
"constructing the ``ModelForm``."
msgstr ""

#: ../../ref/forms/models.txt:17
msgid ""
"``fields`` is an optional list of field names. If provided, only the named "
"fields will be included in the returned fields."
msgstr ""

#: ../../ref/forms/models.txt:20
msgid ""
"``exclude`` is an optional list of field names. If provided, the named "
"fields will be excluded from the returned fields, even if they are listed in"
" the ``fields`` argument."
msgstr ""

#: ../../ref/forms/models.txt:24
msgid "``widgets`` is a dictionary of model field names mapped to a widget."
msgstr ""

#: ../../ref/forms/models.txt:26
msgid ""
"``formfield_callback`` is a callable that takes a model field and returns a "
"form field."
msgstr ""

#: ../../ref/forms/models.txt:29
msgid ""
"``localized_fields`` is a list of names of fields which should be localized."
msgstr ""

#: ../../ref/forms/models.txt:31
msgid "``labels`` is a dictionary of model field names mapped to a label."
msgstr ""

#: ../../ref/forms/models.txt:33
msgid ""
"``help_texts`` is a dictionary of model field names mapped to a help text."
msgstr ""

#: ../../ref/forms/models.txt:35
msgid ""
"``error_messages`` is a dictionary of model field names mapped to a "
"dictionary of error messages."
msgstr ""

#: ../../ref/forms/models.txt:38
msgid "See :ref:`modelforms-factory` for example usage."
msgstr ""

#: ../../ref/forms/models.txt:40
msgid ""
"You must provide the list of fields explicitly, either via keyword arguments"
" ``fields`` or ``exclude``, or the corresponding attributes on the form's "
"inner ``Meta`` class. See :ref:`modelforms-selecting-fields` for more "
"information. Omitting any definition of the fields to use will result in an "
":exc:`~django.core.exceptions.ImproperlyConfigured` exception."
msgstr ""

#: ../../ref/forms/models.txt:48
msgid ""
"Previously, omitting the list of fields was allowed and resulted in a form "
"with all fields of the model."
msgstr ""

#: ../../ref/forms/models.txt:53
msgid "Returns a ``FormSet`` class for the given ``model`` class."
msgstr ""

#: ../../ref/forms/models.txt:55
msgid ""
"Arguments ``model``, ``form``, ``fields``, ``exclude``, "
"``formfield_callback``, ``widgets``, ``localized_fields``, ``labels``, "
"``help_texts``, and ``error_messages`` are all passed through to "
":func:`~django.forms.models.modelform_factory`."
msgstr ""

#: ../../ref/forms/models.txt:60
msgid ""
"Arguments ``formset``, ``extra``, ``max_num``, ``can_order``, ``can_delete``"
" and ``validate_max`` are passed through to "
":func:`~django.forms.formsets.formset_factory`. See :ref:`formsets` for "
"details."
msgstr ""

#: ../../ref/forms/models.txt:65
msgid "See :ref:`model-formsets` for example usage."
msgstr ""

#: ../../ref/forms/models.txt:69
msgid ""
"Returns an ``InlineFormSet`` using :func:`modelformset_factory` with "
"defaults of ``formset=``:class:`~django.forms.models.BaseInlineFormSet`, "
"``can_delete=True``, and ``extra=3``."
msgstr ""

#: ../../ref/forms/models.txt:73
msgid ""
"If your model has more than one :class:`~django.db.models.ForeignKey` to the"
" ``parent_model``, you must specify a ``fk_name``."
msgstr ""

#: ../../ref/forms/models.txt:76
msgid "See :ref:`inline-formsets` for example usage."
msgstr ""

#: ../../ref/forms/validation.txt:6
msgid "Form and field validation"
msgstr ""

#: ../../ref/forms/validation.txt:8
msgid ""
"Form validation happens when the data is cleaned. If you want to customize "
"this process, there are various places to make changes, each one serving a "
"different purpose. Three types of cleaning methods are run during form "
"processing. These are normally executed when you call the ``is_valid()`` "
"method on a form. There are other things that can also trigger cleaning and "
"validation (accessing the ``errors`` attribute or calling ``full_clean()`` "
"directly), but normally they won't be needed."
msgstr ""

#: ../../ref/forms/validation.txt:16
msgid ""
"In general, any cleaning method can raise ``ValidationError`` if there is a "
"problem with the data it is processing, passing the relevant information to "
"the ``ValidationError`` constructor. :ref:`See below <raising-validation-"
"error>` for the best practice in raising ``ValidationError``. If no "
"``ValidationError`` is raised, the method should return the cleaned "
"(normalized) data as a Python object."
msgstr ""

#: ../../ref/forms/validation.txt:23
msgid ""
"Most validation can be done using `validators`_ - simple helpers that can be"
" reused easily. Validators are simple functions (or callables) that take a "
"single argument and raise ``ValidationError`` on invalid input. Validators "
"are run after the field's ``to_python`` and ``validate`` methods have been "
"called."
msgstr ""

#: ../../ref/forms/validation.txt:28
msgid ""
"Validation of a form is split into several steps, which can be customized or"
" overridden:"
msgstr ""

#: ../../ref/forms/validation.txt:31
msgid ""
"The ``to_python()`` method on a ``Field`` is the first step in every "
"validation. It coerces the value to a correct datatype and raises "
"``ValidationError`` if that is not possible. This method accepts the raw "
"value from the widget and returns the converted value. For example, a "
"``FloatField`` will turn the data into a Python ``float`` or raise a "
"``ValidationError``."
msgstr ""

#: ../../ref/forms/validation.txt:38
msgid ""
"The ``validate()`` method on a ``Field`` handles field-specific validation "
"that is not suitable for a validator. It takes a value that has been coerced"
" to a correct datatype and raises ``ValidationError`` on any error. This "
"method does not return anything and shouldn't alter the value. You should "
"override it to handle validation logic that you can't or don't want to put "
"in a validator."
msgstr ""

#: ../../ref/forms/validation.txt:45
msgid ""
"The ``run_validators()`` method on a ``Field`` runs all of the field's "
"validators and aggregates all the errors into a single ``ValidationError``. "
"You shouldn't need to override this method."
msgstr ""

#: ../../ref/forms/validation.txt:49
msgid ""
"The ``clean()`` method on a ``Field`` subclass is responsible for running "
"``to_python()``, ``validate()``, and ``run_validators()`` in the correct "
"order and propagating their errors. If, at any time, any of the methods "
"raise ``ValidationError``, the validation stops and that error is raised. "
"This method returns the clean data, which is then inserted into the "
"``cleaned_data`` dictionary of the form."
msgstr ""

#: ../../ref/forms/validation.txt:56
msgid ""
"The ``clean_<fieldname>()`` method is called on a form subclass -- where "
"``<fieldname>`` is replaced with the name of the form field attribute. This "
"method does any cleaning that is specific to that particular attribute, "
"unrelated to the type of field that it is. This method is not passed any "
"parameters. You will need to look up the value of the field in "
"``self.cleaned_data`` and remember that it will be a Python object at this "
"point, not the original string submitted in the form (it will be in "
"``cleaned_data`` because the general field ``clean()`` method, above, has "
"already cleaned the data once)."
msgstr ""

#: ../../ref/forms/validation.txt:66
msgid ""
"For example, if you wanted to validate that the contents of a ``CharField`` "
"called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the "
"right place to do this. You don't need a specific field (it's just a "
"``CharField``), but you want a formfield-specific piece of validation and, "
"possibly, cleaning/normalizing the data."
msgstr ""

#: ../../ref/forms/validation.txt:73
msgid ""
"This method should return the cleaned value obtained from ``cleaned_data``, "
"regardless of whether it changed anything or not."
msgstr ""

#: ../../ref/forms/validation.txt:76
msgid ""
"The form subclass's ``clean()`` method can perform validation that requires "
"access to multiple form fields. This is where you might put in checks such "
"as \"if field ``A`` is supplied, field ``B`` must contain a valid email "
"address\". This method can return a completely different dictionary if it "
"wishes, which will be used as the ``cleaned_data``."
msgstr ""

#: ../../ref/forms/validation.txt:82
msgid ""
"Since the field validation methods have been run by the time ``clean()`` is "
"called, you also have access to the form's ``errors`` attribute which "
"contains all the errors raised by cleaning of individual fields."
msgstr ""

#: ../../ref/forms/validation.txt:86
msgid ""
"Note that any errors raised by your :meth:`Form.clean()` override will not "
"be associated with any field in particular. They go into a special \"field\""
" (called ``__all__``), which you can access via the "
":meth:`~django.forms.Form.non_field_errors` method if you need to. If you "
"want to attach errors to a specific field in the form, you need to call "
":meth:`~django.forms.Form.add_error()`."
msgstr ""

#: ../../ref/forms/validation.txt:93
msgid ""
"Also note that there are special considerations when overriding the "
"``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm "
"documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""

#: ../../ref/forms/validation.txt:98
msgid ""
"These methods are run in the order given above, one field at a time.  That "
"is, for each field in the form (in the order they are declared in the form "
"definition), the ``Field.clean()`` method (or its override) is run, then "
"``clean_<fieldname>()``. Finally, once those two methods are run for every "
"field, the :meth:`Form.clean()` method, or its override, is executed whether"
" or not the previous methods have raised errors."
msgstr ""

#: ../../ref/forms/validation.txt:105
msgid "Examples of each of these methods are provided below."
msgstr ""

#: ../../ref/forms/validation.txt:107
msgid ""
"As mentioned, any of these methods can raise a ``ValidationError``. For any "
"field, if the ``Field.clean()`` method raises a ``ValidationError``, any "
"field-specific cleaning method is not called. However, the cleaning methods "
"for all remaining fields are still executed."
msgstr ""

#: ../../ref/forms/validation.txt:115
msgid "Raising ``ValidationError``"
msgstr ""

#: ../../ref/forms/validation.txt:117
msgid ""
"In order to make error messages flexible and easy to override, consider the "
"following guidelines:"
msgstr ""

#: ../../ref/forms/validation.txt:120
msgid "Provide a descriptive error ``code`` to the constructor::"
msgstr ""

#: ../../ref/forms/validation.txt:128
msgid ""
"Don't coerce variables into the message; use placeholders and the ``params``"
" argument of the constructor::"
msgstr ""

#: ../../ref/forms/validation.txt:140
msgid ""
"Use mapping keys instead of positional formatting. This enables putting the "
"variables in any order or omitting them altogether when rewriting the "
"message::"
msgstr ""

#: ../../ref/forms/validation.txt:156
msgid "Wrap the message with ``gettext`` to enable translation::"
msgstr ""

#: ../../ref/forms/validation.txt:164
msgid "Putting it all together::"
msgstr ""

#: ../../ref/forms/validation.txt:172
msgid ""
"Following these guidelines is particularly necessary if you write reusable "
"forms, form fields, and model fields."
msgstr ""

#: ../../ref/forms/validation.txt:175
msgid ""
"While not recommended, if you are at the end of the validation chain (i.e. "
"your form ``clean()`` method) and you know you will *never* need to override"
" your error message you can still opt for the less verbose::"
msgstr ""

#: ../../ref/forms/validation.txt:183
msgid ""
"The :meth:`Form.errors.as_data() <django.forms.Form.errors.as_data()>` and "
":meth:`Form.errors.as_json() <django.forms.Form.errors.as_json()>` methods "
"greatly benefit from fully featured ``ValidationError``\\s (with a ``code`` "
"name and a ``params`` dictionary)."
msgstr ""

#: ../../ref/forms/validation.txt:189
msgid "Raising multiple errors"
msgstr ""

#: ../../ref/forms/validation.txt:191
msgid ""
"If you detect multiple errors during a cleaning method and wish to signal "
"all of them to the form submitter, it is possible to pass a list of errors "
"to the ``ValidationError`` constructor."
msgstr ""

#: ../../ref/forms/validation.txt:195
msgid ""
"As above, it is recommended to pass a list of ``ValidationError`` instances "
"with ``code``\\s and ``params`` but a list of strings will also work::"
msgstr ""

#: ../../ref/forms/validation.txt:211
msgid "Using validation in practice"
msgstr ""

#: ../../ref/forms/validation.txt:213
msgid ""
"The previous sections explained how validation works in general for forms. "
"Since it can sometimes be easier to put things into place by seeing each "
"feature in use, here are a series of small examples that use each of the "
"previous features."
msgstr ""

#: ../../ref/forms/validation.txt:221
msgid "Using validators"
msgstr ""

#: ../../ref/forms/validation.txt:223
msgid ""
"Django's form (and model) fields support use of simple utility functions and"
" classes known as validators. A validator is merely a callable object or "
"function that takes a value and simply returns nothing if the value is valid"
" or raises a :exc:`~django.core.exceptions.ValidationError` if not. These "
"can be passed to a field's constructor, via the field's ``validators`` "
"argument, or defined on the :class:`~django.forms.Field` class itself with "
"the ``default_validators`` attribute."
msgstr ""

#: ../../ref/forms/validation.txt:231
msgid ""
"Simple validators can be used to validate values inside the field, let's "
"have a look at Django's ``SlugField``::"
msgstr ""

#: ../../ref/forms/validation.txt:240
msgid ""
"As you can see, ``SlugField`` is just a ``CharField`` with a customized "
"validator that validates that submitted text obeys to some character rules. "
"This can also be done on field definition so::"
msgstr ""

#: ../../ref/forms/validation.txt:246 ../../ref/models/querysets.txt:1166
#: ../../ref/utils.txt:795
msgid "is equivalent to::"
msgstr ""

#: ../../ref/forms/validation.txt:250
msgid ""
"Common cases such as validating against an email or a regular expression can"
" be handled using existing validator classes available in Django. For "
"example, ``validators.validate_slug`` is an instance of a "
":class:`~django.core.validators.RegexValidator` constructed with the first "
"argument being the pattern: ``^[-a-zA-Z0-9_]+$``. See the section on "
":doc:`writing validators </ref/validators>` to see a list of what is already"
" available and for an example of how to write a validator."
msgstr ""

#: ../../ref/forms/validation.txt:259
msgid "Form field default cleaning"
msgstr ""

#: ../../ref/forms/validation.txt:261
msgid ""
"Let's first create a custom form field that validates its input is a string "
"containing comma-separated email addresses. The full class looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:285
msgid ""
"Every form that uses this field will have these methods run before anything "
"else can be done with the field's data. This is cleaning that is specific to"
" this type of field, regardless of how it is subsequently used."
msgstr ""

#: ../../ref/forms/validation.txt:289
msgid ""
"Let's create a simple ``ContactForm`` to demonstrate how you'd use this "
"field::"
msgstr ""

#: ../../ref/forms/validation.txt:299
msgid ""
"Simply use ``MultiEmailField`` like any other form field. When the "
"``is_valid()`` method is called on the form, the ``MultiEmailField.clean()``"
" method will be run as part of the cleaning process and it will, in turn, "
"call the custom ``to_python()`` and ``validate()`` methods."
msgstr ""

#: ../../ref/forms/validation.txt:305
msgid "Cleaning a specific field attribute"
msgstr ""

#: ../../ref/forms/validation.txt:307
msgid ""
"Continuing on from the previous example, suppose that in our "
"``ContactForm``, we want to make sure that the ``recipients`` field always "
"contains the address ``\"fred@example.com\"``. This is validation that is "
"specific to our form, so we don't want to put it into the general "
"``MultiEmailField`` class. Instead, we write a cleaning method that operates"
" on the ``recipients`` field, like so::"
msgstr ""

#: ../../ref/forms/validation.txt:331
msgid "Cleaning and validating fields that depend on each other"
msgstr ""

#: ../../ref/forms/validation.txt:333
msgid ""
"Suppose we add another requirement to our contact form: if the ``cc_myself``"
" field is ``True``, the ``subject`` must contain the word ``\"help\"``. We "
"are performing validation on more than one field at a time, so the form's "
":meth:`~Form.clean()` method is a good spot to do this. Notice that we are "
"talking about the ``clean()`` method on the form here, whereas earlier we "
"were writing a ``clean()`` method on a field. It's important to keep the "
"field and form difference clear when working out where to validate things. "
"Fields are single data points, forms are a collection of fields."
msgstr ""

#: ../../ref/forms/validation.txt:342
msgid ""
"By the time the form's ``clean()`` method is called, all the individual "
"field clean methods will have been run (the previous two sections), so "
"``self.cleaned_data`` will be populated with any data that has survived so "
"far. So you also need to remember to allow for the fact that the fields you "
"are wanting to validate might not have survived the initial individual field"
" checks."
msgstr ""

#: ../../ref/forms/validation.txt:349
msgid ""
"There are two ways to report any errors from this step. Probably the most "
"common method is to display the error at the top of the form. To create such"
" an error, you can raise a ``ValidationError`` from the ``clean()`` method. "
"For example::"
msgstr ""

#: ../../ref/forms/validation.txt:375
msgid ""
"In previous versions of Django, ``form.clean()`` was required to return a "
"dictionary of ``cleaned_data``. This method may still return a dictionary of"
" data to be used, but it's no longer required."
msgstr ""

#: ../../ref/forms/validation.txt:379
msgid ""
"In this code, if the validation error is raised, the form will display an "
"error message at the top of the form (normally) describing the problem."
msgstr ""

#: ../../ref/forms/validation.txt:382
msgid ""
"The call to ``super(ContactForm, self).clean()`` in the example code ensures"
" that any validation logic in parent classes is maintained. If your form "
"inherits another that doesn't return a ``cleaned_data`` dictionary in its "
"``clean()`` method (doing so is optional), then don't assign "
"``cleaned_data`` to the result of the ``super()`` call and use "
"``self.cleaned_data`` instead::"
msgstr ""

#: ../../ref/forms/validation.txt:393
msgid ""
"The second approach for reporting validation errors might involve assigning "
"the error message to one of the fields. In this case, let's assign an error "
"message to both the \"subject\" and \"cc_myself\" rows in the form display. "
"Be careful when doing this in practice, since it can lead to confusing form "
"output. We're showing what is possible here and leaving it up to you and "
"your designers to work out what works effectively in your particular "
"situation. Our new code (replacing the previous sample) looks like this::"
msgstr ""

#: ../../ref/forms/validation.txt:417
msgid ""
"The second argument of ``add_error()`` can be a simple string, or preferably"
" an instance of ``ValidationError``. See :ref:`raising-validation-error` for"
" more details. Note that ``add_error()`` automatically removes the field "
"from ``cleaned_data``."
msgstr ""

#: ../../ref/forms/widgets.txt:10
msgid ""
"A widget is Django's representation of an HTML input element. The widget "
"handles the rendering of the HTML, and the extraction of data from a "
"GET/POST dictionary that corresponds to the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:16
msgid ""
"Widgets should not be confused with the :doc:`form fields "
"</ref/forms/fields>`. Form fields deal with the logic of input validation "
"and are used directly in templates. Widgets deal with rendering of HTML form"
" input elements on the web page and extraction of raw submitted data. "
"However, widgets do need to be :ref:`assigned <widget-to-field>` to form "
"fields."
msgstr ""

#: ../../ref/forms/widgets.txt:25
msgid "Specifying widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:27
msgid ""
"Whenever you specify a field on a form, Django will use a default widget "
"that is appropriate to the type of data that is to be displayed. To find "
"which widget is used on which field, see the documentation about :ref"
":`built-in-fields`."
msgstr ""

#: ../../ref/forms/widgets.txt:32
msgid ""
"However, if you want to use a different widget for a field, you can just use"
" the :attr:`~Field.widget` argument on the field definition. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:43
msgid ""
"This would specify a form with a comment that uses a larger "
":class:`Textarea` widget, rather than the default :class:`TextInput` widget."
msgstr ""

#: ../../ref/forms/widgets.txt:48
msgid "Setting arguments for widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:50
msgid ""
"Many widgets have optional extra arguments; they can be set when defining "
"the widget on the field. In the following example, the "
":attr:`~django.forms.extras.widgets.SelectDateWidget.years` attribute is set"
" for a :class:`~django.forms.extras.widgets.SelectDateWidget`::"
msgstr ""

#: ../../ref/forms/widgets.txt:70
msgid ""
"See the :ref:`built-in widgets` for more information about which widgets are"
" available and which arguments they accept."
msgstr ""

#: ../../ref/forms/widgets.txt:75
msgid "Widgets inheriting from the Select widget"
msgstr ""

#: ../../ref/forms/widgets.txt:77
msgid ""
"Widgets inheriting from the :class:`Select` widget deal with choices. They "
"present the user with a list of options to choose from. The different "
"widgets present this choice differently; the :class:`Select` widget itself "
"uses a ``<select>`` HTML list representation, while :class:`RadioSelect` "
"uses radio buttons."
msgstr ""

#: ../../ref/forms/widgets.txt:83
msgid ""
":class:`Select` widgets are used by default on :class:`ChoiceField` fields. "
"The choices displayed on the widget are inherited from the "
":class:`ChoiceField` and changing :attr:`ChoiceField.choices` will update "
":attr:`Select.choices`. For example::"
msgstr ""

#: ../../ref/forms/widgets.txt:101
msgid ""
"Widgets which offer a :attr:`~Select.choices` attribute can however be used "
"with fields which are not based on choice -- such as a :class:`CharField` --"
" but it is recommended to use a :class:`ChoiceField`-based field when the "
"choices are inherent to the model and not just the representational widget."
msgstr ""

#: ../../ref/forms/widgets.txt:107
msgid "Customizing widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:109
msgid ""
"When Django renders a widget as HTML, it only renders very minimal markup - "
"Django doesn't add class names, or any other widget-specific attributes. "
"This means, for example, that all :class:`TextInput` widgets will appear the"
" same on your Web pages."
msgstr ""

#: ../../ref/forms/widgets.txt:114
msgid ""
"There are two ways to customize widgets: :ref:`per widget instance <styling-"
"widget-instances>` and :ref:`per widget class <styling-widget-classes>`."
msgstr ""

#: ../../ref/forms/widgets.txt:120
msgid "Styling widget instances"
msgstr ""

#: ../../ref/forms/widgets.txt:122
msgid ""
"If you want to make one widget instance look different from another, you "
"will need to specify additional attributes at the time when the widget "
"object is instantiated and assigned to a form field (and perhaps add some "
"rules to your CSS files)."
msgstr ""

#: ../../ref/forms/widgets.txt:127
msgid "For example, take the following simple form::"
msgstr ""

#: ../../ref/forms/widgets.txt:136
msgid ""
"This form will include three default :class:`TextInput` widgets, with "
"default rendering -- no CSS class, no extra attributes. This means that the "
"input boxes provided for each widget will be rendered exactly the same::"
msgstr ""

#: ../../ref/forms/widgets.txt:146
msgid ""
"On a real Web page, you probably don't want every widget to look the same. "
"You might want a larger input element for the comment, and you might want "
"the 'name' widget to have some special CSS class. It is also possible to "
"specify the 'type' attribute to take advantage of the new HTML5 input types."
"  To do this, you use the :attr:`Widget.attrs` argument when creating the "
"widget::"
msgstr ""

#: ../../ref/forms/widgets.txt:157
msgid "Django will then include the extra attributes in the rendered output:"
msgstr ""

#: ../../ref/forms/widgets.txt:165
msgid ""
"You can also set the HTML ``id`` using :attr:`~Widget.attrs`. See "
":attr:`BoundField.id_for_label` for an example."
msgstr ""

#: ../../ref/forms/widgets.txt:171
msgid "Styling widget classes"
msgstr ""

#: ../../ref/forms/widgets.txt:173
msgid ""
"With widgets, it is possible to add assets (``css`` and ``javascript``) and "
"more deeply customize their appearance and behavior."
msgstr ""

#: ../../ref/forms/widgets.txt:176
msgid ""
"In a nutshell, you will need to subclass the widget and either :ref:`define "
"a \"Media\" inner class  <assets-as-a-static-definition>` or :ref:`create a "
"\"media\" property <dynamic-property>`."
msgstr ""

#: ../../ref/forms/widgets.txt:180
msgid ""
"These methods involve somewhat advanced Python programming and are described"
" in detail in the :doc:`Form Assets </topics/forms/media>` topic guide."
msgstr ""

#: ../../ref/forms/widgets.txt:186
msgid "Base Widget classes"
msgstr ""

#: ../../ref/forms/widgets.txt:188
msgid ""
"Base widget classes :class:`Widget` and :class:`MultiWidget` are subclassed "
"by all the :ref:`built-in widgets <built-in widgets>` and may serve as a "
"foundation for custom widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:194
msgid ""
"This abstract class cannot be rendered, but provides the basic attribute "
":attr:`~Widget.attrs`.  You may also implement or override the "
":meth:`~Widget.render()` method on custom widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:200
msgid ""
"A dictionary containing HTML attributes to be set on the rendered widget."
msgstr ""

#: ../../ref/forms/widgets.txt:212
msgid ""
"If you assign a value of ``True`` or ``False`` to an attribute, it will be "
"rendered as an HTML5 boolean attribute::"
msgstr ""

#: ../../ref/forms/widgets.txt:225
msgid ""
"Returns HTML for the widget, as a Unicode string. This method must be "
"implemented by the subclass, otherwise ``NotImplementedError`` will be "
"raised."
msgstr ""

#: ../../ref/forms/widgets.txt:229
msgid ""
"The 'value' given is not guaranteed to be valid input, therefore subclass "
"implementations should program defensively."
msgstr ""

#: ../../ref/forms/widgets.txt:234
msgid ""
"Given a dictionary of data and this widget's name, returns the value of this"
" widget. ``files`` may contain data coming from :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`. Returns ``None`` if a value wasn't "
"provided. Note also that ``value_from_datadict`` may be called more than "
"once during handling of form data, so if you customize it and add expensive "
"processing, you should implement some caching mechanism yourself."
msgstr ""

#: ../../ref/forms/widgets.txt:244
msgid ""
"A widget that is composed of multiple widgets. "
":class:`~django.forms.MultiWidget` works hand in hand with the "
":class:`~django.forms.MultiValueField`."
msgstr ""

#: ../../ref/forms/widgets.txt:248
msgid ":class:`MultiWidget` has one required argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:252
msgid "An iterable containing the widgets needed."
msgstr ""

#: ../../ref/forms/widgets.txt:254
msgid "And one required method:"
msgstr ""

#: ../../ref/forms/widgets.txt:258
msgid ""
"This method takes a single \"compressed\" value from the field and returns a"
" list of \"decompressed\" values. The input value can be assumed valid, but "
"not necessarily non-empty."
msgstr ""

#: ../../ref/forms/widgets.txt:262
msgid ""
"This method **must be implemented** by the subclass, and since the value may"
" be empty, the implementation must be defensive."
msgstr ""

#: ../../ref/forms/widgets.txt:265
msgid ""
"The rationale behind \"decompression\" is that it is necessary to \"split\" "
"the combined value of the form field into the values for each widget."
msgstr ""

#: ../../ref/forms/widgets.txt:268
msgid ""
"An example of this is how :class:`SplitDateTimeWidget` turns a "
":class:`~datetime.datetime` value into a list with date and time split into "
"two separate values::"
msgstr ""

#: ../../ref/forms/widgets.txt:285
msgid ""
"Note that :class:`~django.forms.MultiValueField` has a complementary method "
":meth:`~django.forms.MultiValueField.compress` with the opposite "
"responsibility - to combine cleaned values of all member fields into one."
msgstr ""

#: ../../ref/forms/widgets.txt:290
msgid "Other methods that may be useful to override include:"
msgstr ""

#: ../../ref/forms/widgets.txt:294
msgid ""
"Argument ``value`` is handled differently in this method from the subclasses"
" of :class:`~Widget` because it has to figure out how to split a single "
"value for display in multiple widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:298
msgid "The ``value`` argument used when rendering can be one of two things:"
msgstr ""

#: ../../ref/forms/widgets.txt:300
msgid "A ``list``."
msgstr ""

#: ../../ref/forms/widgets.txt:301
msgid ""
"A single value (e.g., a string) that is the \"compressed\" representation of"
" a ``list`` of values."
msgstr ""

#: ../../ref/forms/widgets.txt:304
msgid ""
"If ``value`` is a list, the output of :meth:`~MultiWidget.render` will be a "
"concatenation of rendered child widgets. If ``value`` is not a list, it will"
" first be processed by the method :meth:`~MultiWidget.decompress()` to "
"create the list and then rendered."
msgstr ""

#: ../../ref/forms/widgets.txt:309
msgid ""
"When ``render()`` executes its HTML rendering, each value in the list is "
"rendered with the corresponding widget -- the first value is rendered in the"
" first widget, the second value is rendered in the second widget, etc."
msgstr ""

#: ../../ref/forms/widgets.txt:314
msgid ""
"Unlike in the single value widgets, method :meth:`~MultiWidget.render` need "
"not be implemented in the subclasses."
msgstr ""

#: ../../ref/forms/widgets.txt:319
msgid ""
"Given a list of rendered widgets (as strings), returns a Unicode string "
"representing the HTML for the whole lot."
msgstr ""

#: ../../ref/forms/widgets.txt:322
msgid ""
"This hook allows you to format the HTML design of the widgets any way you'd "
"like."
msgstr ""

#: ../../ref/forms/widgets.txt:325
msgid ""
"Here's an example widget which subclasses :class:`MultiWidget` to display a "
"date with the day, month, and year in different select boxes. This widget is"
" intended to be used with a :class:`~django.forms.DateField` rather than a "
":class:`~django.forms.MultiValueField`, thus we have implemented "
":meth:`~Widget.value_from_datadict`::"
msgstr ""

#: ../../ref/forms/widgets.txt:369
msgid ""
"The constructor creates several :class:`Select` widgets in a tuple. The "
"``super`` class uses this tuple to setup the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:372
msgid ""
"The :meth:`~MultiWidget.format_output` method is fairly vanilla here (in "
"fact, it's the same as what's been implemented as the default for "
"``MultiWidget``), but the idea is that you could add custom HTML between the"
" widgets should you wish."
msgstr ""

#: ../../ref/forms/widgets.txt:377
msgid ""
"The required method :meth:`~MultiWidget.decompress` breaks up a "
"``datetime.date`` value into the day, month, and year values corresponding "
"to each widget. Note how the method handles the case where ``value`` is "
"``None``."
msgstr ""

#: ../../ref/forms/widgets.txt:382
msgid ""
"The default implementation of :meth:`~Widget.value_from_datadict` returns a "
"list of values corresponding to each ``Widget``.  This is appropriate when "
"using a ``MultiWidget`` with a :class:`~django.forms.MultiValueField`, but "
"since we want to use this widget with a :class:`~django.forms.DateField` "
"which takes a single value, we have overridden this method to combine the "
"data of all the subwidgets into a ``datetime.date``. The method extracts "
"data from the ``POST`` dictionary and constructs and validates the date. If "
"it is valid, we return the string, otherwise, we return an empty string "
"which will cause ``form.is_valid`` to return ``False``."
msgstr ""

#: ../../ref/forms/widgets.txt:395
msgid "Built-in widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:397
msgid ""
"Django provides a representation of all the basic HTML widgets, plus some "
"commonly used groups of widgets in the ``django.forms.widgets`` module, "
"including :ref:`the input of text <text-widgets>`, :ref:`various checkboxes "
"and selectors <selector-widgets>`, :ref:`uploading files <file-upload-"
"widgets>`, and :ref:`handling of multi-valued input <composite-widgets>`."
msgstr ""

#: ../../ref/forms/widgets.txt:406
msgid "Widgets handling input of text"
msgstr ""

#: ../../ref/forms/widgets.txt:408
msgid ""
"These widgets make use of the HTML elements ``input`` and ``textarea``."
msgstr ""

#: ../../ref/forms/widgets.txt:411
msgid "``TextInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:415
msgid "Text input: ``<input type=\"text\" ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:418
msgid "``NumberInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:422
msgid "Text input: ``<input type=\"number\" ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:424
msgid ""
"Beware that not all browsers support entering localized numbers in "
"``number`` input types. Django itself avoids using them for fields having "
"their :attr:`~django.forms.Field.localize` property set to ``True``."
msgstr ""

#: ../../ref/forms/widgets.txt:429
msgid "``EmailInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:433
msgid "Text input: ``<input type=\"email\" ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:436
msgid "``URLInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:440
msgid "Text input: ``<input type=\"url\" ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:443
msgid "``PasswordInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:447
msgid "Password input: ``<input type='password' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:453
msgid ""
"Determines whether the widget will have a value filled in when the form is "
"re-displayed after a validation error (default is ``False``)."
msgstr ""

#: ../../ref/forms/widgets.txt:457
msgid "``HiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:461
msgid "Hidden input: ``<input type='hidden' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:463
msgid ""
"Note that there also is a :class:`MultipleHiddenInput` widget that "
"encapsulates a set of hidden input elements."
msgstr ""

#: ../../ref/forms/widgets.txt:467
msgid "``DateInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:471
msgid "Date input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:473 ../../ref/forms/widgets.txt:490
#: ../../ref/forms/widgets.txt:507
msgid ""
"Takes same arguments as :class:`TextInput`, with one more optional argument:"
msgstr ""

#: ../../ref/forms/widgets.txt:477 ../../ref/forms/widgets.txt:494
#: ../../ref/forms/widgets.txt:511
msgid "The format in which this field's initial value will be displayed."
msgstr ""

#: ../../ref/forms/widgets.txt:479
msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`DATE_INPUT_FORMATS` and respects :ref:`format-"
"localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:484
msgid "``DateTimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:488
msgid "Date/time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:496
msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`DATETIME_INPUT_FORMATS` and respects :ref:`format-"
"localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:501
msgid "``TimeInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:505
msgid "Time input as a simple text box: ``<input type='text' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:513
msgid ""
"If no ``format`` argument is provided, the default format is the first "
"format found in :setting:`TIME_INPUT_FORMATS` and respects :ref:`format-"
"localization`."
msgstr ""

#: ../../ref/forms/widgets.txt:518
msgid "``Textarea``"
msgstr ""

#: ../../ref/forms/widgets.txt:522
msgid "Text area: ``<textarea>...</textarea>``"
msgstr ""

#: ../../ref/forms/widgets.txt:527
msgid "Selector and checkbox widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:530
msgid "``CheckboxInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:534
msgid "Checkbox: ``<input type='checkbox' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:540
msgid ""
"A callable that takes the value of the ``CheckboxInput`` and returns "
"``True`` if the checkbox should be checked for that value."
msgstr ""

#: ../../ref/forms/widgets.txt:544
msgid "``Select``"
msgstr ""

#: ../../ref/forms/widgets.txt:548
msgid "Select widget: ``<select><option ...>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:552 ../../ref/forms/widgets.txt:730
msgid ""
"This attribute is optional when the form field does not have a ``choices`` "
"attribute. If it does, it will override anything you set here when the "
"attribute is updated on the :class:`Field`."
msgstr ""

#: ../../ref/forms/widgets.txt:557
msgid "``NullBooleanSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:561
msgid "Select widget with options 'Unknown', 'Yes' and 'No'"
msgstr ""

#: ../../ref/forms/widgets.txt:564
msgid "``SelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:568
msgid ""
"Similar to :class:`Select`, but allows multiple selection: ``<select "
"multiple='multiple'>...</select>``"
msgstr ""

#: ../../ref/forms/widgets.txt:572
msgid "``RadioSelect``"
msgstr ""

#: ../../ref/forms/widgets.txt:576
msgid ""
"Similar to :class:`Select`, but rendered as a list of radio buttons within "
"``<li>`` tags:"
msgstr ""

#: ../../ref/forms/widgets.txt:586
msgid ""
"For more granular control over the generated markup, you can loop over the "
"radio buttons in the template. Assuming a form ``myform`` with a field "
"``beatles`` that uses a ``RadioSelect`` as its widget:"
msgstr ""

#: ../../ref/forms/widgets.txt:598
msgid "This would generate the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:615
msgid ""
"That included the ``<label>`` tags. To get more granular, you can use each "
"radio button's ``tag``, ``choice_label`` and ``id_for_label`` attributes. "
"For example, this template..."
msgstr ""

#: ../../ref/forms/widgets.txt:628
msgid "...will result in the following HTML:"
msgstr ""

#: ../../ref/forms/widgets.txt:652
msgid ""
"If you decide not to loop over the radio buttons -- e.g., if your template "
"simply includes ``{{ myform.beatles }}`` -- they'll be output in a ``<ul>`` "
"with ``<li>`` tags, as above."
msgstr ""

#: ../../ref/forms/widgets.txt:656 ../../ref/forms/widgets.txt:680
msgid ""
"The outer ``<ul>`` container will receive the ``id`` attribute defined on "
"the widget."
msgstr ""

#: ../../ref/forms/widgets.txt:661
msgid ""
"When looping over the radio buttons, the ``label`` and ``input`` tags "
"include ``for`` and ``id`` attributes, respectively. Each radio button has "
"an ``id_for_label`` attribute to output the element's ID."
msgstr ""

#: ../../ref/forms/widgets.txt:666
msgid "``CheckboxSelectMultiple``"
msgstr ""

#: ../../ref/forms/widgets.txt:670
msgid ""
"Similar to :class:`SelectMultiple`, but rendered as a list of check buttons:"
msgstr ""

#: ../../ref/forms/widgets.txt:683
msgid ""
"Like :class:`RadioSelect`, you can now loop over the individual checkboxes "
"making up the lists. See the documentation of :class:`RadioSelect` for more "
"details."
msgstr ""

#: ../../ref/forms/widgets.txt:688
msgid ""
"When looping over the checkboxes, the ``label`` and ``input`` tags include "
"``for`` and ``id`` attributes, respectively. Each checkbox has an "
"``id_for_label`` attribute to output the element's ID."
msgstr ""

#: ../../ref/forms/widgets.txt:695
msgid "File upload widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:698
msgid "``FileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:702
msgid "File upload input: ``<input type='file' ...>``"
msgstr ""

#: ../../ref/forms/widgets.txt:705
msgid "``ClearableFileInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:709
msgid ""
"File upload input: ``<input type='file' ...>``, with an additional checkbox "
"input to clear the field's value, if the field is not required and has "
"initial data."
msgstr ""

#: ../../ref/forms/widgets.txt:716
msgid "Composite widgets"
msgstr ""

#: ../../ref/forms/widgets.txt:719
msgid "``MultipleHiddenInput``"
msgstr ""

#: ../../ref/forms/widgets.txt:723
msgid "Multiple ``<input type='hidden' ...>`` widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:725
msgid ""
"A widget that handles multiple hidden widgets for fields that have a list of"
" values."
msgstr ""

#: ../../ref/forms/widgets.txt:735
msgid "``SplitDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:739
msgid ""
"Wrapper (using :class:`MultiWidget`) around two widgets: :class:`DateInput` "
"for the date, and :class:`TimeInput` for the time."
msgstr ""

#: ../../ref/forms/widgets.txt:742
msgid "``SplitDateTimeWidget`` has two optional attributes:"
msgstr ""

#: ../../ref/forms/widgets.txt:746
msgid "Similar to :attr:`DateInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:750
msgid "Similar to :attr:`TimeInput.format`"
msgstr ""

#: ../../ref/forms/widgets.txt:753
msgid "``SplitHiddenDateTimeWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:757
msgid ""
"Similar to :class:`SplitDateTimeWidget`, but uses :class:`HiddenInput` for "
"both date and time."
msgstr ""

#: ../../ref/forms/widgets.txt:763
msgid "``SelectDateWidget``"
msgstr ""

#: ../../ref/forms/widgets.txt:767
msgid ""
"Wrapper around three :class:`~django.forms.Select` widgets: one each for "
"month, day, and year. Note that this widget lives in a separate file from "
"the standard widgets."
msgstr ""

#: ../../ref/forms/widgets.txt:771
msgid "Takes several optional arguments:"
msgstr ""

#: ../../ref/forms/widgets.txt:775
msgid ""
"An optional list/tuple of years to use in the \"year\" select box. The "
"default is a list containing the current year and the next 9 years."
msgstr ""

#: ../../ref/forms/widgets.txt:782
msgid "An optional dict of months to use in the \"months\" select box."
msgstr ""

#: ../../ref/forms/widgets.txt:784
msgid ""
"The keys of the dict correspond to the month number (1-indexed) and the "
"values are the displayed months::"
msgstr ""

#: ../../ref/forms/widgets.txt:797
msgid ""
"If the :class:`~django.forms.DateField` is not required, "
":class:`SelectDateWidget` will have an empty choice at the top of the list "
"(which is ``---`` by default). You can change the text of this label with "
"the ``empty_label`` attribute. ``empty_label`` can be a ``string``, "
"``list``, or ``tuple``. When a string is used, all select boxes will each "
"have an empty choice with this label. If ``empty_label`` is a ``list`` or "
"``tuple`` of 3 string elements, the select boxes will have their own custom "
"label. The labels should be in this order ``('year_label', 'month_label', "
"'day_label')``."
msgstr ""

#: ../../ref/middleware.txt:8
msgid ""
"This document explains all middleware components that come with Django. For "
"information on how to use them and how to write your own middleware, see the"
" :doc:`middleware usage guide </topics/http/middleware>`."
msgstr ""

#: ../../ref/middleware.txt:13
msgid "Available middleware"
msgstr ""

#: ../../ref/middleware.txt:16
msgid "Cache middleware"
msgstr ""

#: ../../ref/middleware.txt:25
msgid ""
"Enable the site-wide cache. If these are enabled, each Django-powered page "
"will be cached for as long as the :setting:`CACHE_MIDDLEWARE_SECONDS` "
"setting defines. See the :doc:`cache documentation </topics/cache>`."
msgstr ""

#: ../../ref/middleware.txt:30
msgid "\"Common\" middleware"
msgstr ""

#: ../../ref/middleware.txt:37
msgid "Adds a few conveniences for perfectionists:"
msgstr ""

#: ../../ref/middleware.txt:39
msgid ""
"Forbids access to user agents in the :setting:`DISALLOWED_USER_AGENTS` "
"setting, which should be a list of compiled regular expression objects."
msgstr ""

#: ../../ref/middleware.txt:42
msgid ""
"Performs URL rewriting based on the :setting:`APPEND_SLASH` and "
":setting:`PREPEND_WWW` settings."
msgstr ""

#: ../../ref/middleware.txt:45
msgid ""
"If :setting:`APPEND_SLASH` is ``True`` and the initial URL doesn't end with "
"a slash, and it is not found in the URLconf, then a new URL is formed by "
"appending a slash at the end. If this new URL is found in the URLconf, then "
"Django redirects the request to this new URL. Otherwise, the initial URL is "
"processed as usual."
msgstr ""

#: ../../ref/middleware.txt:51
msgid ""
"For example, ``foo.com/bar`` will be redirected to ``foo.com/bar/`` if you "
"don't have a valid URL pattern for ``foo.com/bar`` but *do* have a valid "
"pattern for ``foo.com/bar/``."
msgstr ""

#: ../../ref/middleware.txt:55
msgid ""
"If :setting:`PREPEND_WWW` is ``True``, URLs that lack a leading \"www.\" "
"will be redirected to the same URL with a leading \"www.\""
msgstr ""

#: ../../ref/middleware.txt:58
msgid ""
"Both of these options are meant to normalize URLs. The philosophy is that "
"each URL should exist in one, and only one, place. Technically a URL "
"``foo.com/bar`` is distinct from ``foo.com/bar/`` -- a search-engine indexer"
" would treat them as separate URLs -- so it's best practice to normalize "
"URLs."
msgstr ""

#: ../../ref/middleware.txt:64
msgid ""
"Handles ETags based on the :setting:`USE_ETAGS` setting. If "
":setting:`USE_ETAGS` is set to ``True``, Django will calculate an ETag for "
"each request by MD5-hashing the page content, and it'll take care of sending"
" ``Not Modified`` responses, if appropriate."
msgstr ""

#: ../../ref/middleware.txt:73
msgid ""
"Defaults to :class:`~django.http.HttpResponsePermanentRedirect`. Subclass "
"``CommonMiddleware`` and override the attribute to customize the redirects "
"issued by the middleware."
msgstr ""

#: ../../ref/middleware.txt:79
msgid ""
"Sends broken link notification emails to :setting:`MANAGERS` (see "
":doc:`/howto/error-reporting`)."
msgstr ""

#: ../../ref/middleware.txt:83
msgid "GZip middleware"
msgstr ""

#: ../../ref/middleware.txt:92
msgid ""
"Security researchers recently revealed that when compression techniques "
"(including ``GZipMiddleware``) are used on a website, the site becomes "
"exposed to a number of possible attacks. These approaches can be used to "
"compromise, among other things, Django's CSRF protection. Before using "
"``GZipMiddleware`` on your site, you should consider very carefully whether "
"you are subject to these attacks. If you're in *any* doubt about whether "
"you're affected, you should avoid using ``GZipMiddleware``. For more "
"details, see the `the BREACH paper (PDF)`_ and `breachattack.com`_."
msgstr ""

#: ../../ref/middleware.txt:104
msgid ""
"Compresses content for browsers that understand GZip compression (all modern"
" browsers)."
msgstr ""

#: ../../ref/middleware.txt:107
msgid ""
"This middleware should be placed before any other middleware that need to "
"read or write the response body so that compression happens afterward."
msgstr ""

#: ../../ref/middleware.txt:110
msgid "It will NOT compress content if any of the following are true:"
msgstr ""

#: ../../ref/middleware.txt:112
msgid "The content body is less than 200 bytes long."
msgstr ""

#: ../../ref/middleware.txt:114
msgid "The response has already set the ``Content-Encoding`` header."
msgstr ""

#: ../../ref/middleware.txt:116
msgid ""
"The request (the browser) hasn't sent an ``Accept-Encoding`` header "
"containing ``gzip``."
msgstr ""

#: ../../ref/middleware.txt:119
msgid ""
"You can apply GZip compression to individual views using the "
":func:`~django.views.decorators.gzip.gzip_page()` decorator."
msgstr ""

#: ../../ref/middleware.txt:123
msgid "Conditional GET middleware"
msgstr ""

#: ../../ref/middleware.txt:130
msgid ""
"Handles conditional GET operations. If the response has a ``ETag`` or "
"``Last-Modified`` header, and the request has ``If-None-Match`` or ``If-"
"Modified-Since``, the response is replaced by an "
":class:`~django.http.HttpResponseNotModified`."
msgstr ""

#: ../../ref/middleware.txt:135
msgid "Also sets the ``Date`` and ``Content-Length`` response-headers."
msgstr ""

#: ../../ref/middleware.txt:138
msgid "Locale middleware"
msgstr ""

#: ../../ref/middleware.txt:145
msgid ""
"Enables language selection based on data from the request. It customizes "
"content for each user. See the :doc:`internationalization documentation "
"</topics/i18n/translation>`."
msgstr ""

#: ../../ref/middleware.txt:151
msgid ""
"Defaults to :class:`~django.http.HttpResponseRedirect`. Subclass "
"``LocaleMiddleware`` and override the attribute to customize the redirects "
"issued by the middleware."
msgstr ""

#: ../../ref/middleware.txt:156
msgid "Message middleware"
msgstr ""

#: ../../ref/middleware.txt:163
msgid ""
"Enables cookie- and session-based message support. See the :doc:`messages "
"documentation </ref/contrib/messages>`."
msgstr ""

#: ../../ref/middleware.txt:169
msgid "Security middleware"
msgstr ""

#: ../../ref/middleware.txt:175
msgid ""
"If your deployment situation allows, it's usually a good idea to have your "
"front-end Web server perform the functionality provided by the "
"``SecurityMiddleware``. That way, if there are requests that aren't served "
"by Django (such as static media or user-uploaded files), they will have the "
"same protections as requests to your Django application."
msgstr ""

#: ../../ref/middleware.txt:185
msgid ""
"The ``django.middleware.security.SecurityMiddleware`` provides several "
"security enhancements to the request/response cycle. Each one can be "
"independently enabled or disabled with a setting."
msgstr ""

#: ../../ref/middleware.txt:189 ../../ref/settings.txt:3465
msgid ":setting:`SECURE_BROWSER_XSS_FILTER`"
msgstr ""

#: ../../ref/middleware.txt:190 ../../ref/settings.txt:3466
msgid ":setting:`SECURE_CONTENT_TYPE_NOSNIFF`"
msgstr ""

#: ../../ref/middleware.txt:191 ../../ref/settings.txt:3467
msgid ":setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`"
msgstr ""

#: ../../ref/middleware.txt:192 ../../ref/settings.txt:3468
msgid ":setting:`SECURE_HSTS_SECONDS`"
msgstr ""

#: ../../ref/middleware.txt:193 ../../ref/settings.txt:3470
msgid ":setting:`SECURE_REDIRECT_EXEMPT`"
msgstr ""

#: ../../ref/middleware.txt:194 ../../ref/settings.txt:3471
msgid ":setting:`SECURE_SSL_HOST`"
msgstr ""

#: ../../ref/middleware.txt:195 ../../ref/settings.txt:3472
msgid ":setting:`SECURE_SSL_REDIRECT`"
msgstr ""

#: ../../ref/middleware.txt:200
msgid "HTTP Strict Transport Security"
msgstr ""

#: ../../ref/middleware.txt:202
msgid ""
"For sites that should only be accessed over HTTPS, you can instruct modern "
"browsers to refuse to connect to your domain name via an insecure connection"
" (for a given period of time) by setting the `\"Strict-Transport-Security\" "
"header`_. This reduces your exposure to some SSL-stripping man-in-the-middle"
" (MITM) attacks."
msgstr ""

#: ../../ref/middleware.txt:208
msgid ""
"``SecurityMiddleware`` will set this header for you on all HTTPS responses "
"if you set the :setting:`SECURE_HSTS_SECONDS` setting to a non-zero integer "
"value."
msgstr ""

#: ../../ref/middleware.txt:211
msgid ""
"When enabling HSTS, it's a good idea to first use a small value for testing,"
" for example, :setting:`SECURE_HSTS_SECONDS = 3600<SECURE_HSTS_SECONDS>` for"
" one hour. Each time a Web browser sees the HSTS header from your site, it "
"will refuse to communicate non-securely (using HTTP) with your domain for "
"the given period of time. Once you confirm that all assets are served "
"securely on your site (i.e. HSTS didn't break anything), it's a good idea to"
" increase this value so that infrequent visitors will be protected (31536000"
" seconds, i.e. 1 year, is common)."
msgstr ""

#: ../../ref/middleware.txt:220
msgid ""
"Additionally, if you set the :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS` "
"setting to ``True``, ``SecurityMiddleware`` will add the "
"``includeSubDomains`` tag to the ``Strict-Transport-Security`` header. This "
"is recommended (assuming all subdomains are served exclusively using HTTPS),"
" otherwise your site may still be vulnerable via an insecure connection to a"
" subdomain."
msgstr ""

#: ../../ref/middleware.txt:227
msgid ""
"The HSTS policy applies to your entire domain, not just the URL of the "
"response that you set the header on. Therefore, you should only use it if "
"your entire domain is served via HTTPS only."
msgstr ""

#: ../../ref/middleware.txt:231
msgid ""
"Browsers properly respecting the HSTS header will refuse to allow users to "
"bypass warnings and connect to a site with an expired, self-signed, or "
"otherwise invalid SSL certificate. If you use HSTS, make sure your "
"certificates are in good shape and stay that way!"
msgstr ""

#: ../../ref/middleware.txt:237
msgid ""
"If you are deployed behind a load-balancer or reverse-proxy server, and the "
"``Strict-Transport-Security`` header is not being added to your responses, "
"it may be because Django doesn't realize that it's on a secure connection; "
"you may need to set the :setting:`SECURE_PROXY_SSL_HEADER` setting."
msgstr ""

#: ../../ref/middleware.txt:247
msgid "``X-Content-Type-Options: nosniff``"
msgstr ""

#: ../../ref/middleware.txt:249
msgid ""
"Some browsers will try to guess the content types of the assets that they "
"fetch, overriding the ``Content-Type`` header. While this can help display "
"sites with improperly configured servers, it can also pose a security risk."
msgstr ""

#: ../../ref/middleware.txt:254
msgid ""
"If your site serves user-uploaded files, a malicious user could upload a "
"specially-crafted file that would be interpreted as HTML or JavaScript by "
"the browser when you expected it to be something harmless."
msgstr ""

#: ../../ref/middleware.txt:258
msgid ""
"To learn more about this header and how the browser treats it, you can read "
"about it on the `IE Security Blog`_."
msgstr ""

#: ../../ref/middleware.txt:261
msgid ""
"To prevent the browser from guessing the content type and force it to always"
" use the type provided in the ``Content-Type`` header, you can pass the ``X"
"-Content-Type-Options: nosniff`` header.  ``SecurityMiddleware`` will do "
"this for all responses if the :setting:`SECURE_CONTENT_TYPE_NOSNIFF` setting"
" is ``True``."
msgstr ""

#: ../../ref/middleware.txt:267
msgid ""
"Note that in most deployment situations where Django isn't involved in "
"serving user-uploaded files, this setting won't help you. For example, if "
"your :setting:`MEDIA_URL` is served directly by your front-end Web server "
"(nginx, Apache, etc.) then you'd want to set this header there. On the other"
" hand, if you are using Django to do something like require authorization in"
" order to download files and you cannot set the header using your Web "
"server, this setting will be useful."
msgstr ""

#: ../../ref/middleware.txt:280
msgid "``X-XSS-Protection: 1; mode=block``"
msgstr ""

#: ../../ref/middleware.txt:282
msgid ""
"Some browsers have the ability to block content that appears to be an `XSS "
"attack`_. They work by looking for JavaScript content in the GET or POST "
"parameters of a page. If the JavaScript is replayed in the server's "
"response, the page is blocked from rendering and an error page is shown "
"instead."
msgstr ""

#: ../../ref/middleware.txt:287
msgid ""
"The `X-XSS-Protection header`_ is used to control the operation of the XSS "
"filter."
msgstr ""

#: ../../ref/middleware.txt:290
msgid ""
"To enable the XSS filter in the browser, and force it to always block "
"suspected XSS attacks, you can pass the ``X-XSS-Protection: 1; mode=block`` "
"header. ``SecurityMiddleware`` will do this for all responses if the "
":setting:`SECURE_BROWSER_XSS_FILTER` setting is ``True``."
msgstr ""

#: ../../ref/middleware.txt:296
msgid ""
"The browser XSS filter is a useful defense measure, but must not be relied "
"upon exclusively. It cannot detect all XSS attacks and not all browsers "
"support the header. Ensure you are still :ref:`validating and sanitizing "
"<cross-site-scripting>` all input to prevent XSS attacks."
msgstr ""

#: ../../ref/middleware.txt:307
msgid "SSL Redirect"
msgstr ""

#: ../../ref/middleware.txt:309
msgid ""
"If your site offers both HTTP and HTTPS connections, most users will end up "
"with an unsecured connection by default. For best security, you should "
"redirect all HTTP connections to HTTPS."
msgstr ""

#: ../../ref/middleware.txt:313
msgid ""
"If you set the :setting:`SECURE_SSL_REDIRECT` setting to True, "
"``SecurityMiddleware`` will permanently (HTTP 301) redirect all HTTP "
"connections to HTTPS."
msgstr ""

#: ../../ref/middleware.txt:319
msgid ""
"For performance reasons, it's preferable to do these redirects outside of "
"Django, in a front-end load balancer or reverse-proxy server such as "
"`nginx`_. :setting:`SECURE_SSL_REDIRECT` is intended for the deployment "
"situations where this isn't an option."
msgstr ""

#: ../../ref/middleware.txt:324
msgid ""
"If the :setting:`SECURE_SSL_HOST` setting has a value, all redirects will be"
" sent to that host instead of the originally-requested host."
msgstr ""

#: ../../ref/middleware.txt:327
msgid ""
"If there are a few pages on your site that should be available over HTTP, "
"and not redirected to HTTPS, you can list regular expressions to match those"
" URLs in the :setting:`SECURE_REDIRECT_EXEMPT` setting."
msgstr ""

#: ../../ref/middleware.txt:332
msgid ""
"If you are deployed behind a load-balancer or reverse-proxy server and "
"Django can't seem to tell when a request actually is already secure, you may"
" need to set the :setting:`SECURE_PROXY_SSL_HEADER` setting."
msgstr ""

#: ../../ref/middleware.txt:339
msgid "Session middleware"
msgstr ""

#: ../../ref/middleware.txt:346
msgid ""
"Enables session support. See the :doc:`session documentation "
"</topics/http/sessions>`."
msgstr ""

#: ../../ref/middleware.txt:359
msgid ""
"Adds the ``site`` attribute representing the current site to every incoming "
"``HttpRequest`` object. See the :ref:`sites documentation <site-"
"middleware>`."
msgstr ""

#: ../../ref/middleware.txt:363
msgid "Authentication middleware"
msgstr ""

#: ../../ref/middleware.txt:370
msgid ""
"Adds the ``user`` attribute, representing the currently-logged-in user, to "
"every incoming ``HttpRequest`` object. See :ref:`Authentication in Web "
"requests <auth-web-requests>`."
msgstr ""

#: ../../ref/middleware.txt:376
msgid ""
"Middleware for utilizing Web server provided authentication. See "
":doc:`/howto/auth-remote-user` for usage details."
msgstr ""

#: ../../ref/middleware.txt:383
msgid ""
"Allows a user's sessions to be invalidated when their password changes. See "
":ref:`session-invalidation-on-password-change` for details. This middleware "
"must appear after "
":class:`django.contrib.auth.middleware.AuthenticationMiddleware` in "
":setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../ref/middleware.txt:389
msgid "CSRF protection middleware"
msgstr ""

#: ../../ref/middleware.txt:397
msgid ""
"Adds protection against Cross Site Request Forgeries by adding hidden form "
"fields to POST forms and checking requests for the correct value. See the "
":doc:`Cross Site Request Forgery protection documentation </ref/csrf>`."
msgstr ""

#: ../../ref/middleware.txt:402
msgid "X-Frame-Options middleware"
msgstr ""

#: ../../ref/middleware.txt:409
msgid ""
"Simple :doc:`clickjacking protection via the X-Frame-Options header "
"</ref/clickjacking/>`."
msgstr ""

#: ../../ref/middleware.txt:414
msgid "Middleware ordering"
msgstr ""

#: ../../ref/middleware.txt:416
msgid ""
"Here are some hints about the ordering of various Django middleware classes:"
msgstr ""

#: ../../ref/middleware.txt:418
msgid ":class:`~django.middleware.cache.UpdateCacheMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:420
msgid ""
"Before those that modify the ``Vary`` header (``SessionMiddleware``, "
"``GZipMiddleware``, ``LocaleMiddleware``)."
msgstr ""

#: ../../ref/middleware.txt:423
msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:425
msgid "Before any middleware that may change or use the response body."
msgstr ""

#: ../../ref/middleware.txt:427 ../../ref/middleware.txt:436
msgid "After ``UpdateCacheMiddleware``: Modifies ``Vary`` header."
msgstr ""

#: ../../ref/middleware.txt:429
msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:431
msgid ""
"Before ``CommonMiddleware``: uses its ``Etag`` header when "
":setting:`USE_ETAGS` = ``True``."
msgstr ""

#: ../../ref/middleware.txt:434
msgid ":class:`~django.contrib.sessions.middleware.SessionMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:438
msgid ":class:`~django.middleware.locale.LocaleMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:440
msgid ""
"One of the topmost, after ``SessionMiddleware`` (uses session data) and "
"``UpdateCacheMiddleware`` (modifies ``Vary`` header)."
msgstr ""

#: ../../ref/middleware.txt:443
msgid ":class:`~django.middleware.common.CommonMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:445
msgid ""
"Before any middleware that may change the response (it calculates "
"``ETags``)."
msgstr ""

#: ../../ref/middleware.txt:447
msgid ""
"After ``GZipMiddleware`` so it won't calculate an ``ETag`` header on gzipped"
" contents."
msgstr ""

#: ../../ref/middleware.txt:450
msgid ""
"Close to the top: it redirects when :setting:`APPEND_SLASH` or "
":setting:`PREPEND_WWW` are set to ``True``."
msgstr ""

#: ../../ref/middleware.txt:453
msgid ":class:`~django.middleware.csrf.CsrfViewMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:455
msgid ""
"Before any view middleware that assumes that CSRF attacks have been dealt "
"with."
msgstr ""

#: ../../ref/middleware.txt:458
msgid ":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:460
msgid "After ``SessionMiddleware``: uses session storage."
msgstr ""

#: ../../ref/middleware.txt:462
msgid ":class:`~django.contrib.messages.middleware.MessageMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:464
msgid "After ``SessionMiddleware``: can use session-based storage."
msgstr ""

#: ../../ref/middleware.txt:466
msgid ":class:`~django.middleware.cache.FetchFromCacheMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:468
msgid ""
"After any middleware that modifies the ``Vary`` header: that header is used "
"to pick a value for the cache hash-key."
msgstr ""

#: ../../ref/middleware.txt:471
msgid ""
":class:`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`"
msgstr ""

#: ../../ref/middleware.txt:473 ../../ref/middleware.txt:477
msgid "Should be near the bottom as it's a last-resort type of middleware."
msgstr ""

#: ../../ref/middleware.txt:475
msgid ""
":class:`~django.contrib.redirects.middleware.RedirectFallbackMiddleware`"
msgstr ""

#: ../../ref/migration-operations.txt:3
msgid "Migration Operations"
msgstr ""

#: ../../ref/migration-operations.txt:7
msgid ""
"Migration files are composed of one or more ``Operation``\\s, objects that "
"declaratively record what the migration should do to your database."
msgstr ""

#: ../../ref/migration-operations.txt:10
msgid ""
"Django also uses these ``Operation`` objects to work out what your models "
"looked like historically, and to calculate what changes you've made to your "
"models since the last migration so it can automatically write your "
"migrations; that's why they're declarative, as it means Django can easily "
"load them all into memory and run through them without touching the database"
" to work out what your project should look like."
msgstr ""

#: ../../ref/migration-operations.txt:17
msgid ""
"There are also more specialized ``Operation`` objects which are for things "
"like :ref:`data migrations <data-migrations>` and for advanced manual "
"database manipulation. You can also write your own ``Operation`` classes if "
"you want to encapsulate a custom change you commonly make."
msgstr ""

#: ../../ref/migration-operations.txt:22
msgid ""
"If you need an empty migration file to write your own ``Operation`` objects "
"into, just use ``python manage.py makemigrations --empty yourappname``, but "
"be aware that manually adding schema-altering operations can confuse the "
"migration autodetector and make resulting runs of :djadmin:`makemigrations` "
"output incorrect code."
msgstr ""

#: ../../ref/migration-operations.txt:28
msgid ""
"All of the core Django operations are available from the "
"``django.db.migrations.operations`` module."
msgstr ""

#: ../../ref/migration-operations.txt:31
msgid ""
"For introductory material, see the :doc:`migrations topic guide "
"</topics/migrations>`."
msgstr ""

#: ../../ref/migration-operations.txt:35
msgid "Schema Operations"
msgstr ""

#: ../../ref/migration-operations.txt:38
msgid "CreateModel"
msgstr ""

#: ../../ref/migration-operations.txt:42
msgid ""
"Creates a new model in the project history and a corresponding table in the "
"database to match it."
msgstr ""

#: ../../ref/migration-operations.txt:45
msgid ""
"``name`` is the model name, as would be written in the ``models.py`` file."
msgstr ""

#: ../../ref/migration-operations.txt:47
msgid ""
"``fields`` is a list of 2-tuples of ``(field_name, field_instance)``. The "
"field instance should be an unbound field (so just "
"``models.CharField(...)``, rather than a field taken from another model)."
msgstr ""

#: ../../ref/migration-operations.txt:51
msgid ""
"``options`` is an optional dictionary of values from the model's ``Meta`` "
"class."
msgstr ""

#: ../../ref/migration-operations.txt:53
msgid ""
"``bases`` is an optional list of other classes to have this model inherit "
"from; it can contain both class objects as well as strings in the format "
"``\"appname.ModelName\"`` if you want to depend on another model (so you "
"inherit from the historical version). If it's not supplied, it defaults to "
"just inheriting from the standard ``models.Model``."
msgstr ""

#: ../../ref/migration-operations.txt:59
msgid ""
"``managers`` takes a list of 2-tuples of ``(manager_name, "
"manager_instance)``. The first manager in the list will be the default "
"manager for this model during migrations."
msgstr ""

#: ../../ref/migration-operations.txt:65
msgid "The ``managers`` argument was added."
msgstr ""

#: ../../ref/migration-operations.txt:68
msgid "DeleteModel"
msgstr ""

#: ../../ref/migration-operations.txt:72
msgid ""
"Deletes the model from the project history and its table from the database."
msgstr ""

#: ../../ref/migration-operations.txt:75
msgid "RenameModel"
msgstr ""

#: ../../ref/migration-operations.txt:79
msgid "Renames the model from an old name to a new one."
msgstr ""

#: ../../ref/migration-operations.txt:81
msgid ""
"You may have to manually add this if you change the model's name and quite a"
" few of its fields at once; to the autodetector, this will look like you "
"deleted a model with the old name and added a new one with a different name,"
" and the migration it creates will lose any data in the old table."
msgstr ""

#: ../../ref/migration-operations.txt:88
msgid "AlterModelTable"
msgstr ""

#: ../../ref/migration-operations.txt:92
msgid ""
"Changes the model's table name (the "
":attr:`~django.db.models.Options.db_table` option on the ``Meta`` subclass)."
msgstr ""

#: ../../ref/migration-operations.txt:96
msgid "AlterUniqueTogether"
msgstr ""

#: ../../ref/migration-operations.txt:100
msgid ""
"Changes the model's set of unique constraints (the "
":attr:`~django.db.models.Options.unique_together` option on the ``Meta`` "
"subclass)."
msgstr ""

#: ../../ref/migration-operations.txt:105
msgid "AlterIndexTogether"
msgstr ""

#: ../../ref/migration-operations.txt:109
msgid ""
"Changes the model's set of custom indexes (the "
":attr:`~django.db.models.Options.index_together` option on the ``Meta`` "
"subclass)."
msgstr ""

#: ../../ref/migration-operations.txt:114
msgid "AlterOrderWithRespectTo"
msgstr ""

#: ../../ref/migration-operations.txt:118
msgid ""
"Makes or deletes the ``_order`` column needed for the "
":attr:`~django.db.models.Options.order_with_respect_to` option on the "
"``Meta`` subclass."
msgstr ""

#: ../../ref/migration-operations.txt:123
msgid "AlterModelOptions"
msgstr ""

#: ../../ref/migration-operations.txt:127
msgid ""
"Stores changes to miscellaneous model options (settings on a model's "
"``Meta``) like ``permissions`` and ``verbose_name``. Does not affect the "
"database, but persists these changes for :class:`RunPython` instances to "
"use. ``options`` should be a dictionary mapping option names to values."
msgstr ""

#: ../../ref/migration-operations.txt:133
msgid "AlterModelManagers"
msgstr ""

#: ../../ref/migration-operations.txt:139
msgid "Alters the managers that are available during migrations."
msgstr ""

#: ../../ref/migration-operations.txt:142
msgid "AddField"
msgstr ""

#: ../../ref/migration-operations.txt:146
msgid ""
"Adds a field to a model. ``model_name`` is the model's name, ``name`` is the"
" field's name, and ``field`` is an unbound Field instance (the thing you "
"would put in the field declaration in ``models.py`` - for example, "
"``models.IntegerField(null=True)``."
msgstr ""

#: ../../ref/migration-operations.txt:151
msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or"
" if it is temporary and just for this migration (``False``) - usually "
"because the migration is adding a non-nullable field to a table and needs a "
"default value to put into existing rows. It does not affect the behavior of "
"setting defaults in the database directly - Django never sets database "
"defaults and always applies them in the Django ORM code."
msgstr ""

#: ../../ref/migration-operations.txt:160
msgid "RemoveField"
msgstr ""

#: ../../ref/migration-operations.txt:164
msgid "Removes a field from a model."
msgstr ""

#: ../../ref/migration-operations.txt:166
msgid ""
"Bear in mind that when reversed this is actually adding a field to a model; "
"if the field is not nullable this may make this operation irreversible "
"(apart from any data loss, which of course is irreversible)."
msgstr ""

#: ../../ref/migration-operations.txt:171
msgid "AlterField"
msgstr ""

#: ../../ref/migration-operations.txt:175
msgid ""
"Alters a field's definition, including changes to its type, "
":attr:`~django.db.models.Field.null`, "
":attr:`~django.db.models.Field.unique`, "
":attr:`~django.db.models.Field.db_column` and other field attributes."
msgstr ""

#: ../../ref/migration-operations.txt:179
msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or"
" if it is temporary and just for this migration (``False``) - usually "
"because the migration is altering a nullable field to a non-nullable one and"
" needs a default value to put into existing rows. It does not affect the "
"behavior of setting defaults in the database directly - Django never sets "
"database defaults and always applies them in the Django ORM code."
msgstr ""

#: ../../ref/migration-operations.txt:187
msgid ""
"Note that not all changes are possible on all databases - for example, you "
"cannot change a text-type field like ``models.TextField()`` into a number-"
"type field like ``models.IntegerField()`` on most databases."
msgstr ""

#: ../../ref/migration-operations.txt:193
msgid "The ``preserve_default`` argument was added."
msgstr ""

#: ../../ref/migration-operations.txt:196
msgid "RenameField"
msgstr ""

#: ../../ref/migration-operations.txt:200
msgid ""
"Changes a field's name (and, unless "
":attr:`~django.db.models.Field.db_column` is set, its column name)."
msgstr ""

#: ../../ref/migration-operations.txt:204
msgid "Special Operations"
msgstr ""

#: ../../ref/migration-operations.txt:207
msgid "RunSQL"
msgstr ""

#: ../../ref/migration-operations.txt:211
msgid ""
"Allows running of arbitrary SQL on the database - useful for more advanced "
"features of database backends that Django doesn't support directly, like "
"partial indexes."
msgstr ""

#: ../../ref/migration-operations.txt:215
msgid ""
"``sql``, and ``reverse_sql`` if provided, should be strings of SQL to run on"
" the database. On most database backends (all but PostgreSQL), Django will "
"split the SQL into individual statements prior to executing them. This "
"requires installing the sqlparse_ Python library."
msgstr ""

#: ../../ref/migration-operations.txt:220
msgid ""
"You can also pass a list of strings or 2-tuples. The latter is used for "
"passing queries and parameters in the same way as :ref:`cursor.execute() "
"<executing-custom-sql>`. These three operations are equivalent::"
msgstr ""

#: ../../ref/migration-operations.txt:228
msgid ""
"If you want to include literal percent signs in the query, you have to "
"double them if you are passing parameters."
msgstr ""

#: ../../ref/migration-operations.txt:231
msgid ""
"The ``reverse_sql`` queries are executed when the migration is unapplied, so"
" you can reverse the changes done in the forwards queries::"
msgstr ""

#: ../../ref/migration-operations.txt:239
msgid ""
"The ``state_operations`` argument is so you can supply operations that are "
"equivalent to the SQL in terms of project state; for example, if you are "
"manually creating a column, you should pass in a list containing an "
"``AddField`` operation here so that the autodetector still has an up-to-date"
" state of the model (otherwise, when you next run ``makemigrations``, it "
"won't see any operation that adds that field and so will try to run it "
"again)."
msgstr ""

#: ../../ref/migration-operations.txt:246
msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the "
":meth:`allow_migrate` method of database routers to assist them in making "
"routing decisions. See :ref:`topics-db-multi-db-hints` for more details on "
"database hints."
msgstr ""

#: ../../ref/migration-operations.txt:253
msgid ""
"If you want to include literal percent signs in a query without parameters "
"you don't need to double them anymore."
msgstr ""

#: ../../ref/migration-operations.txt:258
msgid ""
"The ability to pass parameters to the ``sql`` and ``reverse_sql`` queries "
"was added."
msgstr ""

#: ../../ref/migration-operations.txt:261
#: ../../ref/migration-operations.txt:296
msgid "The ``hints`` argument was added."
msgstr ""

#: ../../ref/migration-operations.txt:267
msgid ""
"Pass the ``RunSQL.noop`` attribute to ``sql`` or ``reverse_sql`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""

#: ../../ref/migration-operations.txt:274
msgid "RunPython"
msgstr ""

#: ../../ref/migration-operations.txt:278
msgid ""
"Runs custom Python code in a historical context. ``code`` (and "
"``reverse_code`` if supplied) should be callable objects that accept two "
"arguments; the first is an instance of ``django.apps.registry.Apps`` "
"containing historical models that match the operation's place in the project"
" history, and the second is an instance of :class:`SchemaEditor "
"<django.db.backends.base.schema.BaseDatabaseSchemaEditor>`."
msgstr ""

#: ../../ref/migration-operations.txt:285
msgid ""
"The ``reverse_code`` argument is called when unapplying migrations. This "
"callable should undo what is done in the ``code`` callable so that the "
"migration is reversible."
msgstr ""

#: ../../ref/migration-operations.txt:289
msgid ""
"The optional ``hints`` argument will be passed as ``**hints`` to the "
":meth:`allow_migrate` method of database routers to assist them in making a "
"routing decision. See :ref:`topics-db-multi-db-hints` for more details on "
"database hints."
msgstr ""

#: ../../ref/migration-operations.txt:298
msgid ""
"You are advised to write the code as a separate function above the "
"``Migration`` class in the migration file, and just pass it to "
"``RunPython``. Here's an example of using ``RunPython`` to create some "
"initial objects on a ``Country`` model::"
msgstr ""

#: ../../ref/migration-operations.txt:332
msgid ""
"This is generally the operation you would use to create :ref:`data "
"migrations <data-migrations>`, run custom data updates and alterations, and "
"anything else you need access to an ORM and/or Python code for."
msgstr ""

#: ../../ref/migration-operations.txt:337
msgid ""
"If you're upgrading from South, this is basically the South pattern as an "
"operation - one or two methods for forwards and backwards, with an ORM and "
"schema operations available. Most of the time, you should be able to "
"translate the ``orm.Model`` or ``orm[\"appname\", \"Model\"]`` references "
"from South directly into ``apps.get_model(\"appname\", \"Model\")`` "
"references here and leave most of the rest of the code unchanged for data "
"migrations. However, ``apps`` will only have references to models in the "
"current app unless migrations in other apps are added to the migration's "
"dependencies."
msgstr ""

#: ../../ref/migration-operations.txt:346
msgid ""
"Much like :class:`RunSQL`, ensure that if you change schema inside here "
"you're either doing it outside the scope of the Django model system (e.g. "
"triggers) or that you use :class:`SeparateDatabaseAndState` to add in "
"operations that will reflect your changes to the model state - otherwise, "
"the versioned ORM and the autodetector will stop working correctly."
msgstr ""

#: ../../ref/migration-operations.txt:352
msgid ""
"By default, ``RunPython`` will run its contents inside a transaction on "
"databases that do not support DDL transactions (for example, MySQL and "
"Oracle). This should be safe, but may cause a crash if you attempt to use "
"the ``schema_editor`` provided on these backends; in this case, pass "
"``atomic=False`` to the ``RunPython`` operation."
msgstr ""

#: ../../ref/migration-operations.txt:358
msgid ""
"On databases that do support DDL transactions (SQLite and PostgreSQL), "
"``RunPython`` operations do not have any transactions automatically added "
"besides the transactions created for each migration (the ``atomic`` "
"parameter has no effect on these databases). Thus, on PostgreSQL, for "
"example, you should avoid combining schema changes and ``RunPython`` "
"operations in the same migration or you may hit errors like "
"``OperationalError: cannot ALTER TABLE \"mytable\" because it has pending "
"trigger events``."
msgstr ""

#: ../../ref/migration-operations.txt:366
msgid ""
"If you have a different database and aren't sure if it supports DDL "
"transactions, check the ``django.db.connection.features.can_rollback_ddl`` "
"attribute."
msgstr ""

#: ../../ref/migration-operations.txt:372
msgid ""
"``RunPython`` does not magically alter the connection of the models for you;"
" any model methods you call will go to the default database unless you give "
"them the current database alias (available from "
"``schema_editor.connection.alias``, where ``schema_editor`` is the second "
"argument to your function)."
msgstr ""

#: ../../ref/migration-operations.txt:382
msgid ""
"Pass the ``RunPython.noop`` method to ``code`` or ``reverse_code`` when you "
"want the operation not to do anything in the given direction. This is "
"especially useful in making the operation reversible."
msgstr ""

#: ../../ref/migration-operations.txt:387
msgid "SeparateDatabaseAndState"
msgstr ""

#: ../../ref/migration-operations.txt:391
msgid ""
"A highly specialized operation that let you mix and match the database "
"(schema-changing) and state (autodetector-powering) aspects of operations."
msgstr ""

#: ../../ref/migration-operations.txt:394
msgid ""
"It accepts two list of operations, and when asked to apply state will use "
"the state list, and when asked to apply changes to the database will use the"
" database list. Do not use this operation unless you're very sure you know "
"what you're doing."
msgstr ""

#: ../../ref/migration-operations.txt:399
msgid "Writing your own"
msgstr ""

#: ../../ref/migration-operations.txt:401
msgid ""
"Operations have a relatively simple API, and they're designed so that you "
"can easily write your own to supplement the built-in Django ones. The basic "
"structure of an ``Operation`` looks like this::"
msgstr ""

#: ../../ref/migration-operations.txt:440
msgid ""
"You can take this template and work from it, though we suggest looking at "
"the built-in Django operations in ``django.db.migrations.operations`` - "
"they're easy to read and cover a lot of the example usage of semi-internal "
"aspects of the migration framework like ``ProjectState`` and the patterns "
"used to get historical models."
msgstr ""

#: ../../ref/migration-operations.txt:446
msgid "Some things to note:"
msgstr ""

#: ../../ref/migration-operations.txt:448
msgid ""
"You don't need to learn too much about ``ProjectState`` to just write simple"
" migrations; just know that it has an ``apps`` property that gives access to"
" an app registry (which you can then call ``get_model`` on)."
msgstr ""

#: ../../ref/migration-operations.txt:452
msgid ""
"``database_forwards`` and ``database_backwards`` both get two states passed "
"to them; these just represent the difference the ``state_forwards`` method "
"would have applied, but are given to you for convenience and speed reasons."
msgstr ""

#: ../../ref/migration-operations.txt:456
msgid ""
"``to_state`` in the database_backwards method is the *older* state; that is,"
" the one that will be the current state once the migration has finished "
"reversing."
msgstr ""

#: ../../ref/migration-operations.txt:459
msgid ""
"You might see implementations of ``references_model`` on the built-in "
"operations; this is part of the autodetection code and does not matter for "
"custom operations."
msgstr ""

#: ../../ref/migration-operations.txt:463
msgid ""
"As a simple example, let's make an operation that loads PostgreSQL "
"extensions (which contain some of PostgreSQL's more exciting features). It's"
" simple enough; there's no model state changes, and all it does is run one "
"command::"
msgstr ""

#: ../../ref/models/class.txt:3
msgid "Model class reference"
msgstr ""

#: ../../ref/models/class.txt:7
msgid ""
"This document covers features of the :class:`~django.db.models.Model` class."
" For more information about models, see :doc:`the complete list of Model "
"reference guides </ref/models/index>`."
msgstr ""

#: ../../ref/models/class.txt:12 ../../ref/request-response.txt:30
#: ../../ref/request-response.txt:647 ../../ref/request-response.txt:1006
#: ../../ref/schema-editor.txt:154 ../../ref/template-response.txt:30
msgid "Attributes"
msgstr ""

#: ../../ref/models/class.txt:15
msgid "``objects``"
msgstr ""

#: ../../ref/models/class.txt:19
msgid ""
"Each non-abstract :class:`~django.db.models.Model` class must have a "
":class:`~django.db.models.Manager` instance added to it. Django ensures that"
" in your model class you have  at least a default ``Manager`` specified. If "
"you don't add your own ``Manager``, Django will add an attribute ``objects``"
" containing default :class:`~django.db.models.Manager` instance. If you add "
"your own :class:`~django.db.models.Manager` instance attribute, the default "
"one does not appear. Consider the following example::"
msgstr ""

#: ../../ref/models/class.txt:34
msgid ""
"For more details on model managers see :doc:`Managers </topics/db/managers>`"
" and :ref:`Retrieving objects <retrieving-objects>`."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:3
msgid "Conditional Expressions"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:9
msgid ""
"Conditional expressions let you use :keyword:`if` ... :keyword:`elif` ... "
":keyword:`else` logic within filters, annotations, aggregations, and "
"updates. A conditional expression evaluates a series of conditions for each "
"row of a table and returns the matching result expression. Conditional "
"expressions can also be combined and nested like other :doc:`expressions "
"<expressions>`."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:16
msgid "The conditional expression classes"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:18
msgid "We'll be using the following model in the subsequent examples::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:40
msgid "When"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:44
msgid ""
"A ``When()`` object is used to encapsulate a condition and its result for "
"use in the conditional expression. Using a ``When()`` object is similar to "
"using the :meth:`~django.db.models.query.QuerySet.filter` method. The "
"condition can be specified using :ref:`field lookups <field-lookups>` or "
":class:`~django.db.models.Q` objects. The result is provided using the "
"``then`` keyword."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:66
msgid "Keep in mind that each of these values can be an expression."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:70
msgid ""
"Since the ``then`` keyword argument is reserved for the result of the "
"``When()``, there is a potential conflict if a "
":class:`~django.db.models.Model` has a field named ``then``. This can be "
"resolved in two ways::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:80
msgid "Case"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:84
msgid ""
"A ``Case()`` expression is like the :keyword:`if` ... :keyword:`elif` ... "
":keyword:`else` statement in ``Python``. Each ``condition`` in the provided "
"``When()`` objects is evaluated in order, until one evaluates to a truthful "
"value. The ``result`` expression from the matching ``When()`` object is "
"returned."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:90
msgid "A simple example::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:118
msgid ""
"``Case()`` accepts any number of ``When()`` objects as individual arguments."
" Other options are provided using keyword arguments. If none of the "
"conditions evaluate to ``TRUE``, then the expression given with the "
"``default`` keyword argument is returned. If no ``default`` argument is "
"provided, ``Value(None)`` is used."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:124
msgid ""
"If we wanted to change our previous query to get the discount based on how "
"long the ``Client`` has been with us, we could do so using lookups::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:142
msgid ""
"Remember that the conditions are evaluated in order, so in the above example"
" we get the correct result even though the second condition matches both "
"Jane Doe and Jack Black. This works just like an :keyword:`if` ... "
":keyword:`elif` ... :keyword:`else` statement in ``Python``."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:148
msgid "Advanced queries"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:150
msgid ""
"Conditional expressions can be used in annotations, aggregations, lookups, "
"and updates. They can also be combined and nested with other expressions. "
"This allows you to make powerful conditional queries."
msgstr ""

#: ../../ref/models/conditional-expressions.txt:155
msgid "Conditional update"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:157
msgid ""
"Let's say we want to change the ``account_type`` for our clients to match "
"their registration dates. We can do this using a conditional expression and "
"the :meth:`~django.db.models.query.QuerySet.update` method::"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:177
msgid "Conditional aggregation"
msgstr ""

#: ../../ref/models/conditional-expressions.txt:179
msgid ""
"What if we want to find out how many clients there are for each "
"``account_type``? We can nest conditional expression within :ref:`aggregate "
"functions <aggregation-functions>` to achieve this::"
msgstr ""

#: ../../ref/models/database-functions.txt:3
msgid "Database Functions"
msgstr ""

#: ../../ref/models/database-functions.txt:10
msgid ""
"The classes documented below provide a way for users to use functions "
"provided by the underlying database as annotations, aggregations, or filters"
" in Django. Functions are also :doc:`expressions <expressions>`, so they can"
" be used and combined with other expressions like :ref:`aggregate functions "
"<aggregation-functions>`."
msgstr ""

#: ../../ref/models/database-functions.txt:16
msgid "We'll be using the following model in examples of each function::"
msgstr ""

#: ../../ref/models/database-functions.txt:24
msgid ""
"We don't usually recommend allowing ``null=True`` for ``CharField`` since "
"this allows the field to have two \"empty values\", but it's important for "
"the ``Coalesce`` example below."
msgstr ""

#: ../../ref/models/database-functions.txt:29
msgid "Coalesce"
msgstr ""

#: ../../ref/models/database-functions.txt:33
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"first non-null value (note that an empty string is not considered a null "
"value). Each argument must be of a similar type, so mixing text and numbers "
"will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:38
msgid "Usage examples::"
msgstr ""

#: ../../ref/models/database-functions.txt:60
msgid ""
"A Python value passed to ``Coalesce`` on MySQL may be converted to an "
"incorrect type unless explicitly cast to the correct database type:"
msgstr ""

#: ../../ref/models/database-functions.txt:70
msgid "Concat"
msgstr ""

#: ../../ref/models/database-functions.txt:74
msgid ""
"Accepts a list of at least two text fields or expressions and returns the "
"concatenated text. Each argument must be of a text or char type. If you want"
" to concatenate a ``TextField()`` with a ``CharField()``, then be sure to "
"tell Django that the ``output_field`` should be a ``TextField()``. This is "
"also required when concatenating a ``Value`` as in the example below."
msgstr ""

#: ../../ref/models/database-functions.txt:80
msgid ""
"This function will never have a null result. On backends where a null "
"argument results in the entire expression being null, Django will ensure "
"that each null part is converted to an empty string first."
msgstr ""

#: ../../ref/models/database-functions.txt:84
#: ../../ref/models/database-functions.txt:104
#: ../../ref/models/database-functions.txt:123
#: ../../ref/models/database-functions.txt:140
#: ../../ref/models/database-functions.txt:158
msgid "Usage example::"
msgstr ""

#: ../../ref/models/database-functions.txt:97
msgid "Length"
msgstr ""

#: ../../ref/models/database-functions.txt:101
msgid ""
"Accepts a single text field or expression and returns the number of "
"characters the value has. If the expression is null, then the length will "
"also be null."
msgstr ""

#: ../../ref/models/database-functions.txt:116
msgid "Lower"
msgstr ""

#: ../../ref/models/database-functions.txt:120
msgid ""
"Accepts a single text field or expression and returns the lowercase "
"representation."
msgstr ""

#: ../../ref/models/database-functions.txt:132
msgid "Substr"
msgstr ""

#: ../../ref/models/database-functions.txt:136
msgid ""
"Returns a substring of length ``length`` from the field or expression "
"starting at position ``pos``. The position is 1-indexed, so the position "
"must be greater than 0. If ``length`` is ``None``, then the rest of the "
"string will be returned."
msgstr ""

#: ../../ref/models/database-functions.txt:151
msgid "Upper"
msgstr ""

#: ../../ref/models/database-functions.txt:155
msgid ""
"Accepts a single text field or expression and returns the uppercase "
"representation."
msgstr ""

#: ../../ref/models/expressions.txt:3
msgid "Query Expressions"
msgstr ""

#: ../../ref/models/expressions.txt:7
msgid ""
"Query expressions describe a value or a computation that can be used as part"
" of a filter, order by, annotation, or aggregate. There are a number of "
"built-in expressions (documented below) that can be used to help you write "
"queries. Expressions can be combined, or in some cases nested, to form more "
"complex computations."
msgstr ""

#: ../../ref/models/expressions.txt:14
msgid "Supported arithmetic"
msgstr ""

#: ../../ref/models/expressions.txt:16
msgid ""
"Django supports addition, subtraction, multiplication, division, modulo "
"arithmetic, and the power operator on query expressions, using Python "
"constants, variables, and even other expressions."
msgstr ""

#: ../../ref/models/expressions.txt:22
msgid "Support for the power operator ``**`` was added."
msgstr ""

#: ../../ref/models/expressions.txt:25
msgid "Some examples"
msgstr ""

#: ../../ref/models/expressions.txt:29
msgid "Some of the examples rely on functionality that is new in Django 1.8."
msgstr ""

#: ../../ref/models/expressions.txt:70
msgid "Built-in Expressions"
msgstr ""

#: ../../ref/models/expressions.txt:74
msgid ""
"These expressions are defined in ``django.db.models.expressions`` and "
"``django.db.models.aggregates``, but for convenience they're available and "
"usually imported from :mod:`django.db.models`."
msgstr ""

#: ../../ref/models/expressions.txt:79
msgid "``F()`` expressions"
msgstr ""

#: ../../ref/models/expressions.txt:83
msgid ""
"An ``F()`` object represents the value of a model field or annotated column."
" It makes it possible to refer to model field values and perform  database "
"operations using them without actually having to pull them out of the  "
"database into Python memory."
msgstr ""

#: ../../ref/models/expressions.txt:88
msgid ""
"Instead, Django uses the ``F()`` object to generate a SQL expression that "
"describes the required operation at the database level."
msgstr ""

#: ../../ref/models/expressions.txt:91
msgid ""
"This is easiest to understand through an example. Normally, one might do "
"something like this::"
msgstr ""

#: ../../ref/models/expressions.txt:99
msgid ""
"Here, we have pulled the value of ``reporter.stories_filed`` from the "
"database into memory and manipulated it using familiar Python operators, and"
" then saved the object back to the database. But instead we could also have "
"done::"
msgstr ""

#: ../../ref/models/expressions.txt:109
msgid ""
"Although ``reporter.stories_filed = F('stories_filed') + 1`` looks like a "
"normal Python assignment of value to an instance attribute, in fact it's an "
"SQL construct describing an operation on the database."
msgstr ""

#: ../../ref/models/expressions.txt:113
msgid ""
"When Django encounters an instance of ``F()``, it overrides the standard "
"Python operators to create an encapsulated SQL expression; in this case, one"
" which instructs the database to increment the database field represented by"
" ``reporter.stories_filed``."
msgstr ""

#: ../../ref/models/expressions.txt:118
msgid ""
"Whatever value is or was on ``reporter.stories_filed``, Python never gets to"
" know about it - it is dealt with entirely by the database. All Python does,"
" through Django's ``F()`` class, is create the SQL syntax to refer to the "
"field and describe the operation."
msgstr ""

#: ../../ref/models/expressions.txt:125
msgid ""
"In order to access the new value that has been saved in this way, the object"
" will need to be reloaded::"
msgstr ""

#: ../../ref/models/expressions.txt:130
msgid ""
"As well as being used in operations on single instances as above, ``F()`` "
"can be used on ``QuerySets`` of object instances, with ``update()``. This "
"reduces the two queries we were using above - the ``get()`` and the "
":meth:`~Model.save()` - to just one::"
msgstr ""

#: ../../ref/models/expressions.txt:138
msgid ""
"We can also use :meth:`~django.db.models.query.QuerySet.update()` to "
"increment the field value on multiple objects - which could be very much "
"faster than pulling them all into Python from the database, looping over "
"them, incrementing the field value of each one, and saving each one back to "
"the database::"
msgstr ""

#: ../../ref/models/expressions.txt:145
msgid "``F()`` therefore can offer performance advantages by:"
msgstr ""

#: ../../ref/models/expressions.txt:147
msgid "getting the database, rather than Python, to do work"
msgstr ""

#: ../../ref/models/expressions.txt:148
msgid "reducing the number of queries some operations require"
msgstr ""

#: ../../ref/models/expressions.txt:153
msgid "Avoiding race conditions using ``F()``"
msgstr ""

#: ../../ref/models/expressions.txt:155
msgid ""
"Another useful benefit of ``F()`` is that having the database - rather than "
"Python - update a field's value avoids a *race condition*."
msgstr ""

#: ../../ref/models/expressions.txt:158
msgid ""
"If two Python threads execute the code in the first example above, one "
"thread could retrieve, increment, and save a field's value after the other "
"has retrieved it from the database. The value that the second thread saves "
"will be based on the original value; the work of the first thread will "
"simply be lost."
msgstr ""

#: ../../ref/models/expressions.txt:163
msgid ""
"If the database is responsible for updating the field, the process is more "
"robust: it will only ever update the field based on the value of the field "
"in the database when the :meth:`~Model.save()` or ``update()`` is executed, "
"rather than based on its value when the instance was retrieved."
msgstr ""

#: ../../ref/models/expressions.txt:169
msgid "Using ``F()`` in filters"
msgstr ""

#: ../../ref/models/expressions.txt:171
msgid ""
"``F()`` is also very useful in ``QuerySet`` filters, where they make it "
"possible to filter a set of objects against criteria based on their field "
"values, rather than on Python values."
msgstr ""

#: ../../ref/models/expressions.txt:175
msgid ""
"This is documented in :ref:`using F() expressions in queries <using-f"
"-expressions-in-filters>`."
msgstr ""

#: ../../ref/models/expressions.txt:181
msgid "Using ``F()`` with annotations"
msgstr ""

#: ../../ref/models/expressions.txt:183
msgid ""
"``F()`` can be used to create dynamic fields on your models by combining "
"different fields with arithmetic::"
msgstr ""

#: ../../ref/models/expressions.txt:189
msgid ""
"If the fields that you're combining are of different types you'll need to "
"tell Django what kind of field will be returned. Since ``F()`` does not "
"directly support ``output_field`` you will need to wrap the expression with "
":class:`ExpressionWrapper`::"
msgstr ""

#: ../../ref/models/expressions.txt:203
msgid "``Func()`` expressions"
msgstr ""

#: ../../ref/models/expressions.txt:207
msgid ""
"``Func()`` expressions are the base type of all expressions that involve "
"database functions like ``COALESCE`` and ``LOWER``, or aggregates like "
"``SUM``. They can be used directly::"
msgstr ""

#: ../../ref/models/expressions.txt:215
msgid "or they can be used to build a library of database functions::"
msgstr ""

#: ../../ref/models/expressions.txt:222
msgid ""
"But both cases will result in a queryset where each model is annotated with "
"an extra attribute ``field_lower`` produced, roughly, from the following "
"SQL::"
msgstr ""

#: ../../ref/models/expressions.txt:229
msgid ""
"See :doc:`database-functions` for a list of built-in database functions."
msgstr ""

#: ../../ref/models/expressions.txt:231
msgid "The ``Func`` API is as follows:"
msgstr ""

#: ../../ref/models/expressions.txt:237
msgid ""
"A class attribute describing the function that will be generated. "
"Specifically, the ``function`` will be interpolated as the ``function`` "
"placeholder within :attr:`template`. Defaults to ``None``."
msgstr ""

#: ../../ref/models/expressions.txt:243
msgid ""
"A class attribute, as a format string, that describes the SQL that is "
"generated for this function. Defaults to "
"``'%(function)s(%(expressions)s)'``."
msgstr ""

#: ../../ref/models/expressions.txt:249
msgid ""
"A class attribute that denotes the character used to join the list of "
"``expressions`` together. Defaults to ``', '``."
msgstr ""

#: ../../ref/models/expressions.txt:252
msgid ""
"The ``*expressions`` argument is a list of positional expressions that the "
"function will be applied to. The expressions will be converted to strings, "
"joined together with ``arg_joiner``, and then interpolated into the "
"``template`` as the ``expressions`` placeholder."
msgstr ""

#: ../../ref/models/expressions.txt:257
msgid ""
"Positional arguments can be expressions or Python values. Strings are "
"assumed to be column references and will be wrapped in ``F()`` expressions "
"while other values will be wrapped in ``Value()`` expressions."
msgstr ""

#: ../../ref/models/expressions.txt:261
msgid ""
"The ``**extra`` kwargs are ``key=value`` pairs that can be interpolated into"
" the ``template`` attribute. Note that the keywords ``function`` and "
"``template`` can be used to replace the ``function`` and ``template`` "
"attributes respectively, without having to define your own class. "
"``output_field`` can be used to define the expected return type."
msgstr ""

#: ../../ref/models/expressions.txt:268
msgid "``Aggregate()`` expressions"
msgstr ""

#: ../../ref/models/expressions.txt:270
msgid ""
"An aggregate expression is a special case of a :ref:`Func() expression "
"<func-expressions>` that informs the query that a ``GROUP BY`` clause is "
"required. All of the :ref:`aggregate functions <aggregation-functions>`, "
"like ``Sum()`` and ``Count()``, inherit from ``Aggregate()``."
msgstr ""

#: ../../ref/models/expressions.txt:275
msgid ""
"Since ``Aggregate``\\s are expressions and wrap expressions, you can "
"represent some complex computations::"
msgstr ""

#: ../../ref/models/expressions.txt:283
msgid "The ``Aggregate`` API is as follows:"
msgstr ""

#: ../../ref/models/expressions.txt:289
msgid ""
"A class attribute, as a format string, that describes the SQL that is "
"generated for this aggregate. Defaults to ``'%(function)s( %(expressions)s "
")'``."
msgstr ""

#: ../../ref/models/expressions.txt:295
msgid ""
"A class attribute describing the aggregate function that will be generated. "
"Specifically, the ``function`` will be interpolated as the ``function`` "
"placeholder within :attr:`template`. Defaults to ``None``."
msgstr ""

#: ../../ref/models/expressions.txt:299
msgid ""
"The ``expression`` argument can be the name of a field on the model, or "
"another expression. It will be converted to a string and used as the "
"``expressions`` placeholder within the ``template``."
msgstr ""

#: ../../ref/models/expressions.txt:303
msgid ""
"The ``output_field`` argument requires a model field instance, like "
"``IntegerField()`` or ``BooleanField()``, into which Django will load the "
"value after it's retrieved from the database. Usually no arguments are "
"needed when instantiating the model field as any arguments relating to data "
"validation (``max_length``, ``max_digits``, etc.) will not be enforced on "
"the expression's output value."
msgstr ""

#: ../../ref/models/expressions.txt:310
msgid ""
"Note that ``output_field`` is only required when Django is unable to "
"determine what field type the result should be. Complex expressions that mix"
" field types should define the desired ``output_field``. For example, adding"
" an ``IntegerField()`` and a ``FloatField()`` together should probably have "
"``output_field=FloatField()`` defined."
msgstr ""

#: ../../ref/models/expressions.txt:318
msgid "``output_field`` is a new parameter."
msgstr ""

#: ../../ref/models/expressions.txt:320
msgid ""
"The ``**extra`` kwargs are ``key=value`` pairs that can be interpolated into"
" the ``template`` attribute."
msgstr ""

#: ../../ref/models/expressions.txt:325
msgid ""
"Aggregate functions can now use arithmetic and reference multiple model "
"fields in a single function."
msgstr ""

#: ../../ref/models/expressions.txt:329
msgid "Creating your own Aggregate Functions"
msgstr ""

#: ../../ref/models/expressions.txt:331
msgid ""
"Creating your own aggregate is extremely easy. At a minimum, you need to "
"define ``function``, but you can also completely customize the SQL that is "
"generated. Here's a brief example::"
msgstr ""

#: ../../ref/models/expressions.txt:351
msgid "``Value()`` expressions"
msgstr ""

#: ../../ref/models/expressions.txt:356
msgid ""
"A ``Value()`` object represents the smallest possible component of an "
"expression: a simple value. When you need to represent the value of an "
"integer, boolean, or string within an expression, you can wrap that value "
"within a ``Value()``."
msgstr ""

#: ../../ref/models/expressions.txt:361
msgid ""
"You will rarely need to use ``Value()`` directly. When you write the "
"expression ``F('field') + 1``, Django implicitly wraps the ``1`` in a "
"``Value()``, allowing simple values to be used in more complex expressions."
msgstr ""

#: ../../ref/models/expressions.txt:365
msgid ""
"The ``value`` argument describes the value to be included in the expression,"
" such as ``1``, ``True``, or ``None``. Django knows how to convert these "
"Python values into their corresponding database type."
msgstr ""

#: ../../ref/models/expressions.txt:369
msgid ""
"The ``output_field`` argument should be a model field instance, like "
"``IntegerField()`` or ``BooleanField()``, into which Django will load the "
"value after it's retrieved from the database. Usually no arguments are "
"needed when instantiating the model field as any arguments relating to data "
"validation (``max_length``, ``max_digits``, etc.) will not be enforced on "
"the expression's output value."
msgstr ""

#: ../../ref/models/expressions.txt:377
msgid "``ExpressionWrapper()`` expressions"
msgstr ""

#: ../../ref/models/expressions.txt:383
msgid ""
"``ExpressionWrapper`` simply surrounds another expression and provides "
"access to properties, such as ``output_field``, that may not be available on"
" other expressions. ``ExpressionWrapper`` is necessary when using arithmetic"
" on ``F()`` expressions with different types as described in :ref:`using-f"
"-with-annotations`."
msgstr ""

#: ../../ref/models/expressions.txt:390
msgid "Conditional expressions"
msgstr ""

#: ../../ref/models/expressions.txt:394
msgid ""
"Conditional expressions allow you to use :keyword:`if` ... :keyword:`elif` "
"... :keyword:`else` logic in queries. Django natively supports SQL ``CASE`` "
"expressions. For more details see :doc:`conditional-expressions`."
msgstr ""

#: ../../ref/models/expressions.txt:399
msgid "Raw SQL expressions"
msgstr ""

#: ../../ref/models/expressions.txt:407
msgid ""
"Sometimes database expressions can't easily express a complex ``WHERE`` "
"clause. In these edge cases, use the ``RawSQL`` expression. For example::"
msgstr ""

#: ../../ref/models/expressions.txt:413
msgid ""
"These extra lookups may not be portable to different database engines "
"(because you're explicitly writing SQL code) and violate the DRY principle, "
"so you should avoid them if possible."
msgstr ""

#: ../../ref/models/expressions.txt:419
msgid ""
"You should be very careful to escape any parameters that the user can "
"control by using ``params`` in order to protect against :ref:`SQL injection "
"attacks <sql-injection-protection>`."
msgstr ""

#: ../../ref/models/expressions.txt:426
msgid "Technical Information"
msgstr ""

#: ../../ref/models/expressions.txt:428
msgid ""
"Below you'll find technical implementation details that may be useful to "
"library authors. The technical API and examples below will help with "
"creating generic query expressions that can extend the built-in "
"functionality that Django provides."
msgstr ""

#: ../../ref/models/expressions.txt:434
msgid "Expression API"
msgstr ""

#: ../../ref/models/expressions.txt:436
msgid ""
"Query expressions implement the :ref:`query expression API <query-"
"expression>`, but also expose a number of extra methods and attributes "
"listed below. All query expressions must inherit from ``Expression()`` or a "
"relevant subclass."
msgstr ""

#: ../../ref/models/expressions.txt:441
msgid ""
"When a query expression wraps another expression, it is responsible for "
"calling the appropriate methods on the wrapped expression."
msgstr ""

#: ../../ref/models/expressions.txt:448
msgid ""
"Tells Django that this expression contains an aggregate and that a ``GROUP "
"BY`` clause needs to be added to the query."
msgstr ""

#: ../../ref/models/expressions.txt:453
msgid ""
"Provides the chance to do any pre-processing or validation of the expression"
" before it's added to the query. ``resolve_expression()`` must also be "
"called on any nested expressions. A ``copy()`` of ``self`` should be "
"returned with any necessary transformations."
msgstr ""

#: ../../ref/models/expressions.txt:458
msgid "``query`` is the backend query implementation."
msgstr ""

#: ../../ref/models/expressions.txt:460
msgid ""
"``allow_joins`` is a boolean that allows or denies the use of joins in the "
"query."
msgstr ""

#: ../../ref/models/expressions.txt:463
msgid "``reuse`` is a set of reusable joins for multi-join scenarios."
msgstr ""

#: ../../ref/models/expressions.txt:465
msgid ""
"``summarize`` is a boolean that, when ``True``, signals that the query being"
" computed is a terminal aggregate query."
msgstr ""

#: ../../ref/models/expressions.txt:470
msgid "Returns an ordered list of inner expressions. For example::"
msgstr ""

#: ../../ref/models/expressions.txt:477
msgid ""
"Takes a list of expressions and stores them such that "
"``get_source_expressions()`` can return them."
msgstr ""

#: ../../ref/models/expressions.txt:482
msgid ""
"Returns a clone (copy) of ``self``, with any column aliases relabeled. "
"Column aliases are renamed when subqueries are created. "
"``relabeled_clone()`` should also be called on any nested expressions and "
"assigned to the clone."
msgstr ""

#: ../../ref/models/expressions.txt:487
msgid "``change_map`` is a dictionary mapping old aliases to new aliases."
msgstr ""

#: ../../ref/models/expressions.txt:498
msgid ""
"A hook allowing the expression to coerce ``value`` into a more appropriate "
"type."
msgstr ""

#: ../../ref/models/expressions.txt:503
msgid ""
"Returns a tuple containing the ``(aggregate, lookup_path)`` of the first "
"aggregate that this expression (or any nested expression) references, or "
"``(False, ())`` if no aggregate is referenced. For example::"
msgstr ""

#: ../../ref/models/expressions.txt:510
msgid ""
"The ``F()`` expression here references a previous ``Sum()`` computation "
"which means that this filter expression should be added to the ``HAVING`` "
"clause rather than the ``WHERE`` clause."
msgstr ""

#: ../../ref/models/expressions.txt:514
msgid ""
"In the majority of cases, returning the result of ``refs_aggregate`` on any "
"nested expression should be appropriate, as the necessary built-in "
"expressions will return the correct values."
msgstr ""

#: ../../ref/models/expressions.txt:520
msgid ""
"Responsible for returning the list of columns references by this expression."
" ``get_group_by_cols()`` should be called on any nested expressions. ``F()``"
" objects, in particular, hold a reference to a column."
msgstr ""

#: ../../ref/models/expressions.txt:527
msgid "Returns the expression ready to be sorted in ascending order."
msgstr ""

#: ../../ref/models/expressions.txt:531
msgid "Returns the expression ready to be sorted in descending order."
msgstr ""

#: ../../ref/models/expressions.txt:535
msgid ""
"Returns ``self`` with any modifications required to reverse the sort order "
"within an ``order_by`` call. As an example, an expression implementing "
"``NULLS LAST`` would change its value to be ``NULLS FIRST``. Modifications "
"are only required for expressions that implement sort order like "
"``OrderBy``. This method is called when "
":meth:`~django.db.models.query.QuerySet.reverse()` is called on a queryset."
msgstr ""

#: ../../ref/models/expressions.txt:544
msgid "Writing your own Query Expressions"
msgstr ""

#: ../../ref/models/expressions.txt:546
msgid ""
"You can write your own query expression classes that use, and can integrate "
"with, other query expressions. Let's step through an example by writing an "
"implementation of the ``COALESCE`` SQL function, without using the built-in "
":ref:`Func() expressions <func-expressions>`."
msgstr ""

#: ../../ref/models/expressions.txt:551
msgid ""
"The ``COALESCE`` SQL function is defined as taking a list of columns or "
"values. It will return the first column or value that isn't ``NULL``."
msgstr ""

#: ../../ref/models/expressions.txt:554
msgid ""
"We'll start by defining the template to be used for SQL generation and an "
"``__init__()`` method to set some attributes::"
msgstr ""

#: ../../ref/models/expressions.txt:573
msgid ""
"We do some basic validation on the parameters, including requiring at least "
"2 columns or values, and ensuring they are expressions. We are requiring "
"``output_field`` here so that Django knows what kind of model field to "
"assign the eventual result to."
msgstr ""

#: ../../ref/models/expressions.txt:578
msgid ""
"Now we implement the pre-processing and validation. Since we do not have any"
" of our own validation at this point, we just delegate to the nested "
"expressions::"
msgstr ""

#: ../../ref/models/expressions.txt:589
msgid "Next, we write the method responsible for generating the SQL::"
msgstr ""

#: ../../ref/models/expressions.txt:608
msgid ""
"We generate the SQL for each of the ``expressions`` by using the "
"``compiler.compile()`` method, and join the result together with commas. "
"Then the template is filled out with our data and the SQL and parameters are"
" returned."
msgstr ""

#: ../../ref/models/expressions.txt:613
msgid ""
"We've also defined a custom implementation that is specific to the Oracle "
"backend. The ``as_oracle()`` function will be called instead of ``as_sql()``"
" if the Oracle backend is in use."
msgstr ""

#: ../../ref/models/expressions.txt:617
msgid ""
"Finally, we implement the rest of the methods that allow our query "
"expression to play nice with other query expressions::"
msgstr ""

#: ../../ref/models/expressions.txt:626
msgid "Let's see how it works::"
msgstr ""

#: ../../ref/models/fields.txt:3
msgid "Model field reference"
msgstr ""

#: ../../ref/models/fields.txt:10
msgid ""
"This document contains all the API references of :class:`Field` including "
"the `field options`_ and `field types`_ Django offers."
msgstr ""

#: ../../ref/models/fields.txt:15
msgid ""
"If the built-in fields don't do the trick, you can try `django-localflavor "
"<https://django-localflavor.readthedocs.org/>`_, which contains assorted "
"pieces of code that are useful for particular countries or cultures. Also, "
"you can easily :doc:`write your own custom model fields </howto/custom-"
"model-fields>`."
msgstr ""

#: ../../ref/models/fields.txt:23
msgid ""
"Technically, these models are defined in :mod:`django.db.models.fields`, but"
" for convenience they're imported into :mod:`django.db.models`; the standard"
" convention is to use ``from django.db import models`` and refer to fields "
"as ``models.<Foo>Field``."
msgstr ""

#: ../../ref/models/fields.txt:31
msgid "Field options"
msgstr ""

#: ../../ref/models/fields.txt:33
msgid ""
"The following arguments are available to all field types. All are optional."
msgstr ""

#: ../../ref/models/fields.txt:36
msgid "``null``"
msgstr ""

#: ../../ref/models/fields.txt:40
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:43
msgid ""
"Avoid using :attr:`~Field.null` on string-based fields such as "
":class:`CharField` and :class:`TextField` because empty string values will "
"always be stored as empty strings, not as ``NULL``. If a string-based field "
"has ``null=True``, that means it has two possible values for \"no data\": "
"``NULL``, and the empty string. In most cases, it's redundant to have two "
"possible values for \"no data;\" the Django convention is to use the empty "
"string, not ``NULL``."
msgstr ""

#: ../../ref/models/fields.txt:50
msgid ""
"For both string-based and non-string-based fields, you will also need to set"
" ``blank=True`` if you wish to permit empty values in forms, as the "
":attr:`~Field.null` parameter only affects database storage (see "
":attr:`~Field.blank`)."
msgstr ""

#: ../../ref/models/fields.txt:57
msgid ""
"When using the Oracle database backend, the value ``NULL`` will be stored to"
" denote the empty string regardless of this attribute."
msgstr ""

#: ../../ref/models/fields.txt:60
msgid ""
"If you want to accept :attr:`~Field.null` values with :class:`BooleanField`,"
" use :class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:64
msgid "``blank``"
msgstr ""

#: ../../ref/models/fields.txt:68
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

#: ../../ref/models/fields.txt:70
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is"
" purely database-related, whereas :attr:`~Field.blank` is validation-"
"related. If a field has ``blank=True``, form validation will allow entry of "
"an empty value. If a field has ``blank=False``, the field will be required."
msgstr ""

#: ../../ref/models/fields.txt:78
msgid "``choices``"
msgstr ""

#: ../../ref/models/fields.txt:82
msgid ""
"An iterable (e.g., a list or tuple) consisting itself of iterables of "
"exactly two items (e.g. ``[(A, B), (A, B) ...]``) to use as choices for this"
" field. If this is given, the default form widget will be a select box with "
"these choices instead of the standard text field."
msgstr ""

#: ../../ref/models/fields.txt:87
msgid ""
"The first element in each tuple is the actual value to be set on the model, "
"and the second element is the human-readable name. For example::"
msgstr ""

#: ../../ref/models/fields.txt:97
msgid ""
"Generally, it's best to define choices inside a model class, and to define a"
" suitably-named constant for each value::"
msgstr ""

#: ../../ref/models/fields.txt:120
msgid ""
"Though you can define a choices list outside of a model class and then refer"
" to it, defining the choices and names for each choice inside the model "
"class keeps all of that information with the class that uses it, and makes "
"the choices easy to reference (e.g, ``Student.SOPHOMORE`` will work anywhere"
" that the ``Student`` model has been imported)."
msgstr ""

#: ../../ref/models/fields.txt:126
msgid ""
"You can also collect your available choices into named groups that can be "
"used for organizational purposes::"
msgstr ""

#: ../../ref/models/fields.txt:143
msgid ""
"The first element in each tuple is the name to apply to the group. The "
"second element is an iterable of 2-tuples, with each 2-tuple containing a "
"value and a human-readable name for an option. Grouped options may be "
"combined with ungrouped options within a single list (such as the `unknown` "
"option in this example)."
msgstr ""

#: ../../ref/models/fields.txt:149
msgid ""
"For each model field that has :attr:`~Field.choices` set, Django will add a "
"method to retrieve the human-readable name for the field's current value. "
"See :meth:`~django.db.models.Model.get_FOO_display` in the database API "
"documentation."
msgstr ""

#: ../../ref/models/fields.txt:154
msgid ""
"Note that choices can be any iterable object -- not necessarily a list or "
"tuple. This lets you construct choices dynamically. But if you find yourself"
" hacking :attr:`~Field.choices` to be dynamic, you're probably better off "
"using a proper database table with a :class:`ForeignKey`. "
":attr:`~Field.choices` is meant for static data that doesn't change much, if"
" ever."
msgstr ""

#: ../../ref/models/fields.txt:162
msgid ""
"Unless :attr:`blank=False<Field.blank>` is set on the field along with a "
":attr:`~Field.default` then a label containing ``\"---------\"`` will be "
"rendered with the select box. To override this behavior, add a tuple to "
"``choices`` containing ``None``; e.g. ``(None, 'Your String For Display')``."
" Alternatively, you can use an empty string instead of ``None`` where this "
"makes sense - such as on a :class:`~django.db.models.CharField`."
msgstr ""

#: ../../ref/models/fields.txt:170
msgid "``db_column``"
msgstr ""

#: ../../ref/models/fields.txt:174
msgid ""
"The name of the database column to use for this field. If this isn't given, "
"Django will use the field's name."
msgstr ""

#: ../../ref/models/fields.txt:177
msgid ""
"If your database column name is an SQL reserved word, or contains characters"
" that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/fields.txt:183
msgid "``db_index``"
msgstr ""

#: ../../ref/models/fields.txt:187
msgid ""
"If ``True``, :djadmin:`django-admin sqlindexes <sqlindexes>` will output a "
"``CREATE INDEX`` statement for this field."
msgstr ""

#: ../../ref/models/fields.txt:191 ../../ref/models/options.txt:89
msgid "``db_tablespace``"
msgstr ""

#: ../../ref/models/fields.txt:195
msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this field's index, if this field is indexed. The default is the "
"project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the "
":attr:`~Options.db_tablespace` of the model, if any. If the backend doesn't "
"support tablespaces for indexes, this option is ignored."
msgstr ""

#: ../../ref/models/fields.txt:202
msgid "``default``"
msgstr ""

#: ../../ref/models/fields.txt:206
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

#: ../../ref/models/fields.txt:209
msgid ""
"The default cannot be a mutable object (model instance, list, set, etc.), as"
" a reference to the same instance of that object would be used as the "
"default value in all new model instances. Instead, wrap the desired default "
"in a callable.  For example, if you had a custom ``JSONField`` and wanted to"
" specify a dictionary as the default, use a function as follows::"
msgstr ""

#: ../../ref/models/fields.txt:220
msgid ""
"Note that ``lambda``\\s cannot be used for field options like ``default`` "
"because they cannot be :ref:`serialized by migrations <migration-"
"serializing>`. See that documentation for other caveats."
msgstr ""

#: ../../ref/models/fields.txt:224
msgid ""
"The default value is used when new model instances are created and a value "
"isn't provided for the field. When the field is a primary key, the default "
"is also used when the field is set to ``None``."
msgstr ""

#: ../../ref/models/fields.txt:230
msgid ""
"The default wasn't used for ``None`` primary key values in previous "
"versions."
msgstr ""

#: ../../ref/models/fields.txt:234
msgid "``editable``"
msgstr ""

#: ../../ref/models/fields.txt:238
msgid ""
"If ``False``, the field will not be displayed in the admin or any other "
":class:`~django.forms.ModelForm`. They are also skipped during :ref:`model "
"validation <validating-objects>`. Default is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:247
msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override."
msgstr ""

#: ../../ref/models/fields.txt:251
msgid ""
"Error message keys include ``null``, ``blank``, ``invalid``, "
"``invalid_choice``, ``unique``, and ``unique_for_date``. Additional error "
"message keys are specified for each field in the `Field types`_ section "
"below."
msgstr ""

#: ../../ref/models/fields.txt:257
msgid "The ``unique_for_date`` error message key was added."
msgstr ""

#: ../../ref/models/fields.txt:264
msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""

#: ../../ref/models/fields.txt:267
msgid ""
"Note that this value is *not* HTML-escaped in automatically-generated forms."
" This lets you include HTML in :attr:`~Field.help_text` if you so desire. "
"For example::"
msgstr ""

#: ../../ref/models/fields.txt:273
msgid ""
"Alternatively you can use plain text and ``django.utils.html.escape()`` to "
"escape any HTML special characters. Ensure that you escape any help text "
"that may come from untrusted users to avoid a cross-site scripting attack."
msgstr ""

#: ../../ref/models/fields.txt:279
msgid "``primary_key``"
msgstr ""

#: ../../ref/models/fields.txt:283
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

#: ../../ref/models/fields.txt:285
msgid ""
"If you don't specify ``primary_key=True`` for any field in your model, "
"Django will automatically add an :class:`AutoField` to hold the primary key,"
" so you don't need to set ``primary_key=True`` on any of your fields unless "
"you want to override the default primary-key behavior. For more, see :ref"
":`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:291
msgid ""
"``primary_key=True`` implies :attr:`null=False <Field.null>` and "
":attr:`unique=True <Field.unique>`. Only one primary key is allowed on an "
"object."
msgstr ""

#: ../../ref/models/fields.txt:295
msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one."
msgstr ""

#: ../../ref/models/fields.txt:304
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

#: ../../ref/models/fields.txt:306
msgid ""
"This is enforced at the database level and by model validation. If you try "
"to save a model with a duplicate value in a :attr:`~Field.unique` field, a "
":exc:`django.db.IntegrityError` will be raised by the model's "
":meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/models/fields.txt:311
msgid ""
"This option is valid on all field types except :class:`ManyToManyField`, "
":class:`OneToOneField`, and :class:`FileField`."
msgstr ""

#: ../../ref/models/fields.txt:314
msgid ""
"Note that when ``unique`` is ``True``, you don't need to specify "
":attr:`~Field.db_index`, because ``unique`` implies the creation of an "
"index."
msgstr ""

#: ../../ref/models/fields.txt:318
msgid "``unique_for_date``"
msgstr ""

#: ../../ref/models/fields.txt:322
msgid ""
"Set this to the name of a :class:`DateField` or :class:`DateTimeField` to "
"require that this field be unique for the value of the date field."
msgstr ""

#: ../../ref/models/fields.txt:325
msgid ""
"For example, if you have a field ``title`` that has "
"``unique_for_date=\"pub_date\"``, then Django wouldn't allow the entry of "
"two records with the same ``title`` and ``pub_date``."
msgstr ""

#: ../../ref/models/fields.txt:329
msgid ""
"Note that if you set this to point to a :class:`DateTimeField`, only the "
"date portion of the field will be considered. Besides, when "
":setting:`USE_TZ` is ``True``, the check will be performed in the "
":ref:`current time zone <default-current-time-zone>` at the time the object "
"gets saved."
msgstr ""

#: ../../ref/models/fields.txt:334
msgid ""
"This is enforced by :meth:`Model.validate_unique()` during model validation "
"but not at the database level. If any :attr:`~Field.unique_for_date` "
"constraint involves fields that are not part of a "
":class:`~django.forms.ModelForm` (for example, if one of the fields is "
"listed in ``exclude`` or has :attr:`editable=False<Field.editable>`), "
":meth:`Model.validate_unique()` will skip validation for that particular "
"constraint."
msgstr ""

#: ../../ref/models/fields.txt:342
msgid "``unique_for_month``"
msgstr ""

#: ../../ref/models/fields.txt:346
msgid ""
"Like :attr:`~Field.unique_for_date`, but requires the field to be unique "
"with respect to the month."
msgstr ""

#: ../../ref/models/fields.txt:350
msgid "``unique_for_year``"
msgstr ""

#: ../../ref/models/fields.txt:354
msgid ""
"Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""

#: ../../ref/models/fields.txt:357 ../../ref/models/options.txt:374
msgid "``verbose_name``"
msgstr ""

#: ../../ref/models/fields.txt:361
msgid ""
"A human-readable name for the field. If the verbose name isn't given, Django"
" will automatically create it using the field's attribute name, converting "
"underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""

#: ../../ref/models/fields.txt:370
msgid ""
"A list of validators to run for this field. See the :doc:`validators "
"documentation </ref/validators>` for more information."
msgstr ""

#: ../../ref/models/fields.txt:374
msgid "Registering and fetching lookups"
msgstr ""

#: ../../ref/models/fields.txt:376
msgid ""
"``Field`` implements the :ref:`lookup registration API <lookup-registration-"
"api>`. The API can be used to customize which lookups are available for a "
"field class, and how lookups are fetched from a field."
msgstr ""

#: ../../ref/models/fields.txt:383
msgid "Field types"
msgstr ""

#: ../../ref/models/fields.txt:388
msgid "``AutoField``"
msgstr ""

#: ../../ref/models/fields.txt:392
msgid ""
"An :class:`IntegerField` that automatically increments according to "
"available IDs. You usually won't need to use this directly; a primary key "
"field will automatically be added to your model if you don't specify "
"otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""

#: ../../ref/models/fields.txt:398
msgid "``BigIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:402
msgid ""
"A 64 bit integer, much like an :class:`IntegerField` except that it is "
"guaranteed to fit numbers from ``-9223372036854775808`` to "
"``9223372036854775807``. The default form widget for this field is a "
":class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:408
msgid "``BinaryField``"
msgstr ""

#: ../../ref/models/fields.txt:412
msgid ""
"A field to store raw binary data. It only supports ``bytes`` assignment. Be "
"aware that this field has limited functionality. For example, it is not "
"possible to filter a queryset on a ``BinaryField`` value."
msgstr ""

#: ../../ref/models/fields.txt:416
msgid "Abusing ``BinaryField``"
msgstr ""

#: ../../ref/models/fields.txt:418
msgid ""
"Although you might think about storing files in the database, consider that "
"it is bad design in 99% of the cases. This field is *not* a replacement for "
"proper :doc:`static files </howto/static-files/index>` handling."
msgstr ""

#: ../../ref/models/fields.txt:427
msgid "A true/false field."
msgstr ""

#: ../../ref/models/fields.txt:429
msgid ""
"The default form widget for this field is a "
":class:`~django.forms.CheckboxInput`."
msgstr ""

#: ../../ref/models/fields.txt:432
msgid ""
"If you need to accept :attr:`~Field.null` values then use "
":class:`NullBooleanField` instead."
msgstr ""

#: ../../ref/models/fields.txt:435
msgid ""
"The default value of ``BooleanField`` is ``None`` when :attr:`Field.default`"
" isn't defined."
msgstr ""

#: ../../ref/models/fields.txt:443
msgid "A string field, for small- to large-sized strings."
msgstr ""

#: ../../ref/models/fields.txt:445
msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""

#: ../../ref/models/fields.txt:447 ../../ref/models/fields.txt:1067
msgid ""
"The default form widget for this field is a "
":class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:449
msgid ":class:`CharField` has one extra required argument:"
msgstr ""

#: ../../ref/models/fields.txt:453
msgid ""
"The maximum length (in characters) of the field. The max_length is enforced "
"at the database level and in Django's validation."
msgstr ""

#: ../../ref/models/fields.txt:458
msgid ""
"If you are writing an application that must be portable to multiple database"
" backends, you should be aware that there are restrictions on ``max_length``"
" for some backends. Refer to the :doc:`database backend notes "
"</ref/databases>` for details."
msgstr ""

#: ../../ref/models/fields.txt:463 ../../ref/models/fields.txt:1042
msgid "MySQL users"
msgstr ""

#: ../../ref/models/fields.txt:465
msgid ""
"If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin`` "
"collation (which is *not* the default), there are some issues to be aware "
"of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:472
msgid "``CommaSeparatedIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:476
msgid ""
"A field of integers separated by commas. As in :class:`CharField`, the "
":attr:`~CharField.max_length` argument is required and the note about "
"database portability mentioned there should be heeded."
msgstr ""

#: ../../ref/models/fields.txt:485
msgid ""
"A date, represented in Python by a ``datetime.date`` instance. Has a few "
"extra, optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:490
msgid ""
"Automatically set the field to now every time the object is saved. Useful "
"for \"last-modified\" timestamps. Note that the current date is *always* "
"used; it's not just a default value that you can override."
msgstr ""

#: ../../ref/models/fields.txt:496
msgid ""
"Automatically set the field to now when the object is first created. Useful "
"for creation of timestamps. Note that the current date is *always* used; "
"it's not just a default value that you can override. So even if you set a "
"value for this field when creating the object, it will be ignored. If you "
"want to be able to modify this field, set the following instead of "
"``auto_now_add=True``:"
msgstr ""

#: ../../ref/models/fields.txt:503
msgid ""
"For :class:`DateField`: ``default=date.today`` - from "
":meth:`datetime.date.today`"
msgstr ""

#: ../../ref/models/fields.txt:505
msgid ""
"For :class:`DateTimeField`: ``default=timezone.now`` - from "
":func:`django.utils.timezone.now`"
msgstr ""

#: ../../ref/models/fields.txt:508
msgid ""
"The default form widget for this field is a "
":class:`~django.forms.TextInput`. The admin adds a JavaScript calendar, and "
"a shortcut for \"Today\". Includes an additional ``invalid_date`` error "
"message key."
msgstr ""

#: ../../ref/models/fields.txt:513
msgid ""
"The options ``auto_now_add``, ``auto_now``, and ``default`` are mutually "
"exclusive. Any combination of these options will result in an error."
msgstr ""

#: ../../ref/models/fields.txt:517
msgid ""
"As currently implemented, setting ``auto_now`` or ``auto_now_add`` to "
"``True`` will cause the field to have ``editable=False`` and ``blank=True`` "
"set."
msgstr ""

#: ../../ref/models/fields.txt:522
msgid ""
"The ``auto_now`` and ``auto_now_add`` options will always use the date in "
"the :ref:`default timezone <default-current-time-zone>` at the moment of "
"creation or update. If you need something different, you may want to "
"consider simply using your own callable default or overriding ``save()`` "
"instead of using ``auto_now`` or ``auto_now_add``; or using a "
"``DateTimeField`` instead of a ``DateField`` and deciding how to handle the "
"conversion from datetime to date at display time."
msgstr ""

#: ../../ref/models/fields.txt:535
msgid ""
"A date and time, represented in Python by a ``datetime.datetime`` instance. "
"Takes the same extra arguments as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:538
msgid ""
"The default form widget for this field is a single "
":class:`~django.forms.TextInput`. The admin uses two separate "
":class:`~django.forms.TextInput` widgets with JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:547
msgid ""
"A fixed-precision decimal number, represented in Python by a "
":class:`~decimal.Decimal` instance. Has two **required** arguments:"
msgstr ""

#: ../../ref/models/fields.txt:552
msgid ""
"The maximum number of digits allowed in the number. Note that this number "
"must be greater than or equal to ``decimal_places``."
msgstr ""

#: ../../ref/models/fields.txt:557
msgid "The number of decimal places to store with the number."
msgstr ""

#: ../../ref/models/fields.txt:559
msgid ""
"For example, to store numbers up to ``999`` with a resolution of 2 decimal "
"places, you'd use::"
msgstr ""

#: ../../ref/models/fields.txt:564
msgid ""
"And to store numbers up to approximately one billion with a resolution of 10"
" decimal places::"
msgstr ""

#: ../../ref/models/fields.txt:569 ../../ref/models/fields.txt:868
msgid ""
"The default form widget for this field is a "
":class:`~django.forms.NumberInput` when :attr:`~django.forms.Field.localize`"
" is ``False`` or :class:`~django.forms.TextInput` otherwise."
msgstr ""

#: ../../ref/models/fields.txt:575
msgid ""
"For more information about the differences between the :class:`FloatField` "
"and :class:`DecimalField` classes, please see :ref:`FloatField vs. "
"DecimalField <floatfield_vs_decimalfield>`."
msgstr ""

#: ../../ref/models/fields.txt:586
msgid ""
"A field for storing periods of time - modeled in Python by "
":class:`~python:datetime.timedelta`. When used on PostgreSQL, the data type "
"used is an ``interval`` and on Oracle the data type is ``INTERVAL DAY(9) TO "
"SECOND(6)``. Otherwise a ``bigint`` of microseconds is used."
msgstr ""

#: ../../ref/models/fields.txt:593
msgid ""
"Arithmetic with ``DurationField`` works in most cases. However on all "
"databases other than PostgreSQL, comparing the value of a ``DurationField`` "
"to arithmetic on ``DateTimeField`` instances will not work as expected."
msgstr ""

#: ../../ref/models/fields.txt:602
msgid ""
"A :class:`CharField` that checks that the value is a valid email address. It"
" uses :class:`~django.core.validators.EmailValidator` to validate the input."
msgstr ""

#: ../../ref/models/fields.txt:607
msgid ""
"The default ``max_length`` was increased from 75 to 254 in order to be "
"compliant with RFC3696/5321."
msgstr ""

#: ../../ref/models/fields.txt:615
msgid "A file-upload field."
msgstr ""

#: ../../ref/models/fields.txt:618
msgid ""
"The ``primary_key`` and ``unique`` arguments are not supported, and will "
"raise a ``TypeError`` if used."
msgstr ""

#: ../../ref/models/fields.txt:621
msgid "Has two optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:627
msgid "``upload_to`` was required in older versions of Django."
msgstr ""

#: ../../ref/models/fields.txt:629
msgid ""
"A local filesystem path that will be appended to your :setting:`MEDIA_ROOT` "
"setting to determine the value of the "
":attr:`~django.db.models.fields.files.FieldFile.url` attribute."
msgstr ""

#: ../../ref/models/fields.txt:633
msgid ""
"This path may contain :func:`~time.strftime` formatting, which will be "
"replaced by the date/time of the file upload (so that uploaded files don't "
"fill up the given directory)."
msgstr ""

#: ../../ref/models/fields.txt:637
msgid ""
"This may also be a callable, such as a function, which will be called to "
"obtain the upload path, including the filename. This callable must be able "
"to accept two arguments, and return a Unix-style path (with forward slashes)"
" to be passed along to the storage system. The two arguments that will be "
"passed are:"
msgstr ""

#: ../../ref/models/fields.txt:646 ../../ref/signals.txt:98
#: ../../ref/signals.txt:115 ../../ref/signals.txt:145
#: ../../ref/signals.txt:178 ../../ref/signals.txt:202
#: ../../ref/signals.txt:230 ../../ref/signals.txt:302
#: ../../ref/signals.txt:329
msgid "``instance``"
msgstr ""

#: ../../ref/models/fields.txt:646
msgid ""
"An instance of the model where the ``FileField`` is defined. More "
"specifically, this is the particular instance where the current file is "
"being attached."
msgstr ""

#: ../../ref/models/fields.txt:651
msgid ""
"In most cases, this object will not have been saved to the database yet, so "
"if it uses the default ``AutoField``, *it might not yet have a value for its"
" primary key field*."
msgstr ""

#: ../../ref/models/fields.txt:656
msgid "``filename``"
msgstr ""

#: ../../ref/models/fields.txt:656
msgid ""
"The filename that was originally given to the file. This may or may not be "
"taken into account when determining the final destination path."
msgstr ""

#: ../../ref/models/fields.txt:663
msgid ""
"A storage object, which handles the storage and retrieval of your files. See"
" :doc:`/topics/files` for details on how to provide this object."
msgstr ""

#: ../../ref/models/fields.txt:666 ../../ref/models/fields.txt:915
msgid ""
"The default form widget for this field is a "
":class:`~django.forms.ClearableFileInput`."
msgstr ""

#: ../../ref/models/fields.txt:669
msgid ""
"Using a :class:`FileField` or an :class:`ImageField` (see below) in a model "
"takes a few steps:"
msgstr ""

#: ../../ref/models/fields.txt:672
msgid ""
"In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the "
"full path to a directory where you'd like Django to store uploaded files. "
"(For performance, these files are not stored in the database.) Define "
":setting:`MEDIA_URL` as the base public URL of that directory. Make sure "
"that this directory is writable by the Web server's user account."
msgstr ""

#: ../../ref/models/fields.txt:678
msgid ""
"Add the :class:`FileField` or :class:`ImageField` to your model, defining "
"the :attr:`~FileField.upload_to` option to specify a subdirectory of "
":setting:`MEDIA_ROOT` to use for uploaded files."
msgstr ""

#: ../../ref/models/fields.txt:682
msgid ""
"All that will be stored in your database is a path to the file (relative to "
":setting:`MEDIA_ROOT`). You'll most likely want to use the convenience "
":attr:`~django.db.models.fields.files.FieldFile.url` attribute provided by "
"Django. For example, if your :class:`ImageField` is called ``mug_shot``, you"
" can get the absolute path to your image in a template with ``{{ "
"object.mug_shot.url }}``."
msgstr ""

#: ../../ref/models/fields.txt:689
msgid ""
"For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, and"
" :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The "
"``'%Y/%m/%d'`` part of :attr:`~FileField.upload_to` is "
":func:`~time.strftime` formatting; ``'%Y'`` is the four-digit year, ``'%m'``"
" is the two-digit month and ``'%d'`` is the two-digit day. If you upload a "
"file on Jan. 15, 2007, it will be saved in the directory "
"``/home/media/photos/2007/01/15``."
msgstr ""

#: ../../ref/models/fields.txt:696
msgid ""
"If you wanted to retrieve the uploaded file's on-disk filename, or the "
"file's size, you could use the :attr:`~django.core.files.File.name` and "
":attr:`~django.core.files.File.size` attributes respectively; for more "
"information on the available attributes and methods, see the "
":class:`~django.core.files.File` class reference and the "
":doc:`/topics/files` topic guide."
msgstr ""

#: ../../ref/models/fields.txt:704
msgid ""
"The file is saved as part of saving the model in the database, so the actual"
" file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

#: ../../ref/models/fields.txt:708
msgid ""
"The uploaded file's relative URL can be obtained using the "
":attr:`~django.db.models.fields.files.FieldFile.url` attribute. Internally, "
"this calls the :meth:`~django.core.files.storage.Storage.url` method of the "
"underlying :class:`~django.core.files.storage.Storage` class."
msgstr ""

#: ../../ref/models/fields.txt:715
msgid ""
"Note that whenever you deal with uploaded files, you should pay close "
"attention to where you're uploading them and what type of files they are, to"
" avoid security holes. *Validate all uploaded files* so that you're sure the"
" files are what you think they are. For example, if you blindly let somebody"
" upload files, without validation, to a directory that's within your Web "
"server's document root, then somebody could upload a CGI or PHP script and "
"execute that script by visiting its URL on your site. Don't allow that."
msgstr ""

#: ../../ref/models/fields.txt:723
msgid ""
"Also note that even an uploaded HTML file, since it can be executed by the "
"browser (though not by the server), can pose security threats that are "
"equivalent to XSS or CSRF attacks."
msgstr ""

#: ../../ref/models/fields.txt:727
msgid ""
":class:`FileField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""

#: ../../ref/models/fields.txt:732
msgid "FileField and FieldFile"
msgstr ""

#: ../../ref/models/fields.txt:738
msgid ""
"When you access a :class:`~django.db.models.FileField` on a model, you are "
"given an instance of :class:`FieldFile` as a proxy for accessing the "
"underlying file. In addition to the functionality inherited from "
":class:`django.core.files.File`, this class has several attributes and "
"methods that can be used to interact with file data:"
msgstr ""

#: ../../ref/models/fields.txt:746
msgid ""
"A read-only property to access the file's relative URL by calling the "
":meth:`~django.core.files.storage.Storage.url` method of the underlying "
":class:`~django.core.files.storage.Storage` class."
msgstr ""

#: ../../ref/models/fields.txt:752
msgid ""
"Behaves like the standard Python ``open()`` method and opens the file "
"associated with this instance in the mode specified by ``mode``."
msgstr ""

#: ../../ref/models/fields.txt:757
msgid ""
"Behaves like the standard Python ``file.close()`` method and closes the file"
" associated with this instance."
msgstr ""

#: ../../ref/models/fields.txt:762
msgid ""
"This method takes a filename and file contents and passes them to the "
"storage class for the field, then associates the stored file with the model "
"field. If you want to manually associate file data with "
":class:`~django.db.models.FileField` instances on your model, the ``save()``"
" method is used to persist that file data."
msgstr ""

#: ../../ref/models/fields.txt:768
msgid ""
"Takes two required arguments: ``name`` which is the name of the file, and "
"``content`` which is an object containing the file's contents.  The optional"
" ``save`` argument controls whether or not the model instance is saved after"
" the file associated with this field has been altered. Defaults to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:774
msgid ""
"Note that the ``content`` argument should be an instance of "
":class:`django.core.files.File`, not Python's built-in file object. You can "
"construct a :class:`~django.core.files.File` from an existing Python file "
"object like this::"
msgstr ""

#: ../../ref/models/fields.txt:784
msgid "Or you can construct one from a Python string like this::"
msgstr ""

#: ../../ref/models/fields.txt:789
msgid "For more information, see :doc:`/topics/files`."
msgstr ""

#: ../../ref/models/fields.txt:793
msgid ""
"Deletes the file associated with this instance and clears all attributes on "
"the field. Note: This method will close the file if it happens to be open "
"when ``delete()`` is called."
msgstr ""

#: ../../ref/models/fields.txt:797
msgid ""
"The optional ``save`` argument controls whether or not the model instance is"
" saved after the file associated with this field has been deleted. Defaults "
"to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:801
msgid ""
"Note that when a model is deleted, related files are not deleted. If you "
"need to cleanup orphaned files, you'll need to handle it yourself (for "
"instance, with a custom management command that can be run manually or "
"scheduled to run periodically via e.g. cron)."
msgstr ""

#: ../../ref/models/fields.txt:813
msgid ""
"A :class:`CharField` whose choices are limited to the filenames in a certain"
" directory on the filesystem. Has three special arguments, of which the "
"first is **required**:"
msgstr ""

#: ../../ref/models/fields.txt:819
msgid ""
"Required. The absolute filesystem path to a directory from which this "
":class:`FilePathField` should get its choices. Example: "
"``\"/home/images\"``."
msgstr ""

#: ../../ref/models/fields.txt:824
msgid ""
"Optional. A regular expression, as a string, that :class:`FilePathField` "
"will use to filter filenames. Note that the regex will be applied to the "
"base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will "
"match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.png``."
msgstr ""

#: ../../ref/models/fields.txt:831
msgid ""
"Optional. Either ``True`` or ``False``. Default is ``False``. Specifies "
"whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""

#: ../../ref/models/fields.txt:836
msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``True``.  Specifies "
"whether files in the specified location should be included.  Either this or "
":attr:`~FilePathField.allow_folders` must be ``True``."
msgstr ""

#: ../../ref/models/fields.txt:842
msgid ""
"Optional.  Either ``True`` or ``False``.  Default is ``False``.  Specifies "
"whether folders in the specified location should be included.  Either this "
"or :attr:`~FilePathField.allow_files` must be ``True``."
msgstr ""

#: ../../ref/models/fields.txt:846
msgid "Of course, these arguments can be used together."
msgstr ""

#: ../../ref/models/fields.txt:848
msgid ""
"The one potential gotcha is that :attr:`~FilePathField.match` applies to the"
" base filename, not the full path. So, this example::"
msgstr ""

#: ../../ref/models/fields.txt:853
msgid ""
"...will match ``/home/images/foo.png`` but not ``/home/images/foo/bar.png`` "
"because the :attr:`~FilePathField.match` applies to the base filename "
"(``foo.png`` and ``bar.png``)."
msgstr ""

#: ../../ref/models/fields.txt:857
msgid ""
":class:`FilePathField` instances are created in your database as ``varchar``"
" columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""

#: ../../ref/models/fields.txt:866
msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr ""

#: ../../ref/models/fields.txt:874
msgid "``FloatField`` vs. ``DecimalField``"
msgstr ""

#: ../../ref/models/fields.txt:876
msgid ""
"The :class:`FloatField` class is sometimes mixed up with the "
":class:`DecimalField` class. Although they both represent real numbers, they"
" represent those numbers differently. ``FloatField`` uses Python's ``float``"
" type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For"
" information on the difference between the two, see Python's documentation "
"for the :mod:`decimal` module."
msgstr ""

#: ../../ref/models/fields.txt:888
msgid ""
"Inherits all attributes and methods from :class:`FileField`, but also "
"validates that the uploaded object is a valid image."
msgstr ""

#: ../../ref/models/fields.txt:891
msgid ""
"In addition to the special attributes that are available for "
":class:`FileField`, an :class:`ImageField` also has ``height`` and ``width``"
" attributes."
msgstr ""

#: ../../ref/models/fields.txt:894
msgid ""
"To facilitate querying on those attributes, :class:`ImageField` has two "
"extra optional arguments:"
msgstr ""

#: ../../ref/models/fields.txt:899
msgid ""
"Name of a model field which will be auto-populated with the height of the "
"image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:904
msgid ""
"Name of a model field which will be auto-populated with the width of the "
"image each time the model instance is saved."
msgstr ""

#: ../../ref/models/fields.txt:907
msgid "Requires the `Pillow`_ library."
msgstr ""

#: ../../ref/models/fields.txt:911
msgid ""
":class:`ImageField` instances are created in your database as ``varchar`` "
"columns with a default max length of 100 characters. As with other fields, "
"you can change the maximum length using the :attr:`~CharField.max_length` "
"argument."
msgstr ""

#: ../../ref/models/fields.txt:923
msgid ""
"An integer. Values from ``-2147483648`` to ``2147483647`` are safe in all "
"databases supported by Django. The default form widget for this field is a "
":class:`~django.forms.NumberInput` when :attr:`~django.forms.Field.localize`"
" is ``False`` or :class:`~django.forms.TextInput` otherwise."
msgstr ""

#: ../../ref/models/fields.txt:933
msgid ""
"This field has been deprecated in favor of "
":class:`~django.db.models.GenericIPAddressField`."
msgstr ""

#: ../../ref/models/fields.txt:937
msgid ""
"An IP address, in string format (e.g. \"192.0.2.30\"). The default form "
"widget for this field is a :class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:945
msgid ""
"An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or "
"``2a02:42fe::4``). The default form widget for this field is a "
":class:`~django.forms.TextInput`."
msgstr ""

#: ../../ref/models/fields.txt:957
msgid ""
"Limits valid inputs to the specified protocol. Accepted values are "
"``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case "
"insensitive."
msgstr ""

#: ../../ref/models/fields.txt:968
msgid ""
"If you allow for blank values, you have to allow for null values since blank"
" values are stored as null."
msgstr ""

#: ../../ref/models/fields.txt:976
msgid ""
"Like a :class:`BooleanField`, but allows ``NULL`` as one of the options. Use"
" this instead of a :class:`BooleanField` with ``null=True``. The default "
"form widget for this field is a :class:`~django.forms.NullBooleanSelect`."
msgstr ""

#: ../../ref/models/fields.txt:981
msgid "``PositiveIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:985
msgid ""
"Like an :class:`IntegerField`, but must be either positive or zero (``0``). "
"Values from ``0`` to ``2147483647`` are safe in all databases supported by "
"Django. The value ``0`` is accepted for backward compatibility reasons."
msgstr ""

#: ../../ref/models/fields.txt:990
msgid "``PositiveSmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:994
msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain"
" (database-dependent) point. Values from ``0`` to ``32767`` are safe in all "
"databases supported by Django."
msgstr ""

#: ../../ref/models/fields.txt:1003
msgid ""
":term:`Slug` is a newspaper term. A slug is a short label for something, "
"containing only letters, numbers, underscores or hyphens. They're generally "
"used in URLs."
msgstr ""

#: ../../ref/models/fields.txt:1007
msgid ""
"Like a CharField, you can specify :attr:`~CharField.max_length` (read the "
"note about database portability and :attr:`~CharField.max_length` in that "
"section, too). If :attr:`~CharField.max_length` is not specified, Django "
"will use a default length of 50."
msgstr ""

#: ../../ref/models/fields.txt:1012
msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr ""

#: ../../ref/models/fields.txt:1014
msgid ""
"It is often useful to automatically prepopulate a SlugField based on the "
"value of some other value.  You can do this automatically in the admin using"
" :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""

#: ../../ref/models/fields.txt:1019
msgid "``SmallIntegerField``"
msgstr ""

#: ../../ref/models/fields.txt:1023
msgid ""
"Like an :class:`IntegerField`, but only allows values under a certain "
"(database-dependent) point. Values from ``-32768`` to ``32767`` are safe in "
"all databases supported by Django."
msgstr ""

#: ../../ref/models/fields.txt:1028
msgid "``TextField``"
msgstr ""

#: ../../ref/models/fields.txt:1032
msgid ""
"A large text field. The default form widget for this field is a "
":class:`~django.forms.Textarea`."
msgstr ""

#: ../../ref/models/fields.txt:1037
msgid ""
"If you specify a ``max_length`` attribute, it will be reflected in the "
":class:`~django.forms.Textarea` widget of the auto-generated form field. "
"However it is not enforced at the model or database level. Use a "
":class:`CharField` for that."
msgstr ""

#: ../../ref/models/fields.txt:1044
msgid ""
"If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin`` "
"collation (which is *not* the default), there are some issues to be aware "
"of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

#: ../../ref/models/fields.txt:1054
msgid ""
"A time, represented in Python by a ``datetime.time`` instance. Accepts the "
"same auto-population options as :class:`DateField`."
msgstr ""

#: ../../ref/models/fields.txt:1057
msgid ""
"The default form widget for this field is a "
":class:`~django.forms.TextInput`. The admin adds some JavaScript shortcuts."
msgstr ""

#: ../../ref/models/fields.txt:1065
msgid "A :class:`CharField` for a URL."
msgstr ""

#: ../../ref/models/fields.txt:1069
msgid ""
"Like all :class:`CharField` subclasses, :class:`URLField` takes the optional"
" :attr:`~CharField.max_length` argument. If you don't specify "
":attr:`~CharField.max_length`, a default of 200 is used."
msgstr ""

#: ../../ref/models/fields.txt:1080
msgid ""
"A field for storing universally unique identifiers. Uses Python's "
":class:`~python:uuid.UUID` class. When used on PostgreSQL, this stores in a "
"``uuid`` datatype, otherwise in a ``char(32)``."
msgstr ""

#: ../../ref/models/fields.txt:1084
msgid ""
"Universally unique identifiers are a good alternative to :class:`AutoField` "
"for :attr:`~Field.primary_key`. The database will not generate the UUID for "
"you, so it is recommended to use :attr:`~Field.default`::"
msgstr ""

#: ../../ref/models/fields.txt:1095
msgid ""
"Note that a callable (with the parentheses omitted) is passed to "
"``default``, not an instance of ``UUID``."
msgstr ""

#: ../../ref/models/fields.txt:1099
msgid "Relationship fields"
msgstr ""

#: ../../ref/models/fields.txt:1106
msgid "Django also defines a set of fields that represent relations."
msgstr ""

#: ../../ref/models/fields.txt:1111
msgid "``ForeignKey``"
msgstr ""

#: ../../ref/models/fields.txt:1115
msgid ""
"A many-to-one relationship. Requires a positional argument: the class to "
"which the model is related."
msgstr ""

#: ../../ref/models/fields.txt:1120
msgid ""
"To create a recursive relationship -- an object that has a many-to-one "
"relationship with itself -- use ``models.ForeignKey('self')``."
msgstr ""

#: ../../ref/models/fields.txt:1125
msgid ""
"If you need to create a relationship on a model that has not yet been "
"defined, you can use the name of the model, rather than the model object "
"itself::"
msgstr ""

#: ../../ref/models/fields.txt:1138
msgid ""
"To refer to models defined in another application, you can explicitly "
"specify a model with the full application label. For example, if the "
"``Manufacturer`` model above is defined in another application called "
"``production``, you'd need to use::"
msgstr ""

#: ../../ref/models/fields.txt:1146
msgid ""
"This sort of reference can be useful when resolving circular import "
"dependencies between two applications."
msgstr ""

#: ../../ref/models/fields.txt:1149
msgid ""
"A database index is automatically created on the ``ForeignKey``. You can "
"disable this by setting :attr:`~Field.db_index` to ``False``.  You may want "
"to avoid the overhead of an index if you are creating a foreign key for "
"consistency rather than joins, or if you will be creating an alternative "
"index like a partial or multiple column index."
msgstr ""

#: ../../ref/models/fields.txt:1157
msgid ""
"It is not recommended to have a ``ForeignKey`` from an app without "
"migrations to an app with migrations. See the :ref:`dependencies "
"documentation <unmigrated-dependencies>` for more details."
msgstr ""

#: ../../ref/models/fields.txt:1162 ../../ref/models/fields.txt:1378
msgid "Database Representation"
msgstr ""

#: ../../ref/models/fields.txt:1164
msgid ""
"Behind the scenes, Django appends ``\"_id\"`` to the field name to create "
"its database column name. In the above example, the database table for the "
"``Car`` model will have a ``manufacturer_id`` column. (You can change this "
"explicitly by specifying :attr:`~Field.db_column`) However, your code should"
" never have to deal with the database column name, unless you write custom "
"SQL. You'll always deal with the field names of your model object."
msgstr ""

#: ../../ref/models/fields.txt:1174 ../../ref/models/fields.txt:1392
msgid "Arguments"
msgstr ""

#: ../../ref/models/fields.txt:1176
msgid ""
":class:`ForeignKey` accepts an extra set of arguments -- all optional -- "
"that define the details of how the relation works."
msgstr ""

#: ../../ref/models/fields.txt:1181
msgid ""
"Sets a limit to the available choices for this field when this field is "
"rendered using a ``ModelForm`` or the admin (by default, all objects in the "
"queryset are available to choose). Either a dictionary, a "
":class:`~django.db.models.Q` object, or a callable returning a dictionary or"
" :class:`~django.db.models.Q` object can be used."
msgstr ""

#: ../../ref/models/fields.txt:1191
msgid ""
"causes the corresponding field on the ``ModelForm`` to list only ``Users`` "
"that have ``is_staff=True``. This may be helpful in the Django admin."
msgstr ""

#: ../../ref/models/fields.txt:1194
msgid ""
"The callable form can be helpful, for instance, when used in conjunction "
"with the Python ``datetime`` module to limit selections by date range. For "
"example::"
msgstr ""

#: ../../ref/models/fields.txt:1203
msgid ""
"If ``limit_choices_to`` is or returns a :class:`Q object "
"<django.db.models.Q>`, which is useful for :ref:`complex queries <complex-"
"lookups-with-q>`, then it will only have an effect on the choices available "
"in the admin when the field is not listed in "
":attr:`~django.contrib.admin.ModelAdmin.raw_id_fields` in the ``ModelAdmin``"
" for the model."
msgstr ""

#: ../../ref/models/fields.txt:1212
msgid ""
"Previous versions of Django do not allow passing a callable as a value for "
"``limit_choices_to``."
msgstr ""

#: ../../ref/models/fields.txt:1217
msgid ""
"If a callable is used for ``limit_choices_to``, it will be invoked every "
"time a new form is instantiated. It may also be invoked when a model is "
"validated, for example by management commands or the admin. The admin "
"constructs querysets to validate its form inputs in various edge cases "
"multiple times, so there is a possibility your callable may be invoked "
"several times."
msgstr ""

#: ../../ref/models/fields.txt:1226
msgid ""
"The name to use for the relation from the related object back to this one. "
"It's also the default value for :attr:`related_query_name` (the name to use "
"for the reverse filter name from the target model). See the :ref:`related "
"objects documentation <backwards-related-objects>` for a full explanation "
"and example. Note that you must set this value when defining relations on "
":ref:`abstract models <abstract-base-classes>`; and when you do so "
":ref:`some special syntax <abstract-related-name>` is available."
msgstr ""

#: ../../ref/models/fields.txt:1234
msgid ""
"If you'd prefer Django not to create a backwards relation, set "
"``related_name`` to ``'+'`` or end it with ``'+'``. For example, this will "
"ensure that the ``User`` model won't have a backwards relation to this "
"model::"
msgstr ""

#: ../../ref/models/fields.txt:1243
msgid ""
"The name to use for the reverse filter name from the target model. Defaults "
"to the value of :attr:`related_name` if it is set, otherwise it defaults to "
"the name of the model::"
msgstr ""

#: ../../ref/models/fields.txt:1257
msgid ""
"The field on the related object that the relation is to. By default, Django "
"uses the primary key of the related object."
msgstr ""

#: ../../ref/models/fields.txt:1262
msgid ""
"Controls whether or not a constraint should be created in the database for "
"this foreign key. The default is ``True``, and that's almost certainly what "
"you want; setting this to ``False`` can be very bad for data integrity. That"
" said, here are some scenarios where you might want to do this:"
msgstr ""

#: ../../ref/models/fields.txt:1267 ../../ref/models/fields.txt:1536
msgid "You have legacy data that is not valid."
msgstr ""

#: ../../ref/models/fields.txt:1268 ../../ref/models/fields.txt:1537
msgid "You're sharding your database."
msgstr ""

#: ../../ref/models/fields.txt:1270
msgid ""
"If this is set to ``False``, accessing a related object that doesn't exist "
"will raise its ``DoesNotExist`` exception."
msgstr ""

#: ../../ref/models/fields.txt:1275
msgid ""
"When an object referenced by a :class:`ForeignKey` is deleted, Django by "
"default emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` "
"and also deletes the object containing the ``ForeignKey``. This behavior can"
" be overridden by specifying the :attr:`on_delete` argument. For example, if"
" you have a nullable :class:`ForeignKey` and you want it to be set null when"
" the referenced object is deleted::"
msgstr ""

#: ../../ref/models/fields.txt:1284
msgid ""
"The possible values for :attr:`~ForeignKey.on_delete` are found in "
":mod:`django.db.models`:"
msgstr ""

#: ../../ref/models/fields.txt:1289
msgid "Cascade deletes; the default."
msgstr ""

#: ../../ref/models/fields.txt:1293
msgid ""
"Prevent deletion of the referenced object by raising "
":exc:`~django.db.models.ProtectedError`, a subclass of "
":exc:`django.db.IntegrityError`."
msgstr ""

#: ../../ref/models/fields.txt:1299
msgid ""
"Set the :class:`ForeignKey` null; this is only possible if "
":attr:`~Field.null` is ``True``."
msgstr ""

#: ../../ref/models/fields.txt:1304
msgid ""
"Set the :class:`ForeignKey` to its default value; a default for the "
":class:`ForeignKey` must be set."
msgstr ""

#: ../../ref/models/fields.txt:1309
msgid ""
"Set the :class:`ForeignKey` to the value passed to "
":func:`~django.db.models.SET()`, or if a callable is passed in, the result "
"of calling it. In most cases, passing a callable will be necessary to avoid "
"executing queries at the time your models.py is imported::"
msgstr ""

#: ../../ref/models/fields.txt:1328
msgid ""
"Take no action. If your database backend enforces referential integrity, "
"this will cause an :exc:`~django.db.IntegrityError` unless you manually add "
"an SQL ``ON DELETE`` constraint to the database field (perhaps using "
":ref:`initial sql<initial-sql>`)."
msgstr ""

#: ../../ref/models/fields.txt:1337
msgid ""
"Controls the migration framework's reaction if this :class:`ForeignKey` is "
"pointing at a swappable model. If it is ``True`` - the default - then if the"
" :class:`ForeignKey` is pointing at a model which matches the current value "
"of ``settings.AUTH_USER_MODEL`` (or another swappable model setting) the "
"relationship will be stored in the migration using a reference to the "
"setting, not to the model directly."
msgstr ""

#: ../../ref/models/fields.txt:1344 ../../ref/models/fields.txt:1552
msgid ""
"You only want to override this to be ``False`` if you are sure your model "
"should always point towards the swapped-in model - for example, if it is a "
"profile model designed specifically for your custom user model."
msgstr ""

#: ../../ref/models/fields.txt:1348
msgid ""
"Setting it to ``False`` does not mean you can reference a swappable model "
"even if it is swapped out - ``False`` just means that the migrations made "
"with this ForeignKey will always reference the exact model you specify (so "
"it will fail hard if the user tries to run with a User model you don't "
"support, for example)."
msgstr ""

#: ../../ref/models/fields.txt:1354 ../../ref/models/fields.txt:1556
msgid "If in doubt, leave it to its default of ``True``."
msgstr ""

#: ../../ref/models/fields.txt:1359
msgid "``ManyToManyField``"
msgstr ""

#: ../../ref/models/fields.txt:1363
msgid ""
"A many-to-many relationship. Requires a positional argument: the class to "
"which the model is related, which works exactly the same as it does for "
":class:`ForeignKey`, including :ref:`recursive <recursive-relationships>` "
"and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1368
msgid ""
"Related objects can be added, removed, or created with the field's "
":class:`~django.db.models.fields.related.RelatedManager`."
msgstr ""

#: ../../ref/models/fields.txt:1373
msgid ""
"It is not recommended to have a ``ManyToManyField`` from an app without "
"migrations to an app with migrations. See the :ref:`dependencies "
"documentation <unmigrated-dependencies>` for more details."
msgstr ""

#: ../../ref/models/fields.txt:1380
msgid ""
"Behind the scenes, Django creates an intermediary join table to represent "
"the many-to-many relationship. By default, this table name is generated "
"using the name of the many-to-many field and the name of the table for the "
"model that contains it. Since some databases don't support table names above"
" a certain length, these table names will be automatically truncated to 64 "
"characters and a uniqueness hash will be used. This means you might see "
"table names like ``author_books_9cdf4``; this is perfectly normal.  You can "
"manually provide the name of the join table using the "
":attr:`~ManyToManyField.db_table` option."
msgstr ""

#: ../../ref/models/fields.txt:1394
msgid ""
":class:`ManyToManyField` accepts an extra set of arguments -- all optional "
"-- that control how the relationship functions."
msgstr ""

#: ../../ref/models/fields.txt:1399
msgid "Same as :attr:`ForeignKey.related_name`."
msgstr ""

#: ../../ref/models/fields.txt:1403
msgid "Same as :attr:`ForeignKey.related_query_name`."
msgstr ""

#: ../../ref/models/fields.txt:1407
msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr ""

#: ../../ref/models/fields.txt:1409
msgid ""
"``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a"
" custom intermediate table specified using the "
":attr:`~ManyToManyField.through` parameter."
msgstr ""

#: ../../ref/models/fields.txt:1415
msgid ""
"Only used in the definition of ManyToManyFields on self. Consider the "
"following model::"
msgstr ""

#: ../../ref/models/fields.txt:1423
msgid ""
"When Django processes this model, it identifies that it has a "
":class:`ManyToManyField` on itself, and as a result, it doesn't add a "
"``person_set`` attribute to the ``Person`` class. Instead, the "
":class:`ManyToManyField` is assumed to be symmetrical -- that is, if I am "
"your friend, then you are my friend."
msgstr ""

#: ../../ref/models/fields.txt:1429
msgid ""
"If you do not want symmetry in many-to-many relationships with ``self``, set"
" :attr:`~ManyToManyField.symmetrical` to ``False``. This will force Django "
"to add the descriptor for the reverse relationship, allowing "
":class:`ManyToManyField` relationships to be non-symmetrical."
msgstr ""

#: ../../ref/models/fields.txt:1436
msgid ""
"Django will automatically generate a table to manage many-to-many "
"relationships. However, if you want to manually specify the intermediary "
"table, you can use the :attr:`~ManyToManyField.through` option to specify "
"the Django model that represents the intermediate table that you want to "
"use."
msgstr ""

#: ../../ref/models/fields.txt:1442
msgid ""
"The most common use for this option is when you want to associate "
":ref:`extra data with a many-to-many relationship <intermediary-"
"manytomany>`."
msgstr ""

#: ../../ref/models/fields.txt:1446
msgid ""
"If you don't specify an explicit ``through`` model, there is still an "
"implicit ``through`` model class you can use to directly access the table "
"created to hold the association. It has three fields to link the models."
msgstr ""

#: ../../ref/models/fields.txt:1450
msgid ""
"If the source and target models differ, the following fields are generated:"
msgstr ""

#: ../../ref/models/fields.txt:1453 ../../ref/models/fields.txt:1462
msgid "``id``: the primary key of the relation."
msgstr ""

#: ../../ref/models/fields.txt:1454
msgid ""
"``<containing_model>_id``: the ``id`` of the model that declares the "
"``ManyToManyField``."
msgstr ""

#: ../../ref/models/fields.txt:1456
msgid ""
"``<other_model>_id``: the ``id`` of the model that the ``ManyToManyField`` "
"points to."
msgstr ""

#: ../../ref/models/fields.txt:1459
msgid ""
"If the ``ManyToManyField`` points from and to the same model, the following "
"fields are generated:"
msgstr ""

#: ../../ref/models/fields.txt:1463
msgid ""
"``from_<model>_id``: the ``id`` of the instance which points at the model "
"(i.e. the source instance)."
msgstr ""

#: ../../ref/models/fields.txt:1465
msgid ""
"``to_<model>_id``: the ``id`` of the instance to which the relationship "
"points (i.e. the target model instance)."
msgstr ""

#: ../../ref/models/fields.txt:1468
msgid ""
"This class can be used to query associated records for a given model "
"instance like a normal model."
msgstr ""

#: ../../ref/models/fields.txt:1475
msgid ""
"Only used when a custom intermediary model is specified. Django will "
"normally determine which fields of the intermediary model to use in order to"
" establish a many-to-many relationship automatically. However, consider the "
"following models::"
msgstr ""

#: ../../ref/models/fields.txt:1495
msgid ""
"``Membership`` has *two* foreign keys to ``Person`` (``person`` and "
"``inviter``), which makes the relationship ambiguous and Django can't know "
"which one to use. In this case, you must explicitly specify which foreign "
"keys Django should use using ``through_fields``, as in the example above."
msgstr ""

#: ../../ref/models/fields.txt:1501
msgid ""
"``through_fields`` accepts a 2-tuple ``('field1', 'field2')``, where "
"``field1`` is the name of the foreign key to the model the "
":class:`ManyToManyField` is defined on (``group`` in this case), and "
"``field2`` the name of the foreign key to the target model (``person`` in "
"this case)."
msgstr ""

#: ../../ref/models/fields.txt:1507
msgid ""
"When you have more than one foreign key on an intermediary model to any (or "
"even both) of the models participating in a many-to-many relationship, you "
"*must* specify ``through_fields``. This also applies to :ref:`recursive "
"relationships <recursive-relationships>` when an intermediary model is used "
"and there are more than two foreign keys to the model, or you want to "
"explicitly specify which two Django should use."
msgstr ""

#: ../../ref/models/fields.txt:1515
msgid ""
"Recursive relationships using an intermediary model are always defined as "
"non-symmetrical -- that is, with :attr:`symmetrical=False "
"<ManyToManyField.symmetrical>` -- therefore, there is the concept of a "
"\"source\" and a \"target\". In that case ``'field1'`` will be treated as "
"the \"source\" of the relationship and ``'field2'`` as the \"target\"."
msgstr ""

#: ../../ref/models/fields.txt:1523
msgid ""
"The name of the table to create for storing the many-to-many data. If this "
"is not provided, Django will assume a default name based upon the names of: "
"the table for the model defining the relationship and the name of the field "
"itself."
msgstr ""

#: ../../ref/models/fields.txt:1530
msgid ""
"Controls whether or not constraints should be created in the database for "
"the foreign keys in the intermediary table. The default is ``True``, and "
"that's almost certainly what you want; setting this to ``False`` can be very"
" bad for data integrity. That said, here are some scenarios where you might "
"want to do this:"
msgstr ""

#: ../../ref/models/fields.txt:1539
msgid "It is an error to pass both ``db_constraint`` and ``through``."
msgstr ""

#: ../../ref/models/fields.txt:1545
msgid ""
"Controls the migration framework's reaction if this :class:`ManyToManyField`"
" is pointing at a swappable model. If it is ``True`` - the default - then if"
" the :class:`ManyToManyField` is pointing at a model which matches the "
"current value of ``settings.AUTH_USER_MODEL`` (or another swappable model "
"setting) the relationship will be stored in the migration using a reference "
"to the setting, not to the model directly."
msgstr ""

#: ../../ref/models/fields.txt:1558
msgid ":class:`ManyToManyField` does not support :attr:`~Field.validators`."
msgstr ""

#: ../../ref/models/fields.txt:1560
msgid ""
":attr:`~Field.null` has no effect since there is no way to require a "
"relationship at the database level."
msgstr ""

#: ../../ref/models/fields.txt:1566
msgid "``OneToOneField``"
msgstr ""

#: ../../ref/models/fields.txt:1570
msgid ""
"A one-to-one relationship. Conceptually, this is similar to a "
":class:`ForeignKey` with :attr:`unique=True <Field.unique>`, but the "
"\"reverse\" side of the relation will directly return a single object."
msgstr ""

#: ../../ref/models/fields.txt:1574
msgid ""
"This is most useful as the primary key of a model which \"extends\" another "
"model in some way; :ref:`multi-table-inheritance` is implemented by adding "
"an implicit one-to-one relation from the child model to the parent model, "
"for example."
msgstr ""

#: ../../ref/models/fields.txt:1579
msgid ""
"One positional argument is required: the class to which the model will be "
"related. This works exactly the same as it does for :class:`ForeignKey`, "
"including all the options regarding :ref:`recursive <recursive-"
"relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

#: ../../ref/models/fields.txt:1584
msgid ""
"If you do not specify the :attr:`~ForeignKey.related_name` argument for the "
"``OneToOneField``, Django will use the lower-case name of the current model "
"as default value."
msgstr ""

#: ../../ref/models/fields.txt:1588
msgid "With the following example::"
msgstr ""

#: ../../ref/models/fields.txt:1597
msgid "your resulting ``User`` model will have the following attributes::"
msgstr ""

#: ../../ref/models/fields.txt:1605
msgid ""
"A ``DoesNotExist`` exception is raised when accessing the reverse "
"relationship if an entry in the related table doesn't exist. For example, if"
" a user doesn't have a supervisor designated by ``MySpecialUser``::"
msgstr ""

#: ../../ref/models/fields.txt:1616
msgid ""
"Additionally, ``OneToOneField`` accepts all of the extra arguments accepted "
"by :class:`ForeignKey`, plus one extra argument:"
msgstr ""

#: ../../ref/models/fields.txt:1621
msgid ""
"When ``True`` and used in a model which inherits from another "
":term:`concrete model`, indicates that this field should be used as the link"
" back to the parent class, rather than the extra ``OneToOneField`` which "
"would normally be implicitly created by subclassing."
msgstr ""

#: ../../ref/models/fields.txt:1627
msgid ""
"See :doc:`One-to-one relationships </topics/db/examples/one_to_one>` for "
"usage examples of ``OneToOneField``."
msgstr ""

#: ../../ref/models/fields.txt:1631
msgid "Field API reference"
msgstr ""

#: ../../ref/models/fields.txt:1635
msgid ""
"``Field`` is an abstract class that represents a database table column. "
"Django uses fields to create the database table (:meth:`db_type`), to map "
"Python types to database (:meth:`get_prep_value`) and vice-versa "
"(:meth:`from_db_value`), and to apply :doc:`/ref/models/lookups` "
"(:meth:`get_prep_lookup`)."
msgstr ""

#: ../../ref/models/fields.txt:1641
msgid ""
"A field is thus a fundamental piece in different Django APIs, notably, "
":class:`models <django.db.models.Model>` and :class:`querysets "
"<django.db.models.query.QuerySet>`."
msgstr ""

#: ../../ref/models/fields.txt:1645
msgid ""
"In models, a field is instantiated as a class attribute and represents a "
"particular table column, see :doc:`/topics/db/models`. It has attributes "
"such as :attr:`null` and :attr:`unique`, and methods that Django uses to map"
" the field value to database-specific values."
msgstr ""

#: ../../ref/models/fields.txt:1650
msgid ""
"A ``Field`` is a subclass of "
":class:`~django.db.models.lookups.RegisterLookupMixin` and thus both "
":class:`~django.db.models.Transform` and :class:`~django.db.models.Lookup` "
"can be registered on it to be used in ``QuerySet``\\s (e.g. "
"``field_name__exact=\"foo\"``). All :ref:`built-in lookups <field-lookups>` "
"are registered by default."
msgstr ""

#: ../../ref/models/fields.txt:1657
msgid ""
"All of Django's built-in fields, such as :class:`CharField`, are particular "
"implementations of ``Field``. If you need a custom field, you can either "
"subclass any of the built-in fields or write a ``Field`` from scratch. In "
"either case, see :doc:`/howto/custom-model-fields`."
msgstr ""

#: ../../ref/models/fields.txt:1664
msgid ""
"A verbose description of the field, e.g. for the "
":mod:`django.contrib.admindocs` application."
msgstr ""

#: ../../ref/models/fields.txt:1667
msgid "The description can be of the form::"
msgstr ""

#: ../../ref/models/fields.txt:1671
msgid "where the arguments are interpolated from the field's ``__dict__``."
msgstr ""

#: ../../ref/models/fields.txt:1673
msgid ""
"To map a ``Field`` to a database-specific type, Django exposes two methods:"
msgstr ""

#: ../../ref/models/fields.txt:1677
msgid ""
"Returns a string naming this field for backend specific purposes. By "
"default, it returns the class name."
msgstr ""

#: ../../ref/models/fields.txt:1680
msgid "See :ref:`emulating-built-in-field-types` for usage in custom fields."
msgstr ""

#: ../../ref/models/fields.txt:1684
msgid ""
"Returns the database column data type for the :class:`Field`, taking into "
"account the ``connection``."
msgstr ""

#: ../../ref/models/fields.txt:1687
msgid "See :ref:`custom-database-types` for usage in custom fields."
msgstr ""

#: ../../ref/models/fields.txt:1689
msgid ""
"There are three main situations where Django needs to interact with the "
"database backend and fields:"
msgstr ""

#: ../../ref/models/fields.txt:1692
msgid "when it queries the database (Python value -> database backend value)"
msgstr ""

#: ../../ref/models/fields.txt:1693
msgid ""
"when it loads data from the database (database backend value -> Python "
"value)"
msgstr ""

#: ../../ref/models/fields.txt:1695
msgid "when it saves to the database (Python value -> database backend value)"
msgstr ""

#: ../../ref/models/fields.txt:1697
msgid ""
"When querying, :meth:`get_db_prep_value` and :meth:`get_prep_value` are "
"used:"
msgstr ""

#: ../../ref/models/fields.txt:1701
msgid ""
"``value`` is the current value of the model's attribute, and the method "
"should return data in a format that has been prepared for use as a parameter"
" in a query."
msgstr ""

#: ../../ref/models/fields.txt:1705
msgid "See :ref:`converting-python-objects-to-query-values` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1709
msgid ""
"Converts ``value`` to a backend-specific value. By default it returns "
"``value`` if ``prepared=True`` and :meth:`~Field.get_prep_value` if is "
"``False``."
msgstr ""

#: ../../ref/models/fields.txt:1713
msgid "See :ref:`converting-query-values-to-database-values` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1715
msgid "When loading data, :meth:`from_db_value` is used:"
msgstr ""

#: ../../ref/models/fields.txt:1721
msgid ""
"Converts a value as returned by the database to a Python object. It is the "
"reverse of :meth:`get_prep_value`."
msgstr ""

#: ../../ref/models/fields.txt:1724
msgid ""
"This method is not used for most built-in fields as the database backend "
"already returns the correct Python type, or the backend itself does the "
"conversion."
msgstr ""

#: ../../ref/models/fields.txt:1728 ../../ref/models/fields.txt:1797
msgid "See :ref:`converting-values-to-python-objects` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1732
msgid ""
"For performance reasons, ``from_db_value`` is not implemented as a no-op on "
"fields which do not require it (all Django fields). Consequently you may not"
" call ``super`` in your definition."
msgstr ""

#: ../../ref/models/fields.txt:1736
msgid "When saving, :meth:`pre_save` and :meth:`get_db_prep_save` are used:"
msgstr ""

#: ../../ref/models/fields.txt:1740
msgid ""
"Same as the :meth:`get_db_prep_value`, but called when the field value must "
"be *saved* to the database. By default returns :meth:`get_db_prep_value`."
msgstr ""

#: ../../ref/models/fields.txt:1746
msgid ""
"Method called prior to :meth:`get_db_prep_save` to prepare the value before "
"being saved (e.g. for :attr:`DateField.auto_now`)."
msgstr ""

#: ../../ref/models/fields.txt:1749
msgid ""
"``model_instance`` is the instance this field belongs to and ``add`` is "
"whether the instance is being saved to the database for the first time."
msgstr ""

#: ../../ref/models/fields.txt:1753
msgid ""
"It should return the value of the appropriate attribute from "
"``model_instance`` for this field. The attribute name is in ``self.attname``"
" (this is set up by :class:`~django.db.models.Field`)."
msgstr ""

#: ../../ref/models/fields.txt:1757
msgid "See :ref:`preprocessing-values-before-saving` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1759
msgid ""
"When a lookup is used on a field, the value may need to be \"prepared\". "
"Django exposes two methods for this:"
msgstr ""

#: ../../ref/models/fields.txt:1764
msgid ""
"Prepares ``value`` to the database prior to be used in a lookup. The "
"``lookup_type`` will be one of the valid Django filter lookups: "
"``\"exact\"``, ``\"iexact\"``, ``\"contains\"``, ``\"icontains\"``, "
"``\"gt\"``, ``\"gte\"``, ``\"lt\"``, ``\"lte\"``, ``\"in\"``, "
"``\"startswith\"``, ``\"istartswith\"``, ``\"endswith\"``, "
"``\"iendswith\"``, ``\"range\"``, ``\"year\"``, ``\"month\"``, ``\"day\"``, "
"``\"isnull\"``, ``\"search\"``, ``\"regex\"``, and ``\"iregex\"``."
msgstr ""

#: ../../ref/models/fields.txt:1774
msgid ""
"If you are using :doc:`Custom lookups </ref/models/lookups>` the "
"``lookup_type`` can be any ``lookup_name`` registered in the field."
msgstr ""

#: ../../ref/models/fields.txt:1777
msgid "See :ref:`preparing-values-for-use-in-database-lookups` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1781
msgid "Similar to :meth:`get_db_prep_value`, but for performing a lookup."
msgstr ""

#: ../../ref/models/fields.txt:1783
msgid ""
"As with :meth:`get_db_prep_value`, the specific connection that will be used"
" for the query is passed as ``connection``. In addition, ``prepared`` "
"describes whether the value has already been prepared with "
":meth:`get_prep_lookup`."
msgstr ""

#: ../../ref/models/fields.txt:1788
msgid ""
"Fields often receive their values as a different type, either from "
"serialization or from forms."
msgstr ""

#: ../../ref/models/fields.txt:1793
msgid ""
"Converts the value into the correct Python object. It acts as the reverse of"
" :meth:`value_to_string`, and is also called in "
":meth:`~django.db.models.Model.clean`."
msgstr ""

#: ../../ref/models/fields.txt:1799
msgid ""
"Besides saving to the database, the field also needs to know how to "
"serialize its value:"
msgstr ""

#: ../../ref/models/fields.txt:1804
msgid ""
"Converts ``obj`` to a string. Used to serialize the value of the field."
msgstr ""

#: ../../ref/models/fields.txt:1806
msgid "See :ref:`converting-model-field-to-serialization` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1808
msgid ""
"When using :class:`model forms <django.forms.ModelForm>`, the ``Field`` "
"needs to know which form field it should be represented by:"
msgstr ""

#: ../../ref/models/fields.txt:1813
msgid ""
"Returns the default :class:`django.forms.Field` of this field for "
":class:`~django.forms.ModelForm`."
msgstr ""

#: ../../ref/models/fields.txt:1816
msgid ""
"By default, if both ``form_class`` and ``choices_form_class`` are ``None``, "
"it uses :class:`~django.forms.CharField`; if ``choices_form_class`` is "
"given, it returns :class:`~django.forms.TypedChoiceField`."
msgstr ""

#: ../../ref/models/fields.txt:1821
msgid "See :ref:`specifying-form-field-for-model-field` for usage."
msgstr ""

#: ../../ref/models/fields.txt:1827
msgid "Returns a 4-tuple with enough information to recreate the field:"
msgstr ""

#: ../../ref/models/fields.txt:1829
msgid "The name of the field on the model."
msgstr ""

#: ../../ref/models/fields.txt:1830
msgid ""
"The import path of the field (e.g. ``\"django.db.models.IntegerField\"``). "
"This should be the most portable version, so less specific may be better."
msgstr ""

#: ../../ref/models/fields.txt:1832
msgid "A list of positional arguments."
msgstr ""

#: ../../ref/models/fields.txt:1833
msgid "A dict of keyword arguments."
msgstr ""

#: ../../ref/models/fields.txt:1835
msgid ""
"This method must be added to fields prior to 1.7 to migrate its data using "
":doc:`/topics/migrations`."
msgstr ""

#: ../../ref/models/fields.txt:1842
msgid "Field attribute reference"
msgstr ""

#: ../../ref/models/fields.txt:1846
msgid ""
"Every ``Field`` instance contains several attributes that allow "
"introspecting its behavior. Use these attributes instead of ``isinstance`` "
"checks when you need to write code that depends on a field's functionality. "
"These attributes can be used together with the :ref:`Model._meta API <model-"
"meta-field-api>` to narrow down a search for specific field types. Custom "
"model fields should implement these flags."
msgstr ""

#: ../../ref/models/fields.txt:1854
msgid "Attributes for fields"
msgstr ""

#: ../../ref/models/fields.txt:1858
msgid ""
"Boolean flag that indicates if the field was automatically created, such as "
"the ``OneToOneField`` used by model inheritance."
msgstr ""

#: ../../ref/models/fields.txt:1863
msgid ""
"Boolean flag that indicates if the field has a database column associated "
"with it."
msgstr ""

#: ../../ref/models/fields.txt:1868
msgid ""
"Boolean flag that indicates if a field is used to back another non-hidden "
"field's functionality (e.g. the ``content_type`` and ``object_id`` fields "
"that make up a ``GenericForeignKey``). The ``hidden`` flag is used to "
"distinguish what constitutes the public subset of fields on the model from "
"all the fields on the model."
msgstr ""

#: ../../ref/models/fields.txt:1876
msgid ""
":meth:`Options.get_fields() <django.db.models.options.Options.get_fields()>`"
" excludes hidden fields by default. Pass in ``include_hidden=True`` to "
"return hidden fields in the results."
msgstr ""

#: ../../ref/models/fields.txt:1883
msgid ""
"Boolean flag that indicates if a field contains references to one or more "
"other models for its functionality (e.g. ``ForeignKey``, "
"``ManyToManyField``, ``OneToOneField``, etc.)."
msgstr ""

#: ../../ref/models/fields.txt:1889
msgid ""
"Returns the model on which the field is defined. If a field is defined on a "
"superclass of a model, ``model`` will refer to the superclass, not the class"
" of the instance."
msgstr ""

#: ../../ref/models/fields.txt:1894
msgid "Attributes for fields with relations"
msgstr ""

#: ../../ref/models/fields.txt:1896
msgid ""
"These attributes are used to query for the cardinality and other details of "
"a relation. These attribute are present on all fields; however, they will "
"only have boolean values (rather than ``None``) if the field is a relation "
"type (:attr:`Field.is_relation=True <Field.is_relation>`)."
msgstr ""

#: ../../ref/models/fields.txt:1903
msgid ""
"Boolean flag that is ``True`` if the field has a many-to-many relation; "
"``False`` otherwise. The only field included with Django where this is "
"``True`` is ``ManyToManyField``."
msgstr ""

#: ../../ref/models/fields.txt:1909
msgid ""
"Boolean flag that is ``True`` if the field has a many-to-one relation, such "
"as a ``ForeignKey``; ``False`` otherwise."
msgstr ""

#: ../../ref/models/fields.txt:1914
msgid ""
"Boolean flag that is ``True`` if the field has a one-to-many relation, such "
"as a ``GenericRelation`` or the reverse of a ``ForeignKey``; ``False`` "
"otherwise."
msgstr ""

#: ../../ref/models/fields.txt:1920
msgid ""
"Boolean flag that is ``True`` if the field has a one-to-one relation, such "
"as a ``OneToOneField``; ``False`` otherwise."
msgstr ""

#: ../../ref/models/fields.txt:1925
msgid ""
"Points to the model the field relates to. For example, ``Author`` in "
"``ForeignKey(Author)``. If a field has a generic relation (such as a "
"``GenericForeignKey`` or a ``GenericRelation``) then ``related_model`` will "
"be ``None``."
msgstr ""

#: ../../ref/models/index.txt:5
msgid ""
"Model API reference. For introductory material, see "
":doc:`/topics/db/models`."
msgstr ""

#: ../../ref/models/instances.txt:3
msgid "Model instance reference"
msgstr ""

#: ../../ref/models/instances.txt:7
msgid ""
"This document describes the details of the ``Model`` API. It builds on the "
"material presented in the :doc:`model </topics/db/models>` and "
":doc:`database query </topics/db/queries>` guides, so you'll probably want "
"to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/instances.txt:12 ../../ref/models/querysets.txt:12
msgid ""
"Throughout this reference we'll use the :ref:`example Weblog models "
"<queryset-model-example>` presented in the :doc:`database query guide "
"</topics/db/queries>`."
msgstr ""

#: ../../ref/models/instances.txt:17
msgid "Creating objects"
msgstr ""

#: ../../ref/models/instances.txt:19
msgid ""
"To create a new instance of a model, just instantiate it like any other "
"Python class:"
msgstr ""

#: ../../ref/models/instances.txt:24
msgid ""
"The keyword arguments are simply the names of the fields you've defined on "
"your model. Note that instantiating a model in no way touches your database;"
" for that, you need to :meth:`~Model.save()`."
msgstr ""

#: ../../ref/models/instances.txt:30
msgid ""
"You may be tempted to customize the model by overriding the ``__init__`` "
"method. If you do so, however, take care not to change the calling signature"
" as any change may prevent the model instance from being saved. Rather than "
"overriding ``__init__``, try using one of these approaches:"
msgstr ""

#: ../../ref/models/instances.txt:35
msgid "Add a classmethod on the model class::"
msgstr ""

#: ../../ref/models/instances.txt:50
msgid "Add a method on a custom manager (usually preferred)::"
msgstr ""

#: ../../ref/models/instances.txt:66
msgid "Customizing model loading"
msgstr ""

#: ../../ref/models/instances.txt:72
msgid ""
"The ``from_db()`` method can be used to customize model instance creation "
"when loading from the database."
msgstr ""

#: ../../ref/models/instances.txt:75
msgid ""
"The ``db`` argument contains the database alias for the database the model "
"is loaded from, ``field_names`` contains the names of all loaded fields, and"
" ``values`` contains the loaded values for each field in ``field_names``. "
"The ``field_names`` are in the same order as the ``values``, so it is "
"possible to use ``cls(**(zip(field_names, values)))`` to instantiate the "
"object. If all of the model's fields are present, then ``values`` are "
"guaranteed to be in the order ``__init__()`` expects them. That is, the "
"instance can be created by ``cls(*values)``. It is possible to check if all "
"fields are present by consulting ``cls._deferred`` - if ``False``, then all "
"fields have been loaded from the database."
msgstr ""

#: ../../ref/models/instances.txt:86
msgid ""
"In addition to creating the new model, the ``from_db()`` method must set the"
" ``adding`` and ``db`` flags in the new instance's ``_state`` attribute."
msgstr ""

#: ../../ref/models/instances.txt:89
msgid ""
"Below is an example showing how to record the initial values of fields that "
"are loaded from the database::"
msgstr ""

#: ../../ref/models/instances.txt:115
msgid ""
"The example above shows a full ``from_db()`` implementation to clarify how "
"that is done. In this case it would of course be possible to just use "
"``super()`` call in the ``from_db()`` method."
msgstr ""

#: ../../ref/models/instances.txt:120
msgid "Refreshing objects from database"
msgstr ""

#: ../../ref/models/instances.txt:126
msgid ""
"If you need to reload a model's values from the database, you can use the "
"``refresh_from_db()`` method. When this method is called without arguments "
"the following is done:"
msgstr ""

#: ../../ref/models/instances.txt:130
msgid ""
"All non-deferred fields of the model are updated to the values currently "
"present in the database."
msgstr ""

#: ../../ref/models/instances.txt:132
msgid ""
"The previously loaded related instances for which the relation's value is no"
" longer valid are removed from the reloaded instance. For example, if you "
"have a foreign key from the reloaded instance to another model with name "
"``Author``, then if ``obj.author_id != obj.author.id``, ``obj.author`` will "
"be thrown away, and when next accessed it will be reloaded with the value of"
" ``obj.author_id``."
msgstr ""

#: ../../ref/models/instances.txt:139
msgid ""
"Note that only fields of the model are reloaded from the database. Other "
"database dependent values such as annotations are not reloaded."
msgstr ""

#: ../../ref/models/instances.txt:142
msgid ""
"The reloading happens from the database the instance was loaded from, or "
"from the default database if the instance wasn't loaded from the database. "
"The ``using`` argument can be used to force the database used for reloading."
msgstr ""

#: ../../ref/models/instances.txt:146
msgid ""
"It is possible to force the set of fields to be loaded by using the "
"``fields`` argument."
msgstr ""

#: ../../ref/models/instances.txt:149
msgid ""
"For example, to test that an ``update()`` call resulted in the expected "
"update, you could write a test similar to this::"
msgstr ""

#: ../../ref/models/instances.txt:161
msgid ""
"Note that when deferred fields are accessed, the loading of the deferred "
"field's value happens through this method. Thus it is possible to customize "
"the way deferred loading happens. The example below shows how one can reload"
" all of the instance's fields when a deferred field is reloaded::"
msgstr ""

#: ../../ref/models/instances.txt:183
msgid ""
"A helper method that returns a set containing the attribute names of all "
"those fields that are currently deferred for this model."
msgstr ""

#: ../../ref/models/instances.txt:189
msgid "Validating objects"
msgstr ""

#: ../../ref/models/instances.txt:191
msgid "There are three steps involved in validating a model:"
msgstr ""

#: ../../ref/models/instances.txt:193
msgid "Validate the model fields - :meth:`Model.clean_fields()`"
msgstr ""

#: ../../ref/models/instances.txt:194
msgid "Validate the model as a whole - :meth:`Model.clean()`"
msgstr ""

#: ../../ref/models/instances.txt:195
msgid "Validate the field uniqueness - :meth:`Model.validate_unique()`"
msgstr ""

#: ../../ref/models/instances.txt:197
msgid ""
"All three steps are performed when you call a model's "
":meth:`~Model.full_clean()` method."
msgstr ""

#: ../../ref/models/instances.txt:200
msgid ""
"When you use a :class:`~django.forms.ModelForm`, the call to "
":meth:`~django.forms.Form.is_valid()` will perform these validation steps "
"for all the fields that are included on the form. See the :doc:`ModelForm "
"documentation </topics/forms/modelforms>` for more information. You should "
"only need to call a model's :meth:`~Model.full_clean()` method if you plan "
"to handle validation errors yourself, or if you have excluded fields from "
"the :class:`~django.forms.ModelForm` that require validation."
msgstr ""

#: ../../ref/models/instances.txt:210
msgid ""
"This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and "
":meth:`Model.validate_unique()` (if ``validate_unique`` is ``True``), in "
"that order and raises a :exc:`~django.core.exceptions.ValidationError` that "
"has a ``message_dict`` attribute containing errors from all three stages."
msgstr ""

#: ../../ref/models/instances.txt:215
msgid ""
"The optional ``exclude`` argument can be used to provide a list of field "
"names that can be excluded from validation and cleaning. "
":class:`~django.forms.ModelForm` uses this argument to exclude fields that "
"aren't present on your form from being validated since any errors raised "
"could not be corrected by the user."
msgstr ""

#: ../../ref/models/instances.txt:221
msgid ""
"Note that ``full_clean()`` will *not* be called automatically when you call "
"your model's :meth:`~Model.save()` method. You'll need to call it manually "
"when you want to run one-step model validation for your own manually created"
" models. For example::"
msgstr ""

#: ../../ref/models/instances.txt:234
msgid ""
"The first step ``full_clean()`` performs is to clean each individual field."
msgstr ""

#: ../../ref/models/instances.txt:238
msgid ""
"This method will validate all fields on your model. The optional ``exclude``"
" argument lets you provide a list of field names to exclude from validation."
" It will raise a :exc:`~django.core.exceptions.ValidationError` if any "
"fields fail validation."
msgstr ""

#: ../../ref/models/instances.txt:243
msgid ""
"The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. "
"This method should be overridden to perform custom validation on your model."
msgstr ""

#: ../../ref/models/instances.txt:248
msgid ""
"This method should be used to provide custom model validation, and to modify"
" attributes on your model if desired. For instance, you could use it to "
"automatically provide a value for a field, or to do validation that requires"
" access to more than a single field::"
msgstr ""

#: ../../ref/models/instances.txt:268
msgid ""
"Note, however, that like :meth:`Model.full_clean()`, a model's ``clean()`` "
"method is not invoked when you call your model's :meth:`~Model.save()` "
"method."
msgstr ""

#: ../../ref/models/instances.txt:271
msgid ""
"In the above example, the :exc:`~django.core.exceptions.ValidationError` "
"exception raised by ``Model.clean()`` was instantiated with a string, so it "
"will be stored in a special error dictionary key, "
":data:`~django.core.exceptions.NON_FIELD_ERRORS`. This key is used for "
"errors that are tied to the entire model instead of to a specific field::"
msgstr ""

#: ../../ref/models/instances.txt:283
msgid ""
"To assign exceptions to a specific field, instantiate the "
":exc:`~django.core.exceptions.ValidationError` with a dictionary, where the "
"keys are the field names. We could update the previous example to assign the"
" error to the ``pub_date`` field::"
msgstr ""

#: ../../ref/models/instances.txt:296
msgid ""
"If you detect errors in multiple fields during ``Model.clean()``, you can "
"also pass a dictionary mapping field names to errors::"
msgstr ""

#: ../../ref/models/instances.txt:304
msgid ""
"Finally, ``full_clean()`` will check any unique constraints on your model."
msgstr ""

#: ../../ref/models/instances.txt:308
msgid ""
"This method is similar to :meth:`~Model.clean_fields`, but validates all "
"uniqueness constraints on your model instead of individual field values. The"
" optional ``exclude`` argument allows you to provide a list of field names "
"to exclude from validation. It will raise a "
":exc:`~django.core.exceptions.ValidationError` if any fields fail "
"validation."
msgstr ""

#: ../../ref/models/instances.txt:314
msgid ""
"Note that if you provide an ``exclude`` argument to ``validate_unique()``, "
"any :attr:`~django.db.models.Options.unique_together` constraint involving "
"one of the fields you provided will not be checked."
msgstr ""

#: ../../ref/models/instances.txt:320
msgid "Saving objects"
msgstr ""

#: ../../ref/models/instances.txt:322
msgid "To save an object back to the database, call ``save()``:"
msgstr ""

#: ../../ref/models/instances.txt:326
msgid ""
"If you want customized saving behavior, you can override this ``save()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:329
msgid ""
"The model save process also has some subtleties; see the sections below."
msgstr ""

#: ../../ref/models/instances.txt:332
msgid "Auto-incrementing primary keys"
msgstr ""

#: ../../ref/models/instances.txt:334
msgid ""
"If a model has an :class:`~django.db.models.AutoField` — an auto-"
"incrementing primary key — then that auto-incremented value will be "
"calculated and saved as an attribute on your object the first time you call "
"``save()``::"
msgstr ""

#: ../../ref/models/instances.txt:343
msgid ""
"There's no way to tell what the value of an ID will be before you call "
"``save()``, because that value is calculated by your database, not by "
"Django."
msgstr ""

#: ../../ref/models/instances.txt:346
msgid ""
"For convenience, each model has an :class:`~django.db.models.AutoField` "
"named ``id`` by default unless you explicitly specify ``primary_key=True`` "
"on a field in your model. See the documentation for "
":class:`~django.db.models.AutoField` for more details."
msgstr ""

#: ../../ref/models/instances.txt:352
msgid "The ``pk`` property"
msgstr ""

#: ../../ref/models/instances.txt:356
msgid ""
"Regardless of whether you define a primary key field yourself, or let Django"
" supply one for you, each model will have a property called ``pk``. It "
"behaves like a normal attribute on the model, but is actually an alias for "
"whichever attribute is the primary key field for the model. You can read and"
" set this value, just as you would for any other attribute, and it will "
"update the correct field in the model."
msgstr ""

#: ../../ref/models/instances.txt:364
msgid "Explicitly specifying auto-primary-key values"
msgstr ""

#: ../../ref/models/instances.txt:366
msgid ""
"If a model has an :class:`~django.db.models.AutoField` but you want to "
"define a new object's ID explicitly when saving, just define it explicitly "
"before saving, rather than relying on the auto-assignment of the ID::"
msgstr ""

#: ../../ref/models/instances.txt:375
msgid ""
"If you assign auto-primary-key values manually, make sure not to use an "
"already-existing primary-key value! If you create a new object with an "
"explicit primary-key value that already exists in the database, Django will "
"assume you're changing the existing record rather than creating a new one."
msgstr ""

#: ../../ref/models/instances.txt:380
msgid ""
"Given the above ``'Cheddar Talk'`` blog example, this example would override"
" the previous record in the database::"
msgstr ""

#: ../../ref/models/instances.txt:386
msgid ""
"See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this "
"happens."
msgstr ""

#: ../../ref/models/instances.txt:389
msgid ""
"Explicitly specifying auto-primary-key values is mostly useful for bulk-"
"saving objects, when you're confident you won't have primary-key collision."
msgstr ""

#: ../../ref/models/instances.txt:393
msgid "What happens when you save?"
msgstr ""

#: ../../ref/models/instances.txt:395
msgid "When you save an object, Django performs the following steps:"
msgstr ""

#: ../../ref/models/instances.txt:397
msgid ""
"**Emit a pre-save signal.** The :doc:`signal </ref/signals>` "
":attr:`django.db.models.signals.pre_save` is sent, allowing any functions "
"listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:402
msgid ""
"**Pre-process the data.** Each field on the object is asked to perform any "
"automated data modification that the field may need to perform."
msgstr ""

#: ../../ref/models/instances.txt:406
msgid ""
"Most fields do *no* pre-processing — the field data is kept as-is. Pre-"
"processing is only used on fields that have special behavior.  For example, "
"if your model has a :class:`~django.db.models.DateField` with "
"``auto_now=True``, the pre-save phase will alter the data in the object to "
"ensure that the date field contains the current date stamp. (Our "
"documentation doesn't yet include a list of all the fields with this "
"\"special behavior.\")"
msgstr ""

#: ../../ref/models/instances.txt:414
msgid ""
"**Prepare the data for the database.** Each field is asked to provide its "
"current value in a data type that can be written to the database."
msgstr ""

#: ../../ref/models/instances.txt:417
msgid ""
"Most fields require *no* data preparation. Simple data types, such as "
"integers and strings, are 'ready to write' as a Python object. However, more"
" complex data types often require some modification."
msgstr ""

#: ../../ref/models/instances.txt:421
msgid ""
"For example, :class:`~django.db.models.DateField` fields use a Python "
"``datetime`` object to store data. Databases don't store ``datetime`` "
"objects, so the field value must be converted into an ISO-compliant date "
"string for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:426
msgid ""
"**Insert the data into the database.** The pre-processed, prepared data is "
"then composed into an SQL statement for insertion into the database."
msgstr ""

#: ../../ref/models/instances.txt:430
msgid ""
"**Emit a post-save signal.** The signal "
":attr:`django.db.models.signals.post_save` is sent, allowing any functions "
"listening for that signal to take some customized action."
msgstr ""

#: ../../ref/models/instances.txt:436
msgid "How Django knows to UPDATE vs. INSERT"
msgstr ""

#: ../../ref/models/instances.txt:438
msgid ""
"You may have noticed Django database objects use the same ``save()`` method "
"for creating and changing objects. Django abstracts the need to use "
"``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call "
"``save()``, Django follows this algorithm:"
msgstr ""

#: ../../ref/models/instances.txt:443
msgid ""
"If the object's primary key attribute is set to a value that evaluates to "
"``True`` (i.e., a value other than ``None`` or the empty string), Django "
"executes an ``UPDATE``."
msgstr ""

#: ../../ref/models/instances.txt:446
msgid ""
"If the object's primary key attribute is *not* set or if the ``UPDATE`` "
"didn't update anything, Django executes an ``INSERT``."
msgstr ""

#: ../../ref/models/instances.txt:449
msgid ""
"The one gotcha here is that you should be careful not to specify a primary-"
"key value explicitly when saving new objects, if you cannot guarantee the "
"primary-key value is unused. For more on this nuance, see `Explicitly "
"specifying auto-primary-key values`_ above and `Forcing an INSERT or "
"UPDATE`_ below."
msgstr ""

#: ../../ref/models/instances.txt:454
msgid ""
"In Django 1.5 and earlier, Django did a ``SELECT`` when the primary key "
"attribute was set. If the ``SELECT`` found a row, then Django did an "
"``UPDATE``, otherwise it did an ``INSERT``. The old algorithm results in one"
" more query in the ``UPDATE`` case. There are some rare cases where the "
"database doesn't report that a row was updated even if the database contains"
" a row for the object's primary key value. An example is the PostgreSQL ``ON"
" UPDATE`` trigger which returns ``NULL``. In such cases it is possible to "
"revert to the old algorithm by setting the "
":attr:`~django.db.models.Options.select_on_save` option to ``True``."
msgstr ""

#: ../../ref/models/instances.txt:467
msgid "Forcing an INSERT or UPDATE"
msgstr ""

#: ../../ref/models/instances.txt:469
msgid ""
"In some rare circumstances, it's necessary to be able to force the "
":meth:`~Model.save()` method to perform an SQL ``INSERT`` and not fall back "
"to doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a"
" new row. In these cases you can pass the ``force_insert=True`` or "
"``force_update=True`` parameters to the :meth:`~Model.save()` method. "
"Obviously, passing both parameters is an error: you cannot both insert *and*"
" update at the same time!"
msgstr ""

#: ../../ref/models/instances.txt:477
msgid ""
"It should be very rare that you'll need to use these parameters. Django will"
" almost always do the right thing and trying to override that will lead to "
"errors that are difficult to track down. This feature is for advanced use "
"only."
msgstr ""

#: ../../ref/models/instances.txt:482
msgid ""
"Using ``update_fields`` will force an update similarly to ``force_update``."
msgstr ""

#: ../../ref/models/instances.txt:487
msgid "Updating attributes based on existing fields"
msgstr ""

#: ../../ref/models/instances.txt:489
msgid ""
"Sometimes you'll need to perform a simple arithmetic task on a field, such "
"as incrementing or decrementing the current value. The obvious way to "
"achieve this is to do something like::"
msgstr ""

#: ../../ref/models/instances.txt:497
msgid ""
"If the old ``number_sold`` value retrieved from the database was 10, then "
"the value of 11 will be written back to the database."
msgstr ""

#: ../../ref/models/instances.txt:500
msgid ""
"The process can be made robust, :ref:`avoiding a race condition <avoiding-"
"race-conditions-using-f>`, as well as slightly faster by expressing the "
"update relative to the original field value, rather than as an explicit "
"assignment of a new value. Django provides :class:`F expressions "
"<django.db.models.F>` for performing this kind of relative update. Using "
":class:`F expressions <django.db.models.F>`, the previous example is "
"expressed as::"
msgstr ""

#: ../../ref/models/instances.txt:513
msgid ""
"For more details, see the documentation on :class:`F expressions "
"<django.db.models.F>` and their :ref:`use in update queries <topics-db-"
"queries-update>`."
msgstr ""

#: ../../ref/models/instances.txt:518
msgid "Specifying which fields to save"
msgstr ""

#: ../../ref/models/instances.txt:520
msgid ""
"If ``save()`` is passed a list of field names in keyword argument "
"``update_fields``, only the fields named in that list will be updated. This "
"may be desirable if you want to update just one or a few fields on an "
"object. There will be a slight performance benefit from preventing all of "
"the model fields from being updated in the database. For example::"
msgstr ""

#: ../../ref/models/instances.txt:529
msgid ""
"The ``update_fields`` argument can be any iterable containing strings. An "
"empty ``update_fields`` iterable will skip the save. A value of None will "
"perform an update on all fields."
msgstr ""

#: ../../ref/models/instances.txt:533
msgid "Specifying ``update_fields`` will force an update."
msgstr ""

#: ../../ref/models/instances.txt:535
msgid ""
"When saving a model fetched through deferred model loading "
"(:meth:`~django.db.models.query.QuerySet.only()` or "
":meth:`~django.db.models.query.QuerySet.defer()`) only the fields loaded "
"from the DB will get updated. In effect there is an automatic "
"``update_fields`` in this case. If you assign or change any deferred field "
"value, the field will be added to the updated fields."
msgstr ""

#: ../../ref/models/instances.txt:543
msgid "Deleting objects"
msgstr ""

#: ../../ref/models/instances.txt:547
msgid ""
"Issues an SQL ``DELETE`` for the object. This only deletes the object in the"
" database; the Python instance will still exist and will still have data in "
"its fields."
msgstr ""

#: ../../ref/models/instances.txt:551
msgid ""
"For more details, including how to delete objects in bulk, see :ref:`topics-"
"db-queries-delete`."
msgstr ""

#: ../../ref/models/instances.txt:554
msgid ""
"If you want customized deletion behavior, you can override the ``delete()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""

#: ../../ref/models/instances.txt:558
msgid "Pickling objects"
msgstr ""

#: ../../ref/models/instances.txt:560
msgid ""
"When you :mod:`pickle` a model, its current state is pickled. When you "
"unpickle it, it'll contain the model instance at the moment it was pickled, "
"rather than the data that's currently in the database."
msgstr ""

#: ../../ref/models/instances.txt:564 ../../ref/models/querysets.txt:109
msgid "You can't share pickles between versions"
msgstr ""

#: ../../ref/models/instances.txt:566
msgid ""
"Pickles of models are only valid for the version of Django that was used to "
"generate them. If you generate a pickle using Django version N, there is no "
"guarantee that pickle will be readable with Django version N+1. Pickles "
"should not be used as part of a long-term archival strategy."
msgstr ""

#: ../../ref/models/instances.txt:574
msgid ""
"Since pickle compatibility errors can be difficult to diagnose, such as "
"silently corrupted objects, a ``RuntimeWarning`` is raised when you try to "
"unpickle a model in a Django version that is different than the one in which"
" it was pickled."
msgstr ""

#: ../../ref/models/instances.txt:582
msgid "Other model instance methods"
msgstr ""

#: ../../ref/models/instances.txt:584
msgid "A few object methods have special purposes."
msgstr ""

#: ../../ref/models/instances.txt:587
msgid ""
"On Python 3, as all strings are natively considered Unicode, only use the "
"``__str__()`` method (the ``__unicode__()`` method is obsolete). If you'd "
"like compatibility with Python 2, you can decorate your model class with "
":func:`~django.utils.encoding.python_2_unicode_compatible`."
msgstr ""

#: ../../ref/models/instances.txt:593
msgid "``__unicode__``"
msgstr ""

#: ../../ref/models/instances.txt:597
msgid ""
"The ``__unicode__()`` method is called whenever you call ``unicode()`` on an"
" object. Django uses ``unicode(obj)`` (or the related function, "
":meth:`str(obj) <Model.__str__>`) in a number of places. Most notably, to "
"display an object in the Django admin site and as the value inserted into a "
"template when it displays an object. Thus, you should always return a nice, "
"human-readable representation of the model from the ``__unicode__()`` "
"method."
msgstr ""

#: ../../ref/models/instances.txt:615
msgid ""
"If you define a ``__unicode__()`` method on your model and not a "
":meth:`~Model.__str__()` method, Django will automatically provide you with "
"a :meth:`~Model.__str__()` that calls ``__unicode__()`` and then converts "
"the result correctly to a UTF-8 encoded string object. This is recommended "
"development practice: define only ``__unicode__()`` and let Django take care"
" of the conversion to string objects when required."
msgstr ""

#: ../../ref/models/instances.txt:623
msgid "``__str__``"
msgstr ""

#: ../../ref/models/instances.txt:627
msgid ""
"The ``__str__()`` method is called whenever you call ``str()`` on an object."
" In Python 3, Django uses ``str(obj)`` in a number of places. Most notably, "
"to display an object in the Django admin site and as the value inserted into"
" a template when it displays an object. Thus, you should always return a "
"nice, human-readable representation of the model from the ``__str__()`` "
"method."
msgstr ""

#: ../../ref/models/instances.txt:645
msgid ""
"In Python 2, the main use of ``__str__`` directly inside Django is when the "
"``repr()`` output of a model is displayed anywhere (for example, in "
"debugging output). It isn't required to put ``__str__()`` methods everywhere"
" if you have sensible :meth:`~Model.__unicode__()` methods."
msgstr ""

#: ../../ref/models/instances.txt:651
msgid ""
"The previous :meth:`~Model.__unicode__()` example could be similarly written"
" using ``__str__()`` like this::"
msgstr ""

#: ../../ref/models/instances.txt:667
msgid "``__eq__``"
msgstr ""

#: ../../ref/models/instances.txt:671
msgid ""
"The equality method is defined such that instances with the same primary key"
" value and the same concrete class are considered equal. For proxy models, "
"concrete class is defined as the model's first non-proxy parent; for all "
"other models it is simply the model's class."
msgstr ""

#: ../../ref/models/instances.txt:697
msgid ""
"In previous versions only instances of the exact same class and same primary"
" key value were considered equal."
msgstr ""

#: ../../ref/models/instances.txt:701
msgid "``__hash__``"
msgstr ""

#: ../../ref/models/instances.txt:705
msgid ""
"The ``__hash__`` method is based on the instance's primary key value. It is "
"effectively hash(obj.pk). If the instance doesn't have a primary key value "
"then a ``TypeError`` will be raised (otherwise the ``__hash__`` method would"
" return different values before and after the instance is saved, but "
"changing the ``__hash__`` value of an instance `is forbidden in Python`_)."
msgstr ""

#: ../../ref/models/instances.txt:714
msgid ""
"In previous versions instance's without primary key value were hashable."
msgstr ""

#: ../../ref/models/instances.txt:720
msgid "``get_absolute_url``"
msgstr ""

#: ../../ref/models/instances.txt:724
msgid ""
"Define a ``get_absolute_url()`` method to tell Django how to calculate the "
"canonical URL for an object. To callers, this method should appear to return"
" a string that can be used to refer to the object over HTTP."
msgstr ""

#: ../../ref/models/instances.txt:733
msgid ""
"(Whilst this code is correct and simple, it may not be the most portable way"
" to write this kind of method. The :func:`~django.core.urlresolvers.reverse`"
" function is usually the best approach.)"
msgstr ""

#: ../../ref/models/instances.txt:743
msgid ""
"One place Django uses ``get_absolute_url()`` is in the admin app. If an "
"object defines this method, the object-editing page will have a \"View on "
"site\" link that will jump you directly to the object's public view, as "
"given by ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:748
msgid ""
"Similarly, a couple of other bits of Django, such as the :doc:`syndication "
"feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when "
"it is defined. If it makes sense for your model's instances to each have a "
"unique URL, you should define ``get_absolute_url()``."
msgstr ""

#: ../../ref/models/instances.txt:755
msgid ""
"You should avoid building the URL from unvalidated user input, in order to "
"reduce possibilities of link or redirect poisoning::"
msgstr ""

#: ../../ref/models/instances.txt:761
msgid ""
"If ``self.name`` is ``'/example.com'`` this returns ``'//example.com/'`` "
"which, in turn, is a valid schema relative URL but not the expected "
"``'/%2Fexample.com/'``."
msgstr ""

#: ../../ref/models/instances.txt:766
msgid ""
"It's good practice to use ``get_absolute_url()`` in templates, instead of "
"hard-coding your objects' URLs. For example, this template code is bad:"
msgstr ""

#: ../../ref/models/instances.txt:774
msgid "This template code is much better:"
msgstr ""

#: ../../ref/models/instances.txt:780
msgid ""
"The logic here is that if you change the URL structure of your objects, even"
" for something simple such as correcting a spelling error, you don't want to"
" have to track down every place that the URL might be created. Specify it "
"once, in ``get_absolute_url()`` and have all your other code call that one "
"place."
msgstr ""

#: ../../ref/models/instances.txt:786
msgid ""
"The string you return from ``get_absolute_url()`` **must** contain only "
"ASCII characters (required by the URI specification, :rfc:`2396`) and be "
"URL-encoded, if necessary."
msgstr ""

#: ../../ref/models/instances.txt:790
msgid ""
"Code and templates calling ``get_absolute_url()`` should be able to use the "
"result directly without any further processing. You may wish to use the "
"``django.utils.encoding.iri_to_uri()`` function to help with this if you are"
" using unicode strings containing characters outside the ASCII range at all."
msgstr ""

#: ../../ref/models/instances.txt:797
msgid "Extra instance methods"
msgstr ""

#: ../../ref/models/instances.txt:799
msgid ""
"In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model "
"object might have some of the following methods:"
msgstr ""

#: ../../ref/models/instances.txt:804
msgid ""
"For every field that has :attr:`~django.db.models.Field.choices` set, the "
"object will have a ``get_FOO_display()`` method, where ``FOO`` is the name "
"of the field. This method returns the \"human-readable\" value of the field."
msgstr ""

#: ../../ref/models/instances.txt:833
msgid ""
"For every :class:`~django.db.models.DateField` and "
":class:`~django.db.models.DateTimeField` that does not have :attr:`null=True"
" <django.db.models.Field.null>`, the object will have ``get_next_by_FOO()`` "
"and ``get_previous_by_FOO()`` methods, where ``FOO`` is the name of the "
"field. This returns the next and previous object with respect to the date "
"field, raising a :exc:`~django.db.models.Model.DoesNotExist` exception when "
"appropriate."
msgstr ""

#: ../../ref/models/instances.txt:840
msgid ""
"Both of these methods will perform their queries using the default manager "
"for the model. If you need to emulate filtering used by a custom manager, or"
" want to perform one-off custom filtering, both methods also accept optional"
" keyword arguments, which should be in the format described in :ref:`Field "
"lookups <field-lookups>`."
msgstr ""

#: ../../ref/models/instances.txt:846
msgid ""
"Note that in the case of identical date values, these methods will use the "
"primary key as a tie-breaker. This guarantees that no records are skipped or"
" duplicated. That also means you cannot use those methods on unsaved "
"objects."
msgstr ""

#: ../../ref/models/instances.txt:851
msgid "Other attributes"
msgstr ""

#: ../../ref/models/instances.txt:854
msgid "``DoesNotExist``"
msgstr ""

#: ../../ref/models/instances.txt:858
msgid ""
"This exception is raised by the ORM in a couple places, for example by "
":meth:`QuerySet.get() <django.db.models.query.QuerySet.get>` when an object "
"is not found for the given query parameters."
msgstr ""

#: ../../ref/models/instances.txt:862
msgid ""
"Django provides a ``DoesNotExist`` exception as an attribute of each model "
"class to identify the class of object that could not be found and to allow "
"you to catch a particular model class with ``try/except``. The exception is "
"a subclass of :exc:`django.core.exceptions.ObjectDoesNotExist`."
msgstr ""

#: ../../ref/models/lookups.txt:3
msgid "Lookup API reference"
msgstr ""

#: ../../ref/models/lookups.txt:12
msgid ""
"This document has the API references of lookups, the Django API for building"
" the ``WHERE`` clause of a database query. To learn how to *use* lookups, "
"see :doc:`/topics/db/queries`; to learn how to *create* new lookups, see "
":doc:`/howto/custom-lookups`."
msgstr ""

#: ../../ref/models/lookups.txt:17
msgid ""
"The lookup API has two components: a :class:`~lookups.RegisterLookupMixin` "
"class that registers lookups, and the :ref:`Query Expression API <query-"
"expression>`, a set of methods that a class has to implement to be "
"registrable as a lookup."
msgstr ""

#: ../../ref/models/lookups.txt:21
msgid ""
"Django has two base classes that follow the query expression API and from "
"where all Django builtin lookups are derived:"
msgstr ""

#: ../../ref/models/lookups.txt:24
msgid ""
":class:`Lookup`: to lookup a field (e.g. the ``exact`` of "
"``field_name__exact``)"
msgstr ""

#: ../../ref/models/lookups.txt:25
msgid ":class:`Transform`: to transform a field"
msgstr ""

#: ../../ref/models/lookups.txt:27
msgid "A lookup expression consists of three parts:"
msgstr ""

#: ../../ref/models/lookups.txt:29
msgid ""
"Fields part (e.g. "
"``Book.objects.filter(author__best_friends__first_name...``);"
msgstr ""

#: ../../ref/models/lookups.txt:30
msgid ""
"Transforms part (may be omitted) (e.g. ``__lower__first3chars__reversed``);"
msgstr ""

#: ../../ref/models/lookups.txt:31
msgid ""
"A lookup (e.g. ``__icontains``) that, if omitted, defaults to ``__exact``."
msgstr ""

#: ../../ref/models/lookups.txt:36
msgid "Registration API"
msgstr ""

#: ../../ref/models/lookups.txt:38
msgid ""
"Django uses :class:`~lookups.RegisterLookupMixin` to give a class the "
"interface to register lookups on itself. The two prominent examples are "
":class:`~django.db.models.Field`, the base class of all model fields, and "
"``Aggregate``, the base class of all Django aggregates."
msgstr ""

#: ../../ref/models/lookups.txt:45
msgid "A mixin that implements the lookup API on a class."
msgstr ""

#: ../../ref/models/lookups.txt:49
msgid ""
"Registers a new lookup in the class. For example "
"``DateField.register_lookup(YearExact)`` will register ``YearExact`` lookup "
"on ``DateField``. It overrides a lookup that already exists with the same "
"name."
msgstr ""

#: ../../ref/models/lookups.txt:56
msgid ""
"Returns the :class:`Lookup` named ``lookup_name`` registered in the class. "
"The default implementation looks recursively on all parent classes and "
"checks if any has a registered lookup named ``lookup_name``, returning the "
"first match."
msgstr ""

#: ../../ref/models/lookups.txt:63
msgid ""
"Returns a :class:`Transform` named ``transform_name``. The default "
"implementation looks recursively on all parent classes to check if any has "
"the registered transform named ``transform_name``, returning the first "
"match."
msgstr ""

#: ../../ref/models/lookups.txt:68
msgid ""
"For a class to be a lookup, it must follow the :ref:`Query Expression API "
"<query-expression>`. :class:`~Lookup` and :class:`~Transform` naturally "
"follow this API."
msgstr ""

#: ../../ref/models/lookups.txt:75
msgid "The Query Expression API"
msgstr ""

#: ../../ref/models/lookups.txt:77
msgid ""
"The query expression API is a common set of methods that classes define to "
"be usable in query expressions to translate themselves into SQL expressions."
" Direct field references, aggregates, and ``Transform`` are examples that "
"follow this API. A class is said to follow the query expression API when it "
"implements the following methods:"
msgstr ""

#: ../../ref/models/lookups.txt:85
msgid ""
"Responsible for producing the query string and parameters for the "
"expression. The ``compiler`` is an ``SQLCompiler`` object, which has a "
"``compile()`` method that can be used to compile other expressions. The "
"``connection`` is the connection used to execute the query."
msgstr ""

#: ../../ref/models/lookups.txt:90
msgid ""
"Calling ``expression.as_sql()`` is usually incorrect - instead "
"``compiler.compile(expression)`` should be used. The ``compiler.compile()`` "
"method will take care of calling vendor-specific methods of the expression."
msgstr ""

#: ../../ref/models/lookups.txt:96
msgid ""
"Works like ``as_sql()`` method. When an expression is compiled by "
"``compiler.compile()``, Django will first try to call ``as_vendorname()``, "
"where ``vendorname`` is the vendor name of the backend used for executing "
"the query. The ``vendorname`` is one of ``postgresql``, ``oracle``, "
"``sqlite``, or ``mysql`` for Django's built-in backends."
msgstr ""

#: ../../ref/models/lookups.txt:104
msgid ""
"Must return the lookup named ``lookup_name``. For instance, by returning "
"``self.output_field.get_lookup(lookup_name)``."
msgstr ""

#: ../../ref/models/lookups.txt:109
msgid ""
"Must return the lookup named ``transform_name``. For instance, by returning "
"``self.output_field.get_transform(transform_name)``."
msgstr ""

#: ../../ref/models/lookups.txt:114
msgid ""
"Defines the type of class returned by the ``get_lookup()`` method. It must "
"be a :class:`~django.db.models.Field` instance."
msgstr ""

#: ../../ref/models/lookups.txt:118
msgid "Transform reference"
msgstr ""

#: ../../ref/models/lookups.txt:122
msgid ""
"A ``Transform`` is a generic class to implement field transformations. A "
"prominent example is ``__year`` that transforms a ``DateField`` into a "
"``IntegerField``."
msgstr ""

#: ../../ref/models/lookups.txt:126
msgid ""
"The notation to use a ``Transform`` in an lookup expression is "
"``<expression>__<transformation>`` (e.g. ``date__year``)."
msgstr ""

#: ../../ref/models/lookups.txt:129
msgid ""
"This class follows the :ref:`Query Expression API <query-expression>`, which"
" implies that you can use ``<expression>__<transform1>__<transform2>``."
msgstr ""

#: ../../ref/models/lookups.txt:136
msgid ""
"A boolean indicating whether this transformation should apply to both "
"``lhs`` and ``rhs``. Bilateral transformations will be applied to ``rhs`` in"
" the same order as they appear in the lookup expression. By default it is "
"set to ``False``. For example usage, see :doc:`/howto/custom-lookups`."
msgstr ""

#: ../../ref/models/lookups.txt:143
msgid ""
"The left-hand side - what is being transformed. It must follow the "
":ref:`Query Expression API <query-expression>`."
msgstr ""

#: ../../ref/models/lookups.txt:148
msgid ""
"The name of the lookup, used for identifying it on parsing query "
"expressions. It cannot contain the string ``\"__\"``."
msgstr ""

#: ../../ref/models/lookups.txt:153
msgid ""
"Defines the class this transformation outputs. It must be a "
":class:`~django.db.models.Field` instance. By default is the same as its "
"``lhs.output_field``."
msgstr ""

#: ../../ref/models/lookups.txt:159
msgid "To be overridden; raises :exc:`NotImplementedError`."
msgstr ""

#: ../../ref/models/lookups.txt:163
msgid "Same as :meth:`~lookups.RegisterLookupMixin.get_lookup()`."
msgstr ""

#: ../../ref/models/lookups.txt:167
msgid "Same as :meth:`~lookups.RegisterLookupMixin.get_transform()`."
msgstr ""

#: ../../ref/models/lookups.txt:170
msgid "Lookup reference"
msgstr ""

#: ../../ref/models/lookups.txt:174
msgid ""
"A ``Lookup`` is a generic class to implement lookups. A lookup is a query "
"expression with a left-hand side, :attr:`lhs`; a right-hand side, "
":attr:`rhs`; and a ``lookup_name`` that is used to produce a boolean "
"comparison between ``lhs`` and ``rhs`` such as ``lhs in rhs`` or ``lhs > "
"rhs``."
msgstr ""

#: ../../ref/models/lookups.txt:180
msgid ""
"The notation to use a lookup in an expression is "
"``<lhs>__<lookup_name>=<rhs>``."
msgstr ""

#: ../../ref/models/lookups.txt:183
msgid ""
"This class doesn't follow the :ref:`Query Expression API <query-expression>`"
" since it has ``=<rhs>`` on its construction: lookups are always the end of "
"a lookup expression."
msgstr ""

#: ../../ref/models/lookups.txt:189
msgid ""
"The left-hand side - what is being looked up. The object must follow the "
":ref:`Query Expression API <query-expression>`."
msgstr ""

#: ../../ref/models/lookups.txt:194
msgid ""
"The right-hand side - what ``lhs`` is being compared against. It can be a "
"plain value, or something that compiles into SQL, typically an ``F()`` "
"object or a ``QuerySet``."
msgstr ""

#: ../../ref/models/lookups.txt:200
msgid ""
"The name of this lookup, used to identify it on parsing query expressions. "
"It cannot contain the string ``\"__\"``."
msgstr ""

#: ../../ref/models/lookups.txt:205
msgid ""
"Returns a tuple ``(lhs_string, lhs_params)``, as returned by "
"``compiler.compile(lhs)``. This method can be overridden to tune how the "
"``lhs`` is processed."
msgstr ""

#: ../../ref/models/lookups.txt:209
msgid ""
"``compiler`` is an ``SQLCompiler`` object, to be used like "
"``compiler.compile(lhs)`` for compiling ``lhs``. The ``connection`` can be "
"used for compiling vendor specific SQL. If ``lhs`` is not ``None``, use it "
"as the processed ``lhs`` instead of ``self.lhs``."
msgstr ""

#: ../../ref/models/lookups.txt:216
msgid "Behaves the same way as :meth:`process_lhs`, for the right-hand side."
msgstr ""

#: ../../ref/models/meta.txt:3
msgid "Model ``_meta`` API"
msgstr ""

#: ../../ref/models/meta.txt:10
msgid ""
"The model ``_meta`` API is at the core of the Django ORM. It enables other "
"parts of the system such as lookups, queries, forms, and the admin to "
"understand the capabilities of each model. The API is accessible through the"
" ``_meta`` attribute of each model class, which is an instance of an "
"``django.db.models.options.Options`` object."
msgstr ""

#: ../../ref/models/meta.txt:16
msgid "Methods that it provides can be used to:"
msgstr ""

#: ../../ref/models/meta.txt:18
msgid "Retrieve all field instances of a model"
msgstr ""

#: ../../ref/models/meta.txt:19
msgid "Retrieve a single field instance of a model by name"
msgstr ""

#: ../../ref/models/meta.txt:23
msgid ""
"The Model ``_meta`` API has always existed as a Django internal, but wasn't "
"formally documented and supported. As part of the effort to make this API "
"public, some of the already existing API entry points have changed slightly."
" A :ref:`migration guide <migrating-old-meta-api>` has been provided to "
"assist in converting your code to use the new, official API."
msgstr ""

#: ../../ref/models/meta.txt:33
msgid "Field access API"
msgstr ""

#: ../../ref/models/meta.txt:36
msgid "Retrieving a single field instance of a model by name"
msgstr ""

#: ../../ref/models/meta.txt:40
msgid "Returns the field instance given a name of a field."
msgstr ""

#: ../../ref/models/meta.txt:42
msgid ""
"``field_name`` can be the name of a field on the model, a field on an "
"abstract or inherited model, or a field defined on another model that points"
" to the model. In the latter case, the ``field_name`` will be the "
"``related_name`` defined by the user or the name automatically generated by "
"Django itself."
msgstr ""

#: ../../ref/models/meta.txt:48
msgid ""
":attr:`Hidden fields <django.db.models.Field.hidden>` cannot be retrieved by"
" name."
msgstr ""

#: ../../ref/models/meta.txt:51
msgid ""
"If a field with the given name is not found a "
":class:`~django.core.exceptions.FieldDoesNotExist` exception will be raised."
msgstr ""

#: ../../ref/models/meta.txt:75
msgid ""
":meth:`Options.get_field()` previously accepted a ``many_to_many`` parameter"
" which could be set to ``False`` to avoid searching ``ManyToManyField``\\s. "
"The old behavior has been preserved for backwards compatibility; however, "
"the parameter and this behavior has been deprecated."
msgstr ""

#: ../../ref/models/meta.txt:81
msgid ""
"If you wish to filter out ``ManyToManyField``\\s, you can inspect the "
":attr:`Field.many_to_many <django.db.models.Field.many_to_many>` attribute "
"after calling ``get_field()``."
msgstr ""

#: ../../ref/models/meta.txt:86
msgid "Retrieving all field instances of a model"
msgstr ""

#: ../../ref/models/meta.txt:92
msgid ""
"Returns a tuple of fields associated with a model. ``get_fields()`` accepts "
"two parameters that can be used to control which fields are returned:"
msgstr ""

#: ../../ref/models/meta.txt:100
msgid "``include_parents``"
msgstr ""

#: ../../ref/models/meta.txt:96
msgid ""
"``True`` by default. Recursively includes fields defined on parent classes. "
"If set to ``False``, ``get_fields()`` will only search for fields declared "
"directly on the current model. Fields from models that directly inherit from"
" abstract models or proxy classes are considered to be local, not on the "
"parent."
msgstr ""

#: ../../ref/models/meta.txt:107
msgid "``include_hidden``"
msgstr ""

#: ../../ref/models/meta.txt:103
msgid ""
"``False`` by default. If set to ``True``, ``get_fields()`` will include "
"fields that are used to back other field's functionality. This will also "
"include any fields that have a ``related_name`` (such as "
":class:`~django.db.models.ManyToManyField`, or "
":class:`~django.db.models.ForeignKey`) that start with a \"+\"."
msgstr ""

#: ../../ref/models/meta.txt:150
msgid "Migrating from the old API"
msgstr ""

#: ../../ref/models/meta.txt:152
msgid ""
"As part of the formalization of the ``Model._meta`` API (from the "
":class:`django.db.models.options.Options` class), a number of methods and "
"properties have been deprecated and will be removed in Django 1.10."
msgstr ""

#: ../../ref/models/meta.txt:156
msgid "These old APIs can be replicated by either:"
msgstr ""

#: ../../ref/models/meta.txt:158
msgid ""
"invoking :meth:`Options.get_field() "
"<django.db.models.options.Options.get_field()>`, or;"
msgstr ""

#: ../../ref/models/meta.txt:161
msgid ""
"invoking :meth:`Options.get_fields() "
"<django.db.models.options.Options.get_fields()>` to retrieve a list of all "
"fields, and then filtering this list using the :ref:`field attributes "
"<model-field-attributes>` that describe (or retrieve, in the case of "
"``_with_model`` variants) the properties of the desired fields."
msgstr ""

#: ../../ref/models/meta.txt:167
msgid ""
"Although it's possible to make strictly equivalent replacements of the old "
"methods, that might not be the best approach. Taking the time to refactor "
"any field loops to make better use of the new API - and possibly include "
"fields that were previously excluded - will almost certainly result in "
"better code."
msgstr ""

#: ../../ref/models/meta.txt:172
msgid ""
"Assuming you have a model named ``MyModel``, the following substitutions can"
" be made to convert your code to the new API:"
msgstr ""

#: ../../ref/models/meta.txt:175
msgid "``MyModel._meta.get_field(name)``::"
msgstr ""

#: ../../ref/models/meta.txt:179
msgid "then check if:"
msgstr ""

#: ../../ref/models/meta.txt:181
msgid ""
"``f.auto_created == False``, because the new ``get_field()`` API will find "
"\"reverse\" relations), and:"
msgstr ""

#: ../../ref/models/meta.txt:184
msgid ""
"``f.is_relation and f.related_model is None``, because the new "
"``get_field()`` API will find "
":class:`~django.contrib.contenttypes.fields.GenericForeignKey` relations;"
msgstr ""

#: ../../ref/models/meta.txt:188
msgid "``MyModel._meta.get_field_by_name(name)``:"
msgstr ""

#: ../../ref/models/meta.txt:190
msgid ""
"``get_field_by_name()`` returned four values: ``(field, model, direct,  "
"m2m)``:"
msgstr ""

#: ../../ref/models/meta.txt:193
msgid "``field`` can be found by ``MyModel._meta.get_field(name)``"
msgstr ""

#: ../../ref/models/meta.txt:195
msgid ""
"``model`` can be found through the :attr:`~django.db.models.Field.model` "
"attribute on the field."
msgstr ""

#: ../../ref/models/meta.txt:198
msgid ""
"``direct`` can be found by: ``not field.auto_created or field.concrete``"
msgstr ""

#: ../../ref/models/meta.txt:200
msgid ""
"The :attr:`~django.db.models.Field.auto_created` check excludes all "
"\"forward\" and \"reverse\" relations that are created by Django, but this "
"also includes ``AutoField`` and ``OneToOneField`` on proxy models. We avoid "
"filtering out these attributes using the :attr:`concrete "
"<django.db.models.Field.concrete>` attribute."
msgstr ""

#: ../../ref/models/meta.txt:206
msgid ""
"``m2m`` can be found through the "
":attr:`~django.db.models.Field.many_to_many` attribute on the field."
msgstr ""

#: ../../ref/models/meta.txt:209
msgid "``MyModel._meta.get_fields_with_model()``::"
msgstr ""

#: ../../ref/models/meta.txt:219
msgid "``MyModel._meta.get_concrete_fields_with_model()``::"
msgstr ""

#: ../../ref/models/meta.txt:231
msgid "``MyModel._meta.get_m2m_with_model()``::"
msgstr ""

#: ../../ref/models/meta.txt:239
msgid "``MyModel._meta.get_all_related_objects()``::"
msgstr ""

#: ../../ref/models/meta.txt:246
msgid "``MyModel._meta.get_all_related_objects_with_model()``::"
msgstr ""

#: ../../ref/models/meta.txt:254
msgid "``MyModel._meta.get_all_related_many_to_many_objects()``::"
msgstr ""

#: ../../ref/models/meta.txt:261
msgid "``MyModel._meta.get_all_related_m2m_objects_with_model()``::"
msgstr ""

#: ../../ref/models/meta.txt:269
msgid "``MyModel._meta.get_all_field_names()``::"
msgstr ""

#: ../../ref/models/meta.txt:280
msgid ""
"This provides a 100% backwards compatible replacement, ensuring that both "
"field names and attribute names ``ForeignKey``\\s are included, but fields "
"associated with ``GenericForeignKey``\\s are not. A simpler version would "
"be::"
msgstr ""

#: ../../ref/models/meta.txt:286
msgid ""
"While this isn't 100% backwards compatible, it may be sufficient in many "
"situations."
msgstr ""

#: ../../ref/models/options.txt:3
msgid "Model ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:5
msgid ""
"This document explains all the possible :ref:`metadata options <meta-"
"options>` that you can give your model in its internal ``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:10
msgid "Available ``Meta`` options"
msgstr ""

#: ../../ref/models/options.txt:15
msgid "``abstract``"
msgstr ""

#: ../../ref/models/options.txt:19
msgid ""
"If ``abstract = True``, this model will be an :ref:`abstract base class "
"<abstract-base-classes>`."
msgstr ""

#: ../../ref/models/options.txt:27
msgid ""
"If a model exists outside of the standard locations (:file:`models.py` or a "
"``models`` package in an app), the model must define which app it is part "
"of::"
msgstr ""

#: ../../ref/models/options.txt:35
msgid ""
"``app_label`` is no longer required for models that are defined outside the "
"``models`` module of an application."
msgstr ""

#: ../../ref/models/options.txt:39
msgid "``db_table``"
msgstr ""

#: ../../ref/models/options.txt:43
msgid "The name of the database table to use for the model::"
msgstr ""

#: ../../ref/models/options.txt:52
msgid ""
"To save you time, Django automatically derives the name of the database "
"table from the name of your model class and the app that contains it. A "
"model's database table name is constructed by joining the model's \"app "
"label\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- "
"to the model's class name, with an underscore between them."
msgstr ""

#: ../../ref/models/options.txt:58
msgid ""
"For example, if you have an app ``bookstore`` (as created by ``manage.py "
"startapp bookstore``), a model defined as ``class Book`` will have a "
"database table named ``bookstore_book``."
msgstr ""

#: ../../ref/models/options.txt:62
msgid ""
"To override the database table name, use the ``db_table`` parameter in "
"``class Meta``."
msgstr ""

#: ../../ref/models/options.txt:65
msgid ""
"If your database table name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""

#: ../../ref/models/options.txt:69
msgid "Use lowercase table names for MySQL"
msgstr ""

#: ../../ref/models/options.txt:71
msgid ""
"It is strongly advised that you use lowercase table names when you override "
"the table name via ``db_table``, particularly if you are using the MySQL "
"backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""

#: ../../ref/models/options.txt:75
msgid "Table name quoting for Oracle"
msgstr ""

#: ../../ref/models/options.txt:77
msgid ""
"In order to meet the 30-char limitation Oracle has on table names, and match"
" the usual conventions for Oracle databases, Django may shorten table names "
"and turn them all-uppercase. To prevent such transformations, use a quoted "
"name as the value for ``db_table``::"
msgstr ""

#: ../../ref/models/options.txt:84
msgid ""
"Such quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect. See the "
":ref:`Oracle notes <oracle-notes>` for more details."
msgstr ""

#: ../../ref/models/options.txt:93
msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` "
"setting, if set. If the backend doesn't support tablespaces, this option is "
"ignored."
msgstr ""

#: ../../ref/models/options.txt:99
msgid "``default_related_name``"
msgstr ""

#: ../../ref/models/options.txt:105
msgid ""
"The name that will be used by default for the relation from a related object"
" back to this one. The default is ``<model_name>_set``."
msgstr ""

#: ../../ref/models/options.txt:108
msgid ""
"As the reverse name for a field should be unique, be careful if you intend "
"to subclass your model. To work around name collisions, part of the name "
"should contain ``'%(app_label)s'`` and ``'%(model_name)s'``, which are "
"replaced respectively by the name of the application the model is in, and "
"the name of the model, both lowercased. See the paragraph on :ref:`related "
"names for abstract models <abstract-related-name>`."
msgstr ""

#: ../../ref/models/options.txt:116
msgid "``get_latest_by``"
msgstr ""

#: ../../ref/models/options.txt:120
msgid ""
"The name of an orderable field in the model, typically a :class:`DateField`,"
" :class:`DateTimeField`, or :class:`IntegerField`. This specifies the "
"default field to use in your model :class:`Manager`’s "
":meth:`~django.db.models.query.QuerySet.latest` and "
":meth:`~django.db.models.query.QuerySet.earliest` methods."
msgstr ""

#: ../../ref/models/options.txt:130
msgid "See the :meth:`~django.db.models.query.QuerySet.latest` docs for more."
msgstr ""

#: ../../ref/models/options.txt:133
msgid "``managed``"
msgstr ""

#: ../../ref/models/options.txt:137
msgid ""
"Defaults to ``True``, meaning Django will create the appropriate database "
"tables in :djadmin:`migrate` or as part of migrations and remove them as "
"part of a :djadmin:`flush` management command. That is, Django *manages* the"
" database tables' lifecycles."
msgstr ""

#: ../../ref/models/options.txt:142
msgid ""
"If ``False``, no database table creation or deletion operations will be "
"performed for this model. This is useful if the model represents an existing"
" table or a database view that has been created by some other means. This is"
" the *only* difference when ``managed=False``. All other aspects of model "
"handling are exactly the same as normal. This includes"
msgstr ""

#: ../../ref/models/options.txt:148
msgid ""
"Adding an automatic primary key field to the model if you don't declare it."
"  To avoid confusion for later code readers, it's recommended to specify all"
" the columns from the database table you are modeling when using unmanaged "
"models."
msgstr ""

#: ../../ref/models/options.txt:153
msgid ""
"If a model with ``managed=False`` contains a "
":class:`~django.db.models.ManyToManyField` that points to another unmanaged "
"model, then the intermediate table for the many-to-many join will also not "
"be created. However, the intermediary table between one managed and one "
"unmanaged model *will* be created."
msgstr ""

#: ../../ref/models/options.txt:159
msgid ""
"If you need to change this default behavior, create the intermediary table "
"as an explicit model (with ``managed`` set as needed) and use the "
":attr:`ManyToManyField.through` attribute to make the relation use your "
"custom model."
msgstr ""

#: ../../ref/models/options.txt:164
msgid ""
"For tests involving models with ``managed=False``, it's up to you to ensure "
"the correct tables are created as part of the test setup."
msgstr ""

#: ../../ref/models/options.txt:167
msgid ""
"If you're interested in changing the Python-level behavior of a model class,"
" you *could* use ``managed=False`` and create a copy of an existing model. "
"However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""

#: ../../ref/models/options.txt:172
msgid "``order_with_respect_to``"
msgstr ""

#: ../../ref/models/options.txt:176
msgid ""
"Makes this object orderable with respect to the given field, usually a "
"``ForeignKey``. This can be used to make related objects orderable with "
"respect to a parent object. For example, if an ``Answer`` relates to a "
"``Question`` object, and a question has more than one answer, and the order "
"of answers matters, you'd do this::"
msgstr ""

#: ../../ref/models/options.txt:195
msgid ""
"When ``order_with_respect_to`` is set, two additional methods are provided "
"to retrieve and to set the order of the related objects: "
"``get_RELATED_order()`` and ``set_RELATED_order()``, where ``RELATED`` is "
"the lowercased model name. For example, assuming that a ``Question`` object "
"has multiple related ``Answer`` objects, the list returned contains the "
"primary keys of the related ``Answer`` objects::"
msgstr ""

#: ../../ref/models/options.txt:206
msgid ""
"The order of a ``Question`` object's related ``Answer`` objects can be set "
"by passing in a list of ``Answer`` primary keys::"
msgstr ""

#: ../../ref/models/options.txt:211
msgid ""
"The related objects also get two methods, ``get_next_in_order()`` and "
"``get_previous_in_order()``, which can be used to access those objects in "
"their proper order. Assuming the ``Answer`` objects are ordered by ``id``::"
msgstr ""

#: ../../ref/models/options.txt:221
msgid "``order_with_respect_to`` implicitly sets the ``ordering`` option"
msgstr ""

#: ../../ref/models/options.txt:223
msgid ""
"Internally, ``order_with_respect_to`` adds an additional field/database "
"column named ``_order`` and sets the model's :attr:`~Options.ordering` "
"option to this field. Consequently, ``order_with_respect_to`` and "
"``ordering`` cannot be used together, and the ordering added by "
"``order_with_respect_to`` will apply whenever you obtain a list of objects "
"of this model."
msgstr ""

#: ../../ref/models/options.txt:230
msgid "Changing ``order_with_respect_to``"
msgstr ""

#: ../../ref/models/options.txt:232
msgid ""
"Because ``order_with_respect_to`` adds a new database column, be sure to "
"make and apply the appropriate migrations if you add or change "
"``order_with_respect_to`` after your initial :djadmin:`migrate`."
msgstr ""

#: ../../ref/models/options.txt:237
msgid "``ordering``"
msgstr ""

#: ../../ref/models/options.txt:241
msgid ""
"The default ordering for the object, for use when obtaining lists of "
"objects::"
msgstr ""

#: ../../ref/models/options.txt:245
msgid ""
"This is a tuple or list of strings. Each string is a field name with an "
"optional \"-\" prefix, which indicates descending order. Fields without a "
"leading \"-\" will be ordered ascending. Use the string \"?\" to order "
"randomly."
msgstr ""

#: ../../ref/models/options.txt:249
msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr ""

#: ../../ref/models/options.txt:253
msgid "To order by ``pub_date`` descending, use this::"
msgstr ""

#: ../../ref/models/options.txt:257
msgid ""
"To order by ``pub_date`` descending, then by ``author`` ascending, use "
"this::"
msgstr ""

#: ../../ref/models/options.txt:263 ../../ref/models/querysets.txt:403
msgid ""
"Ordering is not a free operation. Each field you add to the ordering incurs "
"a cost to your database. Each foreign key you add will implicitly include "
"all of its default orderings as well."
msgstr ""

#: ../../ref/models/options.txt:268
msgid "``permissions``"
msgstr ""

#: ../../ref/models/options.txt:272
msgid ""
"Extra permissions to enter into the permissions table when creating this "
"object. Add, delete and change permissions are automatically created for "
"each model. This example specifies an extra permission, "
"``can_deliver_pizzas``::"
msgstr ""

#: ../../ref/models/options.txt:278
msgid ""
"This is a list or tuple of 2-tuples in the format ``(permission_code, "
"human_readable_permission_name)``."
msgstr ""

#: ../../ref/models/options.txt:282
msgid "``default_permissions``"
msgstr ""

#: ../../ref/models/options.txt:288
msgid ""
"Defaults to ``('add', 'change', 'delete')``. You may customize this list, "
"for example, by setting this to an empty list if your app doesn't require "
"any of the default permissions. It must be specified on the model before the"
" model is created by :djadmin:`migrate` in order to prevent any omitted "
"permissions from being created."
msgstr ""

#: ../../ref/models/options.txt:295
msgid "``proxy``"
msgstr ""

#: ../../ref/models/options.txt:299
msgid ""
"If ``proxy = True``, a model which subclasses another model will be treated "
"as a :ref:`proxy model <proxy-models>`."
msgstr ""

#: ../../ref/models/options.txt:303
msgid "``select_on_save``"
msgstr ""

#: ../../ref/models/options.txt:307
msgid ""
"Determines if Django will use the pre-1.6 "
":meth:`django.db.models.Model.save()` algorithm. The old algorithm uses "
"``SELECT`` to determine if there is an existing row to be updated. The new "
"algorithm tries an ``UPDATE`` directly. In some rare cases the ``UPDATE`` of"
" an existing row isn't visible to Django. An example is the PostgreSQL ``ON "
"UPDATE`` trigger which returns ``NULL``. In such cases the new algorithm "
"will end up doing an ``INSERT`` even when a row exists in the database."
msgstr ""

#: ../../ref/models/options.txt:316
msgid ""
"Usually there is no need to set this attribute. The default is ``False``."
msgstr ""

#: ../../ref/models/options.txt:319
msgid ""
"See :meth:`django.db.models.Model.save()` for more about the old and new "
"saving algorithm."
msgstr ""

#: ../../ref/models/options.txt:323
msgid "``unique_together``"
msgstr ""

#: ../../ref/models/options.txt:327
msgid "Sets of field names that, taken together, must be unique::"
msgstr ""

#: ../../ref/models/options.txt:331
msgid ""
"This is a tuple of tuples that must be unique when considered together. It's"
" used in the Django admin and is enforced at the database level (i.e., the "
"appropriate ``UNIQUE`` statements are included in the ``CREATE TABLE`` "
"statement)."
msgstr ""

#: ../../ref/models/options.txt:336
msgid ""
"For convenience, unique_together can be a single tuple when dealing with a "
"single set of fields::"
msgstr ""

#: ../../ref/models/options.txt:341
msgid ""
"A :class:`~django.db.models.ManyToManyField` cannot be included in "
"unique_together. (It's not clear what that would even mean!) If you need to "
"validate uniqueness related to a :class:`~django.db.models.ManyToManyField`,"
" try using a signal or an explicit :attr:`through <ManyToManyField.through>`"
" model."
msgstr ""

#: ../../ref/models/options.txt:349
msgid ""
"The ``ValidationError`` raised during model validation when the constraint "
"is violated has the ``unique_together`` error code."
msgstr ""

#: ../../ref/models/options.txt:353
msgid "``index_together``"
msgstr ""

#: ../../ref/models/options.txt:357
msgid "Sets of field names that, taken together, are indexed::"
msgstr ""

#: ../../ref/models/options.txt:363
msgid ""
"This list of fields will be indexed together (i.e. the appropriate ``CREATE "
"INDEX`` statement will be issued.)"
msgstr ""

#: ../../ref/models/options.txt:368
msgid ""
"For convenience, ``index_together`` can be a single list when dealing with a"
" single set of fields::"
msgstr ""

#: ../../ref/models/options.txt:378
msgid "A human-readable name for the object, singular::"
msgstr ""

#: ../../ref/models/options.txt:382
msgid ""
"If this isn't given, Django will use a munged version of the class name: "
"``CamelCase`` becomes ``camel case``."
msgstr ""

#: ../../ref/models/options.txt:386
msgid "``verbose_name_plural``"
msgstr ""

#: ../../ref/models/options.txt:390
msgid "The plural name for the object::"
msgstr ""

#: ../../ref/models/options.txt:394
msgid ""
"If this isn't given, Django will use :attr:`~Options.verbose_name` + "
"``\"s\"``."
msgstr ""

#: ../../ref/models/querysets.txt:3
msgid "QuerySet API reference"
msgstr ""

#: ../../ref/models/querysets.txt:7
msgid ""
"This document describes the details of the ``QuerySet`` API. It builds on "
"the material presented in the :doc:`model </topics/db/models>` and "
":doc:`database query </topics/db/queries>` guides, so you'll probably want "
"to read and understand those documents before reading this one."
msgstr ""

#: ../../ref/models/querysets.txt:19
msgid "When QuerySets are evaluated"
msgstr ""

#: ../../ref/models/querysets.txt:21
msgid ""
"Internally, a ``QuerySet`` can be constructed, filtered, sliced, and "
"generally passed around without actually hitting the database. No database "
"activity actually occurs until you do something to evaluate the queryset."
msgstr ""

#: ../../ref/models/querysets.txt:25
msgid "You can evaluate a ``QuerySet`` in the following ways:"
msgstr ""

#: ../../ref/models/querysets.txt:27
msgid ""
"**Iteration.** A ``QuerySet`` is iterable, and it executes its database "
"query the first time you iterate over it. For example, this will print the "
"headline of all entries in the database::"
msgstr ""

#: ../../ref/models/querysets.txt:34
msgid ""
"Note: Don't use this if all you want to do is determine if at least one "
"result exists. It's more efficient to use :meth:`~QuerySet.exists`."
msgstr ""

#: ../../ref/models/querysets.txt:37
msgid ""
"**Slicing.** As explained in :ref:`limiting-querysets`, a ``QuerySet`` can "
"be sliced, using Python's array-slicing syntax. Slicing an unevaluated "
"``QuerySet`` usually returns another unevaluated ``QuerySet``, but Django "
"will execute the database query if you use the \"step\" parameter of slice "
"syntax, and will return a list. Slicing a ``QuerySet`` that has been "
"evaluated also returns a list."
msgstr ""

#: ../../ref/models/querysets.txt:44
msgid ""
"Also note that even though slicing an unevaluated ``QuerySet`` returns "
"another unevaluated ``QuerySet``, modifying it further (e.g., adding more "
"filters, or modifying ordering) is not allowed, since that does not "
"translate well into SQL and it would not have a clear meaning either."
msgstr ""

#: ../../ref/models/querysets.txt:49
msgid ""
"**Pickling/Caching.** See the following section for details of what is "
"involved when `pickling QuerySets`_. The important thing for the purposes of"
" this section is that the results are read from the database."
msgstr ""

#: ../../ref/models/querysets.txt:53
msgid ""
"**repr().** A ``QuerySet`` is evaluated when you call ``repr()`` on it. This"
" is for convenience in the Python interactive interpreter, so you can "
"immediately see your results when using the API interactively."
msgstr ""

#: ../../ref/models/querysets.txt:57
msgid ""
"**len().** A ``QuerySet`` is evaluated when you call ``len()`` on it. This, "
"as you might expect, returns the length of the result list."
msgstr ""

#: ../../ref/models/querysets.txt:60
msgid ""
"Note: If you only need to determine the number of records in the set (and "
"don't need the actual objects), it's much more efficient to handle a count "
"at the database level using SQL's ``SELECT COUNT(*)``. Django provides a "
":meth:`~QuerySet.count` method for precisely this reason."
msgstr ""

#: ../../ref/models/querysets.txt:65
msgid ""
"**list().** Force evaluation of a ``QuerySet`` by calling ``list()`` on it. "
"For example::"
msgstr ""

#: ../../ref/models/querysets.txt:70
msgid ""
"**bool().** Testing a ``QuerySet`` in a boolean context, such as using "
"``bool()``, ``or``, ``and`` or an ``if`` statement, will cause the query to "
"be executed. If there is at least one result, the ``QuerySet`` is ``True``, "
"otherwise ``False``. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:78
msgid ""
"Note: If you only want to determine if at least one result exists (and don't"
" need the actual objects), it's more efficient to use "
":meth:`~QuerySet.exists`."
msgstr ""

#: ../../ref/models/querysets.txt:84
msgid "Pickling QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:86
msgid ""
"If you :mod:`pickle` a ``QuerySet``, this will force all the results to be "
"loaded into memory prior to pickling. Pickling is usually used as a "
"precursor to caching and when the cached queryset is reloaded, you want the "
"results to already be present and ready for use (reading from the database "
"can take some time, defeating the purpose of caching). This means that when "
"you unpickle a ``QuerySet``, it contains the results at the moment it was "
"pickled, rather than the results that are currently in the database."
msgstr ""

#: ../../ref/models/querysets.txt:94
msgid ""
"If you only want to pickle the necessary information to recreate the "
"``QuerySet`` from the database at a later time, pickle the ``query`` "
"attribute of the ``QuerySet``. You can then recreate the original "
"``QuerySet`` (without any results loaded) using some code like this::"
msgstr ""

#: ../../ref/models/querysets.txt:104
msgid ""
"The ``query`` attribute is an opaque object. It represents the internals of "
"the query construction and is not part of the public API. However, it is "
"safe (and fully supported) to pickle and unpickle the attribute's contents "
"as described here."
msgstr ""

#: ../../ref/models/querysets.txt:111
msgid ""
"Pickles of ``QuerySets`` are only valid for the version of Django that was "
"used to generate them. If you generate a pickle using Django version N, "
"there is no guarantee that pickle will be readable with Django version N+1. "
"Pickles should not be used as part of a long-term archival strategy."
msgstr ""

#: ../../ref/models/querysets.txt:119
msgid ""
"Since pickle compatibility errors can be difficult to diagnose, such as "
"silently corrupted objects, a ``RuntimeWarning`` is raised when you try to "
"unpickle a queryset in a Django version that is different than the one in "
"which it was pickled."
msgstr ""

#: ../../ref/models/querysets.txt:127
msgid "QuerySet API"
msgstr ""

#: ../../ref/models/querysets.txt:129
msgid "Here's the formal declaration of a ``QuerySet``:"
msgstr ""

#: ../../ref/models/querysets.txt:133
msgid ""
"Usually when you'll interact with a ``QuerySet`` you'll use it by "
":ref:`chaining filters <chaining-filters>`. To make this work, most "
"``QuerySet`` methods return new querysets. These methods are covered in "
"detail later in this section."
msgstr ""

#: ../../ref/models/querysets.txt:138
msgid ""
"The ``QuerySet`` class has two public attributes you can use for "
"introspection:"
msgstr ""

#: ../../ref/models/querysets.txt:143
msgid ""
"``True`` if the ``QuerySet`` is ordered — i.e. has an :meth:`order_by()` "
"clause or a default ordering on the model. ``False`` otherwise."
msgstr ""

#: ../../ref/models/querysets.txt:149
msgid "The database that will be used if this query is executed now."
msgstr ""

#: ../../ref/models/querysets.txt:153
msgid ""
"The ``query`` parameter to :class:`QuerySet` exists so that specialized "
"query subclasses such as :class:`~django.contrib.gis.db.models.GeoQuerySet` "
"can reconstruct internal query state. The value of the parameter is an "
"opaque representation of that query state and is not part of a public API. "
"To put it simply: if you need to ask, you don't need to use it."
msgstr ""

#: ../../ref/models/querysets.txt:163
msgid "Methods that return new QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:165
msgid ""
"Django provides a range of ``QuerySet`` refinement methods that modify "
"either the types of results returned by the ``QuerySet`` or the way its SQL "
"query is executed."
msgstr ""

#: ../../ref/models/querysets.txt:170 ../../ref/templates/builtins.txt:230
msgid "filter"
msgstr ""

#: ../../ref/models/querysets.txt:174
msgid ""
"Returns a new ``QuerySet`` containing objects that match the given lookup "
"parameters."
msgstr ""

#: ../../ref/models/querysets.txt:177
msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement."
msgstr ""

#: ../../ref/models/querysets.txt:181 ../../ref/models/querysets.txt:219
msgid ""
"If you need to execute more complex queries (for example, queries with "
"``OR`` statements), you can use :class:`Q objects <django.db.models.Q>`."
msgstr ""

#: ../../ref/models/querysets.txt:185
msgid "exclude"
msgstr ""

#: ../../ref/models/querysets.txt:189
msgid ""
"Returns a new ``QuerySet`` containing objects that do *not* match the given "
"lookup parameters."
msgstr ""

#: ../../ref/models/querysets.txt:192
msgid ""
"The lookup parameters (``**kwargs``) should be in the format described in "
"`Field lookups`_ below. Multiple parameters are joined via ``AND`` in the "
"underlying SQL statement, and the whole thing is enclosed in a ``NOT()``."
msgstr ""

#: ../../ref/models/querysets.txt:196
msgid ""
"This example excludes all entries whose ``pub_date`` is later than 2005-1-3 "
"AND whose ``headline`` is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:201 ../../ref/models/querysets.txt:211
msgid "In SQL terms, that evaluates to::"
msgstr ""

#: ../../ref/models/querysets.txt:206
msgid ""
"This example excludes all entries whose ``pub_date`` is later than 2005-1-3 "
"OR whose headline is \"Hello\"::"
msgstr ""

#: ../../ref/models/querysets.txt:217
msgid "Note the second example is more restrictive."
msgstr ""

#: ../../ref/models/querysets.txt:223
msgid "annotate"
msgstr ""

#: ../../ref/models/querysets.txt:227
msgid ""
"Annotates each object in the ``QuerySet`` with the provided list of "
":doc:`query expressions </ref/models/expressions>`. An expression may be a "
"simple value, a reference to a field on the model (or any related models), "
"or an aggregate expression (averages, sums, etc) that has been computed over"
" the objects that are related to the objects in the ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:235
msgid ""
"Previous versions of Django only allowed aggregate functions to be used as "
"annotations. It is now possible to annotate a model with all kinds of "
"expressions."
msgstr ""

#: ../../ref/models/querysets.txt:239
msgid ""
"Each argument to ``annotate()`` is an annotation that will be added to each "
"object in the ``QuerySet`` that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:242
msgid ""
"The aggregation functions that are provided by Django are described in "
"`Aggregation Functions`_ below."
msgstr ""

#: ../../ref/models/querysets.txt:245
msgid ""
"Annotations specified using keyword arguments will use the keyword as the "
"alias for the annotation. Anonymous arguments will have an alias generated "
"for them based upon the name of the aggregate function and the model field "
"that is being aggregated. Only aggregate expressions that reference a single"
" field can be anonymous arguments. Everything else must be a keyword "
"argument."
msgstr ""

#: ../../ref/models/querysets.txt:252
msgid ""
"For example, if you were manipulating a list of blogs, you may want to "
"determine how many entries have been made in each blog::"
msgstr ""

#: ../../ref/models/querysets.txt:264
msgid ""
"The ``Blog`` model doesn't define an ``entry__count`` attribute by itself, "
"but by using a keyword argument to specify the aggregate function, you can "
"control the name of the annotation::"
msgstr ""

#: ../../ref/models/querysets.txt:273 ../../ref/models/querysets.txt:2022
msgid ""
"For an in-depth discussion of aggregation, see :doc:`the topic guide on "
"Aggregation </topics/db/aggregation>`."
msgstr ""

#: ../../ref/models/querysets.txt:277
msgid "order_by"
msgstr ""

#: ../../ref/models/querysets.txt:281
msgid ""
"By default, results returned by a ``QuerySet`` are ordered by the ordering "
"tuple given by the ``ordering`` option in the model's ``Meta``. You can "
"override this on a per-``QuerySet`` basis by using the ``order_by`` method."
msgstr ""

#: ../../ref/models/querysets.txt:289
msgid ""
"The result above will be ordered by ``pub_date`` descending, then by "
"``headline`` ascending. The negative sign in front of ``\"-pub_date\"`` "
"indicates *descending* order. Ascending order is implied. To order randomly,"
" use ``\"?\"``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:296
msgid ""
"Note: ``order_by('?')`` queries may be expensive and slow, depending on the "
"database backend you're using."
msgstr ""

#: ../../ref/models/querysets.txt:299
msgid ""
"To order by a field in a different model, use the same syntax as when you "
"are querying across model relations. That is, the name of the field, "
"followed by a double underscore (``__``), followed by the name of the field "
"in the new model, and so on for as many models as you want to join. For "
"example::"
msgstr ""

#: ../../ref/models/querysets.txt:306
msgid ""
"If you try to order by a field that is a relation to another model, Django "
"will use the default ordering on the related model, or order by the related "
"model's primary key if there is no :attr:`Meta.ordering "
"<django.db.models.Options.ordering>` specified. For example, since the "
"``Blog`` model has no default ordering specified::"
msgstr ""

#: ../../ref/models/querysets.txt:314
msgid "...is identical to::"
msgstr ""

#: ../../ref/models/querysets.txt:318
msgid ""
"If ``Blog`` had ``ordering = ['name']``, then the first queryset would be "
"identical to::"
msgstr ""

#: ../../ref/models/querysets.txt:323
msgid ""
"It is also possible to order a queryset by a related field, without "
"incurring the cost of a JOIN, by referring to the ``_id`` of the related "
"field::"
msgstr ""

#: ../../ref/models/querysets.txt:334
msgid ""
"The ability to order a queryset by a related field, without incurring the "
"cost of a JOIN was added."
msgstr ""

#: ../../ref/models/querysets.txt:337
msgid ""
"You can also order by :doc:`query expressions </ref/models/expressions>` by "
"calling ``asc()`` or ``desc()`` on the expression::"
msgstr ""

#: ../../ref/models/querysets.txt:344
msgid "Ordering by query expressions was added."
msgstr ""

#: ../../ref/models/querysets.txt:346
msgid ""
"Be cautious when ordering by fields in related models if you are also using "
":meth:`distinct()`. See the note in :meth:`distinct` for an explanation of "
"how related model ordering can change the expected results."
msgstr ""

#: ../../ref/models/querysets.txt:351
msgid ""
"It is permissible to specify a multi-valued field to order the results by "
"(for example, a :class:`~django.db.models.ManyToManyField` field, or the "
"reverse relation of a :class:`~django.db.models.ForeignKey` field)."
msgstr ""

#: ../../ref/models/querysets.txt:355
msgid "Consider this case::"
msgstr ""

#: ../../ref/models/querysets.txt:363
msgid ""
"Here, there could potentially be multiple ordering data for each ``Event``; "
"each ``Event`` with multiple ``children`` will be returned multiple times "
"into the new ``QuerySet`` that ``order_by()`` creates. In other words, using"
" ``order_by()`` on the ``QuerySet`` could return more items than you were "
"working on to begin with - which is probably neither expected nor useful."
msgstr ""

#: ../../ref/models/querysets.txt:370
msgid ""
"Thus, take care when using multi-valued field to order the results. **If** "
"you can be sure that there will only be one ordering piece of data for each "
"of the items you're ordering, this approach should not present problems. If "
"not, make sure the results are what you expect."
msgstr ""

#: ../../ref/models/querysets.txt:375
msgid ""
"There's no way to specify whether ordering should be case sensitive. With "
"respect to case-sensitivity, Django will order results however your database"
" backend normally orders them."
msgstr ""

#: ../../ref/models/querysets.txt:379
msgid ""
"You can order by a field converted to lowercase with "
":class:`~django.db.models.functions.Lower` which will achieve case-"
"consistent ordering::"
msgstr ""

#: ../../ref/models/querysets.txt:387
msgid "The ability to order by expressions like ``Lower`` was added."
msgstr ""

#: ../../ref/models/querysets.txt:389
msgid ""
"If you don't want any ordering to be applied to a query, not even the "
"default ordering, call :meth:`order_by()` with no parameters."
msgstr ""

#: ../../ref/models/querysets.txt:392
msgid ""
"You can tell if a query is ordered or not by checking the "
":attr:`.QuerySet.ordered` attribute, which will be ``True`` if the "
"``QuerySet`` has been ordered in any way."
msgstr ""

#: ../../ref/models/querysets.txt:396
msgid ""
"Each ``order_by()`` call will clear any previous ordering. For example, this"
" query will be ordered by ``pub_date`` and not ``headline``::"
msgstr ""

#: ../../ref/models/querysets.txt:408
msgid "reverse"
msgstr ""

#: ../../ref/models/querysets.txt:412
msgid ""
"Use the ``reverse()`` method to reverse the order in which a queryset's "
"elements are returned. Calling ``reverse()`` a second time restores the "
"ordering back to the normal direction."
msgstr ""

#: ../../ref/models/querysets.txt:416
msgid "To retrieve the \"last\" five items in a queryset, you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:420
msgid ""
"Note that this is not quite the same as slicing from the end of a sequence "
"in Python. The above example will return the last item first, then the "
"penultimate item and so on. If we had a Python sequence and looked at "
"``seq[-5:]``, we would see the fifth-last item first. Django doesn't support"
" that mode of access (slicing from the end), because it's not possible to do"
" it efficiently in SQL."
msgstr ""

#: ../../ref/models/querysets.txt:427
msgid ""
"Also, note that ``reverse()`` should generally only be called on a "
"``QuerySet`` which has a defined ordering (e.g., when querying against a "
"model which defines a default ordering, or when using :meth:`order_by()`). "
"If no such ordering is defined for a given ``QuerySet``, calling "
"``reverse()`` on it has no real effect (the ordering was undefined prior to "
"calling ``reverse()``, and will remain undefined afterward)."
msgstr ""

#: ../../ref/models/querysets.txt:435
msgid "distinct"
msgstr ""

#: ../../ref/models/querysets.txt:439
msgid ""
"Returns a new ``QuerySet`` that uses ``SELECT DISTINCT`` in its SQL query. "
"This eliminates duplicate rows from the query results."
msgstr ""

#: ../../ref/models/querysets.txt:442
msgid ""
"By default, a ``QuerySet`` will not eliminate duplicate rows. In practice, "
"this is rarely a problem, because simple queries such as "
"``Blog.objects.all()`` don't introduce the possibility of duplicate result "
"rows. However, if your query spans multiple tables, it's possible to get "
"duplicate results when a ``QuerySet`` is evaluated. That's when you'd use "
"``distinct()``."
msgstr ""

#: ../../ref/models/querysets.txt:449
msgid ""
"Any fields used in an :meth:`order_by` call are included in the SQL "
"``SELECT`` columns. This can sometimes lead to unexpected results when used "
"in conjunction with ``distinct()``. If you order by fields from a related "
"model, those fields will be added to the selected columns and they may make "
"otherwise duplicate rows appear to be distinct. Since the extra columns "
"don't appear in the returned results (they are only there to support "
"ordering), it sometimes looks like non-distinct results are being returned."
msgstr ""

#: ../../ref/models/querysets.txt:457
msgid ""
"Similarly, if you use a :meth:`values()` query to restrict the columns "
"selected, the columns used in any :meth:`order_by()` (or default model "
"ordering) will still be involved and may affect uniqueness of the results."
msgstr ""

#: ../../ref/models/querysets.txt:461
msgid ""
"The moral here is that if you are using ``distinct()`` be careful about "
"ordering by related models. Similarly, when using ``distinct()`` and "
":meth:`values()` together, be careful when ordering by fields not in the "
":meth:`values()` call."
msgstr ""

#: ../../ref/models/querysets.txt:466
msgid ""
"On PostgreSQL only, you can pass positional arguments (``*fields``) in order"
" to specify the names of fields to which the ``DISTINCT`` should apply. This"
" translates to a ``SELECT DISTINCT ON`` SQL query. Here's the difference. "
"For a normal ``distinct()`` call, the database compares *each* field in each"
" row when determining which rows are distinct. For a ``distinct()`` call "
"with specified field names, the database will only compare the specified "
"field names."
msgstr ""

#: ../../ref/models/querysets.txt:474
msgid ""
"When you specify field names, you *must* provide an ``order_by()`` in the "
"``QuerySet``, and the fields in ``order_by()`` must start with the fields in"
" ``distinct()``, in the same order."
msgstr ""

#: ../../ref/models/querysets.txt:478
msgid ""
"For example, ``SELECT DISTINCT ON (a)`` gives you the first row for each "
"value in column ``a``. If you don't specify an order, you'll get some "
"arbitrary row."
msgstr ""

#: ../../ref/models/querysets.txt:482
msgid "Examples (those after the first will only work on PostgreSQL)::"
msgstr ""

#: ../../ref/models/querysets.txt:503
msgid ""
"Keep in mind that :meth:`order_by` uses any default related model ordering "
"that has been defined. You might have to explicitly order by the relation "
"``_id`` or referenced field to make sure the ``DISTINCT ON`` expressions "
"match those at the beginning of the ``ORDER BY`` clause. For example, if the"
" ``Blog`` model defined an :attr:`~django.db.models.Options.ordering` by "
"``name``::"
msgstr ""

#: ../../ref/models/querysets.txt:512
msgid ""
"...wouldn't work because the query would be ordered by ``blog__name`` thus "
"mismatching the ``DISTINCT ON`` expression. You'd have to explicitly order "
"by the relation `_id` field (``blog_id`` in this case) or the referenced one"
" (``blog__pk``) to make sure both expressions match."
msgstr ""

#: ../../ref/models/querysets.txt:522
msgid ""
"Returns a ``ValuesQuerySet`` — a ``QuerySet`` subclass that returns "
"dictionaries when used as an iterable, rather than model-instance objects."
msgstr ""

#: ../../ref/models/querysets.txt:525
msgid ""
"Each of those dictionaries represents an object, with the keys corresponding"
" to the attribute names of model objects."
msgstr ""

#: ../../ref/models/querysets.txt:528
msgid ""
"This example compares the dictionaries of ``values()`` with the normal model"
" objects::"
msgstr ""

#: ../../ref/models/querysets.txt:539
msgid ""
"The ``values()`` method takes optional positional arguments, ``*fields``, "
"which specify field names to which the ``SELECT`` should be limited. If you "
"specify the fields, each dictionary will contain only the field keys/values "
"for the fields you specify. If you don't specify the fields, each dictionary"
" will contain a key and value for every field in the database table."
msgstr ""

#: ../../ref/models/querysets.txt:552
msgid "A few subtleties that are worth mentioning:"
msgstr ""

#: ../../ref/models/querysets.txt:554
msgid ""
"If you have a field called ``foo`` that is a "
":class:`~django.db.models.ForeignKey`, the default ``values()`` call will "
"return a dictionary key called ``foo_id``, since this is the name of the "
"hidden model attribute that stores the actual value (the ``foo`` attribute "
"refers to the related model). When you are calling ``values()`` and passing "
"in field names, you can pass in either ``foo`` or ``foo_id`` and you will "
"get back the same thing (the dictionary key will match the field name you "
"passed in)."
msgstr ""

#: ../../ref/models/querysets.txt:574
msgid ""
"When using ``values()`` together with :meth:`distinct()`, be aware that "
"ordering can affect the results. See the note in :meth:`distinct` for "
"details."
msgstr ""

#: ../../ref/models/querysets.txt:578
msgid ""
"If you use a ``values()`` clause after an :meth:`extra()` call, any fields "
"defined by a ``select`` argument in the :meth:`extra()` must be explicitly "
"included in the ``values()`` call. Any :meth:`extra()` call made after a "
"``values()`` call will have its extra selected fields ignored."
msgstr ""

#: ../../ref/models/querysets.txt:584
msgid ""
"Calling :meth:`only()` and :meth:`defer()` after ``values()`` doesn't make "
"sense, so doing so will raise a ``NotImplementedError``."
msgstr ""

#: ../../ref/models/querysets.txt:589
msgid ""
"The last point above is new. Previously, calling :meth:`only()` and "
":meth:`defer()` after ``values()`` was allowed, but it either crashed or "
"returned incorrect results."
msgstr ""

#: ../../ref/models/querysets.txt:593
msgid ""
"A ``ValuesQuerySet`` is useful when you know you're only going to need "
"values from a small number of the available fields and you won't need the "
"functionality of a model instance object. It's more efficient to select only"
" the fields you need to use."
msgstr ""

#: ../../ref/models/querysets.txt:598
msgid ""
"Finally, note that a ``ValuesQuerySet`` is a subclass of ``QuerySet`` and it"
" implements most of the same methods. You can call ``filter()`` on it, "
"``order_by()``, etc. That means that these two calls are identical::"
msgstr ""

#: ../../ref/models/querysets.txt:605
msgid ""
"The people who made Django prefer to put all the SQL-affecting methods "
"first, followed (optionally) by any output-affecting methods (such as "
"``values()``), but it doesn't really matter. This is your chance to really "
"flaunt your individualism."
msgstr ""

#: ../../ref/models/querysets.txt:610
msgid ""
"You can also refer to fields on related models with reverse relations "
"through ``OneToOneField``, ``ForeignKey`` and ``ManyToManyField`` "
"attributes::"
msgstr ""

#: ../../ref/models/querysets.txt:619
msgid ""
"Because :class:`~django.db.models.ManyToManyField` attributes and reverse "
"relations can have multiple related rows, including these can have a "
"multiplier effect on the size of your result set. This will be especially "
"pronounced if you include multiple such fields in your ``values()`` query, "
"in which case all possible combinations will be returned."
msgstr ""

#: ../../ref/models/querysets.txt:626
msgid "values_list"
msgstr ""

#: ../../ref/models/querysets.txt:630
msgid ""
"This is similar to ``values()`` except that instead of returning "
"dictionaries, it returns tuples when iterated over. Each tuple contains the "
"value from the respective field passed into the ``values_list()`` call — so "
"the first item is the first field, etc. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:638
msgid ""
"If you only pass in a single field, you can also pass in the ``flat`` "
"parameter. If ``True``, this will mean the returned results are single "
"values, rather than one-tuples. An example should make the difference "
"clearer::"
msgstr ""

#: ../../ref/models/querysets.txt:648
msgid "It is an error to pass in ``flat`` when there is more than one field."
msgstr ""

#: ../../ref/models/querysets.txt:650
msgid ""
"If you don't pass any values to ``values_list()``, it will return all the "
"fields in the model, in the order they were declared."
msgstr ""

#: ../../ref/models/querysets.txt:653
msgid ""
"Note that this method returns a ``ValuesListQuerySet``. This class behaves "
"like a list. Most of the time this is enough, but if you require an actual "
"Python list object, you can simply call ``list()`` on it, which will "
"evaluate the queryset."
msgstr ""

#: ../../ref/models/querysets.txt:658
msgid ""
"A common need is to get a specific field value of a certain model instance. "
"To achieve that, use ``values_list()`` followed by a ``get()`` call::"
msgstr ""

#: ../../ref/models/querysets.txt:665
msgid "dates"
msgstr ""

#: ../../ref/models/querysets.txt:669
msgid ""
"Returns a ``QuerySet`` that evaluates to a list of :class:`datetime.date` "
"objects representing all available dates of a particular kind within the "
"contents of the ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:673
msgid ""
"``field`` should be the name of a ``DateField`` of your model. ``kind`` "
"should be either ``\"year\"``, ``\"month\"`` or ``\"day\"``. Each "
"``datetime.date`` object in the result list is \"truncated\" to the given "
"``type``."
msgstr ""

#: ../../ref/models/querysets.txt:678
msgid "``\"year\"`` returns a list of all distinct year values for the field."
msgstr ""

#: ../../ref/models/querysets.txt:679
msgid ""
"``\"month\"`` returns a list of all distinct year/month values for the "
"field."
msgstr ""

#: ../../ref/models/querysets.txt:681
msgid ""
"``\"day\"`` returns a list of all distinct year/month/day values for the "
"field."
msgstr ""

#: ../../ref/models/querysets.txt:684 ../../ref/models/querysets.txt:715
msgid ""
"``order``, which defaults to ``'ASC'``, should be either ``'ASC'`` or "
"``'DESC'``. This specifies how to order the results."
msgstr ""

#: ../../ref/models/querysets.txt:701
msgid "datetimes"
msgstr ""

#: ../../ref/models/querysets.txt:705
msgid ""
"Returns a ``QuerySet`` that evaluates to a list of "
":class:`datetime.datetime` objects representing all available dates of a "
"particular kind within the contents of the ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:709
msgid ""
"``field_name`` should be the name of a ``DateTimeField`` of your model."
msgstr ""

#: ../../ref/models/querysets.txt:711
msgid ""
"``kind`` should be either ``\"year\"``, ``\"month\"``, ``\"day\"``, "
"``\"hour\"``, ``\"minute\"`` or ``\"second\"``. Each ``datetime.datetime`` "
"object in the result list is \"truncated\" to the given ``type``."
msgstr ""

#: ../../ref/models/querysets.txt:718
msgid ""
"``tzinfo`` defines the time zone to which datetimes are converted prior to "
"truncation. Indeed, a given datetime has different representations depending"
" on the time zone in use. This parameter must be a :class:`datetime.tzinfo` "
"object. If it's ``None``, Django uses the :ref:`current time zone <default-"
"current-time-zone>`. It has no effect when :setting:`USE_TZ` is ``False``."
msgstr ""

#: ../../ref/models/querysets.txt:729
msgid ""
"This function performs time zone conversions directly in the database. As a "
"consequence, your database must be able to interpret the value of "
"``tzinfo.tzname(None)``. This translates into the following requirements:"
msgstr ""

#: ../../ref/models/querysets.txt:733
msgid "SQLite: install pytz_ — conversions are actually performed in Python."
msgstr ""

#: ../../ref/models/querysets.txt:734
msgid "PostgreSQL: no requirements (see `Time Zones`_)."
msgstr ""

#: ../../ref/models/querysets.txt:735
msgid "Oracle: no requirements (see `Choosing a Time Zone File`_)."
msgstr ""

#: ../../ref/models/querysets.txt:736
msgid ""
"MySQL: install pytz_ and load the time zone tables with "
"`mysql_tzinfo_to_sql`_."
msgstr ""

#: ../../ref/models/querysets.txt:745
msgid "none"
msgstr ""

#: ../../ref/models/querysets.txt:749
msgid ""
"Calling none() will create a queryset that never returns any objects and no "
"query will be executed when accessing the results. A qs.none() queryset is "
"an instance of ``EmptyQuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:762
msgid "all"
msgstr ""

#: ../../ref/models/querysets.txt:766
msgid ""
"Returns a *copy* of the current ``QuerySet`` (or ``QuerySet`` subclass).  "
"This can be useful in situations where you might want to pass in either a "
"model manager or a ``QuerySet`` and do further filtering on the result. "
"After calling ``all()`` on either object, you'll definitely have a "
"``QuerySet`` to work with."
msgstr ""

#: ../../ref/models/querysets.txt:771
msgid ""
"When a ``QuerySet`` is :ref:`evaluated <when-querysets-are-evaluated>`, it "
"typically caches its results. If the data in the database might have changed"
" since a ``QuerySet`` was evaluated, you can get updated results for the "
"same query by calling ``all()`` on a previously evaluated ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:777
msgid "select_related"
msgstr ""

#: ../../ref/models/querysets.txt:781
msgid ""
"Returns a ``QuerySet`` that will \"follow\" foreign-key relationships, "
"selecting additional related-object data when it executes its query. This is"
" a performance booster which results in a single more complex query but "
"means later use of foreign-key relationships won't require database queries."
msgstr ""

#: ../../ref/models/querysets.txt:786
msgid ""
"The following examples illustrate the difference between plain lookups and "
"``select_related()`` lookups. Here's standard lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:795
msgid "And here's ``select_related`` lookup::"
msgstr ""

#: ../../ref/models/querysets.txt:804
msgid "You can use ``select_related()`` with any queryset of objects::"
msgstr ""

#: ../../ref/models/querysets.txt:816
msgid ""
"The order of ``filter()`` and ``select_related()`` chaining isn't important."
" These querysets are equivalent::"
msgstr ""

#: ../../ref/models/querysets.txt:822
msgid ""
"You can follow foreign keys in a similar way to querying them. If you have "
"the following models::"
msgstr ""

#: ../../ref/models/querysets.txt:839
msgid ""
"... then a call to "
"``Book.objects.select_related('author__hometown').get(id=4)`` will cache the"
" related ``Person`` *and* the related ``City``::"
msgstr ""

#: ../../ref/models/querysets.txt:850
msgid ""
"You can refer to any :class:`~django.db.models.ForeignKey` or "
":class:`~django.db.models.OneToOneField` relation in the list of fields "
"passed to ``select_related()``."
msgstr ""

#: ../../ref/models/querysets.txt:854
msgid ""
"You can also refer to the reverse direction of a "
":class:`~django.db.models.OneToOneField` in the list of fields passed to "
"``select_related`` — that is, you can traverse a "
":class:`~django.db.models.OneToOneField` back to the object on which the "
"field is defined. Instead of specifying the field name, use the "
":attr:`related_name <django.db.models.ForeignKey.related_name>` for the "
"field on the related object."
msgstr ""

#: ../../ref/models/querysets.txt:861
msgid ""
"There may be some situations where you wish to call ``select_related()`` "
"with a lot of related objects, or where you don't know all of the relations."
" In these cases it is possible to call ``select_related()`` with no "
"arguments. This will follow all non-null foreign keys it can find - nullable"
" foreign keys must be specified. This is not recommended in most cases as it"
" is likely to make the underlying query more complex, and return more data, "
"than is actually needed."
msgstr ""

#: ../../ref/models/querysets.txt:868
msgid ""
"If you need to clear the list of related fields added by past calls of "
"``select_related`` on a ``QuerySet``, you can pass ``None`` as a parameter::"
msgstr ""

#: ../../ref/models/querysets.txt:873
msgid ""
"Chaining ``select_related`` calls works in a similar way to other methods - "
"that is that ``select_related('foo', 'bar')`` is equivalent to "
"``select_related('foo').select_related('bar')``."
msgstr ""

#: ../../ref/models/querysets.txt:879
msgid ""
"Previously the latter would have been equivalent to "
"``select_related('bar')``."
msgstr ""

#: ../../ref/models/querysets.txt:883
msgid "prefetch_related"
msgstr ""

#: ../../ref/models/querysets.txt:887
msgid ""
"Returns a ``QuerySet`` that will automatically retrieve, in a single batch, "
"related objects for each of the specified lookups."
msgstr ""

#: ../../ref/models/querysets.txt:890
msgid ""
"This has a similar purpose to ``select_related``, in that both are designed "
"to stop the deluge of database queries that is caused by accessing related "
"objects, but the strategy is quite different."
msgstr ""

#: ../../ref/models/querysets.txt:894
msgid ""
"``select_related`` works by creating an SQL join and including the fields of"
" the related object in the ``SELECT`` statement. For this reason, "
"``select_related`` gets the related objects in the same database query. "
"However, to avoid the much larger result set that would result from joining "
"across a 'many' relationship, ``select_related`` is limited to single-valued"
" relationships - foreign key and one-to-one."
msgstr ""

#: ../../ref/models/querysets.txt:901
msgid ""
"``prefetch_related``, on the other hand, does a separate lookup for each "
"relationship, and does the 'joining' in Python. This allows it to prefetch "
"many-to-many and many-to-one objects, which cannot be done using "
"``select_related``, in addition to the foreign key and one-to-one "
"relationships that are supported by ``select_related``. It also supports "
"prefetching of :class:`~django.contrib.contenttypes.fields.GenericRelation` "
"and :class:`~django.contrib.contenttypes.fields.GenericForeignKey`, however,"
" it must be restricted to a homogeneous set of results. For example, "
"prefetching objects referenced by a ``GenericForeignKey`` is only supported "
"if the query is restricted to one ``ContentType``."
msgstr ""

#: ../../ref/models/querysets.txt:912
msgid "For example, suppose you have these models::"
msgstr ""

#: ../../ref/models/querysets.txt:927
msgid "and run::"
msgstr ""

#: ../../ref/models/querysets.txt:932
msgid ""
"The problem with this is that every time ``Pizza.__str__()`` asks for "
"``self.toppings.all()`` it has to query the database, so "
"``Pizza.objects.all()`` will run a query on the Toppings table for **every**"
" item in the Pizza ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:937
msgid "We can reduce to just two queries using ``prefetch_related``:"
msgstr ""

#: ../../ref/models/querysets.txt:941
msgid ""
"This implies a ``self.toppings.all()`` for each ``Pizza``; now each time "
"``self.toppings.all()`` is called, instead of having to go to the database "
"for the items, it will find them in a prefetched ``QuerySet`` cache that was"
" populated in a single query."
msgstr ""

#: ../../ref/models/querysets.txt:946
msgid ""
"That is, all the relevant toppings will have been fetched in a single query,"
" and used to make ``QuerySets`` that have a pre-filled cache of the relevant"
" results; these ``QuerySets`` are then used in the ``self.toppings.all()`` "
"calls."
msgstr ""

#: ../../ref/models/querysets.txt:950
msgid ""
"The additional queries in ``prefetch_related()`` are executed after the "
"``QuerySet`` has begun to be evaluated and the primary query has been "
"executed."
msgstr ""

#: ../../ref/models/querysets.txt:953
msgid ""
"Note that the result cache of the primary ``QuerySet`` and all specified "
"related objects will then be fully loaded into memory. This changes the "
"typical behavior of ``QuerySets``, which normally try to avoid loading all "
"objects into memory before they are needed, even after a query has been "
"executed in the database."
msgstr ""

#: ../../ref/models/querysets.txt:961
msgid ""
"Remember that, as always with ``QuerySets``, any subsequent chained methods "
"which imply a different database query will ignore previously cached "
"results, and retrieve data using a fresh database query. So, if you write "
"the following:"
msgstr ""

#: ../../ref/models/querysets.txt:969
msgid ""
"...then the fact that ``pizza.toppings.all()`` has been prefetched will not "
"help you. The ``prefetch_related('toppings')`` implied "
"``pizza.toppings.all()``, but ``pizza.toppings.filter()`` is a new and "
"different query. The prefetched cache can't help here; in fact it hurts "
"performance, since you have done a database query that you haven't used. So "
"use this feature with caution!"
msgstr ""

#: ../../ref/models/querysets.txt:976
msgid ""
"You can also use the normal join syntax to do related fields of related "
"fields. Suppose we have an additional model to the example above::"
msgstr ""

#: ../../ref/models/querysets.txt:983
msgid "The following are all legal:"
msgstr ""

#: ../../ref/models/querysets.txt:987
msgid ""
"This will prefetch all pizzas belonging to restaurants, and all toppings "
"belonging to those pizzas. This will result in a total of 3 database queries"
" - one for the restaurants, one for the pizzas, and one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:993
msgid ""
"This will fetch the best pizza and all the toppings for the best pizza for "
"each restaurant. This will be done in 3 database queries - one for the "
"restaurants, one for the 'best pizzas', and one for one for the toppings."
msgstr ""

#: ../../ref/models/querysets.txt:997
msgid ""
"Of course, the ``best_pizza`` relationship could also be fetched using "
"``select_related`` to reduce the query count to 2:"
msgstr ""

#: ../../ref/models/querysets.txt:1002
msgid ""
"Since the prefetch is executed after the main query (which includes the "
"joins needed by ``select_related``), it is able to detect that the "
"``best_pizza`` objects have already been fetched, and it will skip fetching "
"them again."
msgstr ""

#: ../../ref/models/querysets.txt:1006
msgid ""
"Chaining ``prefetch_related`` calls will accumulate the lookups that are "
"prefetched. To clear any ``prefetch_related`` behavior, pass ``None`` as a "
"parameter:"
msgstr ""

#: ../../ref/models/querysets.txt:1012
msgid ""
"One difference to note when using ``prefetch_related`` is that objects "
"created by a query can be shared between the different objects that they are"
" related to i.e. a single Python model instance can appear at more than one "
"point in the tree of objects that are returned. This will normally happen "
"with foreign key relationships. Typically this behavior will not be a "
"problem, and will in fact save both memory and CPU time."
msgstr ""

#: ../../ref/models/querysets.txt:1019
msgid ""
"While ``prefetch_related`` supports prefetching ``GenericForeignKey`` "
"relationships, the number of queries will depend on the data. Since a "
"``GenericForeignKey`` can reference data in multiple tables, one query per "
"table referenced is needed, rather than one query for all the items. There "
"could be additional queries on the ``ContentType`` table if the relevant "
"rows have not already been fetched."
msgstr ""

#: ../../ref/models/querysets.txt:1026
msgid ""
"``prefetch_related`` in most cases will be implemented using an SQL query "
"that uses the 'IN' operator. This means that for a large ``QuerySet`` a "
"large 'IN' clause could be generated, which, depending on the database, "
"might have performance problems of its own when it comes to parsing or "
"executing the SQL query. Always profile for your use case!"
msgstr ""

#: ../../ref/models/querysets.txt:1032
msgid ""
"Note that if you use ``iterator()`` to run the query, ``prefetch_related()``"
" calls will be ignored since these two optimizations do not make sense "
"together."
msgstr ""

#: ../../ref/models/querysets.txt:1037
msgid ""
"You can use the :class:`~django.db.models.Prefetch` object to further "
"control the prefetch operation."
msgstr ""

#: ../../ref/models/querysets.txt:1040
msgid ""
"In its simplest form ``Prefetch`` is equivalent to the traditional string "
"based lookups:"
msgstr ""

#: ../../ref/models/querysets.txt:1045
msgid ""
"You can provide a custom queryset with the optional ``queryset`` argument. "
"This can be used to change the default ordering of the queryset:"
msgstr ""

#: ../../ref/models/querysets.txt:1051
msgid ""
"Or to call :meth:`~django.db.models.query.QuerySet.select_related()` when "
"applicable to reduce the number of queries even further:"
msgstr ""

#: ../../ref/models/querysets.txt:1057
msgid ""
"You can also assign the prefetched result to a custom attribute with the "
"optional ``to_attr`` argument. The result will be stored directly in a list."
msgstr ""

#: ../../ref/models/querysets.txt:1060
msgid ""
"This allows prefetching the same relation multiple times with a different "
"``QuerySet``; for instance:"
msgstr ""

#: ../../ref/models/querysets.txt:1068
msgid ""
"Lookups created with custom ``to_attr`` can still be traversed as usual by "
"other lookups:"
msgstr ""

#: ../../ref/models/querysets.txt:1076
msgid ""
"Using ``to_attr`` is recommended when filtering down the prefetch result as "
"it is less ambiguous than storing a filtered result in the related manager's"
" cache:"
msgstr ""

#: ../../ref/models/querysets.txt:1091
msgid ""
"Custom prefetching also works with single related relations like forward "
"``ForeignKey`` or ``OneToOneField``. Generally you'll want to use "
":meth:`select_related()` for these relations, but there are a number of "
"cases where prefetching with a custom ``QuerySet`` is useful:"
msgstr ""

#: ../../ref/models/querysets.txt:1096
msgid ""
"You want to use a ``QuerySet`` that performs further prefetching on related "
"models."
msgstr ""

#: ../../ref/models/querysets.txt:1099
msgid "You want to prefetch only a subset of the related objects."
msgstr ""

#: ../../ref/models/querysets.txt:1101
msgid ""
"You want to use performance optimization techniques like :meth:`deferred "
"fields <defer()>`:"
msgstr ""

#: ../../ref/models/querysets.txt:1111
msgid "The ordering of lookups matters."
msgstr ""

#: ../../ref/models/querysets.txt:1113
msgid "Take the following examples:"
msgstr ""

#: ../../ref/models/querysets.txt:1117
msgid ""
"This works even though it's unordered because ``'pizzas__toppings'`` already"
" contains all the needed information, therefore the second argument "
"``'pizzas'`` is actually redundant."
msgstr ""

#: ../../ref/models/querysets.txt:1123
msgid ""
"This will raise a ``ValueError`` because of the attempt to redefine the "
"queryset of a previously seen lookup. Note that an implicit queryset was "
"created to traverse ``'pizzas'`` as part of the ``'pizzas__toppings'`` "
"lookup."
msgstr ""

#: ../../ref/models/querysets.txt:1130
msgid ""
"This will trigger an ``AttributeError`` because ``'pizza_list'`` doesn't "
"exist yet when ``'pizza_list__toppings'`` is being processed."
msgstr ""

#: ../../ref/models/querysets.txt:1133
msgid ""
"This consideration is not limited to the use of ``Prefetch`` objects. Some "
"advanced techniques may require that the lookups be performed in a specific "
"order to avoid creating extra queries; therefore it's recommended to always "
"carefully order ``prefetch_related`` arguments."
msgstr ""

#: ../../ref/models/querysets.txt:1139
msgid "extra"
msgstr ""

#: ../../ref/models/querysets.txt:1143
msgid ""
"Sometimes, the Django query syntax by itself can't easily express a complex "
"``WHERE`` clause. For these edge cases, Django provides the ``extra()`` "
"``QuerySet`` modifier — a hook for injecting specific clauses into the SQL "
"generated by a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:1148
msgid "Use this method as a last resort"
msgstr ""

#: ../../ref/models/querysets.txt:1150
msgid ""
"This is an old API that we aim to deprecate at some point in the future. Use"
" it only if you cannot express your query using other queryset methods. If "
"you do need to use it, please `file a ticket "
"<https://code.djangoproject.com/newticket>`_ using the `QuerySet.extra "
"keyword "
"<https://code.djangoproject.com/query?status=assigned&status=new&keywords=~QuerySet.extra>`_"
" with your use case (please check the list of existing tickets first) so "
"that we can enhance the QuerySet API to allow removing ``extra()``. We are "
"no longer improving or fixing bugs for this method."
msgstr ""

#: ../../ref/models/querysets.txt:1159
msgid "For example, this use of ``extra()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1170
msgid ""
"The main benefit of using :class:`~django.db.models.expressions.RawSQL` is "
"that you can set ``output_field`` if needed. The main downside is that if "
"you refer to some table alias of the queryset in the raw SQL, then it is "
"possible that Django might change that alias (for example, when the queryset"
" is used as a subquery in yet another query)."
msgstr ""

#: ../../ref/models/querysets.txt:1178
msgid ""
"You should be very careful whenever you use ``extra()``. Every time you use "
"it, you should escape any parameters that the user can control by using "
"``params`` in order to protect against SQL injection attacks . Please read "
"more about :ref:`SQL injection protection <sql-injection-protection>`."
msgstr ""

#: ../../ref/models/querysets.txt:1183
msgid ""
"By definition, these extra lookups may not be portable to different database"
" engines (because you're explicitly writing SQL code) and violate the DRY "
"principle, so you should avoid them if possible."
msgstr ""

#: ../../ref/models/querysets.txt:1187
msgid ""
"Specify one or more of ``params``, ``select``, ``where`` or ``tables``. None"
" of the arguments is required, but you should use at least one of them."
msgstr ""

#: ../../ref/models/querysets.txt:1190
msgid "``select``"
msgstr ""

#: ../../ref/models/querysets.txt:1192
msgid ""
"The ``select`` argument lets you put extra fields in the ``SELECT`` clause."
"  It should be a dictionary mapping attribute names to SQL clauses to use to"
" calculate that attribute."
msgstr ""

#: ../../ref/models/querysets.txt:1200
msgid ""
"As a result, each ``Entry`` object will have an extra attribute, "
"``is_recent``, a boolean representing whether the entry's ``pub_date`` is "
"greater than Jan. 1, 2006."
msgstr ""

#: ../../ref/models/querysets.txt:1204
msgid ""
"Django inserts the given SQL snippet directly into the ``SELECT`` statement,"
" so the resulting SQL of the above example would be something like::"
msgstr ""

#: ../../ref/models/querysets.txt:1212
msgid ""
"The next example is more advanced; it does a subquery to give each resulting"
" ``Blog`` object an ``entry_count`` attribute, an integer count of "
"associated ``Entry`` objects::"
msgstr ""

#: ../../ref/models/querysets.txt:1222
msgid ""
"In this particular case, we're exploiting the fact that the query will "
"already contain the ``blog_blog`` table in its ``FROM`` clause."
msgstr ""

#: ../../ref/models/querysets.txt:1225
msgid "The resulting SQL of the above example would be::"
msgstr ""

#: ../../ref/models/querysets.txt:1230
msgid ""
"Note that the parentheses required by most database engines around "
"subqueries are not required in Django's ``select`` clauses. Also note that "
"some database backends, such as some MySQL versions, don't support "
"subqueries."
msgstr ""

#: ../../ref/models/querysets.txt:1235
msgid ""
"In some rare cases, you might wish to pass parameters to the SQL fragments "
"in ``extra(select=...)``. For this purpose, use the ``select_params`` "
"parameter. Since ``select_params`` is a sequence and the ``select`` "
"attribute is a dictionary, some care is required so that the parameters are "
"matched up correctly with the extra select pieces. In this situation, you "
"should use a :class:`collections.OrderedDict` for the ``select`` value, not "
"just a normal Python dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:1243
msgid "This will work, for example::"
msgstr ""

#: ../../ref/models/querysets.txt:1249
msgid ""
"If you need to use a literal ``%s`` inside your select string, use the "
"sequence ``%%s``."
msgstr ""

#: ../../ref/models/querysets.txt:1254
msgid "Prior to 1.8, you were unable to escape a literal ``%s``."
msgstr ""

#: ../../ref/models/querysets.txt:1256
msgid "``where`` / ``tables``"
msgstr ""

#: ../../ref/models/querysets.txt:1258
msgid ""
"You can define explicit SQL ``WHERE`` clauses — perhaps to perform non-"
"explicit joins — by using ``where``. You can manually add tables to the SQL "
"``FROM`` clause by using ``tables``."
msgstr ""

#: ../../ref/models/querysets.txt:1262
msgid ""
"``where`` and ``tables`` both take a list of strings. All ``where`` "
"parameters are \"AND\"ed to any other search criteria."
msgstr ""

#: ../../ref/models/querysets.txt:1269
msgid "...translates (roughly) into the following SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:1273
msgid ""
"Be careful when using the ``tables`` parameter if you're specifying tables "
"that are already used in the query. When you add extra tables via the "
"``tables`` parameter, Django assumes you want that table included an extra "
"time, if it is already included. That creates a problem, since the table "
"name will then be given an alias. If a table appears multiple times in an "
"SQL statement, the second and subsequent occurrences must use aliases so the"
" database can tell them apart. If you're referring to the extra table you "
"added in the extra ``where`` parameter this is going to cause errors."
msgstr ""

#: ../../ref/models/querysets.txt:1283
msgid ""
"Normally you'll only be adding extra tables that don't already appear in the"
" query. However, if the case outlined above does occur, there are a few "
"solutions. First, see if you can get by without including the extra table "
"and use the one already in the query. If that isn't possible, put your "
"``extra()`` call at the front of the queryset construction so that your "
"table is the first use of that table. Finally, if all else fails, look at "
"the query produced and rewrite your ``where`` addition to use the alias "
"given to your extra table. The alias will be the same each time you "
"construct the queryset in the same way, so you can rely upon the alias name "
"to not change."
msgstr ""

#: ../../ref/models/querysets.txt:1294
msgid "``order_by``"
msgstr ""

#: ../../ref/models/querysets.txt:1296
msgid ""
"If you need to order the resulting queryset using some of the new fields or "
"tables you have included via ``extra()`` use the ``order_by`` parameter to "
"``extra()`` and pass in a sequence of strings. These strings should either "
"be model fields (as in the normal :meth:`order_by()` method on querysets), "
"of the form ``table_name.column_name`` or an alias for a column that you "
"specified in the ``select`` parameter to ``extra()``."
msgstr ""

#: ../../ref/models/querysets.txt:1309
msgid ""
"This would sort all the items for which ``is_recent`` is true to the front "
"of the result set (``True`` sorts before ``False`` in a descending "
"ordering)."
msgstr ""

#: ../../ref/models/querysets.txt:1313
msgid ""
"This shows, by the way, that you can make multiple calls to ``extra()`` and "
"it will behave as you expect (adding new constraints each time)."
msgstr ""

#: ../../ref/models/querysets.txt:1316
msgid "``params``"
msgstr ""

#: ../../ref/models/querysets.txt:1318
msgid ""
"The ``where`` parameter described above may use standard Python database "
"string placeholders — ``'%s'`` to indicate parameters the database engine "
"should automatically quote. The ``params`` argument is a list of any extra "
"parameters to be substituted."
msgstr ""

#: ../../ref/models/querysets.txt:1327
msgid ""
"Always use ``params`` instead of embedding values directly into ``where`` "
"because ``params`` will ensure values are quoted correctly according to your"
" particular backend. For example, quotes will be escaped correctly."
msgstr ""

#: ../../ref/models/querysets.txt:1332
msgid "Bad::"
msgstr ""

#: ../../ref/models/querysets.txt:1336
msgid "Good::"
msgstr ""

#: ../../ref/models/querysets.txt:1342
msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""

#: ../../ref/models/querysets.txt:1351
msgid "defer"
msgstr ""

#: ../../ref/models/querysets.txt:1355
msgid ""
"In some complex data-modeling situations, your models might contain a lot of"
" fields, some of which could contain a lot of data (for example, text "
"fields), or require expensive processing to convert them to Python objects. "
"If you are using the results of a queryset in some situation where you don't"
" know if you need those particular fields when you initially fetch the data,"
" you can tell Django not to retrieve them from the database."
msgstr ""

#: ../../ref/models/querysets.txt:1362
msgid ""
"This is done by passing the names of the fields to not load to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1366
msgid ""
"A queryset that has deferred fields will still return model instances. Each "
"deferred field will be retrieved from the database if you access that field "
"(one at a time, not all the deferred fields at once)."
msgstr ""

#: ../../ref/models/querysets.txt:1370
msgid ""
"You can make multiple calls to ``defer()``. Each call adds new fields to the"
" deferred set::"
msgstr ""

#: ../../ref/models/querysets.txt:1376
msgid ""
"The order in which fields are added to the deferred set does not matter. "
"Calling ``defer()`` with a field name that has already been deferred is "
"harmless (the field will still be deferred)."
msgstr ""

#: ../../ref/models/querysets.txt:1380
msgid ""
"You can defer loading of fields in related models (if the related models are"
" loading via :meth:`select_related()`) by using the standard double-"
"underscore notation to separate related fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1386
msgid ""
"If you want to clear the set of deferred fields, pass ``None`` as a "
"parameter to ``defer()``::"
msgstr ""

#: ../../ref/models/querysets.txt:1392
msgid ""
"Some fields in a model won't be deferred, even if you ask for them. You can "
"never defer the loading of the primary key. If you are using "
":meth:`select_related()` to retrieve related models, you shouldn't defer the"
" loading of the field that connects from the primary model to the related "
"one, doing so will result in an error."
msgstr ""

#: ../../ref/models/querysets.txt:1400
msgid ""
"The ``defer()`` method (and its cousin, :meth:`only()`, below) are only for "
"advanced use-cases. They provide an optimization for when you have analyzed "
"your queries closely and understand *exactly* what information you need and "
"have measured that the difference between returning the fields you need and "
"the full set of fields for the model will be significant."
msgstr ""

#: ../../ref/models/querysets.txt:1406
msgid ""
"Even if you think you are in the advanced use-case situation, **only use "
"defer() when you cannot, at queryset load time, determine if you will need "
"the extra fields or not**. If you are frequently loading and using a "
"particular subset of your data, the best choice you can make is to normalize"
" your models and put the non-loaded data into a separate model (and database"
" table). If the columns *must* stay in the one table for some reason, create"
" a model with ``Meta.managed = False`` (see the :attr:`managed attribute "
"<django.db.models.Options.managed>` documentation) containing just the "
"fields you normally need to load and use that where you might otherwise call"
" ``defer()``. This makes your code more explicit to the reader, is slightly "
"faster and consumes a little less memory in the Python process."
msgstr ""

#: ../../ref/models/querysets.txt:1419
msgid ""
"For example, both of these models use the same underlying database table::"
msgstr ""

#: ../../ref/models/querysets.txt:1439
msgid ""
"If many fields need to be duplicated in the unmanaged model, it may be best "
"to create an abstract model with the shared fields and then have the "
"unmanaged and managed models inherit from the abstract model."
msgstr ""

#: ../../ref/models/querysets.txt:1445 ../../ref/models/querysets.txt:1495
msgid ""
"When calling :meth:`~django.db.models.Model.save()` for instances with "
"deferred fields, only the loaded fields will be saved. See "
":meth:`~django.db.models.Model.save()` for more details."
msgstr ""

#: ../../ref/models/querysets.txt:1451
msgid "only"
msgstr ""

#: ../../ref/models/querysets.txt:1455
msgid ""
"The ``only()`` method is more or less the opposite of :meth:`defer()`. You "
"call it with the fields that should *not* be deferred when retrieving a "
"model.  If you have a model where almost all the fields need to be deferred,"
" using ``only()`` to specify the complementary set of fields can result in "
"simpler code."
msgstr ""

#: ../../ref/models/querysets.txt:1461
msgid ""
"Suppose you have a model with fields ``name``, ``age`` and ``biography``. "
"The following two querysets are the same, in terms of deferred fields::"
msgstr ""

#: ../../ref/models/querysets.txt:1467
msgid ""
"Whenever you call ``only()`` it *replaces* the set of fields to load "
"immediately. The method's name is mnemonic: **only** those fields are loaded"
" immediately; the remainder are deferred. Thus, successive calls to "
"``only()`` result in only the final fields being considered::"
msgstr ""

#: ../../ref/models/querysets.txt:1475
msgid ""
"Since ``defer()`` acts incrementally (adding fields to the deferred list), "
"you can combine calls to ``only()`` and ``defer()`` and things will behave "
"logically::"
msgstr ""

#: ../../ref/models/querysets.txt:1486
msgid ""
"All of the cautions in the note for the :meth:`defer` documentation apply to"
" ``only()`` as well. Use it cautiously and only after exhausting your other "
"options."
msgstr ""

#: ../../ref/models/querysets.txt:1490
msgid ""
"Using :meth:`only` and omitting a field requested using "
":meth:`select_related` is an error as well."
msgstr ""

#: ../../ref/models/querysets.txt:1500
msgid "using"
msgstr ""

#: ../../ref/models/querysets.txt:1504
msgid ""
"This method is for controlling which database the ``QuerySet`` will be "
"evaluated against if you are using more than one database.  The only "
"argument this method takes is the alias of a database, as defined in "
":setting:`DATABASES`."
msgstr ""

#: ../../ref/models/querysets.txt:1518
msgid "select_for_update"
msgstr ""

#: ../../ref/models/querysets.txt:1522
msgid ""
"Returns a queryset that will lock rows until the end of the transaction, "
"generating a ``SELECT ... FOR UPDATE`` SQL statement on supported databases."
msgstr ""

#: ../../ref/models/querysets.txt:1529
msgid ""
"All matched entries will be locked until the end of the transaction block, "
"meaning that other transactions will be prevented from changing or acquiring"
" locks on them."
msgstr ""

#: ../../ref/models/querysets.txt:1533
msgid ""
"Usually, if another transaction has already acquired a lock on one of the "
"selected rows, the query will block until the lock is released. If this is "
"not the behavior you want, call ``select_for_update(nowait=True)``. This "
"will make the call non-blocking. If a conflicting lock is already acquired "
"by another transaction, :exc:`~django.db.DatabaseError` will be raised when "
"the queryset is evaluated."
msgstr ""

#: ../../ref/models/querysets.txt:1540
msgid ""
"Currently, the ``postgresql_psycopg2``, ``oracle``, and ``mysql`` database "
"backends support ``select_for_update()``. However, MySQL has no support for "
"the ``nowait`` argument. Obviously, users of external third-party backends "
"should check with their backend's documentation for specifics in those "
"cases."
msgstr ""

#: ../../ref/models/querysets.txt:1545
msgid ""
"Passing ``nowait=True`` to ``select_for_update()`` using database backends "
"that do not support ``nowait``, such as MySQL, will cause a "
":exc:`~django.db.DatabaseError` to be raised. This is in order to prevent "
"code unexpectedly blocking."
msgstr ""

#: ../../ref/models/querysets.txt:1550
msgid ""
"Evaluating a queryset with ``select_for_update()`` in autocommit mode on "
"backends which support ``SELECT ... FOR UPDATE`` is a "
":exc:`~django.db.transaction.TransactionManagementError` error because the "
"rows are not locked in that case. If allowed, this would facilitate data "
"corruption and could easily be caused by calling code that expects to be run"
" in a transaction outside of one."
msgstr ""

#: ../../ref/models/querysets.txt:1557
msgid ""
"Using ``select_for_update()`` on backends which do not support ``SELECT ... "
"FOR UPDATE`` (such as SQLite) will have no effect. ``SELECT ... FOR UPDATE``"
" will not be added to the query, and an error isn't raised if "
"``select_for_update()`` is used in autocommit mode."
msgstr ""

#: ../../ref/models/querysets.txt:1564
msgid ""
"It is now an error to execute a query with ``select_for_update()`` in "
"autocommit mode. With earlier releases in the 1.6 series it was a no-op."
msgstr ""

#: ../../ref/models/querysets.txt:1569
msgid ""
"Although ``select_for_update()`` normally fails in autocommit mode, since "
":class:`~django.test.TestCase` automatically wraps each test in a "
"transaction, calling ``select_for_update()`` in a ``TestCase`` even outside "
"an :func:`~django.db.transaction.atomic()` block will (perhaps unexpectedly)"
" pass without raising a ``TransactionManagementError``. To properly test "
"``select_for_update()`` you should use "
":class:`~django.test.TransactionTestCase`."
msgstr ""

#: ../../ref/models/querysets.txt:1578
msgid "raw"
msgstr ""

#: ../../ref/models/querysets.txt:1584
msgid ""
"``raw`` was moved to the ``QuerySet`` class. It was previously only on "
":class:`~django.db.models.Manager`."
msgstr ""

#: ../../ref/models/querysets.txt:1587
msgid ""
"Takes a raw SQL query, executes it, and returns a "
"``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` "
"instance can be iterated over just like an normal ``QuerySet`` to provide "
"object instances."
msgstr ""

#: ../../ref/models/querysets.txt:1591
msgid "See the :doc:`/topics/db/sql` for more information."
msgstr ""

#: ../../ref/models/querysets.txt:1595
msgid ""
"``raw()`` always triggers a new query and doesn't account for previous "
"filtering. As such, it should generally be called from the ``Manager`` or "
"from a fresh ``QuerySet`` instance."
msgstr ""

#: ../../ref/models/querysets.txt:1600
msgid "Methods that do not return QuerySets"
msgstr ""

#: ../../ref/models/querysets.txt:1602
msgid ""
"The following ``QuerySet`` methods evaluate the ``QuerySet`` and return "
"something *other than* a ``QuerySet``."
msgstr ""

#: ../../ref/models/querysets.txt:1605
msgid ""
"These methods do not use a cache (see :ref:`caching-and-querysets`). Rather,"
" they query the database each time they're called."
msgstr ""

#: ../../ref/models/querysets.txt:1609
msgid "get"
msgstr ""

#: ../../ref/models/querysets.txt:1613
msgid ""
"Returns the object matching the given lookup parameters, which should be in "
"the format described in `Field lookups`_."
msgstr ""

#: ../../ref/models/querysets.txt:1616
msgid ""
"``get()`` raises :exc:`~django.core.exceptions.MultipleObjectsReturned` if "
"more than one object was found. The "
":exc:`~django.core.exceptions.MultipleObjectsReturned` exception is an "
"attribute of the model class."
msgstr ""

#: ../../ref/models/querysets.txt:1621
msgid ""
"``get()`` raises a :exc:`~django.db.models.Model.DoesNotExist` exception if "
"an object wasn't found for the given parameters. This exception is an "
"attribute of the model class. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1627
msgid ""
"The :exc:`~django.db.models.Model.DoesNotExist` exception inherits from "
":exc:`django.core.exceptions.ObjectDoesNotExist`, so you can target multiple"
" :exc:`~django.db.models.Model.DoesNotExist` exceptions. Example::"
msgstr ""

#: ../../ref/models/querysets.txt:1639
msgid "create"
msgstr ""

#: ../../ref/models/querysets.txt:1643
msgid ""
"A convenience method for creating an object and saving it all in one step.  "
"Thus::"
msgstr ""

#: ../../ref/models/querysets.txt:1652
msgid "are equivalent."
msgstr ""

#: ../../ref/models/querysets.txt:1654
msgid ""
"The :ref:`force_insert <ref-models-force-insert>` parameter is documented "
"elsewhere, but all it means is that a new object will always be created. "
"Normally you won't need to worry about this. However, if your model contains"
" a manual primary key value that you set and if that value already exists in"
" the database, a call to ``create()`` will fail with an "
":exc:`~django.db.IntegrityError` since primary keys must be unique. Be "
"prepared to handle the exception if you are using manual primary keys."
msgstr ""

#: ../../ref/models/querysets.txt:1663
msgid "get_or_create"
msgstr ""

#: ../../ref/models/querysets.txt:1667
msgid ""
"A convenience method for looking up an object with the given ``kwargs`` (may"
" be empty if your model has defaults for all fields), creating one if "
"necessary."
msgstr ""

#: ../../ref/models/querysets.txt:1670
msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the retrieved "
"or created object and ``created`` is a boolean specifying whether a new "
"object was created."
msgstr ""

#: ../../ref/models/querysets.txt:1674 ../../ref/models/querysets.txt:1796
msgid "This is meant as a shortcut to boilerplatish code. For example::"
msgstr ""

#: ../../ref/models/querysets.txt:1682
msgid ""
"This pattern gets quite unwieldy as the number of fields in a model goes up."
" The above example can be rewritten using ``get_or_create()`` like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1688
msgid ""
"Any keyword arguments passed to ``get_or_create()`` — *except* an optional "
"one called ``defaults`` — will be used in a :meth:`get()` call. If an object"
" is found, ``get_or_create()`` returns a tuple of that object and ``False``."
" If multiple objects are found, ``get_or_create`` raises "
":exc:`~django.core.exceptions.MultipleObjectsReturned`. If an object is "
"*not* found, ``get_or_create()`` will instantiate and save a new object, "
"returning a tuple of the new object and ``True``. The new object will be "
"created roughly according to this algorithm::"
msgstr ""

#: ../../ref/models/querysets.txt:1702
msgid ""
"In English, that means start with any non-``'defaults'`` keyword argument "
"that doesn't contain a double underscore (which would indicate a non-exact "
"lookup). Then add the contents of ``defaults``, overriding any keys if "
"necessary, and use the result as the keyword arguments to the model class. "
"As hinted at above, this is a simplification of the algorithm that is used, "
"but it contains all the pertinent details. The internal implementation has "
"some more error-checking than this and handles some extra edge-conditions; "
"if you're interested, read the code."
msgstr ""

#: ../../ref/models/querysets.txt:1711
msgid ""
"If you have a field named ``defaults`` and want to use it as an exact lookup"
" in ``get_or_create()``, just use ``'defaults__exact'``, like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1716
msgid ""
"The ``get_or_create()`` method has similar error behavior to "
":meth:`create()` when you're using manually specified primary keys. If an "
"object needs to be created and the key already exists in the database, an "
":exc:`~django.db.IntegrityError` will be raised."
msgstr ""

#: ../../ref/models/querysets.txt:1721
msgid ""
"This method is atomic assuming correct usage, correct database "
"configuration, and correct behavior of the underlying database. However, if "
"uniqueness is not enforced at the database level for the ``kwargs`` used in "
"a ``get_or_create`` call (see :attr:`~django.db.models.Field.unique` or "
":attr:`~django.db.models.Options.unique_together`), this method is prone to "
"a race-condition which can result in multiple rows with the same parameters "
"being inserted simultaneously."
msgstr ""

#: ../../ref/models/querysets.txt:1729
msgid ""
"If you are using MySQL, be sure to use the ``READ COMMITTED`` isolation "
"level rather than ``REPEATABLE READ`` (the default), otherwise you may see "
"cases where ``get_or_create`` will raise an :exc:`~django.db.IntegrityError`"
" but the object won't appear in a subsequent "
":meth:`~django.db.models.query.QuerySet.get` call."
msgstr ""

#: ../../ref/models/querysets.txt:1735
msgid ""
"Finally, a word on using ``get_or_create()`` in Django views. Please make "
"sure to use it only in ``POST`` requests unless you have a good reason not "
"to. ``GET`` requests shouldn't have any effect on data. Instead, use "
"``POST`` whenever a request to a page has a side effect on your data. For "
"more, see `Safe methods`_ in the HTTP spec."
msgstr ""

#: ../../ref/models/querysets.txt:1745
msgid ""
"You can use ``get_or_create()`` through "
":class:`~django.db.models.ManyToManyField` attributes and reverse relations."
" In that case you will restrict the queries inside the context of that "
"relation. That could lead you to some integrity problems if you don't use it"
" consistently."
msgstr ""

#: ../../ref/models/querysets.txt:1750
msgid "Being the following models::"
msgstr ""

#: ../../ref/models/querysets.txt:1759
msgid ""
"You can use ``get_or_create()`` through Book's chapters field, but it only "
"fetches inside the context of that book::"
msgstr ""

#: ../../ref/models/querysets.txt:1772
msgid ""
"This is happening because it's trying to get or create \"Chapter 1\" through"
" the book \"Ulysses\", but it can't do any of them: the relation can't fetch"
" that chapter because it isn't related to that book, but it can't create it "
"either because ``title`` field should be unique."
msgstr ""

#: ../../ref/models/querysets.txt:1778
msgid "update_or_create"
msgstr ""

#: ../../ref/models/querysets.txt:1784
msgid ""
"A convenience method for updating an object with the given ``kwargs``, "
"creating a new one if necessary. The ``defaults`` is a dictionary of (field,"
" value) pairs used to update the object."
msgstr ""

#: ../../ref/models/querysets.txt:1788
msgid ""
"Returns a tuple of ``(object, created)``, where ``object`` is the created or"
" updated object and ``created`` is a boolean specifying whether a new object"
" was created."
msgstr ""

#: ../../ref/models/querysets.txt:1792
msgid ""
"The ``update_or_create`` method tries to fetch an object from database based"
" on the given ``kwargs``. If a match is found, it updates the fields passed "
"in the ``defaults`` dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:1808
msgid ""
"This pattern gets quite unwieldy as the number of fields in a model goes up."
" The above example can be rewritten using ``update_or_create()`` like so::"
msgstr ""

#: ../../ref/models/querysets.txt:1814
msgid ""
"For detailed description how names passed in ``kwargs`` are resolved see "
":meth:`get_or_create`."
msgstr ""

#: ../../ref/models/querysets.txt:1817
msgid ""
"As described above in :meth:`get_or_create`, this method is prone to a race-"
"condition which can result in multiple rows being inserted simultaneously if"
" uniqueness is not enforced at the database level."
msgstr ""

#: ../../ref/models/querysets.txt:1822
msgid "bulk_create"
msgstr ""

#: ../../ref/models/querysets.txt:1826
msgid ""
"This method inserts the provided list of objects into the database in an "
"efficient manner (generally only 1 query, no matter how many objects there "
"are)::"
msgstr ""

#: ../../ref/models/querysets.txt:1836
msgid "This has a number of caveats though:"
msgstr ""

#: ../../ref/models/querysets.txt:1838
msgid ""
"The model's ``save()`` method will not be called, and the ``pre_save`` and "
"``post_save`` signals will not be sent."
msgstr ""

#: ../../ref/models/querysets.txt:1840
msgid ""
"It does not work with child models in a multi-table inheritance scenario."
msgstr ""

#: ../../ref/models/querysets.txt:1841
msgid ""
"If the model's primary key is an :class:`~django.db.models.AutoField` it "
"does not retrieve and set the primary key attribute, as ``save()`` does."
msgstr ""

#: ../../ref/models/querysets.txt:1843
msgid "It does not work with many-to-many relationships."
msgstr ""

#: ../../ref/models/querysets.txt:1845
msgid ""
"The ``batch_size`` parameter controls how many objects are created in single"
" query. The default is to create all objects in one batch, except for SQLite"
" where the default is such that at most 999 variables per query are used."
msgstr ""

#: ../../ref/models/querysets.txt:1850
msgid "count"
msgstr ""

#: ../../ref/models/querysets.txt:1854
msgid ""
"Returns an integer representing the number of objects in the database "
"matching the ``QuerySet``. The ``count()`` method never raises exceptions."
msgstr ""

#: ../../ref/models/querysets.txt:1865
msgid ""
"A ``count()`` call performs a ``SELECT COUNT(*)`` behind the scenes, so you "
"should always use ``count()`` rather than loading all of the record into "
"Python objects and calling ``len()`` on the result (unless you need to load "
"the objects into memory anyway, in which case ``len()`` will be faster)."
msgstr ""

#: ../../ref/models/querysets.txt:1870
msgid ""
"Depending on which database you're using (e.g. PostgreSQL vs. MySQL), "
"``count()`` may return a long integer instead of a normal Python integer. "
"This is an underlying implementation quirk that shouldn't pose any real-"
"world problems."
msgstr ""

#: ../../ref/models/querysets.txt:1875
msgid ""
"Note that if you want the number of items in a ``QuerySet`` and are also "
"retrieving model instances from it (for example, by iterating over it), it's"
" probably more efficient to use ``len(queryset)`` which won't cause an extra"
" database query like ``count()`` would."
msgstr ""

#: ../../ref/models/querysets.txt:1881
msgid "in_bulk"
msgstr ""

#: ../../ref/models/querysets.txt:1885
msgid ""
"Takes a list of primary-key values and returns a dictionary mapping each "
"primary-key value to an instance of the object with the given ID."
msgstr ""

#: ../../ref/models/querysets.txt:1897
msgid ""
"If you pass ``in_bulk()`` an empty list, you'll get an empty dictionary."
msgstr ""

#: ../../ref/models/querysets.txt:1900
msgid "iterator"
msgstr ""

#: ../../ref/models/querysets.txt:1904
msgid ""
"Evaluates the ``QuerySet`` (by performing the query) and returns an iterator"
" (see :pep:`234`) over the results. A ``QuerySet`` typically caches its "
"results internally so that repeated evaluations do not result in additional "
"queries. In contrast, ``iterator()`` will read results directly, without "
"doing any caching at the ``QuerySet`` level (internally, the default "
"iterator calls ``iterator()`` and caches the return value). For a "
"``QuerySet`` which returns a large number of objects that you only need to "
"access once, this can result in better performance and a significant "
"reduction in memory."
msgstr ""

#: ../../ref/models/querysets.txt:1913
msgid ""
"Note that using ``iterator()`` on a ``QuerySet`` which has already been "
"evaluated will force it to evaluate again, repeating the query."
msgstr ""

#: ../../ref/models/querysets.txt:1916
msgid ""
"Also, use of ``iterator()`` causes previous ``prefetch_related()`` calls to "
"be ignored since these two optimizations do not make sense together."
msgstr ""

#: ../../ref/models/querysets.txt:1921
msgid ""
"Some Python database drivers like ``psycopg2`` perform caching if using "
"client side cursors (instantiated with ``connection.cursor()`` and what "
"Django's ORM uses). Using ``iterator()`` does not affect caching at the "
"database driver level. To disable this caching, look at `server side "
"cursors`_."
msgstr ""

#: ../../ref/models/querysets.txt:1930
msgid "latest"
msgstr ""

#: ../../ref/models/querysets.txt:1934
msgid ""
"Returns the latest object in the table, by date, using the ``field_name`` "
"provided as the date field."
msgstr ""

#: ../../ref/models/querysets.txt:1937
msgid ""
"This example returns the latest ``Entry`` in the table, according to the "
"``pub_date`` field::"
msgstr ""

#: ../../ref/models/querysets.txt:1942
msgid ""
"If your model's :ref:`Meta <meta-options>` specifies "
":attr:`~django.db.models.Options.get_latest_by`, you can leave off the "
"``field_name`` argument to ``earliest()`` or ``latest()``. Django will use "
"the field specified in :attr:`~django.db.models.Options.get_latest_by` by "
"default."
msgstr ""

#: ../../ref/models/querysets.txt:1947
msgid ""
"Like :meth:`get()`, ``earliest()`` and ``latest()`` raise "
":exc:`~django.db.models.Model.DoesNotExist` if there is no object with the "
"given parameters."
msgstr ""

#: ../../ref/models/querysets.txt:1951
msgid ""
"Note that ``earliest()`` and ``latest()`` exist purely for convenience and "
"readability."
msgstr ""

#: ../../ref/models/querysets.txt:1955
msgid "earliest"
msgstr ""

#: ../../ref/models/querysets.txt:1959
msgid ""
"Works otherwise like :meth:`~django.db.models.query.QuerySet.latest` except "
"the direction is changed."
msgstr ""

#: ../../ref/models/querysets.txt:1963 ../../ref/templates/builtins.txt:1590
msgid "first"
msgstr ""

#: ../../ref/models/querysets.txt:1967
msgid ""
"Returns the first object matched by the queryset, or ``None`` if there is no"
" matching object. If the ``QuerySet`` has no ordering defined, then the "
"queryset is automatically ordered by the primary key."
msgstr ""

#: ../../ref/models/querysets.txt:1975
msgid ""
"Note that ``first()`` is a convenience method, the following code sample is "
"equivalent to the above example::"
msgstr ""

#: ../../ref/models/querysets.txt:1984 ../../ref/templates/builtins.txt:1722
msgid "last"
msgstr ""

#: ../../ref/models/querysets.txt:1987
msgid ""
"Works like  :meth:`first()`, but returns the last object in the queryset."
msgstr ""

#: ../../ref/models/querysets.txt:1990
msgid "aggregate"
msgstr ""

#: ../../ref/models/querysets.txt:1994
msgid ""
"Returns a dictionary of aggregate values (averages, sums, etc) calculated "
"over the ``QuerySet``. Each argument to ``aggregate()`` specifies a value "
"that will be included in the dictionary that is returned."
msgstr ""

#: ../../ref/models/querysets.txt:1998
msgid ""
"The aggregation functions that are provided by Django are described in "
"`Aggregation Functions`_ below. Since aggregates are also :doc:`query "
"expressions </ref/models/expressions>`, you may combine aggregates with "
"other aggregates or values to create complex aggregates."
msgstr ""

#: ../../ref/models/querysets.txt:2003
msgid ""
"Aggregates specified using keyword arguments will use the keyword as the "
"name for the annotation. Anonymous arguments will have a name generated for "
"them based upon the name of the aggregate function and the model field that "
"is being aggregated. Complex aggregates cannot use anonymous arguments and "
"must specify a keyword argument as an alias."
msgstr ""

#: ../../ref/models/querysets.txt:2009
msgid ""
"For example, when you are working with blog entries, you may want to know "
"the number of authors that have contributed blog entries::"
msgstr ""

#: ../../ref/models/querysets.txt:2016
msgid ""
"By using a keyword argument to specify the aggregate function, you can "
"control the name of the aggregation value that is returned::"
msgstr ""

#: ../../ref/models/querysets.txt:2026
msgid "exists"
msgstr ""

#: ../../ref/models/querysets.txt:2030
msgid ""
"Returns ``True`` if the :class:`.QuerySet` contains any results, and "
"``False`` if not. This tries to perform the query in the simplest and "
"fastest way possible, but it *does* execute nearly the same query as a "
"normal :class:`.QuerySet` query."
msgstr ""

#: ../../ref/models/querysets.txt:2035
msgid ""
":meth:`~.QuerySet.exists` is useful for searches relating to both object "
"membership in a :class:`.QuerySet` and to the existence of any objects in a "
":class:`.QuerySet`, particularly in the context of a large "
":class:`.QuerySet`."
msgstr ""

#: ../../ref/models/querysets.txt:2039
msgid ""
"The most efficient method of finding whether a model with a unique field "
"(e.g. ``primary_key``) is a member of a :class:`.QuerySet` is::"
msgstr ""

#: ../../ref/models/querysets.txt:2046
msgid ""
"Which will be faster than the following which requires evaluating and "
"iterating through the entire queryset::"
msgstr ""

#: ../../ref/models/querysets.txt:2052
msgid "And to find whether a queryset contains any items::"
msgstr ""

#: ../../ref/models/querysets.txt:2057
msgid "Which will be faster than::"
msgstr ""

#: ../../ref/models/querysets.txt:2062
msgid ""
"... but not by a large degree (hence needing a large queryset for efficiency"
" gains)."
msgstr ""

#: ../../ref/models/querysets.txt:2065
msgid ""
"Additionally, if a ``some_queryset`` has not yet been evaluated, but you "
"know that it will be at some point, then using ``some_queryset.exists()`` "
"will do more overall work (one query for the existence check plus an extra "
"one to later retrieve the results) than simply using "
"``bool(some_queryset)``, which retrieves the results and then checks if any "
"were returned."
msgstr ""

#: ../../ref/models/querysets.txt:2072
msgid "update"
msgstr ""

#: ../../ref/models/querysets.txt:2076
msgid ""
"Performs an SQL update query for the specified fields, and returns the "
"number of rows matched (which may not be equal to the number of rows updated"
" if some rows already have the new value)."
msgstr ""

#: ../../ref/models/querysets.txt:2080
msgid ""
"For example, to turn comments off for all blog entries published in 2010, "
"you could do this::"
msgstr ""

#: ../../ref/models/querysets.txt:2085
msgid ""
"(This assumes your ``Entry`` model has fields ``pub_date`` and "
"``comments_on``.)"
msgstr ""

#: ../../ref/models/querysets.txt:2087
msgid ""
"You can update multiple fields — there's no limit on how many. For example, "
"here we update the ``comments_on`` and ``headline`` fields::"
msgstr ""

#: ../../ref/models/querysets.txt:2092
msgid ""
"The ``update()`` method is applied instantly, and the only restriction on "
"the :class:`.QuerySet` that is updated is that it can only update columns in"
" the model's main table, not on related models. You can't do this, for "
"example::"
msgstr ""

#: ../../ref/models/querysets.txt:2098
msgid "Filtering based on related fields is still possible, though::"
msgstr ""

#: ../../ref/models/querysets.txt:2102
msgid ""
"You cannot call ``update()`` on a :class:`.QuerySet` that has had a slice "
"taken or can otherwise no longer be filtered."
msgstr ""

#: ../../ref/models/querysets.txt:2105
msgid "The ``update()`` method returns the number of affected rows::"
msgstr ""

#: ../../ref/models/querysets.txt:2116
msgid ""
"If you're just updating a record and don't need to do anything with the "
"model object, the most efficient approach is to call ``update()``, rather "
"than loading the model object into memory. For example, instead of doing "
"this::"
msgstr ""

#: ../../ref/models/querysets.txt:2124
msgid "...do this::"
msgstr ""

#: ../../ref/models/querysets.txt:2128
msgid ""
"Using ``update()`` also prevents a race condition wherein something might "
"change in your database in the short period of time between loading the "
"object and calling ``save()``."
msgstr ""

#: ../../ref/models/querysets.txt:2132
msgid ""
"Finally, realize that ``update()`` does an update at the SQL level and, "
"thus, does not call any ``save()`` methods on your models, nor does it emit "
"the :attr:`~django.db.models.signals.pre_save` or "
":attr:`~django.db.models.signals.post_save` signals (which are a consequence"
" of calling :meth:`Model.save() <django.db.models.Model.save>`). If you want"
" to update a bunch of records for a model that has a custom "
":meth:`~django.db.models.Model.save()` method, loop over them and call "
":meth:`~django.db.models.Model.save()`, like this::"
msgstr ""

#: ../../ref/models/querysets.txt:2146
msgid "delete"
msgstr ""

#: ../../ref/models/querysets.txt:2150
msgid ""
"Performs an SQL delete query on all rows in the :class:`.QuerySet`. The "
"``delete()`` is applied instantly. You cannot call ``delete()`` on a "
":class:`.QuerySet` that has had a slice taken or can otherwise no longer be "
"filtered."
msgstr ""

#: ../../ref/models/querysets.txt:2155
msgid "For example, to delete all the entries in a particular blog::"
msgstr ""

#: ../../ref/models/querysets.txt:2162
msgid ""
"By default, Django's :class:`~django.db.models.ForeignKey` emulates the SQL "
"constraint ``ON DELETE CASCADE`` — in other words, any objects with foreign "
"keys pointing at the objects to be deleted will be deleted along with them. "
"For example::"
msgstr ""

#: ../../ref/models/querysets.txt:2171
msgid ""
"This cascade behavior is customizable via the "
":attr:`~django.db.models.ForeignKey.on_delete` argument to the "
":class:`~django.db.models.ForeignKey`."
msgstr ""

#: ../../ref/models/querysets.txt:2175
msgid ""
"The ``delete()`` method does a bulk delete and does not call any "
"``delete()`` methods on your models. It does, however, emit the "
":data:`~django.db.models.signals.pre_delete` and "
":data:`~django.db.models.signals.post_delete` signals for all deleted "
"objects (including cascaded deletions)."
msgstr ""

#: ../../ref/models/querysets.txt:2181
msgid ""
"Django needs to fetch objects into memory to send signals and handle "
"cascades. However, if there are no cascades and no signals, then Django may "
"take a fast-path and delete objects without fetching into memory. For large "
"deletes this can result in significantly reduced memory usage. The amount of"
" executed queries can be reduced, too."
msgstr ""

#: ../../ref/models/querysets.txt:2187
msgid ""
"ForeignKeys which are set to :attr:`~django.db.models.ForeignKey.on_delete` "
"``DO_NOTHING`` do not prevent taking the fast-path in deletion."
msgstr ""

#: ../../ref/models/querysets.txt:2190
msgid ""
"Note that the queries generated in object deletion is an implementation "
"detail subject to change."
msgstr ""

#: ../../ref/models/querysets.txt:2194
msgid "as_manager"
msgstr ""

#: ../../ref/models/querysets.txt:2200
msgid ""
"Class method that returns an instance of :class:`~django.db.models.Manager` "
"with a copy of the ``QuerySet``’s methods. See :ref:`create-manager-with-"
"queryset-methods` for more details."
msgstr ""

#: ../../ref/models/querysets.txt:2207
msgid "Field lookups"
msgstr ""

#: ../../ref/models/querysets.txt:2209
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the ``QuerySet`` methods "
":meth:`filter()`, :meth:`exclude()` and :meth:`get()`."
msgstr ""

#: ../../ref/models/querysets.txt:2213
msgid ""
"For an introduction, see :ref:`models and database queries documentation "
"<field-lookups-intro>`."
msgstr ""

#: ../../ref/models/querysets.txt:2216
msgid ""
"Django's built-in lookups are listed below. It is also possible to write "
":doc:`custom lookups </howto/custom-lookups>` for model fields."
msgstr ""

#: ../../ref/models/querysets.txt:2219
msgid ""
"As a convenience when no lookup type is provided (like in "
"``Entry.objects.get(id=14)``) the lookup type is assumed to be "
":lookup:`exact`."
msgstr ""

#: ../../ref/models/querysets.txt:2225
msgid "exact"
msgstr ""

#: ../../ref/models/querysets.txt:2227
msgid ""
"Exact match. If the value provided for comparison is ``None``, it will be "
"interpreted as an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""

#: ../../ref/models/querysets.txt:2235 ../../ref/models/querysets.txt:2266
#: ../../ref/models/querysets.txt:2740 ../../ref/models/querysets.txt:2764
msgid "SQL equivalents::"
msgstr ""

#: ../../ref/models/querysets.txt:2240
msgid "MySQL comparisons"
msgstr ""

#: ../../ref/models/querysets.txt:2242
msgid ""
"In MySQL, a database table's \"collation\" setting determines whether "
"``exact`` comparisons are case-sensitive. This is a database setting, *not* "
"a Django setting. It's possible to configure your MySQL tables to use case-"
"sensitive comparisons, but some trade-offs are involved. For more "
"information about this, see the :ref:`collation section <mysql-collation>` "
"in the :doc:`databases </ref/databases>` documentation."
msgstr ""

#: ../../ref/models/querysets.txt:2252
msgid "iexact"
msgstr ""

#: ../../ref/models/querysets.txt:2254
msgid "Case-insensitive exact match."
msgstr ""

#: ../../ref/models/querysets.txt:2258
msgid ""
"If the value provided for comparison is ``None``, it will be interpreted as "
"an SQL ``NULL`` (see :lookup:`isnull` for more details)."
msgstr ""

#: ../../ref/models/querysets.txt:2271
msgid ""
"Note the first query will match ``'Beatles Blog'``, ``'beatles blog'``, "
"``'BeAtLes BLoG'``, etc."
msgstr ""

#: ../../ref/models/querysets.txt:2274 ../../ref/models/querysets.txt:2299
#: ../../ref/models/querysets.txt:2321 ../../ref/models/querysets.txt:2455
#: ../../ref/models/querysets.txt:2476 ../../ref/models/querysets.txt:2497
msgid "SQLite users"
msgstr ""

#: ../../ref/models/querysets.txt:2276
msgid ""
"When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind "
"the :ref:`database note <sqlite-string-matching>` about string comparisons. "
"SQLite does not do case-insensitive matching for Unicode strings."
msgstr ""

#: ../../ref/models/querysets.txt:2286
msgid "Case-sensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:2292 ../../ref/models/querysets.txt:2317
#: ../../ref/models/querysets.txt:2338 ../../ref/models/querysets.txt:2397
#: ../../ref/models/querysets.txt:2433 ../../ref/models/querysets.txt:2451
#: ../../ref/models/querysets.txt:2472 ../../ref/models/querysets.txt:2493
#: ../../ref/models/querysets.txt:2517 ../../ref/models/querysets.txt:2546
#: ../../ref/models/querysets.txt:2567 ../../ref/models/querysets.txt:2588
#: ../../ref/models/querysets.txt:2637 ../../ref/models/querysets.txt:2657
#: ../../ref/models/querysets.txt:2677 ../../ref/models/querysets.txt:2698
#: ../../ref/models/querysets.txt:2714
msgid "SQL equivalent::"
msgstr ""

#: ../../ref/models/querysets.txt:2296
msgid ""
"Note this will match the headline ``'Lennon honored today'`` but not "
"``'lennon honored today'``."
msgstr ""

#: ../../ref/models/querysets.txt:2301
msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``contains`` acts"
" like ``icontains`` for SQLite. See the :ref:`database note <sqlite-string-"
"matching>` for more information."
msgstr ""

#: ../../ref/models/querysets.txt:2309
msgid "icontains"
msgstr ""

#: ../../ref/models/querysets.txt:2311
msgid "Case-insensitive containment test."
msgstr ""

#: ../../ref/models/querysets.txt:2323 ../../ref/models/querysets.txt:2457
#: ../../ref/models/querysets.txt:2499
msgid ""
"When using the SQLite backend and Unicode (non-ASCII) strings, bear in mind "
"the :ref:`database note <sqlite-string-matching>` about string comparisons."
msgstr ""

#: ../../ref/models/querysets.txt:2330
msgid "in"
msgstr ""

#: ../../ref/models/querysets.txt:2332
msgid "In a given list."
msgstr ""

#: ../../ref/models/querysets.txt:2342
msgid ""
"You can also use a queryset to dynamically evaluate the list of values "
"instead of providing a list of literal values::"
msgstr ""

#: ../../ref/models/querysets.txt:2348
msgid "This queryset will be evaluated as subselect statement::"
msgstr ""

#: ../../ref/models/querysets.txt:2352
msgid ""
"If you pass in a ``ValuesQuerySet`` or ``ValuesListQuerySet`` (the result of"
" calling ``values()`` or ``values_list()`` on a queryset) as the value to an"
" ``__in`` lookup, you need to ensure you are only extracting one field in "
"the result. For example, this will work (filtering on the blog names)::"
msgstr ""

#: ../../ref/models/querysets.txt:2360
msgid ""
"This example will raise an exception, since the inner query is trying to "
"extract two field values, where only one is expected::"
msgstr ""

#: ../../ref/models/querysets.txt:2369 ../../ref/request-response.txt:975
msgid "Performance considerations"
msgstr ""

#: ../../ref/models/querysets.txt:2371
msgid ""
"Be cautious about using nested queries and understand your database server's"
" performance characteristics (if in doubt, benchmark!). Some database "
"backends, most notably MySQL, don't optimize nested queries very well. It is"
" more efficient, in those cases, to extract a list of values and then pass "
"that into the second query. That is, execute two queries instead of one::"
msgstr ""

#: ../../ref/models/querysets.txt:2382
msgid ""
"Note the ``list()`` call around the Blog ``QuerySet`` to force execution of "
"the first query. Without it, a nested query would be executed, because :ref"
":`querysets-are-lazy`."
msgstr ""

#: ../../ref/models/querysets.txt:2389
msgid "gt"
msgstr ""

#: ../../ref/models/querysets.txt:2391
msgid "Greater than."
msgstr ""

#: ../../ref/models/querysets.txt:2404
msgid "gte"
msgstr ""

#: ../../ref/models/querysets.txt:2406
msgid "Greater than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:2411
msgid "lt"
msgstr ""

#: ../../ref/models/querysets.txt:2413
msgid "Less than."
msgstr ""

#: ../../ref/models/querysets.txt:2418
msgid "lte"
msgstr ""

#: ../../ref/models/querysets.txt:2420
msgid "Less than or equal to."
msgstr ""

#: ../../ref/models/querysets.txt:2427
msgid "Case-sensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:2437
msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``startswith`` "
"acts like ``istartswith`` for SQLite."
msgstr ""

#: ../../ref/models/querysets.txt:2443
msgid "istartswith"
msgstr ""

#: ../../ref/models/querysets.txt:2445
msgid "Case-insensitive starts-with."
msgstr ""

#: ../../ref/models/querysets.txt:2466
msgid "Case-sensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:2478
msgid ""
"SQLite doesn't support case-sensitive ``LIKE`` statements; ``endswith`` acts"
" like ``iendswith`` for SQLite. Refer to the :ref:`database note <sqlite-"
"string-matching>` documentation for more."
msgstr ""

#: ../../ref/models/querysets.txt:2485
msgid "iendswith"
msgstr ""

#: ../../ref/models/querysets.txt:2487
msgid "Case-insensitive ends-with."
msgstr ""

#: ../../ref/models/querysets.txt:2506
msgid "range"
msgstr ""

#: ../../ref/models/querysets.txt:2508
msgid "Range test (inclusive)."
msgstr ""

#: ../../ref/models/querysets.txt:2521
msgid ""
"You can use ``range`` anywhere you can use ``BETWEEN`` in SQL — for dates, "
"numbers and even characters."
msgstr ""

#: ../../ref/models/querysets.txt:2526
msgid ""
"Filtering a ``DateTimeField`` with dates won't include items on the last "
"day, because the bounds are interpreted as \"0am on the given date\". If "
"``pub_date`` was a ``DateTimeField``, the above expression would be turned "
"into this SQL::"
msgstr ""

#: ../../ref/models/querysets.txt:2533
msgid "Generally speaking, you can't mix dates and datetimes."
msgstr ""

#: ../../ref/models/querysets.txt:2538
msgid "year"
msgstr ""

#: ../../ref/models/querysets.txt:2540
msgid ""
"For date and datetime fields, an exact year match. Takes an integer year."
msgstr ""

#: ../../ref/models/querysets.txt:2550 ../../ref/models/querysets.txt:2571
#: ../../ref/models/querysets.txt:2592 ../../ref/models/querysets.txt:2641
#: ../../ref/models/querysets.txt:2661 ../../ref/models/querysets.txt:2681
msgid "(The exact SQL syntax varies for each database engine.)"
msgstr ""

#: ../../ref/models/querysets.txt:2552
msgid ""
"When :setting:`USE_TZ` is ``True``, datetime fields are converted to the "
"current time zone before filtering."
msgstr ""

#: ../../ref/models/querysets.txt:2558
msgid "month"
msgstr ""

#: ../../ref/models/querysets.txt:2560
msgid ""
"For date and datetime fields, an exact month match. Takes an integer 1 "
"(January) through 12 (December)."
msgstr ""

#: ../../ref/models/querysets.txt:2573 ../../ref/models/querysets.txt:2597
#: ../../ref/models/querysets.txt:2622
msgid ""
"When :setting:`USE_TZ` is ``True``, datetime fields are converted to the "
"current time zone before filtering. This requires :ref:`time zone "
"definitions in the database <database-time-zone-definitions>`."
msgstr ""

#: ../../ref/models/querysets.txt:2580
msgid "day"
msgstr ""

#: ../../ref/models/querysets.txt:2582
msgid ""
"For date and datetime fields, an exact day match. Takes an integer day."
msgstr ""

#: ../../ref/models/querysets.txt:2594
msgid ""
"Note this will match any record with a pub_date on the third day of the "
"month, such as January 3, July 3, etc."
msgstr ""

#: ../../ref/models/querysets.txt:2604
msgid "week_day"
msgstr ""

#: ../../ref/models/querysets.txt:2606
msgid "For date and datetime fields, a 'day of the week' match."
msgstr ""

#: ../../ref/models/querysets.txt:2608
msgid ""
"Takes an integer value representing the day of week from 1 (Sunday) to 7 "
"(Saturday)."
msgstr ""

#: ../../ref/models/querysets.txt:2615
msgid ""
"(No equivalent SQL code fragment is included for this lookup because "
"implementation of the relevant query varies among different database "
"engines.)"
msgstr ""

#: ../../ref/models/querysets.txt:2618
msgid ""
"Note this will match any record with a ``pub_date`` that falls on a Monday "
"(day 2 of the week), regardless of the month or year in which it occurs. "
"Week days are indexed with day 1 being Sunday and day 7 being Saturday."
msgstr ""

#: ../../ref/models/querysets.txt:2629
msgid "hour"
msgstr ""

#: ../../ref/models/querysets.txt:2631
msgid ""
"For datetime fields, an exact hour match. Takes an integer between 0 and 23."
msgstr ""

#: ../../ref/models/querysets.txt:2643 ../../ref/models/querysets.txt:2663
#: ../../ref/models/querysets.txt:2683
msgid ""
"When :setting:`USE_TZ` is ``True``, values are converted to the current time"
" zone before filtering."
msgstr ""

#: ../../ref/models/querysets.txt:2649
msgid "minute"
msgstr ""

#: ../../ref/models/querysets.txt:2651
msgid ""
"For datetime fields, an exact minute match. Takes an integer between 0 and "
"59."
msgstr ""

#: ../../ref/models/querysets.txt:2669
msgid "second"
msgstr ""

#: ../../ref/models/querysets.txt:2671
msgid ""
"For datetime fields, an exact second match. Takes an integer between 0 and "
"59."
msgstr ""

#: ../../ref/models/querysets.txt:2689
msgid "isnull"
msgstr ""

#: ../../ref/models/querysets.txt:2691
msgid ""
"Takes either ``True`` or ``False``, which correspond to SQL queries of ``IS "
"NULL`` and ``IS NOT NULL``, respectively."
msgstr ""

#: ../../ref/models/querysets.txt:2705
msgid "search"
msgstr ""

#: ../../ref/models/querysets.txt:2707
msgid ""
"A boolean full-text search, taking advantage of full-text indexing. This is "
"like :lookup:`contains` but is significantly faster due to full-text "
"indexing."
msgstr ""

#: ../../ref/models/querysets.txt:2718
msgid ""
"Note this is only available in MySQL and requires direct manipulation of the"
" database to add the full-text index. By default Django uses BOOLEAN MODE "
"for full text searches. See the `MySQL documentation`_ for additional "
"details."
msgstr ""

#: ../../ref/models/querysets.txt:2727
msgid "regex"
msgstr ""

#: ../../ref/models/querysets.txt:2729
msgid "Case-sensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2731
msgid ""
"The regular expression syntax is that of the database backend in use. In the"
" case of SQLite, which has no built in regular expression support, this "
"feature is provided by a (Python) user-defined REGEXP function, and the "
"regular expression syntax is therefore that of Python's ``re`` module."
msgstr ""

#: ../../ref/models/querysets.txt:2750
msgid ""
"Using raw strings (e.g., ``r'foo'`` instead of ``'foo'``) for passing in the"
" regular expression syntax is recommended."
msgstr ""

#: ../../ref/models/querysets.txt:2756
msgid "iregex"
msgstr ""

#: ../../ref/models/querysets.txt:2758
msgid "Case-insensitive regular expression match."
msgstr ""

#: ../../ref/models/querysets.txt:2777
msgid "Aggregation functions"
msgstr ""

#: ../../ref/models/querysets.txt:2781
msgid ""
"Django provides the following aggregation functions in the "
"``django.db.models`` module. For details on how to use these aggregate "
"functions, see :doc:`the topic guide on aggregation "
"</topics/db/aggregation>`. See the :class:`~django.db.models.Aggregate` "
"documentation to learn how to create your aggregates."
msgstr ""

#: ../../ref/models/querysets.txt:2789
msgid ""
"SQLite can't handle aggregation on date/time fields out of the box. This is "
"because there are no native date/time fields in SQLite and Django currently "
"emulates these features using a text field. Attempts to use aggregation on "
"date/time fields in SQLite will raise ``NotImplementedError``."
msgstr ""

#: ../../ref/models/querysets.txt:2797
msgid ""
"Aggregation functions return ``None`` when used with an empty ``QuerySet``. "
"For example, the ``Sum`` aggregation function returns ``None`` instead of "
"``0`` if the ``QuerySet`` contains no entries. An exception is ``Count``, "
"which does return ``0`` if the ``QuerySet`` is empty."
msgstr ""

#: ../../ref/models/querysets.txt:2802
msgid "All aggregates have the following parameters in common:"
msgstr ""

#: ../../ref/models/querysets.txt:2805
msgid "``expression``"
msgstr ""

#: ../../ref/models/querysets.txt:2807
msgid ""
"A string that references a field on the model, or a :doc:`query expression "
"</ref/models/expressions>`."
msgstr ""

#: ../../ref/models/querysets.txt:2812
msgid ""
"Aggregate functions are now able to reference multiple fields in complex "
"computations."
msgstr ""

#: ../../ref/models/querysets.txt:2816
msgid "``output_field``"
msgstr ""

#: ../../ref/models/querysets.txt:2818
msgid ""
"An optional argument that represents the :doc:`model field "
"</ref/models/fields>` of the return value"
msgstr ""

#: ../../ref/models/querysets.txt:2823
msgid "The ``output_field`` argument was added."
msgstr ""

#: ../../ref/models/querysets.txt:2827
msgid ""
"When combining multiple field types, Django can only determine the "
"``output_field`` if all fields are of the same type. Otherwise, you must "
"provide the ``output_field`` yourself."
msgstr ""

#: ../../ref/models/querysets.txt:2832
msgid "``**extra``"
msgstr ""

#: ../../ref/models/querysets.txt:2834
msgid ""
"Keyword arguments that can provide extra context for the SQL generated by "
"the aggregate."
msgstr ""

#: ../../ref/models/querysets.txt:2838
msgid "Avg"
msgstr ""

#: ../../ref/models/querysets.txt:2842
msgid "Returns the mean value of the given expression, which must be numeric."
msgstr ""

#: ../../ref/models/querysets.txt:2844
msgid "Default alias: ``<field>__avg``"
msgstr ""

#: ../../ref/models/querysets.txt:2845 ../../ref/models/querysets.txt:2894
#: ../../ref/models/querysets.txt:2928
msgid "Return type: ``float``"
msgstr ""

#: ../../ref/models/querysets.txt:2848
msgid "Count"
msgstr ""

#: ../../ref/models/querysets.txt:2852
msgid ""
"Returns the number of objects that are related through the provided "
"expression."
msgstr ""

#: ../../ref/models/querysets.txt:2855
msgid "Default alias: ``<field>__count``"
msgstr ""

#: ../../ref/models/querysets.txt:2856
msgid "Return type: ``int``"
msgstr ""

#: ../../ref/models/querysets.txt:2858 ../../ref/models/querysets.txt:2896
#: ../../ref/models/querysets.txt:2930
msgid "Has one optional argument:"
msgstr ""

#: ../../ref/models/querysets.txt:2862
msgid ""
"If ``distinct=True``, the count will only include unique instances. This is "
"the SQL equivalent of ``COUNT(DISTINCT <field>)``. The default value is "
"``False``."
msgstr ""

#: ../../ref/models/querysets.txt:2867
msgid "Max"
msgstr ""

#: ../../ref/models/querysets.txt:2871
msgid "Returns the maximum value of the given expression."
msgstr ""

#: ../../ref/models/querysets.txt:2873
msgid "Default alias: ``<field>__max``"
msgstr ""

#: ../../ref/models/querysets.txt:2874 ../../ref/models/querysets.txt:2884
#: ../../ref/models/querysets.txt:2918
msgid "Return type: same as input field, or ``output_field`` if supplied"
msgstr ""

#: ../../ref/models/querysets.txt:2877
msgid "Min"
msgstr ""

#: ../../ref/models/querysets.txt:2881
msgid "Returns the minimum value of the given expression."
msgstr ""

#: ../../ref/models/querysets.txt:2883
msgid "Default alias: ``<field>__min``"
msgstr ""

#: ../../ref/models/querysets.txt:2887
msgid "StdDev"
msgstr ""

#: ../../ref/models/querysets.txt:2891
msgid "Returns the standard deviation of the data in the provided expression."
msgstr ""

#: ../../ref/models/querysets.txt:2893
msgid "Default alias: ``<field>__stddev``"
msgstr ""

#: ../../ref/models/querysets.txt:2900
msgid ""
"By default, ``StdDev`` returns the population standard deviation. However, "
"if ``sample=True``, the return value will be the sample standard deviation."
msgstr ""

#: ../../ref/models/querysets.txt:2905
msgid ""
"SQLite doesn't provide ``StdDev`` out of the box. An implementation is "
"available as an extension module for SQLite. Consult the `SQlite "
"documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/querysets.txt:2911
msgid "Sum"
msgstr ""

#: ../../ref/models/querysets.txt:2915
msgid "Computes the sum of all values of the given expression."
msgstr ""

#: ../../ref/models/querysets.txt:2917
msgid "Default alias: ``<field>__sum``"
msgstr ""

#: ../../ref/models/querysets.txt:2921
msgid "Variance"
msgstr ""

#: ../../ref/models/querysets.txt:2925
msgid "Returns the variance of the data in the provided expression."
msgstr ""

#: ../../ref/models/querysets.txt:2927
msgid "Default alias: ``<field>__variance``"
msgstr ""

#: ../../ref/models/querysets.txt:2934
msgid ""
"By default, ``Variance`` returns the population variance. However, if "
"``sample=True``, the return value will be the sample variance."
msgstr ""

#: ../../ref/models/querysets.txt:2939
msgid ""
"SQLite doesn't provide ``Variance`` out of the box. An implementation is "
"available as an extension module for SQLite. Consult the `SQlite "
"documentation`_ for instructions on obtaining and installing this extension."
msgstr ""

#: ../../ref/models/querysets.txt:2947
msgid "Query-related classes"
msgstr ""

#: ../../ref/models/querysets.txt:2949
msgid ""
"This section provides reference material for query-related tools not "
"documented elsewhere."
msgstr ""

#: ../../ref/models/querysets.txt:2953
msgid "``Q()`` objects"
msgstr ""

#: ../../ref/models/querysets.txt:2957
msgid ""
"A ``Q()`` object, like an :class:`~django.db.models.F` object, encapsulates "
"a SQL expression in a Python object that can be used in database-related "
"operations."
msgstr ""

#: ../../ref/models/querysets.txt:2961
msgid ""
"In general, ``Q() objects`` make it possible to define and reuse conditions."
" This permits the :ref:`construction of complex database queries <complex-"
"lookups-with-q>` using ``|`` (``OR``) and ``&`` (``AND``) operators; in "
"particular, it is not otherwise possible to use ``OR`` in ``QuerySets``."
msgstr ""

#: ../../ref/models/querysets.txt:2967
msgid "``Prefetch()`` objects"
msgstr ""

#: ../../ref/models/querysets.txt:2973
msgid ""
"The ``Prefetch()`` object can be used to control the operation of "
":meth:`~django.db.models.query.QuerySet.prefetch_related()`."
msgstr ""

#: ../../ref/models/querysets.txt:2976
msgid ""
"The ``lookup`` argument describes the relations to follow and works the same"
" as the string based lookups passed to "
":meth:`~django.db.models.query.QuerySet.prefetch_related()`. For example:"
msgstr ""

#: ../../ref/models/querysets.txt:2987
msgid ""
"The ``queryset`` argument supplies a base ``QuerySet`` for the given lookup."
" This is useful to further filter down the prefetch operation, or to call "
":meth:`~django.db.models.query.QuerySet.select_related()` from the "
"prefetched relation, hence reducing the number of queries even further:"
msgstr ""

#: ../../ref/models/querysets.txt:2999
msgid ""
"The ``to_attr`` argument sets the result of the prefetch operation to a "
"custom attribute:"
msgstr ""

#: ../../ref/models/querysets.txt:3010
msgid ""
"When using ``to_attr`` the prefetched result is stored in a list. This can "
"provide a significant speed improvement over traditional "
"``prefetch_related`` calls which store the cached result within a "
"``QuerySet`` instance."
msgstr ""

#: ../../ref/models/relations.txt:3
msgid "Related objects reference"
msgstr ""

#: ../../ref/models/relations.txt:9
msgid ""
"A \"related manager\" is a manager used in a one-to-many or many-to-many "
"related context. This happens in two cases:"
msgstr ""

#: ../../ref/models/relations.txt:12
msgid ""
"The \"other side\" of a :class:`~django.db.models.ForeignKey` relation. That"
" is::"
msgstr ""

#: ../../ref/models/relations.txt:24
msgid ""
"In the above example, the methods below will be available on the manager "
"``reporter.article_set``."
msgstr ""

#: ../../ref/models/relations.txt:27
msgid "Both sides of a :class:`~django.db.models.ManyToManyField` relation::"
msgstr ""

#: ../../ref/models/relations.txt:36
msgid ""
"In this example, the methods below will be available both on "
"``topping.pizza_set`` and on ``pizza.toppings``."
msgstr ""

#: ../../ref/models/relations.txt:41
msgid "Adds the specified model objects to the related object set."
msgstr ""

#: ../../ref/models/relations.txt:49
msgid ""
"In the example above, in the case of a :class:`~django.db.models.ForeignKey`"
" relationship, ``e.save()`` is called by the related manager to perform the "
"update. Using ``add()`` with a many-to-many relationship, however, will not "
"call any ``save()`` methods, but rather create the relationships using "
":meth:`QuerySet.bulk_create() "
"<django.db.models.query.QuerySet.bulk_create>`. If you need to execute some "
"custom logic when a relationship is created, listen to the "
":data:`~django.db.models.signals.m2m_changed` signal."
msgstr ""

#: ../../ref/models/relations.txt:61
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object::"
msgstr ""

#: ../../ref/models/relations.txt:73
msgid "This is equivalent to (but much simpler than)::"
msgstr ""

#: ../../ref/models/relations.txt:84
msgid ""
"Note that there's no need to specify the keyword argument of the model that "
"defines the relationship. In the above example, we don't pass the parameter "
"``blog`` to ``create()``. Django figures out that the new ``Entry`` object's"
" ``blog`` field should be set to ``b``."
msgstr ""

#: ../../ref/models/relations.txt:91
msgid "Removes the specified model objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:97
msgid ""
"Similar to :meth:`add()`, ``e.save()`` is called in the example above to "
"perform the update. Using ``remove()`` with a many-to-many relationship, "
"however, will delete the relationships using "
":meth:`QuerySet.delete()<django.db.models.query.QuerySet.delete>` which "
"means no model ``save()`` methods are called; listen to the "
":data:`~django.db.models.signals.m2m_changed` signal if you wish to execute "
"custom code when a relationship is deleted."
msgstr ""

#: ../../ref/models/relations.txt:105
msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method only exists "
"if ``null=True``. If the related field can't be set to ``None`` (``NULL``), "
"then an object can't be removed from a relation without being added to "
"another. In the above example, removing ``e`` from ``b.entry_set()`` is "
"equivalent to doing ``e.blog = None``, and because the ``blog`` "
":class:`~django.db.models.ForeignKey` doesn't have ``null=True``, this is "
"invalid."
msgstr ""

#: ../../ref/models/relations.txt:115
msgid ""
"For :class:`~django.db.models.ForeignKey` objects, this method accepts a "
"``bulk`` argument to control how to perform the operation. If ``True`` (the "
"default), ``QuerySet.update()`` is used. If ``bulk=False``, the ``save()`` "
"method of each individual model instance is called instead. This triggers "
"the :data:`~django.db.models.signals.pre_save` and "
":data:`~django.db.models.signals.post_save` signals and comes at the expense"
" of performance."
msgstr ""

#: ../../ref/models/relations.txt:126
msgid "Removes all objects from the related object set::"
msgstr ""

#: ../../ref/models/relations.txt:131
msgid ""
"Note this doesn't delete the related objects -- it just disassociates them."
msgstr ""

#: ../../ref/models/relations.txt:134
msgid ""
"Just like ``remove()``, ``clear()`` is only available on "
":class:`~django.db.models.ForeignKey`\\s where ``null=True`` and it also "
"accepts the ``bulk`` keyword argument."
msgstr ""

#: ../../ref/models/relations.txt:140
msgid ""
"Note that ``add()``, ``create()``, ``remove()``, and ``clear()`` all apply "
"database changes immediately for all types of related fields. In other "
"words, there is no need to call ``save()`` on either end of the "
"relationship."
msgstr ""

#: ../../ref/models/relations.txt:145
msgid ""
"Also, if you are using :ref:`an intermediate model <intermediary-"
"manytomany>` for a many-to-many relationship, some of the related manager's "
"methods are disabled."
msgstr ""

#: ../../ref/models/relations.txt:152
msgid "Direct Assignment"
msgstr ""

#: ../../ref/models/relations.txt:154
msgid ""
"A related object set can be replaced in bulk with one operation by assigning"
" a new iterable of objects to it::"
msgstr ""

#: ../../ref/models/relations.txt:160
msgid ""
"If the foreign key relationship has ``null=True``, then the related manager "
"will first call ``clear()`` to disassociate any existing objects in the "
"related set before adding the contents of ``new_list``. Otherwise the "
"objects in ``new_list`` will be added to the existing related object set."
msgstr ""

#: ../../ref/request-response.txt:3
msgid "Request and response objects"
msgstr ""

#: ../../ref/request-response.txt:9
msgid "Quick overview"
msgstr ""

#: ../../ref/request-response.txt:11
msgid ""
"Django uses request and response objects to pass state through the system."
msgstr ""

#: ../../ref/request-response.txt:13
msgid ""
"When a page is requested, Django creates an :class:`HttpRequest` object that"
" contains metadata about the request. Then Django loads the appropriate "
"view, passing the :class:`HttpRequest` as the first argument to the view "
"function. Each view is responsible for returning an :class:`HttpResponse` "
"object."
msgstr ""

#: ../../ref/request-response.txt:18
msgid ""
"This document explains the APIs for :class:`HttpRequest` and "
":class:`HttpResponse` objects, which are defined in the :mod:`django.http` "
"module."
msgstr ""

#: ../../ref/request-response.txt:23
msgid "HttpRequest objects"
msgstr ""

#: ../../ref/request-response.txt:32
msgid ""
"All attributes should be considered read-only, unless stated otherwise."
msgstr ""

#: ../../ref/request-response.txt:38
msgid ""
"A string representing the scheme of the request (``http`` or ``https`` "
"usually)."
msgstr ""

#: ../../ref/request-response.txt:43
msgid ""
"The raw HTTP request body as a byte string. This is useful for processing "
"data in different ways than conventional HTML forms: binary images, XML "
"payload etc. For processing conventional form data, use "
"``HttpRequest.POST``."
msgstr ""

#: ../../ref/request-response.txt:47
msgid ""
"You can also read from an HttpRequest using a file-like interface. See "
":meth:`HttpRequest.read()`."
msgstr ""

#: ../../ref/request-response.txt:52
msgid ""
"A string representing the full path to the requested page, not including the"
" scheme or domain."
msgstr ""

#: ../../ref/request-response.txt:55
msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr ""

#: ../../ref/request-response.txt:59
msgid ""
"Under some Web server configurations, the portion of the URL after the host "
"name is split up into a script prefix portion and a path info portion. The "
"``path_info`` attribute always contains the path info portion of the path, "
"no matter what Web server is being used. Using this instead of "
":attr:`~HttpRequest.path` can make your code easier to move between test and"
" deployment servers."
msgstr ""

#: ../../ref/request-response.txt:66
msgid ""
"For example, if the ``WSGIScriptAlias`` for your application is set to "
"``\"/minfo\"``, then ``path`` might be "
"``\"/minfo/music/bands/the_beatles/\"`` and ``path_info`` would be "
"``\"/music/bands/the_beatles/\"``."
msgstr ""

#: ../../ref/request-response.txt:72
msgid ""
"A string representing the HTTP method used in the request. This is "
"guaranteed to be uppercase. Example::"
msgstr ""

#: ../../ref/request-response.txt:82
msgid ""
"A string representing the current encoding used to decode form submission "
"data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is "
"used). You can write to this attribute to change the encoding used when "
"accessing the form data. Any subsequent attribute accesses (such as reading "
"from ``GET`` or ``POST``) will use the new ``encoding`` value.  Useful if "
"you know the form data is not in the :setting:`DEFAULT_CHARSET` encoding."
msgstr ""

#: ../../ref/request-response.txt:91
msgid ""
"A dictionary-like object containing all given HTTP GET parameters. See the "
":class:`QueryDict` documentation below."
msgstr ""

#: ../../ref/request-response.txt:96
msgid ""
"A dictionary-like object containing all given HTTP POST parameters, "
"providing that the request contains form data. See the :class:`QueryDict` "
"documentation below. If you need to access raw or non-form data posted in "
"the request, access this through the :attr:`HttpRequest.body` attribute "
"instead."
msgstr ""

#: ../../ref/request-response.txt:102
msgid ""
"It's possible that a request can come in via POST with an empty ``POST`` "
"dictionary -- if, say, a form is requested via the POST HTTP method but does"
" not include form data. Therefore, you shouldn't use ``if request.POST`` to "
"check for use of the POST method; instead, use ``if request.method == "
"\"POST\"`` (see above)."
msgstr ""

#: ../../ref/request-response.txt:108
msgid ""
"Note: ``POST`` does *not* include file-upload information. See ``FILES``."
msgstr ""

#: ../../ref/request-response.txt:112
msgid "Use the more explicit ``GET`` and ``POST`` instead."
msgstr ""

#: ../../ref/request-response.txt:115
msgid ""
"For convenience, a dictionary-like object that searches ``POST`` first, then"
" ``GET``. Inspired by PHP's ``$_REQUEST``."
msgstr ""

#: ../../ref/request-response.txt:118
msgid ""
"For example, if ``GET = {\"name\": \"john\"}`` and ``POST = {\"age\": "
"'34'}``, ``REQUEST[\"name\"]`` would be ``\"john\"``, and "
"``REQUEST[\"age\"]`` would be ``\"34\"``."
msgstr ""

#: ../../ref/request-response.txt:122
msgid ""
"It's strongly suggested that you use ``GET`` and ``POST`` instead of "
"``REQUEST``, because the former are more explicit."
msgstr ""

#: ../../ref/request-response.txt:127
msgid ""
"A standard Python dictionary containing all cookies. Keys and values are "
"strings."
msgstr ""

#: ../../ref/request-response.txt:132
msgid ""
"A dictionary-like object containing all uploaded files. Each key in "
"``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\" />``. "
"Each value in ``FILES`` is an "
":class:`~django.core.files.uploadedfile.UploadedFile`."
msgstr ""

#: ../../ref/request-response.txt:136
msgid "See :doc:`/topics/files` for more information."
msgstr ""

#: ../../ref/request-response.txt:138
msgid ""
"Note that ``FILES`` will only contain data if the request method was POST "
"and the ``<form>`` that posted to the request had ``enctype=\"multipart"
"/form-data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""

#: ../../ref/request-response.txt:145
msgid ""
"A standard Python dictionary containing all available HTTP headers. "
"Available headers depend on the client and server, but here are some "
"examples:"
msgstr ""

#: ../../ref/request-response.txt:149
msgid "``CONTENT_LENGTH`` -- The length of the request body (as a string)."
msgstr ""

#: ../../ref/request-response.txt:150
msgid "``CONTENT_TYPE`` -- The MIME type of the request body."
msgstr ""

#: ../../ref/request-response.txt:151
msgid "``HTTP_ACCEPT`` -- Acceptable content types for the response."
msgstr ""

#: ../../ref/request-response.txt:152
msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr ""

#: ../../ref/request-response.txt:153
msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr ""

#: ../../ref/request-response.txt:154
msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr ""

#: ../../ref/request-response.txt:155
msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr ""

#: ../../ref/request-response.txt:156
msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr ""

#: ../../ref/request-response.txt:157
msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr ""

#: ../../ref/request-response.txt:158
msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr ""

#: ../../ref/request-response.txt:159
msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr ""

#: ../../ref/request-response.txt:160
msgid "``REMOTE_USER`` -- The user authenticated by the Web server, if any."
msgstr ""

#: ../../ref/request-response.txt:161
msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr ""

#: ../../ref/request-response.txt:162
msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr ""

#: ../../ref/request-response.txt:163
msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr ""

#: ../../ref/request-response.txt:165
msgid ""
"With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given "
"above, any HTTP headers in the request are converted to ``META`` keys by "
"converting all characters to uppercase, replacing any hyphens with "
"underscores and adding an ``HTTP_`` prefix to the name. So, for example, a "
"header called ``X-Bender`` would be mapped to the ``META`` key "
"``HTTP_X_BENDER``."
msgstr ""

#: ../../ref/request-response.txt:172
msgid ""
"Note that :djadmin:`runserver` strips all headers with underscores in the "
"name, so you won't see them in ``META``. This prevents header-spoofing based"
" on ambiguity between underscores and dashes both being normalizing to "
"underscores in WSGI environment variables. It matches the behavior of Web "
"servers like Nginx and Apache 2.4+."
msgstr ""

#: ../../ref/request-response.txt:180
msgid ""
"Not defined by Django itself, but will be read if other code (e.g., a custom"
" middleware class) sets it. When present, this will be used as the root "
"URLconf for the current request, overriding the :setting:`ROOT_URLCONF` "
"setting. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/request-response.txt:187
msgid ""
"An instance of :class:`~django.core.urlresolvers.ResolverMatch` representing"
" the resolved url. This attribute is only set after url resolving took "
"place, which means it's available in all views but not in middleware methods"
" which are executed before url resolving takes place (like "
"``process_request``, you can use ``process_view`` instead)."
msgstr ""

#: ../../ref/request-response.txt:197
msgid ""
"Not defined by Django itself, but if set, the :ttag:`url` template tag will "
"use its value as the ``current_app`` argument to "
":func:`~django.core.urlresolvers.reverse()`."
msgstr ""

#: ../../ref/request-response.txt:202
msgid "Attributes set by middleware"
msgstr ""

#: ../../ref/request-response.txt:204
msgid ""
"Some of the middleware included in Django's contrib apps set attributes on "
"the request. If you don't see the attribute on a request, be sure the "
"appropriate middleware class is listed in :setting:`MIDDLEWARE_CLASSES`."
msgstr ""

#: ../../ref/request-response.txt:210
msgid ""
"From the :class:`~django.contrib.sessions.middleware.SessionMiddleware`: A "
"readable and writable, dictionary-like object that represents the current "
"session."
msgstr ""

#: ../../ref/request-response.txt:216
msgid ""
"From the :class:`~django.contrib.sites.middleware.CurrentSiteMiddleware`: An"
" instance of :class:`~django.contrib.sites.models.Site` or "
":class:`~django.contrib.sites.requests.RequestSite` as returned by "
":func:`~django.contrib.sites.shortcuts.get_current_site()` representing the "
"current site."
msgstr ""

#: ../../ref/request-response.txt:224
msgid ""
"From the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware`: "
"An instance of :setting:`AUTH_USER_MODEL` representing the currently logged-"
"in user. If the user isn't currently logged in, ``user`` will be set to an "
"instance of :class:`~django.contrib.auth.models.AnonymousUser`. You can tell"
" them apart with :meth:`~django.contrib.auth.models.User.is_authenticated`, "
"like so::"
msgstr ""

#: ../../ref/request-response.txt:241
msgid ""
"Returns the originating host of the request using information from the "
"``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) "
"and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the"
" method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as "
"detailed in :pep:`3333`."
msgstr ""

#: ../../ref/request-response.txt:247
msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr ""

#: ../../ref/request-response.txt:249
msgid ""
"The :meth:`~HttpRequest.get_host()` method fails when the host is behind "
"multiple proxies. One solution is to use middleware to rewrite the proxy "
"headers, as in the following example::"
msgstr ""

#: ../../ref/request-response.txt:271
msgid ""
"This middleware should be positioned before any other middleware that relies"
" on the value of :meth:`~HttpRequest.get_host()` -- for instance, "
":class:`~django.middleware.common.CommonMiddleware` or "
":class:`~django.middleware.csrf.CsrfViewMiddleware`."
msgstr ""

#: ../../ref/request-response.txt:278
msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr ""

#: ../../ref/request-response.txt:280
msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:284
msgid ""
"Returns the absolute URI form of ``location``. If no location is provided, "
"the location will be set to ``request.get_full_path()``."
msgstr ""

#: ../../ref/request-response.txt:287
msgid ""
"If the location is already an absolute URI, it will not be altered. "
"Otherwise the absolute URI is built using the server variables available in "
"this request."
msgstr ""

#: ../../ref/request-response.txt:291
msgid "Example: ``\"http://example.com/music/bands/the_beatles/?print=true\"``"
msgstr ""

#: ../../ref/request-response.txt:295
msgid ""
"Returns a cookie value for a signed cookie, or raises a "
"``django.core.signing.BadSignature`` exception if the signature is no longer"
" valid. If you provide the ``default`` argument the exception will be "
"suppressed and that default value will be returned instead."
msgstr ""

#: ../../ref/request-response.txt:300
msgid ""
"The optional ``salt`` argument can be used to provide extra protection "
"against brute force attacks on your secret key. If supplied, the ``max_age``"
" argument will be checked against the signed timestamp attached to the "
"cookie value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""

#: ../../ref/request-response.txt:326
msgid ""
"See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""

#: ../../ref/request-response.txt:330
msgid ""
"Returns ``True`` if the request is secure; that is, if it was made with "
"HTTPS."
msgstr ""

#: ../../ref/request-response.txt:335
msgid ""
"Returns ``True`` if the request was made via an ``XMLHttpRequest``, by "
"checking the ``HTTP_X_REQUESTED_WITH`` header for the string "
"``'XMLHttpRequest'``. Most modern JavaScript libraries send this header. If "
"you write your own XMLHttpRequest call (on the browser side), you'll have to"
" set this header manually if you want ``is_ajax()`` to work."
msgstr ""

#: ../../ref/request-response.txt:341
msgid ""
"If a response varies on whether or not it's requested via AJAX and you are "
"using some form of caching like Django's :mod:`cache middleware "
"<django.middleware.cache>`, you should decorate the view with "
":func:`vary_on_headers('HTTP_X_REQUESTED_WITH') "
"<django.views.decorators.vary.vary_on_headers>` so that the responses are "
"properly cached."
msgstr ""

#: ../../ref/request-response.txt:354
msgid ""
"Methods implementing a file-like interface for reading from an HttpRequest "
"instance. This makes it possible to consume an incoming request in a "
"streaming fashion. A common use-case would be to process a big XML payload "
"with an iterative parser without constructing a whole XML tree in memory."
msgstr ""

#: ../../ref/request-response.txt:360
msgid ""
"Given this standard interface, an HttpRequest instance can be passed "
"directly to an XML parser such as ElementTree::"
msgstr ""

#: ../../ref/request-response.txt:369
msgid "QueryDict objects"
msgstr ""

#: ../../ref/request-response.txt:373
msgid ""
"In an :class:`HttpRequest` object, the ``GET`` and ``POST`` attributes are "
"instances of ``django.http.QueryDict``, a dictionary-like class customized "
"to deal with multiple values for the same key. This is necessary because "
"some HTML form elements, notably ``<select multiple>``, pass multiple values"
" for the same key."
msgstr ""

#: ../../ref/request-response.txt:379
msgid ""
"The ``QueryDict``\\ s at ``request.POST`` and ``request.GET`` will be "
"immutable when accessed in a normal request/response cycle. To get a mutable"
" version you need to use ``.copy()``."
msgstr ""

#: ../../ref/request-response.txt:386
msgid ""
":class:`QueryDict` implements all the standard dictionary methods because "
"it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""

#: ../../ref/request-response.txt:391
msgid "Instantiates a ``QueryDict`` object based on ``query_string``."
msgstr ""

#: ../../ref/request-response.txt:396
msgid ""
"If ``query_string`` is not passed in, the resulting ``QueryDict`` will be "
"empty (it will have no keys or values)."
msgstr ""

#: ../../ref/request-response.txt:399
msgid ""
"Most ``QueryDict``\\ s you encounter, and in particular those at "
"``request.POST`` and ``request.GET``, will be immutable. If you are "
"instantiating one yourself, you can make it mutable by passing "
"``mutable=True`` to its ``__init__()``."
msgstr ""

#: ../../ref/request-response.txt:404
msgid ""
"Strings for setting both keys and values will be converted from ``encoding``"
" to unicode. If encoding is not set, it defaults to "
":setting:`DEFAULT_CHARSET`."
msgstr ""

#: ../../ref/request-response.txt:409
msgid ""
"In previous versions, ``query_string`` was a required positional argument."
msgstr ""

#: ../../ref/request-response.txt:413
msgid ""
"Returns the value for the given key. If the key has more than one value, "
"``__getitem__()`` returns the last value. Raises "
"``django.utils.datastructures.MultiValueDictKeyError`` if the key does not "
"exist. (This is a subclass of Python's standard ``KeyError``, so you can "
"stick to catching ``KeyError``.)"
msgstr ""

#: ../../ref/request-response.txt:421
msgid ""
"Sets the given key to ``[value]`` (a Python list whose single element is "
"``value``). Note that this, as other dictionary functions that have side "
"effects, can only be called on a mutable ``QueryDict`` (such as one that was"
" created via ``copy()``)."
msgstr ""

#: ../../ref/request-response.txt:428
msgid ""
"Returns ``True`` if the given key is set. This lets you do, e.g., ``if "
"\"foo\" in request.GET``."
msgstr ""

#: ../../ref/request-response.txt:433
msgid ""
"Uses the same logic as ``__getitem__()`` above, with a hook for returning a "
"default value if the key doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:438
msgid ""
"Just like the standard dictionary ``setdefault()`` method, except it uses "
"``__setitem__()`` internally."
msgstr ""

#: ../../ref/request-response.txt:443
msgid ""
"Takes either a ``QueryDict`` or standard dictionary. Just like the standard "
"dictionary ``update()`` method, except it *appends* to the current "
"dictionary items rather than replacing them. For example::"
msgstr ""

#: ../../ref/request-response.txt:456
msgid ""
"Just like the standard dictionary ``items()`` method, except this uses the "
"same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:465
msgid ""
"Just like the standard dictionary ``iteritems()`` method. Like "
":meth:`QueryDict.items()` this uses the same last-value logic as "
":meth:`QueryDict.__getitem__()`."
msgstr ""

#: ../../ref/request-response.txt:471
msgid ""
"Like :meth:`QueryDict.iteritems()` except it includes all values, as a list,"
" for each member of the dictionary."
msgstr ""

#: ../../ref/request-response.txt:476
msgid ""
"Just like the standard dictionary ``values()`` method, except this uses the "
"same last-value logic as ``__getitem__()``. For example::"
msgstr ""

#: ../../ref/request-response.txt:485
msgid "Just like :meth:`QueryDict.values()`, except an iterator."
msgstr ""

#: ../../ref/request-response.txt:487
msgid "In addition, ``QueryDict`` has the following methods:"
msgstr ""

#: ../../ref/request-response.txt:491
msgid ""
"Returns a copy of the object, using ``copy.deepcopy()`` from the Python "
"standard library. This copy will be mutable even if the original was not."
msgstr ""

#: ../../ref/request-response.txt:496
msgid ""
"Returns the data with the requested key, as a Python list. Returns an empty "
"list if the key doesn't exist and no default value was provided. It's "
"guaranteed to return a list of some sort unless the default value provided "
"is not a list."
msgstr ""

#: ../../ref/request-response.txt:503
msgid "Sets the given key to ``list_`` (unlike ``__setitem__()``)."
msgstr ""

#: ../../ref/request-response.txt:507
msgid "Appends an item to the internal list associated with key."
msgstr ""

#: ../../ref/request-response.txt:511
msgid ""
"Just like ``setdefault``, except it takes a list of values instead of a "
"single value."
msgstr ""

#: ../../ref/request-response.txt:516
msgid ""
"Like :meth:`items()`, except it includes all values, as a list, for each "
"member of the dictionary. For example::"
msgstr ""

#: ../../ref/request-response.txt:525
msgid ""
"Returns a list of values for the given key and removes them from the "
"dictionary. Raises ``KeyError`` if the key does not exist. For example::"
msgstr ""

#: ../../ref/request-response.txt:534
msgid ""
"Removes an arbitrary member of the dictionary (since there's no concept of "
"ordering), and returns a two value tuple containing the key and a list of "
"all values for the key. Raises ``KeyError`` when called on an empty "
"dictionary. For example::"
msgstr ""

#: ../../ref/request-response.txt:545
msgid ""
"Returns ``dict`` representation of ``QueryDict``. For every (key, list) pair"
" in ``QueryDict``, ``dict`` will have (key, item), where item is one element"
" of the list, using same logic as :meth:`QueryDict.__getitem__()`::"
msgstr ""

#: ../../ref/request-response.txt:555
msgid "Returns a string of the data in query-string format. Example::"
msgstr ""

#: ../../ref/request-response.txt:561
msgid ""
"Optionally, urlencode can be passed characters which do not require "
"encoding. For example::"
msgstr ""

#: ../../ref/request-response.txt:570
msgid "HttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:574
msgid ""
"In contrast to :class:`HttpRequest` objects, which are created automatically"
" by Django, :class:`HttpResponse` objects are your responsibility. Each view"
" you write is responsible for instantiating, populating and returning an "
":class:`HttpResponse`."
msgstr ""

#: ../../ref/request-response.txt:579
msgid ""
"The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ""

#: ../../ref/request-response.txt:585
msgid "Passing strings"
msgstr ""

#: ../../ref/request-response.txt:587
msgid ""
"Typical usage is to pass the contents of the page, as a string, to the "
":class:`HttpResponse` constructor::"
msgstr ""

#: ../../ref/request-response.txt:594
msgid ""
"But if you want to add content incrementally, you can use ``response`` as a "
"file-like object::"
msgstr ""

#: ../../ref/request-response.txt:602
msgid "Passing iterators"
msgstr ""

#: ../../ref/request-response.txt:604
msgid ""
"Finally, you can pass ``HttpResponse`` an iterator rather than strings. "
"``HttpResponse`` will consume the iterator immediately, store its content as"
" a string, and discard it."
msgstr ""

#: ../../ref/request-response.txt:608
msgid ""
"If you need the response to be streamed from the iterator to the client, you"
" must use the :class:`StreamingHttpResponse` class instead."
msgstr ""

#: ../../ref/request-response.txt:612
msgid "Setting header fields"
msgstr ""

#: ../../ref/request-response.txt:614
msgid ""
"To set or remove a header field in your response, treat it like a "
"dictionary::"
msgstr ""

#: ../../ref/request-response.txt:620
msgid ""
"Note that unlike a dictionary, ``del`` doesn't raise ``KeyError`` if the "
"header field doesn't exist."
msgstr ""

#: ../../ref/request-response.txt:623
msgid ""
"For setting the ``Cache-Control`` and ``Vary`` header fields, it is "
"recommended to use the :func:`~django.utils.cache.patch_cache_control` and "
":func:`~django.utils.cache.patch_vary_headers` methods from "
":mod:`django.utils.cache`, since these fields can have multiple, comma-"
"separated values. The \"patch\" methods ensure that other values, e.g. added"
" by a middleware, are not removed."
msgstr ""

#: ../../ref/request-response.txt:630
msgid ""
"HTTP header fields cannot contain newlines. An attempt to set a header field"
" containing a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""

#: ../../ref/request-response.txt:634
msgid "Telling the browser to treat the response as a file attachment"
msgstr ""

#: ../../ref/request-response.txt:636
msgid ""
"To tell the browser to treat the response as a file attachment, use the "
"``content_type`` argument and set the ``Content-Disposition`` header. For "
"example, this is how you might return a Microsoft Excel spreadsheet::"
msgstr ""

#: ../../ref/request-response.txt:643
msgid ""
"There's nothing Django-specific about the ``Content-Disposition`` header, "
"but it's easy to forget the syntax, so we've included it here."
msgstr ""

#: ../../ref/request-response.txt:651
msgid ""
"A bytestring representing the content, encoded from a Unicode object if "
"necessary."
msgstr ""

#: ../../ref/request-response.txt:658
msgid ""
"A string denoting the charset in which the response will be encoded. If not "
"given at ``HttpResponse`` instantiation time, it will be extracted from "
"``content_type`` and if that is unsuccessful, the :setting:`DEFAULT_CHARSET`"
" setting will be used."
msgstr ""

#: ../../ref/request-response.txt:665 ../../ref/request-response.txt:1014
msgid "The `HTTP status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:669 ../../ref/request-response.txt:1018
msgid "The HTTP reason phrase for the response."
msgstr ""

#: ../../ref/request-response.txt:673
msgid "This is always ``False``."
msgstr ""

#: ../../ref/request-response.txt:675
msgid ""
"This attribute exists so middleware can treat streaming responses "
"differently from regular responses."
msgstr ""

#: ../../ref/request-response.txt:682
msgid "``True`` if the response has been closed."
msgstr ""

#: ../../ref/request-response.txt:689
msgid ""
"Instantiates an ``HttpResponse`` object with the given page content and "
"content type."
msgstr ""

#: ../../ref/request-response.txt:692
msgid ""
"``content`` should be an iterator or a string. If it's an iterator, it "
"should return strings, and those strings will be joined together to form the"
" content of the response. If it is not an iterator or a string, it will be "
"converted to a string when accessed."
msgstr ""

#: ../../ref/request-response.txt:698
msgid ""
"``content_type`` is the MIME type optionally completed by a character set "
"encoding and is used to fill the HTTP ``Content-Type`` header. If not "
"specified, it is formed by the :setting:`DEFAULT_CONTENT_TYPE` and "
":setting:`DEFAULT_CHARSET` settings, by default: \"`text/html; "
"charset=utf-8`\"."
msgstr ""

#: ../../ref/request-response.txt:703
msgid "``status`` is the `HTTP status code`_ for the response."
msgstr ""

#: ../../ref/request-response.txt:705
msgid ""
"``reason`` is the HTTP response phrase. If not provided, a default phrase "
"will be used."
msgstr ""

#: ../../ref/request-response.txt:708
msgid ""
"``charset`` is the charset in which the response will be encoded. If not "
"given it will be extracted from ``content_type``, and if that is "
"unsuccessful, the :setting:`DEFAULT_CHARSET` setting will be used."
msgstr ""

#: ../../ref/request-response.txt:714
msgid "The ``charset`` parameter was added."
msgstr ""

#: ../../ref/request-response.txt:718
msgid ""
"Sets the given header name to the given value. Both ``header`` and ``value``"
" should be strings."
msgstr ""

#: ../../ref/request-response.txt:723
msgid ""
"Deletes the header with the given name. Fails silently if the header doesn't"
" exist. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:728
msgid "Returns the value for the given header name. Case-insensitive."
msgstr ""

#: ../../ref/request-response.txt:732
msgid ""
"Returns ``True`` or ``False`` based on a case-insensitive check for a header"
" with the given name."
msgstr ""

#: ../../ref/request-response.txt:739
msgid "Sets a header unless it has already been set."
msgstr ""

#: ../../ref/request-response.txt:743
msgid ""
"Sets a cookie. The parameters are the same as in the "
":class:`~http.cookies.Morsel` cookie object in the Python standard library."
msgstr ""

#: ../../ref/request-response.txt:746
msgid ""
"``max_age`` should be a number of seconds, or ``None`` (default) if the "
"cookie should last only as long as the client's browser session. If "
"``expires`` is not specified, it will be calculated."
msgstr ""

#: ../../ref/request-response.txt:749
msgid ""
"``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY "
"HH:MM:SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is"
" a ``datetime`` object, the ``max_age`` will be calculated."
msgstr ""

#: ../../ref/request-response.txt:753
msgid ""
"Use ``domain`` if you want to set a cross-domain cookie. For example, "
"``domain=\".lawrence.com\"`` will set a cookie that is readable by the "
"domains www.lawrence.com, blogs.lawrence.com and calendars.lawrence.com. "
"Otherwise, a cookie will only be readable by the domain that set it."
msgstr ""

#: ../../ref/request-response.txt:758
msgid ""
"Use ``httponly=True`` if you want to prevent client-side JavaScript from "
"having access to the cookie."
msgstr ""

#: ../../ref/request-response.txt:761
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not"
" part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of a client-side script from accessing the "
"protected cookie data."
msgstr ""

#: ../../ref/request-response.txt:772
msgid ""
"Both :rfc:`2109` and :rfc:`6265` state that user agents should support "
"cookies of at least 4096 bytes. For many browsers this is also the maximum "
"size. Django will not raise an exception if there's an attempt to store a "
"cookie of more than 4096 bytes, but many browsers will not set the cookie "
"correctly."
msgstr ""

#: ../../ref/request-response.txt:780
msgid ""
"Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing "
"</topics/signing>` the cookie before setting it. Use in conjunction with "
":meth:`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` "
"argument for added key strength, but you will need to remember to pass it to"
" the corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""

#: ../../ref/request-response.txt:789
msgid ""
"Deletes the cookie with the given key. Fails silently if the key doesn't "
"exist."
msgstr ""

#: ../../ref/request-response.txt:792
msgid ""
"Due to the way cookies work, ``path`` and ``domain`` should be the same "
"values you used in ``set_cookie()`` -- otherwise the cookie may not be "
"deleted."
msgstr ""

#: ../../ref/request-response.txt:798 ../../ref/request-response.txt:802
#: ../../ref/request-response.txt:806
msgid ""
"This method makes an :class:`HttpResponse` instance a file-like object."
msgstr ""

#: ../../ref/request-response.txt:812
msgid ""
"Returns the value of :attr:`HttpResponse.content`. This method makes an "
":class:`HttpResponse` instance a stream-like object."
msgstr ""

#: ../../ref/request-response.txt:819
msgid ""
"Always ``True``. This method makes an :class:`HttpResponse` instance a "
"stream-like object."
msgstr ""

#: ../../ref/request-response.txt:826
msgid ""
"Writes a list of lines to the response. Line separators are not added. This "
"method makes an :class:`HttpResponse` instance a stream-like object."
msgstr ""

#: ../../ref/request-response.txt:834
msgid "HttpResponse subclasses"
msgstr ""

#: ../../ref/request-response.txt:836
msgid ""
"Django includes a number of ``HttpResponse`` subclasses that handle "
"different types of HTTP responses. Like ``HttpResponse``, these subclasses "
"live in :mod:`django.http`."
msgstr ""

#: ../../ref/request-response.txt:842
msgid ""
"The first argument to the constructor is required -- the path to redirect "
"to. This can be a fully qualified URL (e.g. "
"``'http://www.yahoo.com/search/'``) or an absolute path with no domain (e.g."
" ``'/search/'``). See :class:`HttpResponse` for other optional constructor "
"arguments. Note that this returns an HTTP status code 302."
msgstr ""

#: ../../ref/request-response.txt:850
msgid ""
"This read-only attribute represents the URL the response will redirect to "
"(equivalent to the ``Location`` response header)."
msgstr ""

#: ../../ref/request-response.txt:855
msgid ""
"Like :class:`HttpResponseRedirect`, but it returns a permanent redirect "
"(HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""

#: ../../ref/request-response.txt:860
msgid ""
"The constructor doesn't take any arguments and no content should be added to"
" this response. Use this to designate that a page hasn't been modified since"
" the user's last request (status code 304)."
msgstr ""

#: ../../ref/request-response.txt:866
msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr ""

#: ../../ref/request-response.txt:870
msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr ""

#: ../../ref/request-response.txt:874
msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr ""

#: ../../ref/request-response.txt:878
msgid ""
"Like :class:`HttpResponse`, but uses a 405 status code. The first argument "
"to the constructor is required: a list of permitted methods (e.g. ``['GET', "
"'POST']``)."
msgstr ""

#: ../../ref/request-response.txt:884
msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr ""

#: ../../ref/request-response.txt:888
msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr ""

#: ../../ref/request-response.txt:892
msgid ""
"If a custom subclass of :class:`HttpResponse` implements a ``render`` "
"method, Django will treat it as emulating a "
":class:`~django.template.response.SimpleTemplateResponse`, and the "
"``render`` method must itself return a valid response object."
msgstr ""

#: ../../ref/request-response.txt:898
msgid "JsonResponse objects"
msgstr ""

#: ../../ref/request-response.txt:904
msgid ""
"An :class:`HttpResponse` subclass that helps to create a JSON-encoded "
"response. It inherits most behavior from its superclass with a couple "
"differences:"
msgstr ""

#: ../../ref/request-response.txt:908
msgid "Its default ``Content-Type`` header is set to ``application/json``."
msgstr ""

#: ../../ref/request-response.txt:910
msgid ""
"The first parameter, ``data``, should be a ``dict`` instance. If the "
"``safe`` parameter is set to ``False`` (see below) it can be any JSON-"
"serializable object."
msgstr ""

#: ../../ref/request-response.txt:914
msgid ""
"The ``encoder``, which defaults to "
"``django.core.serializers.json.DjangoJSONEncoder``, will be used to "
"serialize the data. See :ref:`JSON serialization <serialization-formats-"
"json>` for more details about this serializer."
msgstr ""

#: ../../ref/request-response.txt:919
msgid ""
"The ``safe`` boolean parameter defaults to ``True``. If it's set to "
"``False``, any object can be passed for serialization (otherwise only "
"``dict`` instances are allowed). If ``safe`` is ``True`` and a non-``dict`` "
"object is passed as the first argument, a :exc:`TypeError` will be raised."
msgstr ""

#: ../../ref/request-response.txt:927
msgid "Typical usage could look like::"
msgstr ""

#: ../../ref/request-response.txt:936
msgid "Serializing non-dictionary objects"
msgstr ""

#: ../../ref/request-response.txt:938
msgid ""
"In order to serialize objects other than ``dict`` you must set the ``safe`` "
"parameter to ``False``::"
msgstr ""

#: ../../ref/request-response.txt:943
msgid "Without passing ``safe=False``, a :exc:`TypeError` will be raised."
msgstr ""

#: ../../ref/request-response.txt:947
msgid ""
"Before the `5th edition of EcmaScript <http://www.ecma-"
"international.org/publications/standards/Ecma-262.htm>`_ it was possible to "
"poison the JavaScript ``Array`` constructor. For this reason, Django does "
"not allow passing non-dict objects to the :class:`~django.http.JsonResponse`"
" constructor by default.  However, most modern browsers implement EcmaScript"
" 5 which removes this attack vector. Therefore it is possible to disable "
"this security precaution."
msgstr ""

#: ../../ref/request-response.txt:956
msgid "Changing the default JSON encoder"
msgstr ""

#: ../../ref/request-response.txt:958
msgid ""
"If you need to use a different JSON encoder class you can pass the "
"``encoder`` parameter to the constructor method::"
msgstr ""

#: ../../ref/request-response.txt:966
msgid "StreamingHttpResponse objects"
msgstr ""

#: ../../ref/request-response.txt:970
msgid ""
"The :class:`StreamingHttpResponse` class is used to stream a response from "
"Django to the browser. You might want to do this if generating the response "
"takes too long or uses too much memory. For instance, it's useful for "
":ref:`generating large CSV files <streaming-csv-files>`."
msgstr ""

#: ../../ref/request-response.txt:977
msgid ""
"Django is designed for short-lived requests. Streaming responses will tie a "
"worker process for the entire duration of the response. This may result in "
"poor performance."
msgstr ""

#: ../../ref/request-response.txt:981
msgid ""
"Generally speaking, you should perform expensive tasks outside of the "
"request-response cycle, rather than resorting to a streamed response."
msgstr ""

#: ../../ref/request-response.txt:984
msgid ""
"The :class:`StreamingHttpResponse` is not a subclass of "
":class:`HttpResponse`, because it features a slightly different API. "
"However, it is almost identical, with the following notable differences:"
msgstr ""

#: ../../ref/request-response.txt:988
msgid "It should be given an iterator that yields strings as content."
msgstr ""

#: ../../ref/request-response.txt:990
msgid ""
"You cannot access its content, except by iterating the response object "
"itself. This should only occur when the response is returned to the client."
msgstr ""

#: ../../ref/request-response.txt:993
msgid ""
"It has no ``content`` attribute. Instead, it has a "
":attr:`~StreamingHttpResponse.streaming_content` attribute."
msgstr ""

#: ../../ref/request-response.txt:996
msgid ""
"You cannot use the file-like object ``tell()`` or ``write()`` methods. Doing"
" so will raise an exception."
msgstr ""

#: ../../ref/request-response.txt:999
msgid ""
":class:`StreamingHttpResponse` should only be used in situations where it is"
" absolutely required that the whole content isn't iterated before "
"transferring the data to the client. Because the content can't be accessed, "
"many middlewares can't function normally. For example the ``ETag`` and "
"``Content- Length`` headers can't be generated for streaming responses."
msgstr ""

#: ../../ref/request-response.txt:1010
msgid "An iterator of strings representing the content."
msgstr ""

#: ../../ref/request-response.txt:1022
msgid "This is always ``True``."
msgstr ""

#: ../../ref/request-response.txt:1025
msgid "FileResponse objects"
msgstr ""

#: ../../ref/request-response.txt:1031
msgid ""
":class:`FileResponse` is a subclass of :class:`StreamingHttpResponse` "
"optimized for binary files. It uses `wsgi.file_wrapper`_ if provided by the "
"wsgi server, otherwise it streams the file out in small chunks."
msgstr ""

#: ../../ref/request-response.txt:1037
msgid "``FileResponse`` expects a file open in binary mode like so::"
msgstr ""

#: ../../ref/schema-editor.txt:3
msgid "``SchemaEditor``"
msgstr ""

#: ../../ref/schema-editor.txt:9
msgid ""
"Django's migration system is split into two parts; the logic for calculating"
" and storing what operations should be run (``django.db.migrations``), and "
"the database abstraction layer that turns things like \"create a model\" or "
"\"delete a field\" into SQL - which is the job of the ``SchemaEditor``."
msgstr ""

#: ../../ref/schema-editor.txt:14
msgid ""
"It's unlikely that you will want to interact directly with ``SchemaEditor`` "
"as a normal developer using Django, but if you want to write your own "
"migration system, or have more advanced needs, it's a lot nicer than writing"
" SQL."
msgstr ""

#: ../../ref/schema-editor.txt:18
msgid ""
"Each database backend in Django supplies its own version of "
"``SchemaEditor``, and it's always accessible via the "
"``connection.schema_editor()`` context manager::"
msgstr ""

#: ../../ref/schema-editor.txt:25
msgid ""
"It must be used via the context manager as this allows it to manage things "
"like transactions and deferred SQL (like creating ``ForeignKey`` "
"constraints)."
msgstr ""

#: ../../ref/schema-editor.txt:28
msgid ""
"It exposes all possible operations as methods, that should be called in the "
"order you wish changes to be applied. Some possible operations or types of "
"change are not possible on all databases - for example, MyISAM does not "
"support foreign key constraints."
msgstr ""

#: ../../ref/schema-editor.txt:33
msgid ""
"If you are writing or maintaining a third-party database backend for Django,"
" you will need to provide a ``SchemaEditor`` implementation in order to work"
" with 1.7's migration functionality - however, as long as your database is "
"relatively standard in its use of SQL and relational design, you should be "
"able to subclass one of the built-in Django ``SchemaEditor`` classes and "
"just tweak the syntax a little. Also note that there are a few new database "
"features that migrations will look for: ``can_rollback_ddl`` and "
"``supports_combined_alters`` are the most important."
msgstr ""

#: ../../ref/schema-editor.txt:46
msgid "execute"
msgstr ""

#: ../../ref/schema-editor.txt:50
msgid ""
"Executes the SQL statement passed in, with parameters if supplied. This is a"
" simple wrapper around the normal database cursors that allows capture of "
"the SQL to a ``.sql`` file if the user wishes."
msgstr ""

#: ../../ref/schema-editor.txt:55
msgid "create_model"
msgstr ""

#: ../../ref/schema-editor.txt:59
msgid ""
"Creates a new table in the database for the provided model, along with any "
"unique constraints or indexes it requires."
msgstr ""

#: ../../ref/schema-editor.txt:63
msgid "delete_model"
msgstr ""

#: ../../ref/schema-editor.txt:67
msgid ""
"Drops the model's table in the database along with any unique constraints or"
" indexes it has."
msgstr ""

#: ../../ref/schema-editor.txt:71
msgid "alter_unique_together"
msgstr ""

#: ../../ref/schema-editor.txt:75
msgid ""
"Changes a model's :attr:`~django.db.models.Options.unique_together` value; "
"this will add or remove unique constraints from the model's table until they"
" match the new value."
msgstr ""

#: ../../ref/schema-editor.txt:80
msgid "alter_index_together"
msgstr ""

#: ../../ref/schema-editor.txt:84
msgid ""
"Changes a model's :attr:`~django.db.models.Options.index_together` value; "
"this will add or remove indexes from the model's table until they match the "
"new value."
msgstr ""

#: ../../ref/schema-editor.txt:89
msgid "alter_db_table"
msgstr ""

#: ../../ref/schema-editor.txt:93
msgid "Renames the model's table from ``old_db_table`` to ``new_db_table``."
msgstr ""

#: ../../ref/schema-editor.txt:96
msgid "alter_db_tablespace"
msgstr ""

#: ../../ref/schema-editor.txt:100
msgid "Moves the model's table from one tablespace to another."
msgstr ""

#: ../../ref/schema-editor.txt:103
msgid "add_field"
msgstr ""

#: ../../ref/schema-editor.txt:107
msgid ""
"Adds a column (or sometimes multiple) to the model's table to represent the "
"field. This will also add indexes or a unique constraint if the field has "
"``db_index=True`` or ``unique=True``."
msgstr ""

#: ../../ref/schema-editor.txt:111
msgid ""
"If the field is a ``ManyToManyField`` without a value for ``through``, "
"instead of creating a column, it will make a table to represent the "
"relationship. If ``through`` is provided, it is a no-op."
msgstr ""

#: ../../ref/schema-editor.txt:115
msgid ""
"If the field is a ``ForeignKey``, this will also add the foreign key "
"constraint to the column."
msgstr ""

#: ../../ref/schema-editor.txt:119
msgid "remove_field"
msgstr ""

#: ../../ref/schema-editor.txt:123
msgid ""
"Removes the column(s) representing the field from the model's table, along "
"with any unique constraints, foreign key constraints, or indexes caused by "
"that field."
msgstr ""

#: ../../ref/schema-editor.txt:127
msgid ""
"If the field is a ManyToManyField without a value for ``through``, it will "
"remove the table created to track the relationship. If ``through`` is "
"provided, it is a no-op."
msgstr ""

#: ../../ref/schema-editor.txt:132
msgid "alter_field"
msgstr ""

#: ../../ref/schema-editor.txt:136
msgid ""
"This transforms the field on the model from the old field to the new one. "
"This includes changing the name of the column (the "
":attr:`~django.db.models.Field.db_column` attribute), changing the type of "
"the field (if the field class changes), changing the ``NULL`` status of the "
"field, adding or removing field-only unique constraints and indexes, "
"changing primary key, and changing the destination of ``ForeignKey`` "
"constraints."
msgstr ""

#: ../../ref/schema-editor.txt:143
msgid ""
"The most common transformation this cannot do is transforming a "
"``ManyToManyField`` into a normal Field or vice-versa; Django cannot do this"
" without losing data, and so it will refuse to do it. Instead, "
":meth:`.remove_field` and :meth:`.add_field` should be called separately."
msgstr ""

#: ../../ref/schema-editor.txt:148
msgid ""
"If the database has the ``supports_combined_alters``, Django will try and do"
" as many of these in a single database call as possible; otherwise, it will "
"issue a separate ALTER statement for each change, but will not issue ALTERs "
"where no change is required (as South often did)."
msgstr ""

#: ../../ref/schema-editor.txt:156
msgid "All attributes should be considered read-only unless stated otherwise."
msgstr ""

#: ../../ref/schema-editor.txt:159
msgid "connection"
msgstr ""

#: ../../ref/schema-editor.txt:163
msgid ""
"A connection object to the database. A useful attribute of the connection is"
" ``alias`` which can be used to determine the name of the database being "
"accessed."
msgstr ""

#: ../../ref/schema-editor.txt:167
msgid ""
"This is useful when doing data migrations for :ref:`migrations with multiple"
" databases <data-migrations-and-multiple-databases>`."
msgstr ""

#: ../../ref/settings.txt:11
msgid ""
"Be careful when you override settings, especially when the default value is "
"a non-empty tuple or dictionary, such as :setting:`MIDDLEWARE_CLASSES` and "
":setting:`STATICFILES_FINDERS`. Make sure you keep the components required "
"by the features of Django you wish to use."
msgstr ""

#: ../../ref/settings.txt:17
msgid "Core Settings"
msgstr ""

#: ../../ref/settings.txt:19
msgid ""
"Here's a list of settings available in Django core and their default values."
" Settings provided by contrib apps are listed below, followed by a topical "
"index of the core settings. For introductory material, see the "
":doc:`settings topic guide </topics/settings>`."
msgstr ""

#: ../../ref/settings.txt:27
msgid "ABSOLUTE_URL_OVERRIDES"
msgstr ""

#: ../../ref/settings.txt:29 ../../ref/settings.txt:441
#: ../../ref/settings.txt:571
msgid "Default: ``{}`` (Empty dictionary)"
msgstr ""

#: ../../ref/settings.txt:31
msgid ""
"A dictionary mapping ``\"app_label.model_name\"`` strings to functions that "
"take a model object and return its URL. This is a way of inserting or "
"overriding ``get_absolute_url()`` methods on a per-installation basis. "
"Example::"
msgstr ""

#: ../../ref/settings.txt:40
msgid ""
"Note that the model name used in this setting should be all lower-case, "
"regardless of the case of the actual model class name."
msgstr ""

#: ../../ref/settings.txt:45
msgid ""
"``ABSOLUTE_URL_OVERRIDES`` now works on models that don't declare "
"``get_absolute_url()``."
msgstr ""

#: ../../ref/settings.txt:51
msgid "ADMINS"
msgstr ""

#: ../../ref/settings.txt:53 ../../ref/settings.txt:124
#: ../../ref/settings.txt:1244 ../../ref/settings.txt:1521
#: ../../ref/settings.txt:1610 ../../ref/settings.txt:1655
#: ../../ref/settings.txt:1806 ../../ref/settings.txt:1866
#: ../../ref/settings.txt:2490
msgid "Default: ``()`` (Empty tuple)"
msgstr ""

#: ../../ref/settings.txt:55
msgid ""
"A tuple that lists people who get code error notifications. When "
"``DEBUG=False`` and a view raises an exception, Django will email these "
"people with the full exception information. Each member of the tuple should "
"be a tuple of (Full name, email address). Example::"
msgstr ""

#: ../../ref/settings.txt:62
msgid ""
"Note that Django will email *all* of these people whenever an error happens."
" See :doc:`/howto/error-reporting` for more information."
msgstr ""

#: ../../ref/settings.txt:68
msgid "ALLOWED_HOSTS"
msgstr ""

#: ../../ref/settings.txt:70 ../../ref/settings.txt:987
#: ../../ref/settings.txt:2213 ../../ref/settings.txt:2330
#: ../../ref/settings.txt:2346 ../../ref/settings.txt:2400
#: ../../ref/settings.txt:2557
msgid "Default: ``[]`` (Empty list)"
msgstr ""

#: ../../ref/settings.txt:72
msgid ""
"A list of strings representing the host/domain names that this Django site "
"can serve. This is a security measure to prevent an attacker from poisoning "
"caches and triggering password reset emails with links to malicious hosts by"
" submitting requests with a fake HTTP ``Host`` header, which is possible "
"even under many seemingly-safe web server configurations."
msgstr ""

#: ../../ref/settings.txt:78
msgid ""
"Values in this list can be fully qualified names (e.g. "
"``'www.example.com'``), in which case they will be matched against the "
"request's ``Host`` header exactly (case-insensitive, not including port). A "
"value beginning with a period can be used as a subdomain wildcard: "
"``'.example.com'`` will match ``example.com``, ``www.example.com``, and any "
"other subdomain of ``example.com``. A value of ``'*'`` will match anything; "
"in this case you are responsible to provide your own validation of the "
"``Host`` header (perhaps in a middleware; if so this middleware must be "
"listed first in :setting:`MIDDLEWARE_CLASSES`)."
msgstr ""

#: ../../ref/settings.txt:90
msgid ""
"In previous versions of Django, if you wanted to also allow the `fully "
"qualified domain name (FQDN)`_, which some browsers can send in the ``Host``"
" header, you had to explicitly add another ``ALLOWED_HOSTS`` entry that "
"included a trailing period. This entry could also be a subdomain wildcard::"
msgstr ""

#: ../../ref/settings.txt:101
msgid ""
"In Django 1.7, the trailing dot is stripped when performing host validation,"
" thus an entry with a trailing dot isn't required."
msgstr ""

#: ../../ref/settings.txt:106
msgid ""
"If the ``Host`` header (or ``X-Forwarded-Host`` if "
":setting:`USE_X_FORWARDED_HOST` is enabled) does not match any value in this"
" list, the :meth:`django.http.HttpRequest.get_host()` method will raise "
":exc:`~django.core.exceptions.SuspiciousOperation`."
msgstr ""

#: ../../ref/settings.txt:111
msgid ""
"When :setting:`DEBUG` is ``True`` or when running tests, host validation is "
"disabled; any host will be accepted. Thus it's usually only necessary to set"
" it in production."
msgstr ""

#: ../../ref/settings.txt:115
msgid ""
"This validation only applies via "
":meth:`~django.http.HttpRequest.get_host()`; if your code accesses the "
"``Host`` header directly from ``request.META`` you are bypassing this "
"security protection."
msgstr ""

#: ../../ref/settings.txt:122
msgid "ALLOWED_INCLUDE_ROOTS"
msgstr ""

#: ../../ref/settings.txt:128
msgid ""
"This setting, along with the :ttag:`ssi` template tag, is deprecated and "
"will be removed in Django 1.10."
msgstr ""

#: ../../ref/settings.txt:133
msgid ""
"You can also set the ``'allowed_include_roots'`` option in the "
":setting:`OPTIONS <TEMPLATES-OPTIONS>` of a ``DjangoTemplates`` backend "
"instead."
msgstr ""

#: ../../ref/settings.txt:137
msgid ""
"A tuple of strings representing allowed prefixes for the ``{% ssi %}`` "
"template tag. This is a security measure, so that template authors can't "
"access files that they shouldn't be accessing."
msgstr ""

#: ../../ref/settings.txt:141
msgid ""
"For example, if :setting:`ALLOWED_INCLUDE_ROOTS` is ``('/home/html', "
"'/var/www')``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% "
"ssi /etc/passwd %}`` wouldn't."
msgstr ""

#: ../../ref/settings.txt:148
msgid "APPEND_SLASH"
msgstr ""

#: ../../ref/settings.txt:150 ../../ref/settings.txt:494
#: ../../ref/settings.txt:735 ../../ref/settings.txt:747
#: ../../ref/settings.txt:2694 ../../ref/settings.txt:3056
msgid "Default: ``True``"
msgstr ""

#: ../../ref/settings.txt:152
msgid ""
"When set to ``True``, if the request URL does not match any of the patterns "
"in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to "
"the same URL with a slash appended. Note that the redirect may cause any "
"data submitted in a POST request to be lost."
msgstr ""

#: ../../ref/settings.txt:157
msgid ""
"The :setting:`APPEND_SLASH` setting is only used if "
":class:`~django.middleware.common.CommonMiddleware` is installed (see "
":doc:`/topics/http/middleware`). See also :setting:`PREPEND_WWW`."
msgstr ""

#: ../../ref/settings.txt:164
msgid "CACHES"
msgstr ""

#: ../../ref/settings.txt:174
msgid ""
"A dictionary containing the settings for all caches to be used with Django. "
"It is a nested dictionary whose contents maps cache aliases to a dictionary "
"containing the options for an individual cache."
msgstr ""

#: ../../ref/settings.txt:178
msgid ""
"The :setting:`CACHES` setting must configure a ``default`` cache; any number"
" of additional caches may also be specified. If you are using a cache "
"backend other than the local memory cache, or you need to define multiple "
"caches, other options will be required. The following cache options are "
"available."
msgstr ""

#: ../../ref/settings.txt:187 ../../ref/settings.txt:2367
msgid "BACKEND"
msgstr ""

#: ../../ref/settings.txt:189 ../../ref/settings.txt:227
#: ../../ref/settings.txt:239 ../../ref/settings.txt:305
#: ../../ref/settings.txt:504 ../../ref/settings.txt:522
#: ../../ref/settings.txt:549 ../../ref/settings.txt:585
#: ../../ref/settings.txt:594 ../../ref/settings.txt:604
#: ../../ref/settings.txt:1224 ../../ref/settings.txt:1234
#: ../../ref/settings.txt:1286 ../../ref/settings.txt:1300
#: ../../ref/settings.txt:1877 ../../ref/settings.txt:1899
#: ../../ref/settings.txt:2035 ../../ref/settings.txt:2530
msgid "Default: ``''`` (Empty string)"
msgstr ""

#: ../../ref/settings.txt:191
msgid "The cache backend to use. The built-in cache backends are:"
msgstr ""

#: ../../ref/settings.txt:193
msgid "``'django.core.cache.backends.db.DatabaseCache'``"
msgstr ""

#: ../../ref/settings.txt:194
msgid "``'django.core.cache.backends.dummy.DummyCache'``"
msgstr ""

#: ../../ref/settings.txt:195
msgid "``'django.core.cache.backends.filebased.FileBasedCache'``"
msgstr ""

#: ../../ref/settings.txt:196
msgid "``'django.core.cache.backends.locmem.LocMemCache'``"
msgstr ""

#: ../../ref/settings.txt:197
msgid "``'django.core.cache.backends.memcached.MemcachedCache'``"
msgstr ""

#: ../../ref/settings.txt:198
msgid "``'django.core.cache.backends.memcached.PyLibMCCache'``"
msgstr ""

#: ../../ref/settings.txt:200
msgid ""
"You can use a cache backend that doesn't ship with Django by setting "
":setting:`BACKEND <CACHES-BACKEND>` to a fully-qualified path of a cache "
"backend class (i.e. ``mypackage.backends.whatever.WhateverCache``)."
msgstr ""

#: ../../ref/settings.txt:207
msgid "KEY_FUNCTION"
msgstr ""

#: ../../ref/settings.txt:209
msgid ""
"A string containing a dotted path to a function (or any callable) that "
"defines how to compose a prefix, version and key into a final cache key. The"
" default implementation is equivalent to the function::"
msgstr ""

#: ../../ref/settings.txt:216
msgid ""
"You may use any key function you want, as long as it has the same argument "
"signature."
msgstr ""

#: ../../ref/settings.txt:219
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""

#: ../../ref/settings.txt:225
msgid "KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:229
msgid ""
"A string that will be automatically included (prepended by default) to all "
"cache keys used by the Django server."
msgstr ""

#: ../../ref/settings.txt:232
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""

#: ../../ref/settings.txt:237
msgid "LOCATION"
msgstr ""

#: ../../ref/settings.txt:241
msgid ""
"The location of the cache to use. This might be the directory for a file "
"system cache, a host and port for a memcache server, or simply an "
"identifying name for a local memory cache. e.g.::"
msgstr ""

#: ../../ref/settings.txt:255 ../../ref/settings.txt:569
#: ../../ref/settings.txt:2423
msgid "OPTIONS"
msgstr ""

#: ../../ref/settings.txt:257
msgid "Default: None"
msgstr ""

#: ../../ref/settings.txt:259
msgid ""
"Extra parameters to pass to the cache backend. Available parameters vary "
"depending on your cache backend."
msgstr ""

#: ../../ref/settings.txt:262
msgid ""
"Some information on available parameters can be found in the :doc:`Cache "
"Backends </topics/cache>` documentation. For more information, consult your "
"backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:269
msgid "TIMEOUT"
msgstr ""

#: ../../ref/settings.txt:271
msgid "Default: 300"
msgstr ""

#: ../../ref/settings.txt:273
msgid "The number of seconds before a cache entry is considered stale."
msgstr ""

#: ../../ref/settings.txt:277
msgid ""
"If the value of this settings is ``None``, cache entries will not expire."
msgstr ""

#: ../../ref/settings.txt:282
msgid "VERSION"
msgstr ""

#: ../../ref/settings.txt:284
msgid "Default: ``1``"
msgstr ""

#: ../../ref/settings.txt:286
msgid ""
"The default version number for cache keys generated by the Django server."
msgstr ""

#: ../../ref/settings.txt:288
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

#: ../../ref/settings.txt:293
msgid "CACHE_MIDDLEWARE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:295 ../../ref/settings.txt:3018
msgid "Default: ``default``"
msgstr ""

#: ../../ref/settings.txt:297
msgid ""
"The cache connection to use for the :ref:`cache middleware <the-per-site-"
"cache>`."
msgstr ""

#: ../../ref/settings.txt:303
msgid "CACHE_MIDDLEWARE_KEY_PREFIX"
msgstr ""

#: ../../ref/settings.txt:307
msgid ""
"A string which will be prefixed to the cache keys generated by the "
":ref:`cache middleware <the-per-site-cache>`. This prefix is combined with "
"the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` setting; it does not replace "
"it."
msgstr ""

#: ../../ref/settings.txt:311 ../../ref/settings.txt:323
msgid "See :doc:`/topics/cache`."
msgstr ""

#: ../../ref/settings.txt:316
msgid "CACHE_MIDDLEWARE_SECONDS"
msgstr ""

#: ../../ref/settings.txt:318
msgid "Default: ``600``"
msgstr ""

#: ../../ref/settings.txt:320
msgid ""
"The default number of seconds to cache a page for the :ref:`cache middleware"
" <the-per-site-cache>`."
msgstr ""

#: ../../ref/settings.txt:330
msgid "CSRF_COOKIE_AGE"
msgstr ""

#: ../../ref/settings.txt:334
msgid "Default: ``31449600`` (approximately 1 year, in seconds)"
msgstr ""

#: ../../ref/settings.txt:336
msgid "The age of CSRF cookies, in seconds."
msgstr ""

#: ../../ref/settings.txt:338
msgid ""
"The reason for setting a long-lived expiration time is to avoid problems in "
"the case of a user closing a browser or bookmarking a page and then loading "
"that page from a browser cache. Without persistent cookies, the form "
"submission would fail in this case."
msgstr ""

#: ../../ref/settings.txt:343
msgid ""
"Some browsers (specifically Internet Explorer) can disallow the use of "
"persistent cookies or can have the indexes to the cookie jar corrupted on "
"disk, thereby causing CSRF protection checks to (sometimes intermittently) "
"fail. Change this setting to ``None`` to use session-based CSRF cookies, "
"which keep the cookies in-memory instead of on persistent storage."
msgstr ""

#: ../../ref/settings.txt:352
msgid "CSRF_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/settings.txt:354 ../../ref/settings.txt:648
#: ../../ref/settings.txt:665 ../../ref/settings.txt:691
#: ../../ref/settings.txt:707 ../../ref/settings.txt:759
#: ../../ref/settings.txt:771 ../../ref/settings.txt:783
#: ../../ref/settings.txt:799 ../../ref/settings.txt:817
#: ../../ref/settings.txt:831 ../../ref/settings.txt:1363
#: ../../ref/settings.txt:1376 ../../ref/settings.txt:1395
#: ../../ref/settings.txt:1442 ../../ref/settings.txt:1459
#: ../../ref/settings.txt:1491 ../../ref/settings.txt:1535
#: ../../ref/settings.txt:1547 ../../ref/settings.txt:1715
#: ../../ref/settings.txt:2150 ../../ref/settings.txt:2226
#: ../../ref/settings.txt:2776 ../../ref/settings.txt:3037
#: ../../ref/settings.txt:3157 ../../ref/settings.txt:3222
#: ../../ref/settings.txt:3250
msgid "Default: ``None``"
msgstr ""

#: ../../ref/settings.txt:356
msgid ""
"The domain to be used when setting the CSRF cookie.  This can be useful for "
"easily allowing cross-subdomain requests to be excluded from the normal "
"cross site request forgery protection.  It should be set to a string such as"
" ``\".example.com\"`` to allow a POST request from a form on one subdomain "
"to be accepted by a view served from another subdomain."
msgstr ""

#: ../../ref/settings.txt:362
msgid ""
"Please note that the presence of this setting does not imply that Django's "
"CSRF protection is safe from cross-subdomain attacks by default - please see"
" the :ref:`CSRF limitations <csrf-limitations>` section."
msgstr ""

#: ../../ref/settings.txt:369
msgid "CSRF_COOKIE_HTTPONLY"
msgstr ""

#: ../../ref/settings.txt:371 ../../ref/settings.txt:413
#: ../../ref/settings.txt:484 ../../ref/settings.txt:1089
#: ../../ref/settings.txt:1142 ../../ref/settings.txt:1332
#: ../../ref/settings.txt:1346 ../../ref/settings.txt:2012
#: ../../ref/settings.txt:2090 ../../ref/settings.txt:2102
#: ../../ref/settings.txt:2115 ../../ref/settings.txt:2410
#: ../../ref/settings.txt:2468 ../../ref/settings.txt:2682
#: ../../ref/settings.txt:2713 ../../ref/settings.txt:2731
#: ../../ref/settings.txt:2746 ../../ref/settings.txt:2765
#: ../../ref/settings.txt:3108 ../../ref/settings.txt:3147
#: ../../ref/settings.txt:3169
msgid "Default: ``False``"
msgstr ""

#: ../../ref/settings.txt:373
msgid ""
"Whether to use ``HttpOnly`` flag on the CSRF cookie. If this is set to "
"``True``, client-side JavaScript will not to be able to access the CSRF "
"cookie."
msgstr ""

#: ../../ref/settings.txt:376
msgid ""
"This can help prevent malicious JavaScript from bypassing CSRF protection. "
"If you enable this and need to send the value of the CSRF token with Ajax "
"requests, your JavaScript will need to pull the value from a hidden CSRF "
"token form input on the page instead of from the cookie."
msgstr ""

#: ../../ref/settings.txt:381
msgid "See :setting:`SESSION_COOKIE_HTTPONLY` for details on ``HttpOnly``."
msgstr ""

#: ../../ref/settings.txt:386
msgid "CSRF_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:388
msgid "Default: ``'csrftoken'``"
msgstr ""

#: ../../ref/settings.txt:390
msgid ""
"The name of the cookie to use for the CSRF authentication token. This can be"
" whatever you want (as long as it's different from the other cookie names in"
" your application). See :doc:`/ref/csrf`."
msgstr ""

#: ../../ref/settings.txt:397
msgid "CSRF_COOKIE_PATH"
msgstr ""

#: ../../ref/settings.txt:399 ../../ref/settings.txt:3094
msgid "Default: ``'/'``"
msgstr ""

#: ../../ref/settings.txt:401
msgid ""
"The path set on the CSRF cookie. This should either match the URL path of "
"your Django installation or be a parent of that path."
msgstr ""

#: ../../ref/settings.txt:404
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own CSRF cookie."
msgstr ""

#: ../../ref/settings.txt:411
msgid "CSRF_COOKIE_SECURE"
msgstr ""

#: ../../ref/settings.txt:415
msgid ""
"Whether to use a secure cookie for the CSRF cookie. If this is set to "
"``True``, the cookie will be marked as \"secure,\" which means browsers may "
"ensure that the cookie is only sent with an HTTPS connection."
msgstr ""

#: ../../ref/settings.txt:422
msgid "CSRF_FAILURE_VIEW"
msgstr ""

#: ../../ref/settings.txt:424
msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr ""

#: ../../ref/settings.txt:426
msgid ""
"A dotted path to the view function to be used when an incoming request is "
"rejected by the CSRF protection.  The function should have this signature::"
msgstr ""

#: ../../ref/settings.txt:432
msgid ""
"where ``reason`` is a short message (intended for developers or logging, not"
" for end users) indicating the reason the request was rejected.  See "
":doc:`/ref/csrf`."
msgstr ""

#: ../../ref/settings.txt:439
msgid "DATABASES"
msgstr ""

#: ../../ref/settings.txt:443
msgid ""
"A dictionary containing the settings for all databases to be used with "
"Django. It is a nested dictionary whose contents map a database alias to a "
"dictionary containing the options for an individual database."
msgstr ""

#: ../../ref/settings.txt:447
msgid ""
"The :setting:`DATABASES` setting must configure a ``default`` database; any "
"number of additional databases may also be specified."
msgstr ""

#: ../../ref/settings.txt:450
msgid ""
"The simplest possible settings file is for a single-database setup using "
"SQLite. This can be configured using the following::"
msgstr ""

#: ../../ref/settings.txt:460
msgid ""
"When connecting to other database backends, such as MySQL, Oracle, or "
"PostgreSQL, additional connection parameters will be required. See the "
":setting:`ENGINE <DATABASE-ENGINE>` setting below on how to specify other "
"database types. This example is for PostgreSQL::"
msgstr ""

#: ../../ref/settings.txt:476
msgid ""
"The following inner options that may be required for more complex "
"configurations are available:"
msgstr ""

#: ../../ref/settings.txt:482
msgid "ATOMIC_REQUESTS"
msgstr ""

#: ../../ref/settings.txt:486
msgid ""
"Set this to ``True`` to wrap each view in a transaction on this database. "
"See :ref:`tying-transactions-to-http-requests`."
msgstr ""

#: ../../ref/settings.txt:492
msgid "AUTOCOMMIT"
msgstr ""

#: ../../ref/settings.txt:496
msgid ""
"Set this to ``False`` if you want to :ref:`disable Django's transaction "
"management <deactivate-transaction-management>` and implement your own."
msgstr ""

#: ../../ref/settings.txt:502
msgid "ENGINE"
msgstr ""

#: ../../ref/settings.txt:506
msgid "The database backend to use. The built-in database backends are:"
msgstr ""

#: ../../ref/settings.txt:508
msgid "``'django.db.backends.postgresql_psycopg2'``"
msgstr ""

#: ../../ref/settings.txt:509
msgid "``'django.db.backends.mysql'``"
msgstr ""

#: ../../ref/settings.txt:510
msgid "``'django.db.backends.sqlite3'``"
msgstr ""

#: ../../ref/settings.txt:511
msgid "``'django.db.backends.oracle'``"
msgstr ""

#: ../../ref/settings.txt:513
msgid ""
"You can use a database backend that doesn't ship with Django by setting "
"``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``)."
msgstr ""

#: ../../ref/settings.txt:520
msgid "HOST"
msgstr ""

#: ../../ref/settings.txt:524
msgid ""
"Which host to use when connecting to the database. An empty string means "
"localhost. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:527
msgid ""
"If this value starts with a forward slash (``'/'``) and you're using MySQL, "
"MySQL will connect via a Unix socket to the specified socket. For example::"
msgstr ""

#: ../../ref/settings.txt:532
msgid ""
"If you're using MySQL and this value *doesn't* start with a forward slash, "
"then this value is assumed to be the host."
msgstr ""

#: ../../ref/settings.txt:535
msgid ""
"If you're using PostgreSQL, by default (empty :setting:`HOST`), the "
"connection to the database is done through UNIX domain sockets ('local' "
"lines in ``pg_hba.conf``). If your UNIX domain socket is not in the standard"
" location, use the same value of ``unix_socket_directory`` from "
"``postgresql.conf``. If you want to connect through TCP sockets, set "
":setting:`HOST` to 'localhost' or '127.0.0.1' ('host' lines in "
"``pg_hba.conf``). On Windows, you should always define :setting:`HOST`, as "
"UNIX domain sockets are not available."
msgstr ""

#: ../../ref/settings.txt:547 ../../ref/settings.txt:705
#: ../../ref/settings.txt:2382
msgid "NAME"
msgstr ""

#: ../../ref/settings.txt:551
msgid ""
"The name of the database to use. For SQLite, it's the full path to the "
"database file. When specifying the path, always use forward slashes, even on"
" Windows (e.g. ``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

#: ../../ref/settings.txt:558
msgid "CONN_MAX_AGE"
msgstr ""

#: ../../ref/settings.txt:560 ../../ref/settings.txt:1992
#: ../../ref/settings.txt:2134
msgid "Default: ``0``"
msgstr ""

#: ../../ref/settings.txt:562
msgid ""
"The lifetime of a database connection, in seconds. Use ``0`` to close "
"database connections at the end of each request — Django's historical "
"behavior — and ``None`` for unlimited persistent connections."
msgstr ""

#: ../../ref/settings.txt:573
msgid ""
"Extra parameters to use when connecting to the database. Available "
"parameters vary depending on your database backend."
msgstr ""

#: ../../ref/settings.txt:576
msgid ""
"Some information on available parameters can be found in the :doc:`Database "
"Backends </ref/databases>` documentation. For more information, consult your"
" backend module's own documentation."
msgstr ""

#: ../../ref/settings.txt:583 ../../ref/settings.txt:769
msgid "PASSWORD"
msgstr ""

#: ../../ref/settings.txt:587
msgid ""
"The password to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:592
msgid "PORT"
msgstr ""

#: ../../ref/settings.txt:596
msgid ""
"The port to use when connecting to the database. An empty string means the "
"default port. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:602 ../../ref/settings.txt:757
msgid "USER"
msgstr ""

#: ../../ref/settings.txt:606
msgid ""
"The username to use when connecting to the database. Not used with SQLite."
msgstr ""

#: ../../ref/settings.txt:611
msgid "TEST"
msgstr ""

#: ../../ref/settings.txt:615
msgid ""
"All :setting:`TEST <DATABASE-TEST>` sub-entries used to be independent "
"entries in the database settings dictionary, with a ``TEST_`` prefix. For "
"backwards compatibility with older versions of Django, you can define both "
"versions of the settings as long as they match. Further, ``TEST_CREATE``, "
"``TEST_USER_CREATE`` and ``TEST_PASSWD`` were changed to ``CREATE_DB``, "
"``CREATE_USER`` and ``PASSWORD`` respectively."
msgstr ""

#: ../../ref/settings.txt:623
msgid "Default: ``{}``"
msgstr ""

#: ../../ref/settings.txt:625
msgid ""
"A dictionary of settings for test databases; for more details about the "
"creation and use of test databases, see :ref:`the-test-database`."
msgstr ""

#: ../../ref/settings.txt:628
msgid "Here's an example with a test database configuration::"
msgstr ""

#: ../../ref/settings.txt:641
msgid "The following keys in the ``TEST`` dictionary are available:"
msgstr ""

#: ../../ref/settings.txt:646
msgid "CHARSET"
msgstr ""

#: ../../ref/settings.txt:650
msgid ""
"The character set encoding used to create the test database. The value of "
"this string is passed directly through to the database, so its format is "
"backend-specific."
msgstr ""

#: ../../ref/settings.txt:654
msgid ""
"Supported for the PostgreSQL_ (``postgresql_psycopg2``) and MySQL_ "
"(``mysql``) backends."
msgstr ""

#: ../../ref/settings.txt:663
msgid "COLLATION"
msgstr ""

#: ../../ref/settings.txt:667
msgid ""
"The collation order to use when creating the test database. This value is "
"passed directly to the backend, so its format is backend-specific."
msgstr ""

#: ../../ref/settings.txt:670
msgid ""
"Only supported for the ``mysql`` backend (see the `MySQL manual`_ for "
"details)."
msgstr ""

#: ../../ref/settings.txt:677
msgid "DEPENDENCIES"
msgstr ""

#: ../../ref/settings.txt:679
msgid ""
"Default: ``['default']``, for all databases other than ``default``, which "
"has no dependencies."
msgstr ""

#: ../../ref/settings.txt:682
msgid ""
"The creation-order dependencies of the database. See the documentation on "
":ref:`controlling the creation order of test databases <topics-testing-"
"creation-dependencies>` for details."
msgstr ""

#: ../../ref/settings.txt:689
msgid "MIRROR"
msgstr ""

#: ../../ref/settings.txt:693
msgid ""
"The alias of the database that this database should mirror during testing."
msgstr ""

#: ../../ref/settings.txt:696
msgid ""
"This setting exists to allow for testing of primary/replica (referred to as "
"master/slave by some databases) configurations of multiple databases. See "
"the documentation on :ref:`testing primary/replica configurations <topics-"
"testing-primaryreplica>` for details."
msgstr ""

#: ../../ref/settings.txt:709
msgid "The name of database to use when running the test suite."
msgstr ""

#: ../../ref/settings.txt:711
msgid ""
"If the default value (``None``) is used with the SQLite database engine, the"
" tests will use a memory resident database. For all other database engines "
"the test database will use the name ``'test_' + DATABASE_NAME``."
msgstr ""

#: ../../ref/settings.txt:715
msgid "See :ref:`the-test-database`."
msgstr ""

#: ../../ref/settings.txt:720
msgid "SERIALIZE"
msgstr ""

#: ../../ref/settings.txt:724
msgid ""
"Boolean value to control whether or not the default test runner serializes "
"the database into an in-memory JSON string before running tests (used to "
"restore the database state between tests if you don't have transactions). "
"You can set this to ``False`` to speed up creation time if you don't have "
"any test classes with :ref:`serialized_rollback=True <test-case-serialized-"
"rollback>`."
msgstr ""

#: ../../ref/settings.txt:733
msgid "CREATE_DB"
msgstr ""

#: ../../ref/settings.txt:737 ../../ref/settings.txt:749
#: ../../ref/settings.txt:761 ../../ref/settings.txt:773
#: ../../ref/settings.txt:785 ../../ref/settings.txt:801
#: ../../ref/settings.txt:819 ../../ref/settings.txt:833
#: ../../ref/settings.txt:851 ../../ref/settings.txt:868
msgid "This is an Oracle-specific setting."
msgstr ""

#: ../../ref/settings.txt:739
msgid ""
"If it is set to ``False``, the test tablespaces won't be automatically "
"created at the beginning of the tests or dropped at the end."
msgstr ""

#: ../../ref/settings.txt:745
msgid "CREATE_USER"
msgstr ""

#: ../../ref/settings.txt:751
msgid ""
"If it is set to ``False``, the test user won't be automatically created at "
"the beginning of the tests and dropped at the end."
msgstr ""

#: ../../ref/settings.txt:763
msgid ""
"The username to use when connecting to the Oracle database that will be used"
" when running tests. If not provided, Django will use ``'test_' + USER``."
msgstr ""

#: ../../ref/settings.txt:775
msgid ""
"The password to use when connecting to the Oracle database that will be used"
" when running tests. If not provided, Django will use a hardcoded default "
"value."
msgstr ""

#: ../../ref/settings.txt:781
msgid "TBLSPACE"
msgstr ""

#: ../../ref/settings.txt:787
msgid ""
"The name of the tablespace that will be used when running tests. If not "
"provided, Django will use ``'test_' + USER``."
msgstr ""

#: ../../ref/settings.txt:792
msgid "Previously Django used ``'test_' + NAME`` if not provided."
msgstr ""

#: ../../ref/settings.txt:797
msgid "TBLSPACE_TMP"
msgstr ""

#: ../../ref/settings.txt:803
msgid ""
"The name of the temporary tablespace that will be used when running tests. "
"If not provided, Django will use ``'test_' + USER + '_temp'``."
msgstr ""

#: ../../ref/settings.txt:808
msgid "Previously Django used ``'test_' + NAME + '_temp'`` if not provided."
msgstr ""

#: ../../ref/settings.txt:813
msgid "DATAFILE"
msgstr ""

#: ../../ref/settings.txt:821
msgid ""
"The name of the datafile to use for the TBLSPACE. If not provided, Django "
"will use ``TBLSPACE + '.dbf'``."
msgstr ""

#: ../../ref/settings.txt:827
msgid "DATAFILE_TMP"
msgstr ""

#: ../../ref/settings.txt:835
msgid ""
"The name of the datafile to use for the TBLSPACE_TMP. If not provided, "
"Django will use ``TBLSPACE_TMP + '.dbf'``."
msgstr ""

#: ../../ref/settings.txt:841
msgid "DATAFILE_MAXSIZE"
msgstr ""

#: ../../ref/settings.txt:845 ../../ref/settings.txt:862
msgid "Default: ``'500M'``"
msgstr ""

#: ../../ref/settings.txt:849 ../../ref/settings.txt:866
msgid "The previous value was 200M and was not user customizable."
msgstr ""

#: ../../ref/settings.txt:853
msgid "The maximum size that the DATAFILE is allowed to grow to."
msgstr ""

#: ../../ref/settings.txt:858
msgid "DATAFILE_TMP_MAXSIZE"
msgstr ""

#: ../../ref/settings.txt:870
msgid "The maximum size that the DATAFILE_TMP is allowed to grow to."
msgstr ""

#: ../../ref/settings.txt:875
msgid "TEST_CHARSET"
msgstr ""

#: ../../ref/settings.txt:879
msgid ""
"Use the :setting:`CHARSET <TEST_CHARSET>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:885
msgid "TEST_COLLATION"
msgstr ""

#: ../../ref/settings.txt:889
msgid ""
"Use the :setting:`COLLATION <TEST_COLLATION>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:895
msgid "TEST_DEPENDENCIES"
msgstr ""

#: ../../ref/settings.txt:899
msgid ""
"Use the :setting:`DEPENDENCIES <TEST_DEPENDENCIES>` entry in the "
":setting:`TEST <DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:905
msgid "TEST_MIRROR"
msgstr ""

#: ../../ref/settings.txt:909
msgid ""
"Use the :setting:`MIRROR <TEST_MIRROR>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:915
msgid "TEST_NAME"
msgstr ""

#: ../../ref/settings.txt:919
msgid ""
"Use the :setting:`NAME <TEST_NAME>` entry in the :setting:`TEST <DATABASE-"
"TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:925
msgid "TEST_CREATE"
msgstr ""

#: ../../ref/settings.txt:929
msgid ""
"Use the :setting:`CREATE_DB <TEST_CREATE>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:935
msgid "TEST_USER"
msgstr ""

#: ../../ref/settings.txt:939
msgid ""
"Use the :setting:`USER <TEST_USER>` entry in the :setting:`TEST <DATABASE-"
"TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:945
msgid "TEST_USER_CREATE"
msgstr ""

#: ../../ref/settings.txt:949
msgid ""
"Use the :setting:`CREATE_USER <TEST_USER_CREATE>` entry in the "
":setting:`TEST <DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:955
msgid "TEST_PASSWD"
msgstr ""

#: ../../ref/settings.txt:959
msgid ""
"Use the :setting:`PASSWORD <TEST_PASSWD>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:965
msgid "TEST_TBLSPACE"
msgstr ""

#: ../../ref/settings.txt:969
msgid ""
"Use the :setting:`TBLSPACE <TEST_TBLSPACE>` entry in the :setting:`TEST "
"<DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:975
msgid "TEST_TBLSPACE_TMP"
msgstr ""

#: ../../ref/settings.txt:979
msgid ""
"Use the :setting:`TBLSPACE_TMP <TEST_TBLSPACE_TMP>` entry in the "
":setting:`TEST <DATABASE-TEST>` dictionary."
msgstr ""

#: ../../ref/settings.txt:985
msgid "DATABASE_ROUTERS"
msgstr ""

#: ../../ref/settings.txt:989
msgid ""
"The list of routers that will be used to determine which database to use "
"when performing a database query."
msgstr ""

#: ../../ref/settings.txt:992
msgid ""
"See the documentation on :ref:`automatic database routing in multi database "
"configurations <topics-db-multi-db-routing>`."
msgstr ""

#: ../../ref/settings.txt:998
msgid "DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1000
msgid "Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)"
msgstr ""

#: ../../ref/settings.txt:1002
msgid ""
"The default formatting to use for displaying date fields in any part of the "
"system. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"locale-dictated format has higher precedence and will be applied instead. "
"See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1007
msgid ""
"See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and "
":setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1012
msgid "DATE_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:1024
msgid ""
"A tuple of formats that will be accepted when inputting data on a date "
"field. Formats will be tried in order, using the first valid one. Note that "
"these format strings use Python's datetime_ module syntax, not the format "
"strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:1029 ../../ref/settings.txt:1077
#: ../../ref/settings.txt:2619
msgid ""
"When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher "
"precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:1032
msgid ""
"See also :setting:`DATETIME_INPUT_FORMATS` and "
":setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:1039
msgid "DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1041
msgid "Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:1043
msgid ""
"The default formatting to use for displaying datetime fields in any part of "
"the system. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"locale-dictated format has higher precedence and will be applied instead. "
"See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:1048
msgid ""
"See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and "
":setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1053
msgid "DATETIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:1072
msgid ""
"A tuple of formats that will be accepted when inputting data on a datetime "
"field. Formats will be tried in order, using the first valid one. Note that "
"these format strings use Python's datetime_ module syntax, not the format "
"strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:1080
msgid ""
"See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:1087
msgid "DEBUG"
msgstr ""

#: ../../ref/settings.txt:1091
msgid "A boolean that turns on/off debug mode."
msgstr ""

#: ../../ref/settings.txt:1093
msgid "Never deploy a site into production with :setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:1095
msgid ""
"Did you catch that? NEVER deploy a site into production with "
":setting:`DEBUG` turned on."
msgstr ""

#: ../../ref/settings.txt:1098
msgid ""
"One of the main features of debug mode is the display of detailed error "
"pages. If your app raises an exception when :setting:`DEBUG` is ``True``, "
"Django will display a detailed traceback, including a lot of metadata about "
"your environment, such as all the currently defined Django settings (from "
"``settings.py``)."
msgstr ""

#: ../../ref/settings.txt:1104
msgid ""
"As a security measure, Django will *not* include settings that might be "
"sensitive (or offensive), such as :setting:`SECRET_KEY`. Specifically, it "
"will exclude any setting whose name includes any of the following:"
msgstr ""

#: ../../ref/settings.txt:1108
msgid "``'API'``"
msgstr ""

#: ../../ref/settings.txt:1109
msgid "``'KEY'``"
msgstr ""

#: ../../ref/settings.txt:1110
msgid "``'PASS'``"
msgstr ""

#: ../../ref/settings.txt:1111
msgid "``'SECRET'``"
msgstr ""

#: ../../ref/settings.txt:1112
msgid "``'SIGNATURE'``"
msgstr ""

#: ../../ref/settings.txt:1113
msgid "``'TOKEN'``"
msgstr ""

#: ../../ref/settings.txt:1115
msgid ""
"Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD, "
"just as ``'TOKEN'`` will also match TOKENIZED and so on."
msgstr ""

#: ../../ref/settings.txt:1118
msgid ""
"Still, note that there are always going to be sections of your debug output "
"that are inappropriate for public consumption. File paths, configuration "
"options and the like all give attackers extra information about your server."
msgstr ""

#: ../../ref/settings.txt:1122
msgid ""
"It is also important to remember that when running with :setting:`DEBUG` "
"turned on, Django will remember every SQL query it executes. This is useful "
"when you're debugging, but it'll rapidly consume memory on a production "
"server."
msgstr ""

#: ../../ref/settings.txt:1126
msgid ""
"Finally, if :setting:`DEBUG` is ``False``, you also need to properly set the"
" :setting:`ALLOWED_HOSTS` setting. Failing to do so will result in all "
"requests being returned as \"Bad Request (400)\"."
msgstr ""

#: ../../ref/settings.txt:1132
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` sets ``DEBUG = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:1140
msgid "DEBUG_PROPAGATE_EXCEPTIONS"
msgstr ""

#: ../../ref/settings.txt:1144
msgid ""
"If set to True, Django's normal exception handling of view functions will be"
" suppressed, and exceptions will propagate upwards.  This can be useful for "
"some test setups, and should never be used on a live site."
msgstr ""

#: ../../ref/settings.txt:1152
msgid "DECIMAL_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:1154
msgid "Default: ``'.'`` (Dot)"
msgstr ""

#: ../../ref/settings.txt:1156
msgid "Default decimal separator used when formatting decimal numbers."
msgstr ""

#: ../../ref/settings.txt:1158 ../../ref/settings.txt:2001
#: ../../ref/settings.txt:2581
msgid ""
"Note that if :setting:`USE_L10N` is set to ``True``, then the locale-"
"dictated format has higher precedence and will be applied instead."
msgstr ""

#: ../../ref/settings.txt:1161
msgid ""
"See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and "
":setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:1168
msgid "DEFAULT_CHARSET"
msgstr ""

#: ../../ref/settings.txt:1170 ../../ref/settings.txt:1405
msgid "Default: ``'utf-8'``"
msgstr ""

#: ../../ref/settings.txt:1172
msgid ""
"Default charset to use for all ``HttpResponse`` objects, if a MIME type "
"isn't manually specified. Used with :setting:`DEFAULT_CONTENT_TYPE` to "
"construct the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:1179
msgid "DEFAULT_CONTENT_TYPE"
msgstr ""

#: ../../ref/settings.txt:1181
msgid "Default: ``'text/html'``"
msgstr ""

#: ../../ref/settings.txt:1183
msgid ""
"Default content type to use for all ``HttpResponse`` objects, if a MIME type"
" isn't manually specified. Used with :setting:`DEFAULT_CHARSET` to construct"
" the ``Content-Type`` header."
msgstr ""

#: ../../ref/settings.txt:1190
msgid "DEFAULT_EXCEPTION_REPORTER_FILTER"
msgstr ""

#: ../../ref/settings.txt:1192
msgid "Default: :class:`django.views.debug.SafeExceptionReporterFilter`"
msgstr ""

#: ../../ref/settings.txt:1194
msgid ""
"Default exception reporter filter class to be used if none has been assigned"
" to the :class:`~django.http.HttpRequest` instance yet. See :ref:`Filtering "
"error reports<filtering-error-reports>`."
msgstr ""

#: ../../ref/settings.txt:1201
msgid "DEFAULT_FILE_STORAGE"
msgstr ""

#: ../../ref/settings.txt:1203
msgid "Default: :class:`django.core.files.storage.FileSystemStorage`"
msgstr ""

#: ../../ref/settings.txt:1205
msgid ""
"Default file storage class to be used for any file-related operations that "
"don't specify a particular storage system. See :doc:`/topics/files`."
msgstr ""

#: ../../ref/settings.txt:1211
msgid "DEFAULT_FROM_EMAIL"
msgstr ""

#: ../../ref/settings.txt:1213
msgid "Default: ``'webmaster@localhost'``"
msgstr ""

#: ../../ref/settings.txt:1215
msgid ""
"Default email address to use for various automated correspondence from the "
"site manager(s). This doesn't include error messages sent to "
":setting:`ADMINS` and :setting:`MANAGERS`; for that, see "
":setting:`SERVER_EMAIL`."
msgstr ""

#: ../../ref/settings.txt:1222
msgid "DEFAULT_INDEX_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:1226
msgid ""
"Default tablespace to use for indexes on fields that don't specify one, if "
"the backend supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:1232
msgid "DEFAULT_TABLESPACE"
msgstr ""

#: ../../ref/settings.txt:1236
msgid ""
"Default tablespace to use for models that don't specify one, if the backend "
"supports it (see :doc:`/topics/db/tablespaces`)."
msgstr ""

#: ../../ref/settings.txt:1242
msgid "DISALLOWED_USER_AGENTS"
msgstr ""

#: ../../ref/settings.txt:1246
msgid ""
"List of compiled regular expression objects representing User-Agent strings "
"that are not allowed to visit any page, systemwide. Use this for bad "
"robots/crawlers. This is only used if ``CommonMiddleware`` is installed (see"
" :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:1254
msgid "EMAIL_BACKEND"
msgstr ""

#: ../../ref/settings.txt:1256
msgid "Default: ``'django.core.mail.backends.smtp.EmailBackend'``"
msgstr ""

#: ../../ref/settings.txt:1258
msgid ""
"The backend to use for sending emails. For the list of available backends "
"see :doc:`/topics/email`."
msgstr ""

#: ../../ref/settings.txt:1264
msgid "EMAIL_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:1266 ../../ref/settings.txt:2023
#: ../../ref/settings.txt:3203
msgid "Default: Not defined"
msgstr ""

#: ../../ref/settings.txt:1268
msgid ""
"The directory used by the ``file`` email backend to store output files."
msgstr ""

#: ../../ref/settings.txt:1273
msgid "EMAIL_HOST"
msgstr ""

#: ../../ref/settings.txt:1275
msgid "Default: ``'localhost'``"
msgstr ""

#: ../../ref/settings.txt:1277
msgid "The host to use for sending email."
msgstr ""

#: ../../ref/settings.txt:1279
msgid "See also :setting:`EMAIL_PORT`."
msgstr ""

#: ../../ref/settings.txt:1284
msgid "EMAIL_HOST_PASSWORD"
msgstr ""

#: ../../ref/settings.txt:1288
msgid ""
"Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This "
"setting is used in conjunction with :setting:`EMAIL_HOST_USER` when "
"authenticating to the SMTP server. If either of these settings is empty, "
"Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:1293
msgid "See also :setting:`EMAIL_HOST_USER`."
msgstr ""

#: ../../ref/settings.txt:1298
msgid "EMAIL_HOST_USER"
msgstr ""

#: ../../ref/settings.txt:1302
msgid ""
"Username to use for the SMTP server defined in :setting:`EMAIL_HOST`. If "
"empty, Django won't attempt authentication."
msgstr ""

#: ../../ref/settings.txt:1305
msgid "See also :setting:`EMAIL_HOST_PASSWORD`."
msgstr ""

#: ../../ref/settings.txt:1310
msgid "EMAIL_PORT"
msgstr ""

#: ../../ref/settings.txt:1312
msgid "Default: ``25``"
msgstr ""

#: ../../ref/settings.txt:1314
msgid "Port to use for the SMTP server defined in :setting:`EMAIL_HOST`."
msgstr ""

#: ../../ref/settings.txt:1319
msgid "EMAIL_SUBJECT_PREFIX"
msgstr ""

#: ../../ref/settings.txt:1321
msgid "Default: ``'[Django] '``"
msgstr ""

#: ../../ref/settings.txt:1323
msgid ""
"Subject-line prefix for email messages sent with "
"``django.core.mail.mail_admins`` or ``django.core.mail.mail_managers``. "
"You'll probably want to include the trailing space."
msgstr ""

#: ../../ref/settings.txt:1330
msgid "EMAIL_USE_TLS"
msgstr ""

#: ../../ref/settings.txt:1334
msgid ""
"Whether to use a TLS (secure) connection when talking to the SMTP server. "
"This is used for explicit TLS connections, generally on port 587. If you are"
" experiencing hanging connections, see the implicit TLS setting "
":setting:`EMAIL_USE_SSL`."
msgstr ""

#: ../../ref/settings.txt:1342
msgid "EMAIL_USE_SSL"
msgstr ""

#: ../../ref/settings.txt:1348
msgid ""
"Whether to use an implicit TLS (secure) connection when talking to the SMTP "
"server. In most email documentation this type of TLS connection is referred "
"to as SSL. It is generally used on port 465. If you are experiencing "
"problems, see the explicit TLS setting :setting:`EMAIL_USE_TLS`."
msgstr ""

#: ../../ref/settings.txt:1353
msgid ""
"Note that :setting:`EMAIL_USE_TLS`/:setting:`EMAIL_USE_SSL` are mutually "
"exclusive, so only set one of those settings to ``True``."
msgstr ""

#: ../../ref/settings.txt:1359
msgid "EMAIL_SSL_CERTFILE"
msgstr ""

#: ../../ref/settings.txt:1365
msgid ""
"If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can"
" optionally specify the path to a PEM-formatted certificate chain file to "
"use for the SSL connection."
msgstr ""

#: ../../ref/settings.txt:1372
msgid "EMAIL_SSL_KEYFILE"
msgstr ""

#: ../../ref/settings.txt:1378
msgid ""
"If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can"
" optionally specify the path to a PEM-formatted private key file to use for "
"the SSL connection."
msgstr ""

#: ../../ref/settings.txt:1382
msgid ""
"Note that setting :setting:`EMAIL_SSL_CERTFILE` and "
":setting:`EMAIL_SSL_KEYFILE` doesn't result in any certificate checking. "
"They're passed to the underlying SSL connection. Please refer to the "
"documentation of Python's :func:`python:ssl.wrap_socket` function for "
"details on how the certificate chain file and private key file are handled."
msgstr ""

#: ../../ref/settings.txt:1391
msgid "EMAIL_TIMEOUT"
msgstr ""

#: ../../ref/settings.txt:1397
msgid ""
"Specifies a timeout in seconds for blocking operations like the connection "
"attempt."
msgstr ""

#: ../../ref/settings.txt:1403
msgid "FILE_CHARSET"
msgstr ""

#: ../../ref/settings.txt:1407
msgid ""
"The character encoding used to decode any files read from disk. This "
"includes template files and initial SQL data files."
msgstr ""

#: ../../ref/settings.txt:1413
msgid "FILE_UPLOAD_HANDLERS"
msgstr ""

#: ../../ref/settings.txt:1420
msgid ""
"A tuple of handlers to use for uploading. Changing this setting allows "
"complete customization -- even replacement -- of Django's upload process."
msgstr ""

#: ../../ref/settings.txt:1423 ../../ref/settings.txt:1499
msgid "See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1428
msgid "FILE_UPLOAD_MAX_MEMORY_SIZE"
msgstr ""

#: ../../ref/settings.txt:1430
msgid "Default: ``2621440`` (i.e. 2.5 MB)."
msgstr ""

#: ../../ref/settings.txt:1432
msgid ""
"The maximum size (in bytes) that an upload will be before it gets streamed "
"to the file system. See :doc:`/topics/files` for details."
msgstr ""

#: ../../ref/settings.txt:1438
msgid "FILE_UPLOAD_DIRECTORY_PERMISSIONS"
msgstr ""

#: ../../ref/settings.txt:1444
msgid ""
"The numeric mode to apply to directories created in the process of uploading"
" files."
msgstr ""

#: ../../ref/settings.txt:1447
msgid ""
"This setting also determines the default permissions for collected static "
"directories when using the :djadmin:`collectstatic` management command. See "
":djadmin:`collectstatic` for details on overriding it."
msgstr ""

#: ../../ref/settings.txt:1451
msgid ""
"This value mirrors the functionality and caveats of the "
":setting:`FILE_UPLOAD_PERMISSIONS` setting."
msgstr ""

#: ../../ref/settings.txt:1457
msgid "FILE_UPLOAD_PERMISSIONS"
msgstr ""

#: ../../ref/settings.txt:1461
msgid ""
"The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more "
"information about what these modes mean, see the documentation for "
":func:`os.chmod`."
msgstr ""

#: ../../ref/settings.txt:1465
msgid ""
"If this isn't given or is ``None``, you'll get operating-system dependent "
"behavior. On most platforms, temporary files will have a mode of ``0o600``, "
"and files saved from memory will be saved using the system's standard umask."
msgstr ""

#: ../../ref/settings.txt:1470
msgid ""
"For security reasons, these permissions aren't applied to the temporary "
"files that are stored in :setting:`FILE_UPLOAD_TEMP_DIR`."
msgstr ""

#: ../../ref/settings.txt:1473
msgid ""
"This setting also determines the default permissions for collected static "
"files when using the :djadmin:`collectstatic` management command. See "
":djadmin:`collectstatic` for details on overriding it."
msgstr ""

#: ../../ref/settings.txt:1479
msgid "**Always prefix the mode with a 0.**"
msgstr ""

#: ../../ref/settings.txt:1481
msgid ""
"If you're not familiar with file modes, please note that the leading ``0`` "
"is very important: it indicates an octal number, which is the way that modes"
" must be specified. If you try to use ``644``, you'll get totally incorrect "
"behavior."
msgstr ""

#: ../../ref/settings.txt:1489
msgid "FILE_UPLOAD_TEMP_DIR"
msgstr ""

#: ../../ref/settings.txt:1493
msgid ""
"The directory to store data to (typically files larger than "
":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files. "
"If ``None``, Django will use the standard temporary directory for the "
"operating system. For example, this will default to ``/tmp`` on \\*nix-style"
" operating systems."
msgstr ""

#: ../../ref/settings.txt:1504
msgid "FIRST_DAY_OF_WEEK"
msgstr ""

#: ../../ref/settings.txt:1506
msgid "Default: ``0`` (Sunday)"
msgstr ""

#: ../../ref/settings.txt:1508
msgid ""
"A number representing the first day of the week. This is especially useful "
"when displaying a calendar. This value is only used when not using format "
"internationalization, or when a format cannot be found for the current "
"locale."
msgstr ""

#: ../../ref/settings.txt:1513
msgid ""
"The value must be an integer from 0 to 6, where 0 means Sunday, 1 means "
"Monday and so on."
msgstr ""

#: ../../ref/settings.txt:1519
msgid "FIXTURE_DIRS"
msgstr ""

#: ../../ref/settings.txt:1523
msgid ""
"List of directories searched for fixture files, in addition to the "
"``fixtures`` directory of each application, in search order."
msgstr ""

#: ../../ref/settings.txt:1526 ../../ref/settings.txt:2500
#: ../../ref/templates/api.txt:782
msgid ""
"Note that these paths should use Unix-style forward slashes, even on "
"Windows."
msgstr ""

#: ../../ref/settings.txt:1528
msgid ""
"See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`."
msgstr ""

#: ../../ref/settings.txt:1533
msgid "FORCE_SCRIPT_NAME"
msgstr ""

#: ../../ref/settings.txt:1537
msgid ""
"If not ``None``, this will be used as the value of the ``SCRIPT_NAME`` "
"environment variable in any HTTP request. This setting can be used to "
"override the server-provided value of ``SCRIPT_NAME``, which may be a "
"rewritten version of the preferred value or not supplied at all."
msgstr ""

#: ../../ref/settings.txt:1545
msgid "FORMAT_MODULE_PATH"
msgstr ""

#: ../../ref/settings.txt:1549
msgid ""
"A full Python path to a Python package that contains format definitions for "
"project locales. If not ``None``, Django will check for a ``formats.py`` "
"file, under the directory named as the current locale, and will use the "
"formats defined in this file."
msgstr ""

#: ../../ref/settings.txt:1554
msgid ""
"For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``, "
"and current language is ``en`` (English), Django will expect a directory "
"tree like::"
msgstr ""

#: ../../ref/settings.txt:1567
msgid "You can also set this setting to a list of Python paths, for example::"
msgstr ""

#: ../../ref/settings.txt:1574
msgid ""
"When Django searches for a certain format, it will go through all given "
"Python paths until it finds a module that actually defines the given format."
" This means that formats defined in packages farther up in the list will "
"take precedence over the same formats in packages farther down."
msgstr ""

#: ../../ref/settings.txt:1579
msgid ""
"Available formats are :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT`, "
":setting:`DATETIME_FORMAT`, :setting:`YEAR_MONTH_FORMAT`, "
":setting:`MONTH_DAY_FORMAT`, :setting:`SHORT_DATE_FORMAT`, "
":setting:`SHORT_DATETIME_FORMAT`, :setting:`FIRST_DAY_OF_WEEK`, "
":setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and "
":setting:`NUMBER_GROUPING`."
msgstr ""

#: ../../ref/settings.txt:1589
msgid "IGNORABLE_404_URLS"
msgstr ""

#: ../../ref/settings.txt:1591
msgid "Default: ``()``"
msgstr ""

#: ../../ref/settings.txt:1593
msgid ""
"List of compiled regular expression objects describing URLs that should be "
"ignored when reporting HTTP 404 errors via email (see :doc:`/howto/error-"
"reporting`). Regular expressions are matched against :meth:`request's full "
"paths <django.http.HttpRequest.get_full_path>` (including query string, if "
"any). Use this if your site does not provide a commonly requested file such "
"as ``favicon.ico`` or ``robots.txt``, or if it gets hammered by script "
"kiddies."
msgstr ""

#: ../../ref/settings.txt:1601
msgid ""
"This is only used if "
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` is enabled "
"(see :doc:`/topics/http/middleware`)."
msgstr ""

#: ../../ref/settings.txt:1608
msgid "INSTALLED_APPS"
msgstr ""

#: ../../ref/settings.txt:1612
msgid ""
"A tuple of strings designating all applications that are enabled in this "
"Django installation. Each string should be a dotted Python path to:"
msgstr ""

#: ../../ref/settings.txt:1615
msgid "an application configuration class, or"
msgstr ""

#: ../../ref/settings.txt:1616
msgid "a package containing an application."
msgstr ""

#: ../../ref/settings.txt:1618
msgid ""
":doc:`Learn more about application configurations </ref/applications>`."
msgstr ""

#: ../../ref/settings.txt:1622
msgid ":setting:`INSTALLED_APPS` now supports application configurations."
msgstr ""

#: ../../ref/settings.txt:1624
msgid "Use the application registry for introspection"
msgstr ""

#: ../../ref/settings.txt:1626
msgid ""
"Your code should never access :setting:`INSTALLED_APPS` directly. Use "
":attr:`django.apps.apps` instead."
msgstr ""

#: ../../ref/settings.txt:1629
msgid ""
"Application names and labels must be unique in             "
":setting:`INSTALLED_APPS`"
msgstr ""

#: ../../ref/settings.txt:1632
msgid ""
"Application :attr:`names <django.apps.AppConfig.name>` — the dotted Python "
"path to the application package — must be unique. There is no way to include"
" the same application twice, short of duplicating its code under another "
"name."
msgstr ""

#: ../../ref/settings.txt:1637
msgid ""
"Application :attr:`labels <django.apps.AppConfig.label>` — by default the "
"final part of the name — must be unique too. For example, you can't include "
"both ``django.contrib.auth`` and ``myproject.auth``. However, you can "
"relabel an application with a custom configuration that defines a different "
":attr:`~django.apps.AppConfig.label`."
msgstr ""

#: ../../ref/settings.txt:1643
msgid ""
"These rules apply regardless of whether :setting:`INSTALLED_APPS` references"
" application configuration classes or application packages."
msgstr ""

#: ../../ref/settings.txt:1646
msgid ""
"When several applications provide different versions of the same resource "
"(template, static file, management command, translation), the application "
"listed first in :setting:`INSTALLED_APPS` has precedence."
msgstr ""

#: ../../ref/settings.txt:1653
msgid "INTERNAL_IPS"
msgstr ""

#: ../../ref/settings.txt:1657
msgid "A tuple of IP addresses, as strings, that:"
msgstr ""

#: ../../ref/settings.txt:1659
msgid ""
"Allow the :func:`~django.template.context_processors.debug` context "
"processor to add some variables to the template context."
msgstr ""

#: ../../ref/settings.txt:1661
msgid ""
"Can use the :ref:`admindocs bookmarklets <admindocs-bookmarklets>` even if "
"not logged in as a staff user."
msgstr ""

#: ../../ref/settings.txt:1663
msgid ""
"Are marked as \"internal\" (as opposed to \"EXTERNAL\") in "
":class:`~django.utils.log.AdminEmailHandler` emails."
msgstr ""

#: ../../ref/settings.txt:1669
msgid "LANGUAGE_CODE"
msgstr ""

#: ../../ref/settings.txt:1671
msgid "Default: ``'en-us'``"
msgstr ""

#: ../../ref/settings.txt:1673
msgid ""
"A string representing the language code for this installation. This should "
"be in standard :term:`language ID format <language code>`. For example, U.S."
" English is ``\"en-us\"``. See also the `list of language identifiers`_ and "
":doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1678
msgid ""
":setting:`USE_I18N` must be active for this setting to have any effect."
msgstr ""

#: ../../ref/settings.txt:1680
msgid "It serves two purposes:"
msgstr ""

#: ../../ref/settings.txt:1682
msgid ""
"If the locale middleware isn't in use, it decides which translation is "
"served to all users."
msgstr ""

#: ../../ref/settings.txt:1684
msgid ""
"If the locale middleware is active, it provides a fallback language in case "
"the user's preferred language can't be determined or is not supported by the"
" Web site. It also provides the fallback translation when a translation for "
"a given literal doesn't exist for the user's preferred language."
msgstr ""

#: ../../ref/settings.txt:1691
msgid "The fallback for translation literals was added."
msgstr ""

#: ../../ref/settings.txt:1693
msgid "See :ref:`how-django-discovers-language-preference` for more details."
msgstr ""

#: ../../ref/settings.txt:1700
msgid "LANGUAGE_COOKIE_AGE"
msgstr ""

#: ../../ref/settings.txt:1704
msgid "Default: ``None`` (expires at browser close)"
msgstr ""

#: ../../ref/settings.txt:1706
msgid "The age of the language cookie, in seconds."
msgstr ""

#: ../../ref/settings.txt:1711
msgid "LANGUAGE_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/settings.txt:1717
msgid ""
"The domain to use for the language cookie. Set this to a string such as "
"``\".example.com\"`` (note the leading dot!) for cross-domain cookies, or "
"use ``None`` for a standard domain cookie."
msgstr ""

#: ../../ref/settings.txt:1721
msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to enable cross-domain cookies on a site that previously used "
"standard domain cookies, existing user cookies that have the old domain will"
" not be updated. This will result in site users being unable to switch the "
"language as long as these cookies persist. The only safe and reliable option"
" to perform the switch is to change the language cookie name permanently "
"(via the :setting:`LANGUAGE_COOKIE_NAME` setting) and to add a middleware "
"that copies the value from the old cookie to a new one and then deletes the "
"old one."
msgstr ""

#: ../../ref/settings.txt:1734
msgid "LANGUAGE_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:1736
msgid "Default: ``'django_language'``"
msgstr ""

#: ../../ref/settings.txt:1738
msgid ""
"The name of the cookie to use for the language cookie. This can be whatever "
"you want (as long as it's different from the other cookie names in your "
"application). See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1745
msgid "LANGUAGE_COOKIE_PATH"
msgstr ""

#: ../../ref/settings.txt:1749
msgid "Default: ``/``"
msgstr ""

#: ../../ref/settings.txt:1751
msgid ""
"The path set on the language cookie. This should either match the URL path "
"of your Django installation or be a parent of that path."
msgstr ""

#: ../../ref/settings.txt:1754
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths and each instance will only "
"see its own language cookie."
msgstr ""

#: ../../ref/settings.txt:1758
msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to use a deeper path than it previously used, existing user "
"cookies that have the old path will not be updated. This will result in site"
" users being unable to switch the language as long as these cookies persist."
" The only safe and reliable option to perform the switch is to change the "
"language cookie name permanently (via the :setting:`LANGUAGE_COOKIE_NAME` "
"setting), and to add a middleware that copies the value from the old cookie "
"to a new one and then deletes the one."
msgstr ""

#: ../../ref/settings.txt:1770
msgid "LANGUAGES"
msgstr ""

#: ../../ref/settings.txt:1772
msgid ""
"Default: A tuple of all available languages. This list is continually "
"growing and including a copy here would inevitably become rapidly out of "
"date. You can see the current list of translated languages by looking in "
"``django/conf/global_settings.py`` (or view the `online source`_)."
msgstr ""

#: ../../ref/settings.txt:1779
msgid ""
"The list is a tuple of two-tuples in the format (:term:`language "
"code<language code>`, ``language name``) -- for example, ``('ja', "
"'Japanese')``. This specifies which languages are available for language "
"selection. See :doc:`/topics/i18n/index`."
msgstr ""

#: ../../ref/settings.txt:1785
msgid ""
"Generally, the default value should suffice. Only set this setting if you "
"want to restrict language selection to a subset of the Django-provided "
"languages."
msgstr ""

#: ../../ref/settings.txt:1788
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, you can mark the "
"language names as translation strings using the "
":func:`~django.utils.translation.ugettext_lazy` function."
msgstr ""

#: ../../ref/settings.txt:1792
msgid "Here's a sample settings file::"
msgstr ""

#: ../../ref/settings.txt:1804
msgid "LOCALE_PATHS"
msgstr ""

#: ../../ref/settings.txt:1808
msgid ""
"A tuple of directories where Django looks for translation files. See :ref"
":`how-django-discovers-translations`."
msgstr ""

#: ../../ref/settings.txt:1818
msgid ""
"Django will look within each of these paths for the "
"``<locale_code>/LC_MESSAGES`` directories containing the actual translation "
"files."
msgstr ""

#: ../../ref/settings.txt:1824
msgid "LOGGING"
msgstr ""

#: ../../ref/settings.txt:1826
msgid "Default: A logging configuration dictionary."
msgstr ""

#: ../../ref/settings.txt:1828
msgid ""
"A data structure containing configuration information. The contents of this "
"data structure will be passed as the argument to the configuration method "
"described in :setting:`LOGGING_CONFIG`."
msgstr ""

#: ../../ref/settings.txt:1832
msgid ""
"Among other things, the default logging configuration passes HTTP 500 server"
" errors to an email log handler when :setting:`DEBUG` is ``False``. See also"
" :ref:`configuring-logging`."
msgstr ""

#: ../../ref/settings.txt:1836
msgid ""
"You can see the default logging configuration by looking in "
"``django/utils/log.py`` (or view the `online source`__)."
msgstr ""

#: ../../ref/settings.txt:1844
msgid "LOGGING_CONFIG"
msgstr ""

#: ../../ref/settings.txt:1846
msgid "Default: ``'logging.config.dictConfig'``"
msgstr ""

#: ../../ref/settings.txt:1848
msgid ""
"A path to a callable that will be used to configure logging in the Django "
"project. Points at a instance of Python's `dictConfig`_ configuration method"
" by default."
msgstr ""

#: ../../ref/settings.txt:1852
msgid ""
"If you set :setting:`LOGGING_CONFIG` to ``None``, the logging configuration "
"process will be skipped."
msgstr ""

#: ../../ref/settings.txt:1857
msgid "Previously, the default value was ``'django.utils.log.dictConfig'``."
msgstr ""

#: ../../ref/settings.txt:1864
msgid "MANAGERS"
msgstr ""

#: ../../ref/settings.txt:1868
msgid ""
"A tuple in the same format as :setting:`ADMINS` that specifies who should "
"get broken link notifications when "
":class:`~django.middleware.common.BrokenLinkEmailsMiddleware` is enabled."
msgstr ""

#: ../../ref/settings.txt:1875
msgid "MEDIA_ROOT"
msgstr ""

#: ../../ref/settings.txt:1879
msgid ""
"Absolute filesystem path to the directory that will hold :doc:`user-uploaded"
" files </topics/files>`."
msgstr ""

#: ../../ref/settings.txt:1882
msgid "Example: ``\"/var/www/example.com/media/\"``"
msgstr ""

#: ../../ref/settings.txt:1884
msgid "See also :setting:`MEDIA_URL`."
msgstr ""

#: ../../ref/settings.txt:1888
msgid ""
":setting:`MEDIA_ROOT` and :setting:`STATIC_ROOT` must have different values."
" Before :setting:`STATIC_ROOT` was introduced, it was common to rely or "
"fallback on :setting:`MEDIA_ROOT` to also serve static files; however, since"
" this can have serious security implications, there is a validation check to"
" prevent it."
msgstr ""

#: ../../ref/settings.txt:1897
msgid "MEDIA_URL"
msgstr ""

#: ../../ref/settings.txt:1901
msgid ""
"URL that handles the media served from :setting:`MEDIA_ROOT`, used for "
":doc:`managing stored files </topics/files>`. It must end in a slash if set "
"to a non-empty value. You will need to :ref:`configure these files to be "
"served <serving-uploaded-files-in-development>` in both development and "
"production environments."
msgstr ""

#: ../../ref/settings.txt:1907
msgid ""
"If you want to use ``{{ MEDIA_URL }}`` in your templates, add "
"``'django.template.context_processors.media'`` in the "
"``'context_processors'`` option of :setting:`TEMPLATES`."
msgstr ""

#: ../../ref/settings.txt:1911
msgid "Example: ``\"http://media.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:1915
msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""

#: ../../ref/settings.txt:1921
msgid ""
":setting:`MEDIA_URL` and :setting:`STATIC_URL` must have different values. "
"See :setting:`MEDIA_ROOT` for more details."
msgstr ""

#: ../../ref/settings.txt:1927
msgid "MIDDLEWARE_CLASSES"
msgstr ""

#: ../../ref/settings.txt:1934
msgid ""
"A tuple of middleware classes to use. See :doc:`/topics/http/middleware`."
msgstr ""

#: ../../ref/settings.txt:1938
msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware`, "
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware`, and "
":class:`~django.contrib.messages.middleware.MessageMiddleware` were removed "
"from this setting."
msgstr ""

#: ../../ref/settings.txt:1946
msgid "MIGRATION_MODULES"
msgstr ""

#: ../../ref/settings.txt:1952
msgid ""
"A dictionary specifying the package where migration modules can be found on "
"a per-app basis. The default value of this setting is an empty dictionary, "
"but the default package name for migration modules is ``migrations``."
msgstr ""

#: ../../ref/settings.txt:1959
msgid ""
"In this case, migrations pertaining to the ``blog`` app will be contained in"
" the ``blog.db_migrations`` package."
msgstr ""

#: ../../ref/settings.txt:1961
msgid ""
"If you provide the ``app_label`` argument, :djadmin:`makemigrations` will "
"automatically create the package if it doesn't already exist."
msgstr ""

#: ../../ref/settings.txt:1967
msgid "MONTH_DAY_FORMAT"
msgstr ""

#: ../../ref/settings.txt:1969
msgid "Default: ``'F j'``"
msgstr ""

#: ../../ref/settings.txt:1971
msgid ""
"The default formatting to use for date fields on Django admin change-list "
"pages -- and, possibly, by other parts of the system -- in cases when only "
"the month and day are displayed."
msgstr ""

#: ../../ref/settings.txt:1975
msgid ""
"For example, when a Django admin change-list page is being filtered by a "
"date drilldown, the header for a given day displays the day and month. "
"Different locales have different formats. For example, U.S. English would "
"say \"January 1,\" whereas Spanish might say \"1 Enero.\""
msgstr ""

#: ../../ref/settings.txt:1980 ../../ref/settings.txt:2804
msgid ""
"Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding "
"locale-dictated format has higher precedence and will be applied."
msgstr ""

#: ../../ref/settings.txt:1983
msgid ""
"See :tfilter:`allowed date format strings <date>`. See also "
":setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` "
"and :setting:`YEAR_MONTH_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:1990
msgid "NUMBER_GROUPING"
msgstr ""

#: ../../ref/settings.txt:1994
msgid "Number of digits grouped together on the integer part of a number."
msgstr ""

#: ../../ref/settings.txt:1996
msgid ""
"Common use is to display a thousand separator. If this setting is ``0``, "
"then no grouping will be applied to the number. If this setting is greater "
"than ``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator"
" between those groups."
msgstr ""

#: ../../ref/settings.txt:2004
msgid ""
"See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and "
":setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2010
msgid "PREPEND_WWW"
msgstr ""

#: ../../ref/settings.txt:2014
msgid ""
"Whether to prepend the \"www.\" subdomain to URLs that don't have it. This "
"is only used if :class:`~django.middleware.common.CommonMiddleware` is "
"installed (see :doc:`/topics/http/middleware`). See also "
":setting:`APPEND_SLASH`."
msgstr ""

#: ../../ref/settings.txt:2021
msgid "ROOT_URLCONF"
msgstr ""

#: ../../ref/settings.txt:2025
msgid ""
"A string representing the full Python import path to your root URLconf. For "
"example: ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis"
" by setting the attribute ``urlconf`` on the incoming ``HttpRequest`` "
"object. See :ref:`how-django-processes-a-request` for details."
msgstr ""

#: ../../ref/settings.txt:2033
msgid "SECRET_KEY"
msgstr ""

#: ../../ref/settings.txt:2037
msgid ""
"A secret key for a particular Django installation. This is used to provide "
":doc:`cryptographic signing </topics/signing>`, and should be set to a "
"unique, unpredictable value."
msgstr ""

#: ../../ref/settings.txt:2041
msgid ""
":djadmin:`django-admin startproject <startproject>` automatically adds a "
"randomly-generated ``SECRET_KEY`` to each new project."
msgstr ""

#: ../../ref/settings.txt:2044
msgid "Django will refuse to start if :setting:`SECRET_KEY` is not set."
msgstr ""

#: ../../ref/settings.txt:2048
msgid "**Keep this value secret.**"
msgstr ""

#: ../../ref/settings.txt:2050
msgid ""
"Running Django with a known :setting:`SECRET_KEY` defeats many of Django's "
"security protections, and can lead to privilege escalation and remote code "
"execution vulnerabilities."
msgstr ""

#: ../../ref/settings.txt:2054
msgid "The secret key is used for:"
msgstr ""

#: ../../ref/settings.txt:2056
msgid ""
"All :doc:`sessions </topics/http/sessions>` if you are using any other "
"session backend than ``django.contrib.sessions.backends.cache``, or if you "
"use :class:`~django.contrib.auth.middleware.SessionAuthenticationMiddleware`"
" and are using the default "
":meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`."
msgstr ""

#: ../../ref/settings.txt:2062
msgid ""
"All :doc:`messages </ref/contrib/messages>` if you are using "
":class:`~django.contrib.messages.storage.cookie.CookieStorage` or "
":class:`~django.contrib.messages.storage.fallback.FallbackStorage`."
msgstr ""

#: ../../ref/settings.txt:2065
msgid ""
":mod:`Form wizard <formtools.wizard.views>` progress when using cookie "
"storage with :class:`formtools.wizard.views.CookieWizardView`."
msgstr ""

#: ../../ref/settings.txt:2068
msgid "All :func:`~django.contrib.auth.views.password_reset` tokens."
msgstr ""

#: ../../ref/settings.txt:2069
msgid "All in progress :mod:`form previews <formtools.preview>`."
msgstr ""

#: ../../ref/settings.txt:2070
msgid ""
"Any usage of :doc:`cryptographic signing </topics/signing>`, unless a "
"different key is provided."
msgstr ""

#: ../../ref/settings.txt:2073
msgid ""
"If you rotate your secret key, all of the above will be invalidated. Secret "
"keys are not used for passwords of users and key rotation will not affect "
"them."
msgstr ""

#: ../../ref/settings.txt:2079
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` creates a unique ``SECRET_KEY`` for "
"convenience."
msgstr ""

#: ../../ref/settings.txt:2086
msgid "SECURE_BROWSER_XSS_FILTER"
msgstr ""

#: ../../ref/settings.txt:2092
msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"sets the :ref:`x-xss-protection` header on all responses that do not already"
" have it."
msgstr ""

#: ../../ref/settings.txt:2098
msgid "SECURE_CONTENT_TYPE_NOSNIFF"
msgstr ""

#: ../../ref/settings.txt:2104
msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"sets the :ref:`x-content-type-options` header on all responses that do not "
"already have it."
msgstr ""

#: ../../ref/settings.txt:2111
msgid "SECURE_HSTS_INCLUDE_SUBDOMAINS"
msgstr ""

#: ../../ref/settings.txt:2117
msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
"adds the ``includeSubDomains`` tag to the :ref:`http-strict-transport-"
"security` header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is "
"set to a non-zero value."
msgstr ""

#: ../../ref/settings.txt:2123
msgid ""
"Setting this incorrectly can irreversibly (for the value of "
":setting:`SECURE_HSTS_SECONDS`) break your site. Read the :ref:`http-strict-"
"transport-security` documentation first."
msgstr ""

#: ../../ref/settings.txt:2130
msgid "SECURE_HSTS_SECONDS"
msgstr ""

#: ../../ref/settings.txt:2136
msgid ""
"If set to a non-zero integer value, the "
":class:`~django.middleware.security.SecurityMiddleware` sets the :ref:`http-"
"strict-transport-security` header on all responses that do not already have "
"it."
msgstr ""

#: ../../ref/settings.txt:2142
msgid ""
"Setting this incorrectly can irreversibly (for some time) break your site. "
"Read the :ref:`http-strict-transport-security` documentation first."
msgstr ""

#: ../../ref/settings.txt:2148
msgid "SECURE_PROXY_SSL_HEADER"
msgstr ""

#: ../../ref/settings.txt:2152
msgid ""
"A tuple representing a HTTP header/value combination that signifies a "
"request is secure. This controls the behavior of the request object's "
"``is_secure()`` method."
msgstr ""

#: ../../ref/settings.txt:2156
msgid ""
"This takes some explanation. By default, ``is_secure()`` is able to "
"determine whether a request is secure by looking at whether the requested "
"URL uses \"https://\". This is important for Django's CSRF protection, and "
"may be used by your own code or third-party apps."
msgstr ""

#: ../../ref/settings.txt:2161
msgid ""
"If your Django app is behind a proxy, though, the proxy may be "
"\"swallowing\" the fact that a request is HTTPS, using a non-HTTPS "
"connection between the proxy and Django. In this case, ``is_secure()`` would"
" always return ``False`` -- even for requests that were made via HTTPS by "
"the end user."
msgstr ""

#: ../../ref/settings.txt:2166
msgid ""
"In this situation, you'll want to configure your proxy to set a custom HTTP "
"header that tells Django whether the request came in via HTTPS, and you'll "
"want to set ``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to "
"look for."
msgstr ""

#: ../../ref/settings.txt:2171
msgid ""
"You'll need to set a tuple with two elements -- the name of the header to "
"look for and the required value. For example::"
msgstr ""

#: ../../ref/settings.txt:2176
msgid ""
"Here, we're telling Django that we trust the ``X-Forwarded-Proto`` header "
"that comes from our proxy, and any time its value is ``'https'``, then the "
"request is guaranteed to be secure (i.e., it originally came in via HTTPS). "
"Obviously, you should *only* set this setting if you control your proxy or "
"have some other guarantee that it sets/strips this header appropriately."
msgstr ""

#: ../../ref/settings.txt:2182
msgid ""
"Note that the header needs to be in the format as used by ``request.META`` "
"-- all caps and likely starting with ``HTTP_``. (Remember, Django "
"automatically adds ``'HTTP_'`` to the start of x-header names before making "
"the header available in ``request.META``.)"
msgstr ""

#: ../../ref/settings.txt:2189
msgid ""
"**You will probably open security holes in your site if you set this without"
" knowing what you're doing. And if you fail to set it when you should. "
"Seriously.**"
msgstr ""

#: ../../ref/settings.txt:2193
msgid ""
"Make sure ALL of the following are true before setting this (assuming the "
"values from the example above):"
msgstr ""

#: ../../ref/settings.txt:2196
msgid "Your Django app is behind a proxy."
msgstr ""

#: ../../ref/settings.txt:2197
msgid ""
"Your proxy strips the ``X-Forwarded-Proto`` header from all incoming "
"requests. In other words, if end users include that header in their "
"requests, the proxy will discard it."
msgstr ""

#: ../../ref/settings.txt:2200
msgid ""
"Your proxy sets the ``X-Forwarded-Proto`` header and sends it to Django, but"
" only for requests that originally come in via HTTPS."
msgstr ""

#: ../../ref/settings.txt:2203
msgid ""
"If any of those are not true, you should keep this setting set to ``None`` "
"and find another way of determining HTTPS, perhaps via custom middleware."
msgstr ""

#: ../../ref/settings.txt:2209
msgid "SECURE_REDIRECT_EXEMPT"
msgstr ""

#: ../../ref/settings.txt:2215
msgid ""
"If a URL path matches a regular expression in this list, the request will "
"not be redirected to HTTPS. If :setting:`SECURE_SSL_REDIRECT` is ``False``, "
"this setting has no effect."
msgstr ""

#: ../../ref/settings.txt:2222
msgid "SECURE_SSL_HOST"
msgstr ""

#: ../../ref/settings.txt:2228
msgid ""
"If a string (e.g. ``secure.example.com``), all SSL redirects will be "
"directed to this host rather than the originally-requested host (e.g. "
"``www.example.com``). If :setting:`SECURE_SSL_REDIRECT` is ``False``, this "
"setting has no effect."
msgstr ""

#: ../../ref/settings.txt:2236
msgid "SECURE_SSL_REDIRECT"
msgstr ""

#: ../../ref/settings.txt:2240
msgid "Default: ``False``."
msgstr ""

#: ../../ref/settings.txt:2242
msgid ""
"If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` "
":ref:`redirects <ssl-redirect>` all non-HTTPS requests to HTTPS (except for "
"those URLs matching a regular expression listed in "
":setting:`SECURE_REDIRECT_EXEMPT`)."
msgstr ""

#: ../../ref/settings.txt:2249
msgid ""
"If turning this to ``True`` causes infinite redirects, it probably means "
"your site is running behind a proxy and can't tell which requests are secure"
" and which are not. Your proxy likely sets a header to indicate secure "
"requests; you can correct the problem by finding out what that header is and"
" configuring the :setting:`SECURE_PROXY_SSL_HEADER` setting accordingly."
msgstr ""

#: ../../ref/settings.txt:2258
msgid "SERIALIZATION_MODULES"
msgstr ""

#: ../../ref/settings.txt:2260
msgid "Default: Not defined."
msgstr ""

#: ../../ref/settings.txt:2262
msgid ""
"A dictionary of modules containing serializer definitions (provided as "
"strings), keyed by a string identifier for that serialization type. For "
"example, to define a YAML serializer, use::"
msgstr ""

#: ../../ref/settings.txt:2271
msgid "SERVER_EMAIL"
msgstr ""

#: ../../ref/settings.txt:2273
msgid "Default: ``'root@localhost'``"
msgstr ""

#: ../../ref/settings.txt:2275
msgid ""
"The email address that error messages come from, such as those sent to "
":setting:`ADMINS` and :setting:`MANAGERS`."
msgstr ""

#: ../../ref/settings.txt:2278
msgid "Why are my emails sent from a different address?"
msgstr ""

#: ../../ref/settings.txt:2280
msgid ""
"This address is used only for error messages. It is *not* the address that "
"regular email messages sent with :meth:`~django.core.mail.send_mail()` come "
"from; for that, see :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

#: ../../ref/settings.txt:2287
msgid "SHORT_DATE_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2289
msgid "Default: ``m/d/Y`` (e.g. ``12/31/2003``)"
msgstr ""

#: ../../ref/settings.txt:2291
msgid ""
"An available formatting that can be used for displaying date fields on "
"templates. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"corresponding locale-dictated format has higher precedence and will be "
"applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:2296
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2301
msgid "SHORT_DATETIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2303
msgid "Default: ``m/d/Y P`` (e.g. ``12/31/2003 4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:2305
msgid ""
"An available formatting that can be used for displaying datetime fields on "
"templates. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"corresponding locale-dictated format has higher precedence and will be "
"applied. See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:2310
msgid "See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2315
msgid "SIGNING_BACKEND"
msgstr ""

#: ../../ref/settings.txt:2317
msgid "Default: ``'django.core.signing.TimestampSigner'``"
msgstr ""

#: ../../ref/settings.txt:2319
msgid "The backend used for signing cookies and other data."
msgstr ""

#: ../../ref/settings.txt:2321
msgid "See also the :doc:`/topics/signing` documentation."
msgstr ""

#: ../../ref/settings.txt:2326
msgid "SILENCED_SYSTEM_CHECKS"
msgstr ""

#: ../../ref/settings.txt:2332
msgid ""
"A list of identifiers of messages generated by the system check framework "
"(i.e. ``[\"models.W001\"]``) that you wish to permanently acknowledge and "
"ignore. Silenced warnings will no longer be output to the console; silenced "
"errors will still be printed, but will not prevent management commands from "
"running."
msgstr ""

#: ../../ref/settings.txt:2337
msgid "See also the :doc:`/ref/checks` documentation."
msgstr ""

#: ../../ref/settings.txt:2342
msgid "TEMPLATES"
msgstr ""

#: ../../ref/settings.txt:2348
msgid ""
"A list containing the settings for all template engines to be used with "
"Django. Each item of the list is a dictionary containing the options for an "
"individual engine."
msgstr ""

#: ../../ref/settings.txt:2352
msgid ""
"Here's a simple setup that tells the Django template engine to load "
"templates from the ``templates`` subdirectory inside each installed "
"application::"
msgstr ""

#: ../../ref/settings.txt:2362
msgid "The following options are available for all backends."
msgstr ""

#: ../../ref/settings.txt:2369
msgid "Default: not defined"
msgstr ""

#: ../../ref/settings.txt:2371
msgid "The template backend to use. The built-in template backends are:"
msgstr ""

#: ../../ref/settings.txt:2373
msgid "``'django.template.backends.django.DjangoTemplates'``"
msgstr ""

#: ../../ref/settings.txt:2374
msgid "``'django.template.backends.jinja2.Jinja2'``"
msgstr ""

#: ../../ref/settings.txt:2376
msgid ""
"You can use a template backend that doesn't ship with Django by setting "
"``BACKEND`` to a fully-qualified path (i.e. "
"``'mypackage.whatever.Backend'``)."
msgstr ""

#: ../../ref/settings.txt:2384
msgid "Default: see below"
msgstr ""

#: ../../ref/settings.txt:2386
msgid ""
"The alias for this particular template engine. It's an identifier that "
"allows selecting an engine for rendering. Aliases must be unique across all "
"configured template engines."
msgstr ""

#: ../../ref/settings.txt:2390
msgid ""
"It defaults to the name of the module defining the engine class, i.e. the "
"next to last piece of :setting:`BACKEND <TEMPLATES-BACKEND>`, when it isn't "
"provided. For example if the backend is ``'mypackage.whatever.Backend'`` "
"then its default name is ``'whatever'``."
msgstr ""

#: ../../ref/settings.txt:2398
msgid "DIRS"
msgstr ""

#: ../../ref/settings.txt:2402
msgid ""
"Directories where the engine should look for template source files, in "
"search order."
msgstr ""

#: ../../ref/settings.txt:2408
msgid "APP_DIRS"
msgstr ""

#: ../../ref/settings.txt:2412
msgid ""
"Whether the engine should look for template source files inside installed "
"applications."
msgstr ""

#: ../../ref/settings.txt:2417
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` sets ``'APP_DIRS': True``."
msgstr ""

#: ../../ref/settings.txt:2425
msgid "Default: ``{}`` (Empty dict)"
msgstr ""

#: ../../ref/settings.txt:2427
msgid ""
"Extra parameters to pass to the template backend. Available parameters vary "
"depending on the template backend. See "
":class:`~django.template.backends.django.DjangoTemplates` and "
":class:`~django.template.backends.jinja2.Jinja2` for the options of the "
"built-in backends."
msgstr ""

#: ../../ref/settings.txt:2436
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

#: ../../ref/settings.txt:2450
msgid ""
"Set the ``'context_processors'`` option in the :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>` of a ``DjangoTemplates`` backend instead."
msgstr ""

#: ../../ref/settings.txt:2453
msgid ""
"A tuple of callables that are used to populate the context in "
"``RequestContext``. These callables take a request object as their argument "
"and return a dictionary of items to be merged into the context."
msgstr ""

#: ../../ref/settings.txt:2459 ../../ref/templates/api.txt:579
msgid ""
"Built-in template context processors were moved from "
"``django.core.context_processors`` to ``django.template.context_processors``"
" in Django 1.8."
msgstr ""

#: ../../ref/settings.txt:2466
msgid "TEMPLATE_DEBUG"
msgstr ""

#: ../../ref/settings.txt:2472
msgid ""
"Set the ``'debug'`` option in the :setting:`OPTIONS <TEMPLATES-OPTIONS>` of "
"a ``DjangoTemplates`` backend instead."
msgstr ""

#: ../../ref/settings.txt:2475
msgid ""
"A boolean that turns on/off template debug mode. If this is ``True``, the "
"fancy error page will display a detailed report for any exception raised "
"during template rendering. This report contains the relevant snippet of the "
"template, with the appropriate line highlighted."
msgstr ""

#: ../../ref/settings.txt:2480
msgid ""
"Note that Django only displays fancy error pages if :setting:`DEBUG` is "
"``True``, so you'll want to set that to take advantage of this setting."
msgstr ""

#: ../../ref/settings.txt:2483
msgid "See also :setting:`DEBUG`."
msgstr ""

#: ../../ref/settings.txt:2488
msgid "TEMPLATE_DIRS"
msgstr ""

#: ../../ref/settings.txt:2494
msgid ""
"Set the :setting:`DIRS <TEMPLATES-DIRS>` option of a ``DjangoTemplates`` "
"backend instead."
msgstr ""

#: ../../ref/settings.txt:2497
msgid ""
"List of locations of the template source files searched by "
":class:`django.template.loaders.filesystem.Loader`, in search order."
msgstr ""

#: ../../ref/settings.txt:2502
msgid "See :doc:`/ref/templates/language`."
msgstr ""

#: ../../ref/settings.txt:2507
msgid "TEMPLATE_LOADERS"
msgstr ""

#: ../../ref/settings.txt:2516
msgid ""
"Set the ``'loaders'`` option in the :setting:`OPTIONS <TEMPLATES-OPTIONS>` "
"of a ``DjangoTemplates`` backend instead."
msgstr ""

#: ../../ref/settings.txt:2519
msgid ""
"A tuple of template loader classes, specified as strings. Each ``Loader`` "
"class knows how to import templates from a particular source. Optionally, a "
"tuple can be used instead of a string. The first item in the tuple should be"
" the ``Loader``’s module, subsequent items are passed to the ``Loader`` "
"during initialization. See :doc:`/ref/templates/api`."
msgstr ""

#: ../../ref/settings.txt:2528
msgid "TEMPLATE_STRING_IF_INVALID"
msgstr ""

#: ../../ref/settings.txt:2534
msgid ""
"Set the ``'string_if_invalid'`` option in the :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>` of a ``DjangoTemplates`` backend instead."
msgstr ""

#: ../../ref/settings.txt:2537
msgid ""
"Output, as a string, that the template system should use for invalid (e.g. "
"misspelled) variables. See :ref:`invalid-template-variables`."
msgstr ""

#: ../../ref/settings.txt:2543
msgid "TEST_RUNNER"
msgstr ""

#: ../../ref/settings.txt:2545
msgid "Default: ``'django.test.runner.DiscoverRunner'``"
msgstr ""

#: ../../ref/settings.txt:2547
msgid ""
"The name of the class to use for starting the test suite. See :ref:`other-"
"testing-frameworks`."
msgstr ""

#: ../../ref/settings.txt:2553
msgid "TEST_NON_SERIALIZED_APPS"
msgstr ""

#: ../../ref/settings.txt:2559
msgid ""
"In order to restore the database state between tests for "
"``TransactionTestCase``\\s and database backends without transactions, "
"Django will :ref:`serialize the contents of all apps <test-case-serialized-"
"rollback>` when it starts the test run so it can then reload from that copy "
"before running tests that need it."
msgstr ""

#: ../../ref/settings.txt:2565
msgid ""
"This slows down the startup time of the test runner; if you have apps that "
"you know don't need this feature, you can add their full names in here (e.g."
" ``'django.contrib.contenttypes'``) to exclude them from this serialization "
"process."
msgstr ""

#: ../../ref/settings.txt:2573
msgid "THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2575
msgid "Default: ``,`` (Comma)"
msgstr ""

#: ../../ref/settings.txt:2577
msgid ""
"Default thousand separator used when formatting numbers. This setting is "
"used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and "
":setting:`NUMBER_GROUPING` is greater than ``0``."
msgstr ""

#: ../../ref/settings.txt:2584
msgid ""
"See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and "
":setting:`USE_THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2590
msgid "TIME_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2592
msgid "Default: ``'P'`` (e.g. ``4 p.m.``)"
msgstr ""

#: ../../ref/settings.txt:2594
msgid ""
"The default formatting to use for displaying time fields in any part of the "
"system. Note that if :setting:`USE_L10N` is set to ``True``, then the "
"locale-dictated format has higher precedence and will be applied instead. "
"See :tfilter:`allowed date format strings <date>`."
msgstr ""

#: ../../ref/settings.txt:2599
msgid "See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2604
msgid "TIME_INPUT_FORMATS"
msgstr ""

#: ../../ref/settings.txt:2614
msgid ""
"A tuple of formats that will be accepted when inputting data on a time "
"field. Formats will be tried in order, using the first valid one. Note that "
"these format strings use Python's datetime_ module syntax, not the format "
"strings from the ``date`` Django template tag."
msgstr ""

#: ../../ref/settings.txt:2622
msgid ""
"See also :setting:`DATE_INPUT_FORMATS` and "
":setting:`DATETIME_INPUT_FORMATS`."
msgstr ""

#: ../../ref/settings.txt:2629
msgid "TIME_ZONE"
msgstr ""

#: ../../ref/settings.txt:2631
msgid "Default: ``'America/Chicago'``"
msgstr ""

#: ../../ref/settings.txt:2633
msgid ""
"A string representing the time zone for this installation, or ``None``. See "
"the `list of time zones`_."
msgstr ""

#: ../../ref/settings.txt:2637
msgid ""
"Since Django was first released with the :setting:`TIME_ZONE` set to "
"``'America/Chicago'``, the global setting (used if nothing is defined in "
"your project's ``settings.py``) remains ``'America/Chicago'`` for backwards "
"compatibility. New project templates default to ``'UTC'``."
msgstr ""

#: ../../ref/settings.txt:2642
msgid ""
"Note that this isn't necessarily the time zone of the server. For example, "
"one server may serve multiple Django-powered sites, each with a separate "
"time zone setting."
msgstr ""

#: ../../ref/settings.txt:2646
msgid ""
"When :setting:`USE_TZ` is ``False``, this is the time zone in which Django "
"will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the "
"default time zone that Django will use to display datetimes in templates and"
" to interpret datetimes entered in forms."
msgstr ""

#: ../../ref/settings.txt:2651
msgid ""
"Django sets the ``os.environ['TZ']`` variable to the time zone you specify "
"in the :setting:`TIME_ZONE` setting. Thus, all your views and models will "
"automatically operate in this time zone. However, Django won't set the "
"``TZ`` environment variable under the following conditions:"
msgstr ""

#: ../../ref/settings.txt:2656
msgid ""
"If you're using the manual configuration option as described in "
":ref:`manually configuring settings <settings-without-django-settings-"
"module>`, or"
msgstr ""

#: ../../ref/settings.txt:2660
msgid ""
"If you specify ``TIME_ZONE = None``. This will cause Django to fall back to "
"using the system timezone. However, this is discouraged when "
":setting:`USE_TZ = True <USE_TZ>`, because it makes conversions between "
"local time and UTC less reliable."
msgstr ""

#: ../../ref/settings.txt:2665
msgid ""
"If Django doesn't set the ``TZ`` environment variable, it's up to you to "
"ensure your processes are running in the correct environment."
msgstr ""

#: ../../ref/settings.txt:2669
msgid ""
"Django cannot reliably use alternate time zones in a Windows environment. If"
" you're running Django on Windows, :setting:`TIME_ZONE` must be set to match"
" the system time zone."
msgstr ""

#: ../../ref/settings.txt:2680
msgid "USE_ETAGS"
msgstr ""

#: ../../ref/settings.txt:2684
msgid ""
"A boolean that specifies whether to output the \"Etag\" header. This saves "
"bandwidth but slows down performance. This is used by the "
"``CommonMiddleware`` (see :doc:`/topics/http/middleware`) and in the``Cache "
"Framework`` (see :doc:`/topics/cache`)."
msgstr ""

#: ../../ref/settings.txt:2692
msgid "USE_I18N"
msgstr ""

#: ../../ref/settings.txt:2696
msgid ""
"A boolean that specifies whether Django's translation system should be "
"enabled. This provides an easy way to turn it off, for performance. If this "
"is set to ``False``, Django will make some optimizations so as not to load "
"the translation machinery."
msgstr ""

#: ../../ref/settings.txt:2701
msgid ""
"See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and "
":setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2705
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes ``USE_I18N = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2711
msgid "USE_L10N"
msgstr ""

#: ../../ref/settings.txt:2715
msgid ""
"A boolean that specifies if localized formatting of data will be enabled by "
"default or not. If this is set to ``True``, e.g. Django will display numbers"
" and dates using the format of the current locale."
msgstr ""

#: ../../ref/settings.txt:2719
msgid ""
"See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and "
":setting:`USE_TZ`."
msgstr ""

#: ../../ref/settings.txt:2723
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes ``USE_L10N = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2729
msgid "USE_THOUSAND_SEPARATOR"
msgstr ""

#: ../../ref/settings.txt:2733
msgid ""
"A boolean that specifies whether to display numbers using a thousand "
"separator. When :setting:`USE_L10N` is set to ``True`` and if this is also "
"set to ``True``, Django will use the values of :setting:`THOUSAND_SEPARATOR`"
" and :setting:`NUMBER_GROUPING` to format numbers."
msgstr ""

#: ../../ref/settings.txt:2738
msgid ""
"See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and "
":setting:`THOUSAND_SEPARATOR`."
msgstr ""

#: ../../ref/settings.txt:2744
msgid "USE_TZ"
msgstr ""

#: ../../ref/settings.txt:2748
msgid ""
"A boolean that specifies if datetimes will be timezone-aware by default or "
"not. If this is set to ``True``, Django will use timezone-aware datetimes "
"internally. Otherwise, Django will use naive datetimes in local time."
msgstr ""

#: ../../ref/settings.txt:2752
msgid ""
"See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`."
msgstr ""

#: ../../ref/settings.txt:2756
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes ``USE_TZ = True`` for convenience."
msgstr ""

#: ../../ref/settings.txt:2763
msgid "USE_X_FORWARDED_HOST"
msgstr ""

#: ../../ref/settings.txt:2767
msgid ""
"A boolean that specifies whether to use the X-Forwarded-Host header in "
"preference to the Host header. This should only be enabled if a proxy which "
"sets this header is in use."
msgstr ""

#: ../../ref/settings.txt:2774
msgid "WSGI_APPLICATION"
msgstr ""

#: ../../ref/settings.txt:2778
msgid ""
"The full Python path of the WSGI application object that Django's built-in "
"servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin "
"startproject <startproject>` management command will create a simple "
"``wsgi.py`` file with an ``application`` callable in it, and point this "
"setting to that ``application``."
msgstr ""

#: ../../ref/settings.txt:2784
msgid ""
"If not set, the return value of ``django.core.wsgi.get_wsgi_application()`` "
"will be used. In this case, the behavior of :djadmin:`runserver` will be "
"identical to previous Django versions."
msgstr ""

#: ../../ref/settings.txt:2791
msgid "YEAR_MONTH_FORMAT"
msgstr ""

#: ../../ref/settings.txt:2793
msgid "Default: ``'F Y'``"
msgstr ""

#: ../../ref/settings.txt:2795
msgid ""
"The default formatting to use for date fields on Django admin change-list "
"pages -- and, possibly, by other parts of the system -- in cases when only "
"the year and month are displayed."
msgstr ""

#: ../../ref/settings.txt:2799
msgid ""
"For example, when a Django admin change-list page is being filtered by a "
"date drilldown, the header for a given month displays the month and the "
"year. Different locales have different formats. For example, U.S. English "
"would say \"January 2006,\" whereas another locale might say "
"\"2006/January.\""
msgstr ""

#: ../../ref/settings.txt:2807
msgid ""
"See :tfilter:`allowed date format strings <date>`. See also "
":setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` "
"and :setting:`MONTH_DAY_FORMAT`."
msgstr ""

#: ../../ref/settings.txt:2814
msgid "X_FRAME_OPTIONS"
msgstr ""

#: ../../ref/settings.txt:2816
msgid "Default: ``'SAMEORIGIN'``"
msgstr ""

#: ../../ref/settings.txt:2818
msgid ""
"The default value for the X-Frame-Options header used by "
":class:`~django.middleware.clickjacking.XFrameOptionsMiddleware`. See the "
":doc:`clickjacking protection </ref/clickjacking/>` documentation."
msgstr ""

#: ../../ref/settings.txt:2826
msgid "Settings for :mod:`django.contrib.auth`."
msgstr ""

#: ../../ref/settings.txt:2831
msgid "AUTHENTICATION_BACKENDS"
msgstr ""

#: ../../ref/settings.txt:2833
msgid "Default: ``('django.contrib.auth.backends.ModelBackend',)``"
msgstr ""

#: ../../ref/settings.txt:2835
msgid ""
"A tuple of authentication backend classes (as strings) to use when "
"attempting to authenticate a user. See the :ref:`authentication backends "
"documentation <authentication-backends>` for details."
msgstr ""

#: ../../ref/settings.txt:2842
msgid "AUTH_USER_MODEL"
msgstr ""

#: ../../ref/settings.txt:2844
msgid "Default: 'auth.User'"
msgstr ""

#: ../../ref/settings.txt:2846
msgid "The model to use to represent a User. See :ref:`auth-custom-user`."
msgstr ""

#: ../../ref/settings.txt:2849
msgid ""
"You cannot change the AUTH_USER_MODEL setting during the lifetime of a "
"project (i.e. once you have made and migrated models that depend on it) "
"without serious effort. It is intended to be set at the project start, and "
"the model it refers to must be available in the first migration of the app "
"that it lives in. See :ref:`auth-custom-user` for more details."
msgstr ""

#: ../../ref/settings.txt:2859
msgid "LOGIN_REDIRECT_URL"
msgstr ""

#: ../../ref/settings.txt:2861
msgid "Default: ``'/accounts/profile/'``"
msgstr ""

#: ../../ref/settings.txt:2863
msgid ""
"The URL where requests are redirected after login when the "
"``contrib.auth.login`` view gets no ``next`` parameter."
msgstr ""

#: ../../ref/settings.txt:2866
msgid ""
"This is used by the :func:`~django.contrib.auth.decorators.login_required` "
"decorator, for example."
msgstr ""

#: ../../ref/settings.txt:2869 ../../ref/settings.txt:2888
msgid ""
"This setting also accepts :ref:`named URL patterns <naming-url-patterns>` "
"which can be used to reduce configuration duplication since you don't have "
"to define the URL in two places (``settings`` and URLconf)."
msgstr ""

#: ../../ref/settings.txt:2875 ../../ref/settings.txt:2894
msgid ""
"The setting may also be a dotted Python path to a view function. Support for"
" this will be removed in Django 1.10."
msgstr ""

#: ../../ref/settings.txt:2881
msgid "LOGIN_URL"
msgstr ""

#: ../../ref/settings.txt:2883
msgid "Default: ``'/accounts/login/'``"
msgstr ""

#: ../../ref/settings.txt:2885
msgid ""
"The URL where requests are redirected for login, especially when using the "
":func:`~django.contrib.auth.decorators.login_required` decorator."
msgstr ""

#: ../../ref/settings.txt:2900
msgid "PASSWORD_RESET_TIMEOUT_DAYS"
msgstr ""

#: ../../ref/settings.txt:2902
msgid "Default: ``3``"
msgstr ""

#: ../../ref/settings.txt:2904
msgid ""
"The number of days a password reset link is valid for. Used by the "
":mod:`django.contrib.auth` password reset mechanism."
msgstr ""

#: ../../ref/settings.txt:2910
msgid "PASSWORD_HASHERS"
msgstr ""

#: ../../ref/settings.txt:2912
msgid "See :ref:`auth_password_storage`."
msgstr ""

#: ../../ref/settings.txt:2927
msgid "Messages"
msgstr ""

#: ../../ref/settings.txt:2929
msgid "Settings for :mod:`django.contrib.messages`."
msgstr ""

#: ../../ref/settings.txt:2934
msgid "MESSAGE_LEVEL"
msgstr ""

#: ../../ref/settings.txt:2936
msgid "Default: ``messages.INFO``"
msgstr ""

#: ../../ref/settings.txt:2938
msgid ""
"Sets the minimum message level that will be recorded by the messages "
"framework. See :ref:`message levels <message-level>` for more details."
msgstr ""

#: ../../ref/settings.txt:2941 ../../ref/settings.txt:2993
msgid "Important"
msgstr ""

#: ../../ref/settings.txt:2943
msgid ""
"If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of "
"the built-in constants, you must import the constants module directly to "
"avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/settings.txt:2950 ../../ref/settings.txt:3002
msgid ""
"If desired, you may specify the numeric values for the constants directly "
"according to the values in the above :ref:`constants table <message-level-"
"constants>`."
msgstr ""

#: ../../ref/settings.txt:2957
msgid "MESSAGE_STORAGE"
msgstr ""

#: ../../ref/settings.txt:2959
msgid ""
"Default: ``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/settings.txt:2961
msgid "Controls where Django stores message data. Valid values are:"
msgstr ""

#: ../../ref/settings.txt:2963
msgid "``'django.contrib.messages.storage.fallback.FallbackStorage'``"
msgstr ""

#: ../../ref/settings.txt:2964
msgid "``'django.contrib.messages.storage.session.SessionStorage'``"
msgstr ""

#: ../../ref/settings.txt:2965
msgid "``'django.contrib.messages.storage.cookie.CookieStorage'``"
msgstr ""

#: ../../ref/settings.txt:2967
msgid ""
"See :ref:`message storage backends <message-storage-backends>` for more "
"details."
msgstr ""

#: ../../ref/settings.txt:2969
msgid ""
"The backends that use cookies -- "
":class:`~django.contrib.messages.storage.cookie.CookieStorage` and "
":class:`~django.contrib.messages.storage.fallback.FallbackStorage` -- use "
"the value of :setting:`SESSION_COOKIE_DOMAIN`, "
":setting:`SESSION_COOKIE_SECURE` and :setting:`SESSION_COOKIE_HTTPONLY` when"
" setting their cookies."
msgstr ""

#: ../../ref/settings.txt:2978
msgid "MESSAGE_TAGS"
msgstr ""

#: ../../ref/settings.txt:2988
msgid ""
"This sets the mapping of message level to message tag, which is typically "
"rendered as a CSS class in HTML. If you specify a value, it will extend the "
"default. This means you only have to specify those values which you need to "
"override. See :ref:`message-displaying` above for more details."
msgstr ""

#: ../../ref/settings.txt:2995
msgid ""
"If you override ``MESSAGE_TAGS`` in your settings file and rely on any of "
"the built-in constants, you must import the ``constants`` module directly to"
" avoid the potential for circular imports, e.g.::"
msgstr ""

#: ../../ref/settings.txt:3009
msgid "Sessions"
msgstr ""

#: ../../ref/settings.txt:3011
msgid "Settings for :mod:`django.contrib.sessions`."
msgstr ""

#: ../../ref/settings.txt:3016
msgid "SESSION_CACHE_ALIAS"
msgstr ""

#: ../../ref/settings.txt:3020
msgid ""
"If you're using :ref:`cache-based session storage <cached-sessions-"
"backend>`, this selects the cache to use."
msgstr ""

#: ../../ref/settings.txt:3026
msgid "SESSION_COOKIE_AGE"
msgstr ""

#: ../../ref/settings.txt:3028
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

#: ../../ref/settings.txt:3030
msgid "The age of session cookies, in seconds."
msgstr ""

#: ../../ref/settings.txt:3035
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

#: ../../ref/settings.txt:3039
msgid ""
"The domain to use for session cookies. Set this to a string such as "
"``\".example.com\"`` (note the leading dot!) for cross-domain cookies, or "
"use ``None`` for a standard domain cookie."
msgstr ""

#: ../../ref/settings.txt:3043
msgid ""
"Be cautious when updating this setting on a production site. If you update "
"this setting to enable cross-domain cookies on a site that previously used "
"standard domain cookies, existing user cookies will be set to the old "
"domain. This may result in them being unable to log in as long as these "
"cookies persist."
msgstr ""

#: ../../ref/settings.txt:3049 ../../ref/settings.txt:3075
#: ../../ref/settings.txt:3123
msgid ""
"This setting also affects cookies set by :mod:`django.contrib.messages`."
msgstr ""

#: ../../ref/settings.txt:3054
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

#: ../../ref/settings.txt:3058
msgid ""
"Whether to use ``HTTPOnly`` flag on the session cookie. If this is set to "
"``True``, client-side JavaScript will not to be able to access the session "
"cookie."
msgstr ""

#: ../../ref/settings.txt:3062
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not"
" part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of client side script accessing the "
"protected cookie data."
msgstr ""

#: ../../ref/settings.txt:3068
msgid ""
"Turning it on makes it less trivial for an attacker to escalate a cross-site"
" scripting vulnerability into full hijacking of a user's session. There's "
"not much excuse for leaving this off, either: if your code depends on "
"reading session cookies from JavaScript, you're probably doing it wrong."
msgstr ""

#: ../../ref/settings.txt:3082
msgid "SESSION_COOKIE_NAME"
msgstr ""

#: ../../ref/settings.txt:3084
msgid "Default: ``'sessionid'``"
msgstr ""

#: ../../ref/settings.txt:3086
msgid ""
"The name of the cookie to use for sessions. This can be whatever you want "
"(as long as it's different from the other cookie names in your application)."
msgstr ""

#: ../../ref/settings.txt:3092
msgid "SESSION_COOKIE_PATH"
msgstr ""

#: ../../ref/settings.txt:3096
msgid ""
"The path set on the session cookie. This should either match the URL path of"
" your Django installation or be parent of that path."
msgstr ""

#: ../../ref/settings.txt:3099
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own session cookie."
msgstr ""

#: ../../ref/settings.txt:3106
msgid "SESSION_COOKIE_SECURE"
msgstr ""

#: ../../ref/settings.txt:3110
msgid ""
"Whether to use a secure cookie for the session cookie. If this is set to "
"``True``, the cookie will be marked as \"secure,\" which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

#: ../../ref/settings.txt:3114
msgid ""
"Since it's trivial for a packet sniffer (e.g. `Firesheep`_) to hijack a "
"user's session if the session cookie is sent unencrypted, there's really no "
"good excuse to leave this off. It will prevent you from using sessions on "
"insecure requests and that's a good thing."
msgstr ""

#: ../../ref/settings.txt:3128
msgid "SESSION_ENGINE"
msgstr ""

#: ../../ref/settings.txt:3130
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

#: ../../ref/settings.txt:3132
msgid "Controls where Django stores session data. Included engines are:"
msgstr ""

#: ../../ref/settings.txt:3134
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

#: ../../ref/settings.txt:3135
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

#: ../../ref/settings.txt:3136
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

#: ../../ref/settings.txt:3137
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

#: ../../ref/settings.txt:3138
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

#: ../../ref/settings.txt:3140
msgid "See :ref:`configuring-sessions` for more details."
msgstr ""

#: ../../ref/settings.txt:3145
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

#: ../../ref/settings.txt:3149
msgid ""
"Whether to expire the session when the user closes their browser. See :ref"
":`browser-length-vs-persistent-sessions`."
msgstr ""

#: ../../ref/settings.txt:3155
msgid "SESSION_FILE_PATH"
msgstr ""

#: ../../ref/settings.txt:3159
msgid ""
"If you're using file-based session storage, this sets the directory in which"
" Django will store session data. When the default value (``None``) is used, "
"Django will use the standard temporary directory for the system."
msgstr ""

#: ../../ref/settings.txt:3167
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

#: ../../ref/settings.txt:3171
msgid ""
"Whether to save the session data on every request. If this is ``False`` "
"(default), then the session data will only be saved if it has been modified "
"-- that is, if any of its dictionary values have been assigned or deleted. "
"Empty sessions won't be created, even if this setting is active."
msgstr ""

#: ../../ref/settings.txt:3179
msgid "SESSION_SERIALIZER"
msgstr ""

#: ../../ref/settings.txt:3181
msgid "Default: ``'django.contrib.sessions.serializers.JSONSerializer'``"
msgstr ""

#: ../../ref/settings.txt:3183
msgid ""
"Full import path of a serializer class to use for serializing session data. "
"Included serializers are:"
msgstr ""

#: ../../ref/settings.txt:3186
msgid "``'django.contrib.sessions.serializers.PickleSerializer'``"
msgstr ""

#: ../../ref/settings.txt:3187
msgid "``'django.contrib.sessions.serializers.JSONSerializer'``"
msgstr ""

#: ../../ref/settings.txt:3189
msgid ""
"See :ref:`session_serialization` for details, including a warning regarding "
"possible remote code execution when using "
":class:`~django.contrib.sessions.serializers.PickleSerializer`."
msgstr ""

#: ../../ref/settings.txt:3196
msgid "Settings for :mod:`django.contrib.sites`."
msgstr ""

#: ../../ref/settings.txt:3201
msgid "SITE_ID"
msgstr ""

#: ../../ref/settings.txt:3205
msgid ""
"The ID, as an integer, of the current site in the ``django_site`` database "
"table. This is used so that application data can hook into specific sites "
"and a single database can manage content for multiple sites."
msgstr ""

#: ../../ref/settings.txt:3213
msgid "Static Files"
msgstr ""

#: ../../ref/settings.txt:3215
msgid "Settings for :mod:`django.contrib.staticfiles`."
msgstr ""

#: ../../ref/settings.txt:3220
msgid "STATIC_ROOT"
msgstr ""

#: ../../ref/settings.txt:3224
msgid ""
"The absolute path to the directory where :djadmin:`collectstatic` will "
"collect static files for deployment."
msgstr ""

#: ../../ref/settings.txt:3227
msgid "Example: ``\"/var/www/example.com/static/\"``"
msgstr ""

#: ../../ref/settings.txt:3229
msgid ""
"If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled "
"(default) the :djadmin:`collectstatic` management command will collect "
"static files into this directory. See the howto on :doc:`managing static "
"files</howto/static-files/index>` for more details about usage."
msgstr ""

#: ../../ref/settings.txt:3236
msgid ""
"This should be an initially empty destination directory for collecting your "
"static files from their permanent locations into one directory for ease of "
"deployment; it is **not** a place to store your static files permanently. "
"You should do that in directories that will be found by "
":doc:`staticfiles</ref/contrib/staticfiles>`’s "
":setting:`finders<STATICFILES_FINDERS>`, which by default, are ``'static/'``"
" app sub-directories and any directories you include in "
":setting:`STATICFILES_DIRS`)."
msgstr ""

#: ../../ref/settings.txt:3248
msgid "STATIC_URL"
msgstr ""

#: ../../ref/settings.txt:3252
msgid ""
"URL to use when referring to static files located in :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:3254
msgid "Example: ``\"/static/\"`` or ``\"http://static.example.com/\"``"
msgstr ""

#: ../../ref/settings.txt:3256
msgid ""
"If not ``None``, this will be used as the base path for :ref:`asset "
"definitions<form-asset-paths>` (the ``Media`` class) and the "
":doc:`staticfiles app</ref/contrib/staticfiles>`."
msgstr ""

#: ../../ref/settings.txt:3260
msgid "It must end in a slash if set to a non-empty value."
msgstr ""

#: ../../ref/settings.txt:3262
msgid ""
"You may need to :ref:`configure these files to be served in development "
"<serving-static-files-in-development>` and will definitely need to do so "
":doc:`in production </howto/static-files/deployment>`."
msgstr ""

#: ../../ref/settings.txt:3269
msgid "STATICFILES_DIRS"
msgstr ""

#: ../../ref/settings.txt:3271
msgid "Default: ``[]``"
msgstr ""

#: ../../ref/settings.txt:3273
msgid ""
"This setting defines the additional locations the staticfiles app will "
"traverse if the ``FileSystemFinder`` finder is enabled, e.g. if you use the "
":djadmin:`collectstatic` or :djadmin:`findstatic` management command or use "
"the static file serving view."
msgstr ""

#: ../../ref/settings.txt:3278
msgid ""
"This should be set to a list or tuple of strings that contain full paths to "
"your additional files directory(ies) e.g.::"
msgstr ""

#: ../../ref/settings.txt:3287
msgid ""
"Note that these paths should use Unix-style forward slashes, even on Windows"
" (e.g. ``\"C:/Users/user/mysite/extra_static_content\"``)."
msgstr ""

#: ../../ref/settings.txt:3291
msgid "Prefixes (optional)"
msgstr ""

#: ../../ref/settings.txt:3293
msgid ""
"In case you want to refer to files in one of the locations with an "
"additional namespace, you can **optionally** provide a prefix as ``(prefix, "
"path)`` tuples, e.g.::"
msgstr ""

#: ../../ref/settings.txt:3302
msgid ""
"For example, assuming you have :setting:`STATIC_URL` set to ``'/static/'``, "
"the :djadmin:`collectstatic` management command would collect the \"stats\" "
"files in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`."
msgstr ""

#: ../../ref/settings.txt:3306
msgid ""
"This would allow you to refer to the local file "
"``'/opt/webfiles/stats/polls_20101022.tar.gz'`` with "
"``'/static/downloads/polls_20101022.tar.gz'`` in your templates, e.g.:"
msgstr ""

#: ../../ref/settings.txt:3317
msgid "STATICFILES_STORAGE"
msgstr ""

#: ../../ref/settings.txt:3319
msgid "Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``"
msgstr ""

#: ../../ref/settings.txt:3321
msgid ""
"The file storage engine to use when collecting static files with the "
":djadmin:`collectstatic` management command."
msgstr ""

#: ../../ref/settings.txt:3324
msgid ""
"A ready-to-use instance of the storage backend defined in this setting can "
"be found at ``django.contrib.staticfiles.storage.staticfiles_storage``."
msgstr ""

#: ../../ref/settings.txt:3327
msgid "For an example, see :ref:`staticfiles-from-cdn`."
msgstr ""

#: ../../ref/settings.txt:3332
msgid "STATICFILES_FINDERS"
msgstr ""

#: ../../ref/settings.txt:3339
msgid ""
"The list of finder backends that know how to find static files in various "
"locations."
msgstr ""

#: ../../ref/settings.txt:3342
msgid ""
"The default will find files stored in the :setting:`STATICFILES_DIRS` "
"setting (using ``django.contrib.staticfiles.finders.FileSystemFinder``) and "
"in a ``static`` subdirectory of each app (using "
"``django.contrib.staticfiles.finders.AppDirectoriesFinder``). If multiple "
"files with the same name are present, the first file that is found will be "
"used."
msgstr ""

#: ../../ref/settings.txt:3349
msgid ""
"One finder is disabled by default: "
"``django.contrib.staticfiles.finders.DefaultStorageFinder``. If added to "
"your :setting:`STATICFILES_FINDERS` setting, it will look for static files "
"in the default file storage as defined by the "
":setting:`DEFAULT_FILE_STORAGE` setting."
msgstr ""

#: ../../ref/settings.txt:3357
msgid ""
"When using the ``AppDirectoriesFinder`` finder, make sure your apps can be "
"found by staticfiles. Simply add the app to the :setting:`INSTALLED_APPS` "
"setting of your site."
msgstr ""

#: ../../ref/settings.txt:3361
msgid ""
"Static file finders are currently considered a private interface, and this "
"interface is thus undocumented."
msgstr ""

#: ../../ref/settings.txt:3365
msgid "Core Settings Topical Index"
msgstr ""

#: ../../ref/settings.txt:3368
msgid "Cache"
msgstr ""

#: ../../ref/settings.txt:3369
msgid ":setting:`CACHES`"
msgstr ""

#: ../../ref/settings.txt:3370
msgid ":setting:`CACHE_MIDDLEWARE_ALIAS`"
msgstr ""

#: ../../ref/settings.txt:3371
msgid ":setting:`CACHE_MIDDLEWARE_KEY_PREFIX`"
msgstr ""

#: ../../ref/settings.txt:3372
msgid ":setting:`CACHE_MIDDLEWARE_SECONDS`"
msgstr ""

#: ../../ref/settings.txt:3376
msgid ":setting:`DATABASES`"
msgstr ""

#: ../../ref/settings.txt:3377
msgid ":setting:`DATABASE_ROUTERS`"
msgstr ""

#: ../../ref/settings.txt:3378
msgid ":setting:`DEFAULT_INDEX_TABLESPACE`"
msgstr ""

#: ../../ref/settings.txt:3379
msgid ":setting:`DEFAULT_TABLESPACE`"
msgstr ""

#: ../../ref/settings.txt:3382
msgid "Debugging"
msgstr ""

#: ../../ref/settings.txt:3383
msgid ":setting:`DEBUG`"
msgstr ""

#: ../../ref/settings.txt:3384
msgid ":setting:`DEBUG_PROPAGATE_EXCEPTIONS`"
msgstr ""

#: ../../ref/settings.txt:3387 ../../ref/unicode.txt:392
msgid "Email"
msgstr ""

#: ../../ref/settings.txt:3388
msgid ":setting:`ADMINS`"
msgstr ""

#: ../../ref/settings.txt:3389 ../../ref/settings.txt:3457
#: ../../ref/settings.txt:3504
msgid ":setting:`DEFAULT_CHARSET`"
msgstr ""

#: ../../ref/settings.txt:3390
msgid ":setting:`DEFAULT_FROM_EMAIL`"
msgstr ""

#: ../../ref/settings.txt:3391
msgid ":setting:`EMAIL_BACKEND`"
msgstr ""

#: ../../ref/settings.txt:3392
msgid ":setting:`EMAIL_FILE_PATH`"
msgstr ""

#: ../../ref/settings.txt:3393
msgid ":setting:`EMAIL_HOST`"
msgstr ""

#: ../../ref/settings.txt:3394
msgid ":setting:`EMAIL_HOST_PASSWORD`"
msgstr ""

#: ../../ref/settings.txt:3395
msgid ":setting:`EMAIL_HOST_USER`"
msgstr ""

#: ../../ref/settings.txt:3396
msgid ":setting:`EMAIL_PORT`"
msgstr ""

#: ../../ref/settings.txt:3397
msgid ":setting:`EMAIL_SSL_CERTFILE`"
msgstr ""

#: ../../ref/settings.txt:3398
msgid ":setting:`EMAIL_SSL_KEYFILE`"
msgstr ""

#: ../../ref/settings.txt:3399
msgid ":setting:`EMAIL_SUBJECT_PREFIX`"
msgstr ""

#: ../../ref/settings.txt:3400
msgid ":setting:`EMAIL_TIMEOUT`"
msgstr ""

#: ../../ref/settings.txt:3401
msgid ":setting:`EMAIL_USE_TLS`"
msgstr ""

#: ../../ref/settings.txt:3402 ../../ref/settings.txt:3409
msgid ":setting:`MANAGERS`"
msgstr ""

#: ../../ref/settings.txt:3403
msgid ":setting:`SERVER_EMAIL`"
msgstr ""

#: ../../ref/settings.txt:3406
msgid "Error reporting"
msgstr ""

#: ../../ref/settings.txt:3407
msgid ":setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`"
msgstr ""

#: ../../ref/settings.txt:3408
msgid ":setting:`IGNORABLE_404_URLS`"
msgstr ""

#: ../../ref/settings.txt:3410
msgid ":setting:`SILENCED_SYSTEM_CHECKS`"
msgstr ""

#: ../../ref/settings.txt:3415
msgid "File uploads"
msgstr ""

#: ../../ref/settings.txt:3416
msgid ":setting:`DEFAULT_FILE_STORAGE`"
msgstr ""

#: ../../ref/settings.txt:3417
msgid ":setting:`FILE_CHARSET`"
msgstr ""

#: ../../ref/settings.txt:3418
msgid ":setting:`FILE_UPLOAD_HANDLERS`"
msgstr ""

#: ../../ref/settings.txt:3419
msgid ":setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`"
msgstr ""

#: ../../ref/settings.txt:3420
msgid ":setting:`FILE_UPLOAD_PERMISSIONS`"
msgstr ""

#: ../../ref/settings.txt:3421
msgid ":setting:`FILE_UPLOAD_TEMP_DIR`"
msgstr ""

#: ../../ref/settings.txt:3422
msgid ":setting:`MEDIA_ROOT`"
msgstr ""

#: ../../ref/settings.txt:3423
msgid ":setting:`MEDIA_URL`"
msgstr ""

#: ../../ref/settings.txt:3426
msgid "Globalization (i18n/l10n)"
msgstr ""

#: ../../ref/settings.txt:3427
msgid ":setting:`DATE_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3428
msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ""

#: ../../ref/settings.txt:3429
msgid ":setting:`DATETIME_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3430
msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ""

#: ../../ref/settings.txt:3431
msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ""

#: ../../ref/settings.txt:3432
msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ""

#: ../../ref/settings.txt:3433
msgid ":setting:`FORMAT_MODULE_PATH`"
msgstr ""

#: ../../ref/settings.txt:3434
msgid ":setting:`LANGUAGE_CODE`"
msgstr ""

#: ../../ref/settings.txt:3435
msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ""

#: ../../ref/settings.txt:3436
msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ""

#: ../../ref/settings.txt:3437
msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ""

#: ../../ref/settings.txt:3438
msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ""

#: ../../ref/settings.txt:3439
msgid ":setting:`LANGUAGES`"
msgstr ""

#: ../../ref/settings.txt:3440
msgid ":setting:`LOCALE_PATHS`"
msgstr ""

#: ../../ref/settings.txt:3441
msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3442
msgid ":setting:`NUMBER_GROUPING`"
msgstr ""

#: ../../ref/settings.txt:3443
msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3444
msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3445
msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ""

#: ../../ref/settings.txt:3446
msgid ":setting:`TIME_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3447
msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ""

#: ../../ref/settings.txt:3448
msgid ":setting:`TIME_ZONE`"
msgstr ""

#: ../../ref/settings.txt:3449
msgid ":setting:`USE_I18N`"
msgstr ""

#: ../../ref/settings.txt:3450
msgid ":setting:`USE_L10N`"
msgstr ""

#: ../../ref/settings.txt:3451
msgid ":setting:`USE_THOUSAND_SEPARATOR`"
msgstr ""

#: ../../ref/settings.txt:3452
msgid ":setting:`USE_TZ`"
msgstr ""

#: ../../ref/settings.txt:3453
msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ""

#: ../../ref/settings.txt:3456
msgid "HTTP"
msgstr ""

#: ../../ref/settings.txt:3458
msgid ":setting:`DEFAULT_CONTENT_TYPE`"
msgstr ""

#: ../../ref/settings.txt:3459
msgid ":setting:`DISALLOWED_USER_AGENTS`"
msgstr ""

#: ../../ref/settings.txt:3460
msgid ":setting:`FORCE_SCRIPT_NAME`"
msgstr ""

#: ../../ref/settings.txt:3461
msgid ":setting:`INTERNAL_IPS`"
msgstr ""

#: ../../ref/settings.txt:3462
msgid ":setting:`MIDDLEWARE_CLASSES`"
msgstr ""

#: ../../ref/settings.txt:3469
msgid ":setting:`SECURE_PROXY_SSL_HEADER`"
msgstr ""

#: ../../ref/settings.txt:3473
msgid ":setting:`SIGNING_BACKEND`"
msgstr ""

#: ../../ref/settings.txt:3474
msgid ":setting:`USE_ETAGS`"
msgstr ""

#: ../../ref/settings.txt:3475
msgid ":setting:`USE_X_FORWARDED_HOST`"
msgstr ""

#: ../../ref/settings.txt:3476
msgid ":setting:`WSGI_APPLICATION`"
msgstr ""

#: ../../ref/settings.txt:3479
msgid "Logging"
msgstr ""

#: ../../ref/settings.txt:3480
msgid ":setting:`LOGGING`"
msgstr ""

#: ../../ref/settings.txt:3481
msgid ":setting:`LOGGING_CONFIG`"
msgstr ""

#: ../../ref/settings.txt:3485
msgid ":setting:`ABSOLUTE_URL_OVERRIDES`"
msgstr ""

#: ../../ref/settings.txt:3486
msgid ":setting:`FIXTURE_DIRS`"
msgstr ""

#: ../../ref/settings.txt:3487
msgid ":setting:`INSTALLED_APPS`"
msgstr ""

#: ../../ref/settings.txt:3491
msgid "Cross Site Request Forgery Protection"
msgstr ""

#: ../../ref/settings.txt:3499
msgid ":setting:`SECRET_KEY`"
msgstr ""

#: ../../ref/settings.txt:3500
msgid ":setting:`X_FRAME_OPTIONS`"
msgstr ""

#: ../../ref/settings.txt:3503
msgid "Serialization"
msgstr ""

#: ../../ref/settings.txt:3505
msgid ":setting:`SERIALIZATION_MODULES`"
msgstr ""

#: ../../ref/settings.txt:3509
msgid ":setting:`ALLOWED_INCLUDE_ROOTS`"
msgstr ""

#: ../../ref/settings.txt:3510
msgid ":setting:`TEMPLATES`"
msgstr ""

#: ../../ref/settings.txt:3511
msgid ":setting:`TEMPLATE_CONTEXT_PROCESSORS`"
msgstr ""

#: ../../ref/settings.txt:3512
msgid ":setting:`TEMPLATE_DEBUG`"
msgstr ""

#: ../../ref/settings.txt:3513
msgid ":setting:`TEMPLATE_DIRS`"
msgstr ""

#: ../../ref/settings.txt:3514
msgid ":setting:`TEMPLATE_LOADERS`"
msgstr ""

#: ../../ref/settings.txt:3515
msgid ":setting:`TEMPLATE_STRING_IF_INVALID`"
msgstr ""

#: ../../ref/settings.txt:3519
msgid "Database: :setting:`TEST <DATABASE-TEST>`"
msgstr ""

#: ../../ref/settings.txt:3520
msgid ":setting:`TEST_NON_SERIALIZED_APPS`"
msgstr ""

#: ../../ref/settings.txt:3521
msgid ":setting:`TEST_RUNNER`"
msgstr ""

#: ../../ref/settings.txt:3525
msgid ":setting:`APPEND_SLASH`"
msgstr ""

#: ../../ref/settings.txt:3526
msgid ":setting:`PREPEND_WWW`"
msgstr ""

#: ../../ref/settings.txt:3527
msgid ":setting:`ROOT_URLCONF`"
msgstr ""

#: ../../ref/signals.txt:5
msgid "A list of all the signals that Django sends."
msgstr ""

#: ../../ref/signals.txt:9
msgid ""
"See the documentation on the :doc:`signal dispatcher </topics/signals>` for "
"information regarding how to register for and receive signals."
msgstr ""

#: ../../ref/signals.txt:12
msgid ""
"The :doc:`authentication framework </topics/auth/index>` sends :ref:`signals"
" when a user is logged in / out <topics-auth-signals>`."
msgstr ""

#: ../../ref/signals.txt:16
msgid "Model signals"
msgstr ""

#: ../../ref/signals.txt:21
msgid ""
"The :mod:`django.db.models.signals` module defines a set of signals sent by "
"the model system."
msgstr ""

#: ../../ref/signals.txt:26
msgid ""
"Many of these signals are sent by various model methods like ``__init__()`` "
"or :meth:`~django.db.models.Model.save` that you can override in your own "
"code."
msgstr ""

#: ../../ref/signals.txt:30
msgid ""
"If you override these methods on your model, you must call the parent class'"
" methods for this signals to be sent."
msgstr ""

#: ../../ref/signals.txt:33
msgid ""
"Note also that Django stores signal handlers as weak references by default, "
"so if your handler is a local function, it may be garbage collected.  To "
"prevent this, pass ``weak=False`` when you call the signal's "
":meth:`~django.dispatch.Signal.connect`."
msgstr ""

#: ../../ref/signals.txt:39
msgid ""
"Model signals ``sender`` model can be lazily referenced when connecting a "
"receiver by specifying its full application label. For example, an "
"``Answer`` model defined in the ``polls`` application could be referenced as"
" ``'polls.Answer'``. This sort of reference can be quite handy when dealing "
"with circular import dependencies and swappable models."
msgstr ""

#: ../../ref/signals.txt:46
msgid "pre_init"
msgstr ""

#: ../../ref/signals.txt:53
msgid ""
"Whenever you instantiate a Django model, this signal is sent at the "
"beginning of the model's ``__init__()`` method."
msgstr ""

#: ../../ref/signals.txt:59
msgid "The model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:62 ../../ref/signals.txt:78
msgid "``args``"
msgstr ""

#: ../../ref/signals.txt:62
msgid "A list of positional arguments passed to ``__init__()``:"
msgstr ""

#: ../../ref/signals.txt:65 ../../ref/signals.txt:81
msgid "``kwargs``"
msgstr ""

#: ../../ref/signals.txt:65
msgid "A dictionary of keyword arguments passed to ``__init__()``:"
msgstr ""

#: ../../ref/signals.txt:67
msgid "For example, the :doc:`tutorial </intro/tutorial01>` has this line::"
msgstr ""

#: ../../ref/signals.txt:71
msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr ""

#: ../../ref/signals.txt:76
msgid "``Poll`` (the class itself)"
msgstr ""

#: ../../ref/signals.txt:78
msgid ""
"``[]`` (an empty list because there were no positional arguments passed to "
"``__init__()``.)"
msgstr ""

#: ../../ref/signals.txt:81
msgid "``{'question': \"What's up?\", 'pub_date': datetime.now()}``"
msgstr ""

#: ../../ref/signals.txt:85
msgid "post_init"
msgstr ""

#: ../../ref/signals.txt:90
msgid ""
"Like pre_init, but this one is sent when the ``__init__()`` method finishes."
msgstr ""

#: ../../ref/signals.txt:95
msgid "As above: the model class that just had an instance created."
msgstr ""

#: ../../ref/signals.txt:98
msgid "The actual instance of the model that's just been created."
msgstr ""

#: ../../ref/signals.txt:101
msgid "pre_save"
msgstr ""

#: ../../ref/signals.txt:106
msgid ""
"This is sent at the beginning of a model's "
":meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:112 ../../ref/signals.txt:142
#: ../../ref/signals.txt:175 ../../ref/signals.txt:196
msgid "The model class."
msgstr ""

#: ../../ref/signals.txt:115 ../../ref/signals.txt:145
msgid "The actual instance being saved."
msgstr ""

#: ../../ref/signals.txt:121 ../../ref/signals.txt:154
msgid "``raw``"
msgstr ""

#: ../../ref/signals.txt:118 ../../ref/signals.txt:151
msgid ""
"A boolean; ``True`` if the model is saved exactly as presented (i.e. when "
"loading a fixture). One should not query/modify other records in the "
"database as the database might not be in a consistent state yet."
msgstr ""

#: ../../ref/signals.txt:124 ../../ref/signals.txt:157
#: ../../ref/signals.txt:181 ../../ref/signals.txt:205
#: ../../ref/signals.txt:265
msgid "The database alias being used."
msgstr ""

#: ../../ref/signals.txt:128 ../../ref/signals.txt:161
msgid "``update_fields``"
msgstr ""

#: ../../ref/signals.txt:127 ../../ref/signals.txt:160
msgid ""
"The set of fields to update explicitly specified in the ``save()`` method. "
"``None`` if this argument was not used in the ``save()`` call."
msgstr ""

#: ../../ref/signals.txt:131
msgid "post_save"
msgstr ""

#: ../../ref/signals.txt:136
msgid ""
"Like :data:`pre_save`, but sent at the end of the "
":meth:`~django.db.models.Model.save` method."
msgstr ""

#: ../../ref/signals.txt:148
msgid "``created``"
msgstr ""

#: ../../ref/signals.txt:148
msgid "A boolean; ``True`` if a new record was created."
msgstr ""

#: ../../ref/signals.txt:164
msgid "pre_delete"
msgstr ""

#: ../../ref/signals.txt:169
msgid ""
"Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` "
"method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` "
"method."
msgstr ""

#: ../../ref/signals.txt:178 ../../ref/signals.txt:199
msgid "The actual instance being deleted."
msgstr ""

#: ../../ref/signals.txt:184
msgid "post_delete"
msgstr ""

#: ../../ref/signals.txt:189
msgid ""
"Like :data:`pre_delete`, but sent at the end of a model's "
":meth:`~django.db.models.Model.delete` method and a queryset's "
":meth:`~django.db.models.query.QuerySet.delete` method."
msgstr ""

#: ../../ref/signals.txt:201
msgid ""
"Note that the object will no longer be in the database, so be very careful "
"what you do with this instance."
msgstr ""

#: ../../ref/signals.txt:208
msgid "m2m_changed"
msgstr ""

#: ../../ref/signals.txt:213
msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` is changed on a model"
" instance. Strictly speaking, this is not a model signal since it is sent by"
" the :class:`~django.db.models.ManyToManyField`, but since it complements "
"the :data:`pre_save`/:data:`post_save` and "
":data:`pre_delete`/:data:`post_delete` when it comes to tracking changes to "
"models, it is included here."
msgstr ""

#: ../../ref/signals.txt:222
msgid ""
"The intermediate model class describing the "
":class:`~django.db.models.ManyToManyField`. This class is automatically "
"created when a many-to-many field is defined; you can access it using the "
"``through`` attribute on the many-to-many field."
msgstr ""

#: ../../ref/signals.txt:228
msgid ""
"The instance whose many-to-many relation is updated. This can be an instance"
" of the ``sender``, or of the class the "
":class:`~django.db.models.ManyToManyField` is related to."
msgstr ""

#: ../../ref/signals.txt:247 ../../ref/signals.txt:304
#: ../../ref/signals.txt:331
msgid "``action``"
msgstr ""

#: ../../ref/signals.txt:233
msgid ""
"A string indicating the type of update that is done on the relation. This "
"can be one of the following:"
msgstr ""

#: ../../ref/signals.txt:236
msgid "``\"pre_add\"``"
msgstr ""

#: ../../ref/signals.txt:237
msgid "Sent *before* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:238
msgid "``\"post_add\"``"
msgstr ""

#: ../../ref/signals.txt:239
msgid "Sent *after* one or more objects are added to the relation."
msgstr ""

#: ../../ref/signals.txt:240
msgid "``\"pre_remove\"``"
msgstr ""

#: ../../ref/signals.txt:241
msgid "Sent *before* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:242
msgid "``\"post_remove\"``"
msgstr ""

#: ../../ref/signals.txt:243
msgid "Sent *after* one or more objects are removed from the relation."
msgstr ""

#: ../../ref/signals.txt:244
msgid "``\"pre_clear\"``"
msgstr ""

#: ../../ref/signals.txt:245
msgid "Sent *before* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:247
msgid "``\"post_clear\"``"
msgstr ""

#: ../../ref/signals.txt:247
msgid "Sent *after* the relation is cleared."
msgstr ""

#: ../../ref/signals.txt:250
msgid ""
"Indicates which side of the relation is updated (i.e., if it is the forward "
"or reverse relation that is being modified)."
msgstr ""

#: ../../ref/signals.txt:254
msgid ""
"The class of the objects that are added to, removed from or cleared from the"
" relation."
msgstr ""

#: ../../ref/signals.txt:262 ../../ref/signals.txt:313
#: ../../ref/signals.txt:340
msgid "``pk_set``"
msgstr ""

#: ../../ref/signals.txt:258
msgid ""
"For the ``pre_add``, ``post_add``, ``pre_remove`` and ``post_remove`` "
"actions, this is a set of primary key values that have been added to or "
"removed from the relation."
msgstr ""

#: ../../ref/signals.txt:262
msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr ""

#: ../../ref/signals.txt:267
msgid ""
"For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled "
"like this::"
msgstr ""

#: ../../ref/signals.txt:278
msgid "If we connected a handler like this::"
msgstr ""

#: ../../ref/signals.txt:288
msgid "and then did something like this::"
msgstr ""

#: ../../ref/signals.txt:294
msgid ""
"the arguments sent to a :data:`m2m_changed` handler (``toppings_changed`` in"
" the example above) would be:"
msgstr ""

#: ../../ref/signals.txt:300 ../../ref/signals.txt:327
msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr ""

#: ../../ref/signals.txt:302
msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:304
msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr ""

#: ../../ref/signals.txt:306
msgid ""
"``False`` (``Pizza`` contains the "
":class:`~django.db.models.ManyToManyField`, so this call modifies the "
"forward relation)"
msgstr ""

#: ../../ref/signals.txt:310
msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr ""

#: ../../ref/signals.txt:313
msgid "``{t.id}`` (since only ``Topping t`` was added to the relation)"
msgstr ""

#: ../../ref/signals.txt:315 ../../ref/signals.txt:343
msgid "``\"default\"`` (since the default router sends writes here)"
msgstr ""

#: ../../ref/signals.txt:318
msgid "And if we would then do something like this::"
msgstr ""

#: ../../ref/signals.txt:322
msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr ""

#: ../../ref/signals.txt:329
msgid "``t`` (the ``Topping`` instance being modified)"
msgstr ""

#: ../../ref/signals.txt:331
msgid "``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr ""

#: ../../ref/signals.txt:333
msgid ""
"``True`` (``Pizza`` contains the :class:`~django.db.models.ManyToManyField`,"
" so this call modifies the reverse relation)"
msgstr ""

#: ../../ref/signals.txt:337
msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr ""

#: ../../ref/signals.txt:340
msgid "``{p.id}`` (since only ``Pizza p`` was removed from the relation)"
msgstr ""

#: ../../ref/signals.txt:347
msgid "class_prepared"
msgstr ""

#: ../../ref/signals.txt:352
msgid ""
"Sent whenever a model class has been \"prepared\" -- that is, once model has"
" been defined and registered with Django's model system. Django uses this "
"signal internally; it's not generally used in third-party applications."
msgstr ""

#: ../../ref/signals.txt:356
msgid ""
"Since this signal is sent during the app registry population process, and "
":meth:`AppConfig.ready() <django.apps.AppConfig.ready>` runs after the app "
"registry is fully populated, receivers cannot be connected in that method. "
"One possibility is to connect them ``AppConfig.__init__()`` instead, taking "
"care not to import models or trigger calls to the app registry."
msgstr ""

#: ../../ref/signals.txt:362
msgid "Arguments that are sent with this signal:"
msgstr ""

#: ../../ref/signals.txt:365
msgid "The model class which was just prepared."
msgstr ""

#: ../../ref/signals.txt:368
msgid "Management signals"
msgstr ""

#: ../../ref/signals.txt:370
msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ""

#: ../../ref/signals.txt:373
msgid "pre_migrate"
msgstr ""

#: ../../ref/signals.txt:378
msgid ""
"Sent by the :djadmin:`migrate` command before it starts to install an "
"application. It's not emitted for applications that lack a ``models`` "
"module."
msgstr ""

#: ../../ref/signals.txt:384
msgid ""
"An :class:`~django.apps.AppConfig` instance for the application about to be "
"migrated/synced."
msgstr ""

#: ../../ref/signals.txt:388 ../../ref/signals.txt:475
msgid "``app_config``"
msgstr ""

#: ../../ref/signals.txt:388 ../../ref/signals.txt:429
#: ../../ref/signals.txt:475 ../../ref/signals.txt:546
msgid "Same as ``sender``."
msgstr ""

#: ../../ref/signals.txt:395 ../../ref/signals.txt:441
#: ../../ref/signals.txt:482 ../../ref/signals.txt:557
msgid "``verbosity``"
msgstr ""

#: ../../ref/signals.txt:391 ../../ref/signals.txt:437
#: ../../ref/signals.txt:478 ../../ref/signals.txt:553
msgid ""
"Indicates how much information manage.py is printing on screen. See the "
":djadminopt:`--verbosity` flag for details."
msgstr ""

#: ../../ref/signals.txt:394
msgid ""
"Functions which listen for :data:`pre_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:403 ../../ref/signals.txt:449
#: ../../ref/signals.txt:490 ../../ref/signals.txt:565
msgid "``interactive``"
msgstr ""

#: ../../ref/signals.txt:398 ../../ref/signals.txt:444
#: ../../ref/signals.txt:485 ../../ref/signals.txt:560
msgid ""
"If ``interactive`` is ``True``, it's safe to prompt the user to input things"
" on the command line. If ``interactive`` is ``False``, functions which "
"listen for this signal should not try to prompt for anything."
msgstr ""

#: ../../ref/signals.txt:402 ../../ref/signals.txt:448
#: ../../ref/signals.txt:489 ../../ref/signals.txt:564
msgid ""
"For example, the :mod:`django.contrib.auth` app only prompts to create a "
"superuser when ``interactive`` is ``True``."
msgstr ""

#: ../../ref/signals.txt:406 ../../ref/signals.txt:452
msgid "The alias of database on which a command will operate."
msgstr ""

#: ../../ref/signals.txt:409
msgid "pre_syncdb"
msgstr ""

#: ../../ref/signals.txt:416
msgid ""
"This signal has been replaced by "
":data:`~django.db.models.signals.pre_migrate`."
msgstr ""

#: ../../ref/signals.txt:418
msgid ""
"Sent by the :djadmin:`syncdb` command before it starts to install an "
"application."
msgstr ""

#: ../../ref/signals.txt:424 ../../ref/signals.txt:541
msgid ""
"The ``models`` module that was just installed. That is, if :djadmin:`syncdb`"
" just installed an app called ``\"foo.bar.myapp\"``, ``sender`` will be the "
"``foo.bar.myapp.models`` module."
msgstr ""

#: ../../ref/signals.txt:429 ../../ref/signals.txt:546
msgid "``app``"
msgstr ""

#: ../../ref/signals.txt:434
msgid "``create_models``"
msgstr ""

#: ../../ref/signals.txt:432
msgid ""
"A list of the model classes from any app which :djadmin:`syncdb` plans to "
"create."
msgstr ""

#: ../../ref/signals.txt:440
msgid ""
"Functions which listen for :data:`pre_syncdb` should adjust what they output"
" to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:452 ../../ref/signals.txt:569
msgid "``db``"
msgstr ""

#: ../../ref/signals.txt:455
msgid "post_migrate"
msgstr ""

#: ../../ref/signals.txt:460
msgid ""
"Sent by the :djadmin:`migrate` command after it installs an application, and"
" the :djadmin:`flush` command. It's not emitted for applications that lack a"
" ``models`` module."
msgstr ""

#: ../../ref/signals.txt:464
msgid ""
"It is important that handlers of this signal perform idempotent changes "
"(e.g. no database alterations) as this may cause the :djadmin:`flush` "
"management command to fail if it also ran during the :djadmin:`migrate` "
"command."
msgstr ""

#: ../../ref/signals.txt:471
msgid ""
"An :class:`~django.apps.AppConfig` instance for the application that was "
"just installed."
msgstr ""

#: ../../ref/signals.txt:481
msgid ""
"Functions which listen for :data:`post_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:493 ../../ref/signals.txt:568
msgid ""
"The database alias used for synchronization. Defaults to the ``default`` "
"database."
msgstr ""

#: ../../ref/signals.txt:496
msgid ""
"For example, you could register a callback in an "
":class:`~django.apps.AppConfig` like this::"
msgstr ""

#: ../../ref/signals.txt:514
msgid ""
"If you provide an :class:`~django.apps.AppConfig` instance as the sender "
"argument, please ensure that the signal is registered in "
":meth:`~django.apps.AppConfig.ready`. ``AppConfig``\\s are recreated for "
"tests that run with a modified set of :setting:`INSTALLED_APPS` (such as "
"when settings are overridden) and such signals should be connected for each "
"new ``AppConfig`` instance."
msgstr ""

#: ../../ref/signals.txt:522
msgid "post_syncdb"
msgstr ""

#: ../../ref/signals.txt:529
msgid ""
"This signal has been replaced by "
":data:`~django.db.models.signals.post_migrate`."
msgstr ""

#: ../../ref/signals.txt:531
msgid ""
"Sent by the :djadmin:`syncdb` command after it installs an application, and "
"the :djadmin:`flush` command."
msgstr ""

#: ../../ref/signals.txt:534
msgid ""
"It is important that handlers of this signal perform idempotent changes "
"(e.g. no database alterations) as this may cause the :djadmin:`flush` "
"management command to fail if it also ran during the :djadmin:`syncdb` "
"command."
msgstr ""

#: ../../ref/signals.txt:550
msgid "``created_models``"
msgstr ""

#: ../../ref/signals.txt:549
msgid ""
"A list of the model classes from any app which :djadmin:`syncdb` has created"
" so far."
msgstr ""

#: ../../ref/signals.txt:556
msgid ""
"Functions which listen for :data:`post_syncdb` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""

#: ../../ref/signals.txt:571
msgid ""
"For example, ``yourapp/management/__init__.py`` could be written like::"
msgstr ""

#: ../../ref/signals.txt:583
msgid "Request/response signals"
msgstr ""

#: ../../ref/signals.txt:588
msgid "Signals sent by the core framework when processing a request."
msgstr ""

#: ../../ref/signals.txt:591
msgid "request_started"
msgstr ""

#: ../../ref/signals.txt:596
msgid "Sent when Django begins processing an HTTP request."
msgstr ""

#: ../../ref/signals.txt:601
msgid ""
"The handler class -- e.g. ``django.core.handlers.wsgi.WsgiHandler`` -- that "
"handled the request."
msgstr ""

#: ../../ref/signals.txt:604
msgid "``environ``"
msgstr ""

#: ../../ref/signals.txt:604
msgid "The ``environ`` dictionary provided to the request."
msgstr ""

#: ../../ref/signals.txt:608
msgid "The ``environ`` argument was added."
msgstr ""

#: ../../ref/signals.txt:611
msgid "request_finished"
msgstr ""

#: ../../ref/signals.txt:616
msgid "Sent when Django finishes delivering an HTTP response to the client."
msgstr ""

#: ../../ref/signals.txt:620
msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases this "
"signal isn't sent at all. This can result in idle connections to database "
"and memcache servers."
msgstr ""

#: ../../ref/signals.txt:629 ../../ref/signals.txt:642
msgid "The handler class, as above."
msgstr ""

#: ../../ref/signals.txt:632
msgid "got_request_exception"
msgstr ""

#: ../../ref/signals.txt:637
msgid ""
"This signal is sent whenever Django encounters an exception while processing"
" an incoming HTTP request."
msgstr ""

#: ../../ref/signals.txt:645
msgid "The :class:`~django.http.HttpRequest` object."
msgstr ""

#: ../../ref/signals.txt:648
msgid "Test signals"
msgstr ""

#: ../../ref/signals.txt:653
msgid "Signals only sent when :ref:`running tests <running-tests>`."
msgstr ""

#: ../../ref/signals.txt:656
msgid "setting_changed"
msgstr ""

#: ../../ref/signals.txt:661
msgid ""
"This signal is sent when the value of a setting is changed through the "
"``django.test.TestCase.settings()`` context manager or the "
":func:`django.test.override_settings` decorator/context manager."
msgstr ""

#: ../../ref/signals.txt:665
msgid ""
"It's actually sent twice: when the new value is applied (\"setup\") and when"
" the original value is restored (\"teardown\"). Use the ``enter`` argument "
"to distinguish between the two."
msgstr ""

#: ../../ref/signals.txt:669
msgid ""
"You can also import this signal from ``django.core.signals`` to avoid "
"importing from ``django.test`` in non-test situations."
msgstr ""

#: ../../ref/signals.txt:674
msgid "The signal was moved to ``django.core.signals`` as described above."
msgstr ""

#: ../../ref/signals.txt:679
msgid "The settings handler."
msgstr ""

#: ../../ref/signals.txt:682
msgid "``setting``"
msgstr ""

#: ../../ref/signals.txt:682
msgid "The name of the setting."
msgstr ""

#: ../../ref/signals.txt:686 ../../ref/templates/builtins.txt:1609
#: ../../ref/templates/builtins.txt:1620 ../../ref/templates/builtins.txt:1631
#: ../../ref/templates/builtins.txt:1643
msgid "``value``"
msgstr ""

#: ../../ref/signals.txt:685
msgid ""
"The value of the setting after the change. For settings that initially don't"
" exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""

#: ../../ref/signals.txt:691
msgid "``enter``"
msgstr ""

#: ../../ref/signals.txt:691
msgid "A boolean; ``True`` if the setting is applied, ``False`` if restored."
msgstr ""

#: ../../ref/signals.txt:694
msgid "template_rendered"
msgstr ""

#: ../../ref/signals.txt:699
msgid ""
"Sent when the test system renders a template. This signal is not emitted "
"during normal operation of a Django server -- it is only available during "
"testing."
msgstr ""

#: ../../ref/signals.txt:705
msgid "The :class:`~django.template.Template` object which was rendered."
msgstr ""

#: ../../ref/signals.txt:708 ../../ref/template-response.txt:81
#: ../../ref/template-response.txt:208
msgid "``template``"
msgstr ""

#: ../../ref/signals.txt:708
msgid "Same as sender"
msgstr ""

#: ../../ref/signals.txt:712 ../../ref/template-response.txt:89
#: ../../ref/template-response.txt:216
msgid "``context``"
msgstr ""

#: ../../ref/signals.txt:711
msgid ""
"The :class:`~django.template.Context` with which the template was rendered."
msgstr ""

#: ../../ref/signals.txt:715
msgid "Database Wrappers"
msgstr ""

#: ../../ref/signals.txt:720
msgid ""
"Signals sent by the database wrapper when a database connection is "
"initiated."
msgstr ""

#: ../../ref/signals.txt:724
msgid "connection_created"
msgstr ""

#: ../../ref/signals.txt:729
msgid ""
"Sent when the database wrapper makes the initial connection to the database."
"  This is particularly useful if you'd like to send any post connection "
"commands to the SQL backend."
msgstr ""

#: ../../ref/signals.txt:736
msgid ""
"The database wrapper class -- i.e. "
"``django.db.backends.postgresql_psycopg2.DatabaseWrapper`` or "
"``django.db.backends.mysql.DatabaseWrapper``, etc."
msgstr ""

#: ../../ref/signals.txt:744
msgid "``connection``"
msgstr ""

#: ../../ref/signals.txt:741
msgid ""
"The database connection that was opened. This can be used in a multiple-"
"database configuration to differentiate connection signals from different "
"databases."
msgstr ""

#: ../../ref/template-response.txt:3
msgid "TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:8
msgid ""
"Standard :class:`~django.http.HttpResponse` objects are static structures. "
"They are provided with a block of pre-rendered content at time of "
"construction, and while that content can be modified, it isn't in a form "
"that makes it easy to perform modifications."
msgstr ""

#: ../../ref/template-response.txt:13
msgid ""
"However, it can sometimes be beneficial to allow decorators or middleware to"
" modify a response *after* it has been constructed by the view. For example,"
" you may want to change the template that is used, or put additional data "
"into the context."
msgstr ""

#: ../../ref/template-response.txt:18
msgid ""
"TemplateResponse provides a way to do just that. Unlike basic "
":class:`~django.http.HttpResponse` objects, TemplateResponse objects retain "
"the details of the template and context that was provided by the view to "
"compute the response. The final output of the response is not computed until"
" it is needed, later in the response process."
msgstr ""

#: ../../ref/template-response.txt:25
msgid "SimpleTemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:34
msgid ""
"The name of the template to be rendered. Accepts a backend-dependent "
"template object (such as those returned by "
":func:`~django.template.loader.get_template()`), the name of a template, or "
"a list of template names."
msgstr ""

#: ../../ref/template-response.txt:39
msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr ""

#: ../../ref/template-response.txt:43
msgid "``template_name`` used to accept a :class:`~django.template.Template`."
msgstr ""

#: ../../ref/template-response.txt:47
msgid ""
"The context data to be used when rendering the template. It must be a "
":class:`dict`."
msgstr ""

#: ../../ref/template-response.txt:50
msgid "Example: ``{'foo': 123}``"
msgstr ""

#: ../../ref/template-response.txt:54
msgid "``context_data`` used to accept a :class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:58
msgid ""
"The current rendered value of the response content, using the current "
"template and context data."
msgstr ""

#: ../../ref/template-response.txt:63
msgid "A boolean indicating whether the response content has been rendered."
msgstr ""

#: ../../ref/template-response.txt:70
msgid ""
"Instantiates a :class:`~django.template.response.SimpleTemplateResponse` "
"object with the given template, context, content type, HTTP status, and "
"charset."
msgstr ""

#: ../../ref/template-response.txt:75 ../../ref/template-response.txt:202
msgid ""
"A backend-dependent template object (such as those returned by "
":func:`~django.template.loader.get_template()`), the name of a template, or "
"a list of template names."
msgstr ""

#: ../../ref/template-response.txt:81 ../../ref/template-response.txt:208
msgid "``template`` used to accept a :class:`~django.template.Template`."
msgstr ""

#: ../../ref/template-response.txt:84 ../../ref/template-response.txt:211
msgid ""
"A :class:`dict` of values to add to the template context. By default, this "
"is an empty dictionary."
msgstr ""

#: ../../ref/template-response.txt:89 ../../ref/template-response.txt:216
msgid "``context`` used to accept a :class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:95 ../../ref/template-response.txt:222
msgid "``content_type``"
msgstr ""

#: ../../ref/template-response.txt:92 ../../ref/template-response.txt:219
msgid ""
"The value included in the HTTP ``Content-Type`` header, including the MIME "
"type specification and the character set encoding. If ``content_type`` is "
"specified, then its value is used. Otherwise, "
":setting:`DEFAULT_CONTENT_TYPE` is used."
msgstr ""

#: ../../ref/template-response.txt:98 ../../ref/template-response.txt:225
msgid "``status``"
msgstr ""

#: ../../ref/template-response.txt:98 ../../ref/template-response.txt:225
msgid "The HTTP status code for the response."
msgstr ""

#: ../../ref/template-response.txt:103 ../../ref/template-response.txt:240
msgid "``charset``"
msgstr ""

#: ../../ref/template-response.txt:101 ../../ref/template-response.txt:238
msgid ""
"The charset in which the response will be encoded. If not given it will be "
"extracted from ``content_type``, and if that is unsuccessful, the "
":setting:`DEFAULT_CHARSET` setting will be used."
msgstr ""

#: ../../ref/template-response.txt:106 ../../ref/template-response.txt:243
msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading"
" the template."
msgstr ""

#: ../../ref/template-response.txt:111 ../../ref/template-response.txt:248
msgid "The ``charset`` and ``using`` parameters were added."
msgstr ""

#: ../../ref/template-response.txt:115
msgid ""
"Preprocesses context data that will be used for rendering a template. "
"Accepts a :class:`dict` of context data. By default, returns the same "
":class:`dict`."
msgstr ""

#: ../../ref/template-response.txt:119
msgid "Override this method in order to customize the context."
msgstr ""

#: ../../ref/template-response.txt:123
msgid ""
"``resolve_context`` returns a :class:`dict`. It used to return a "
":class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:128
msgid ""
"``resolve_context`` no longer accepts a :class:`~django.template.Context`."
msgstr ""

#: ../../ref/template-response.txt:133
msgid ""
"Resolves the template instance to use for rendering. Accepts a backend-"
"dependent template object (such as those returned by "
":func:`~django.template.loader.get_template()`), the name of a template, or "
"a list of template names."
msgstr ""

#: ../../ref/template-response.txt:138
msgid "Returns the backend-dependent template object instance to be rendered."
msgstr ""

#: ../../ref/template-response.txt:140
msgid "Override this method in order to customize template loading."
msgstr ""

#: ../../ref/template-response.txt:144
msgid ""
"``resolve_template`` returns backend-dependent template object. It used to "
"return a :class:`~django.template.Template`."
msgstr ""

#: ../../ref/template-response.txt:149
msgid ""
"``resolve_template`` no longer accepts a :class:`~django.template.Template`."
msgstr ""

#: ../../ref/template-response.txt:154
msgid ""
"Add a callback that will be invoked after rendering has taken place. This "
"hook can be used to defer certain processing operations (such as caching) "
"until after rendering has occurred."
msgstr ""

#: ../../ref/template-response.txt:158
msgid ""
"If the :class:`~django.template.response.SimpleTemplateResponse` has already"
" been rendered, the callback will be invoked immediately."
msgstr ""

#: ../../ref/template-response.txt:162
msgid ""
"When called, callbacks will be passed a single argument -- the rendered "
":class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""

#: ../../ref/template-response.txt:166
msgid ""
"If the callback returns a value that is not ``None``, this will be used as "
"the response instead of the original response object (and will be passed to "
"the next post rendering callback etc.)"
msgstr ""

#: ../../ref/template-response.txt:172
msgid ""
"Sets ``response.content`` to the result obtained by "
":attr:`SimpleTemplateResponse.rendered_content`, runs all post-rendering "
"callbacks, and returns the resulting response object."
msgstr ""

#: ../../ref/template-response.txt:176
msgid ""
"``render()`` will only have an effect the first time it is called. On "
"subsequent calls, it will return the result obtained from the first call."
msgstr ""

#: ../../ref/template-response.txt:181
msgid "TemplateResponse objects"
msgstr ""

#: ../../ref/template-response.txt:185
msgid ""
"``TemplateResponse`` is a subclass of "
":class:`~django.template.response.SimpleTemplateResponse` that knows about "
"the current :class:`~django.http.HttpRequest`."
msgstr ""

#: ../../ref/template-response.txt:194
msgid ""
"Instantiates a :class:`~django.template.response.TemplateResponse` object "
"with the given request, template, context, content type, HTTP status, and "
"charset."
msgstr ""

#: ../../ref/template-response.txt:199
msgid "An :class:`~django.http.HttpRequest` instance."
msgstr ""

#: ../../ref/template-response.txt:235
msgid "``current_app``"
msgstr ""

#: ../../ref/template-response.txt:228
msgid ""
"A hint indicating which application contains the current view. See the "
":ref:`namespaced URL resolution strategy <topics-http-reversing-url-"
"namespaces>` for more information."
msgstr ""

#: ../../ref/template-response.txt:234
msgid ""
"The ``current_app`` argument is deprecated. Instead you should set "
"``request.current_app``."
msgstr ""

#: ../../ref/template-response.txt:251
msgid "The rendering process"
msgstr ""

#: ../../ref/template-response.txt:253
msgid ""
"Before a :class:`~django.template.response.TemplateResponse` instance can be"
" returned to the client, it must be rendered. The rendering process takes "
"the intermediate representation of template and context, and turns it into "
"the final byte stream that can be served to the client."
msgstr ""

#: ../../ref/template-response.txt:258
msgid ""
"There are three circumstances under which a ``TemplateResponse`` will be "
"rendered:"
msgstr ""

#: ../../ref/template-response.txt:261
msgid ""
"When the ``TemplateResponse`` instance is explicitly rendered, using the "
":meth:`SimpleTemplateResponse.render()` method."
msgstr ""

#: ../../ref/template-response.txt:264
msgid ""
"When the content of the response is explicitly set by assigning "
"``response.content``."
msgstr ""

#: ../../ref/template-response.txt:267
msgid ""
"After passing through template response middleware, but before passing "
"through response middleware."
msgstr ""

#: ../../ref/template-response.txt:270
msgid ""
"A ``TemplateResponse`` can only be rendered once. The first call to "
":meth:`SimpleTemplateResponse.render` sets the content of the response; "
"subsequent rendering calls do not change the response content."
msgstr ""

#: ../../ref/template-response.txt:274
msgid ""
"However, when ``response.content`` is explicitly assigned, the change is "
"always applied. If you want to force the content to be re-rendered, you can "
"re-evaluate the rendered content, and assign the content of the response "
"manually::"
msgstr ""

#: ../../ref/template-response.txt:298
msgid "Post-render callbacks"
msgstr ""

#: ../../ref/template-response.txt:300
msgid ""
"Some operations -- such as caching -- cannot be performed on an unrendered "
"template. They must be performed on a fully complete and rendered response."
msgstr ""

#: ../../ref/template-response.txt:304
msgid ""
"If you're using middleware, the solution is easy. Middleware provides "
"multiple opportunities to process a response on exit from a view. If you put"
" behavior in the Response middleware is guaranteed to execute after template"
" rendering has taken place."
msgstr ""

#: ../../ref/template-response.txt:309
msgid ""
"However, if you're using a decorator, the same opportunities do not exist. "
"Any behavior defined in a decorator is handled immediately."
msgstr ""

#: ../../ref/template-response.txt:312
msgid ""
"To compensate for this (and any other analogous use cases), "
":class:`TemplateResponse` allows you to register callbacks that will be "
"invoked when rendering has completed. Using this callback, you can defer "
"critical processing until a point where you can guarantee that rendered "
"content will be available."
msgstr ""

#: ../../ref/template-response.txt:318
msgid ""
"To define a post-render callback, just define a function that takes a single"
" argument -- response -- and register that function with the template "
"response::"
msgstr ""

#: ../../ref/template-response.txt:336
msgid ""
"``my_render_callback()`` will be invoked after the ``mytemplate.html`` has "
"been rendered, and will be provided the fully rendered "
":class:`TemplateResponse` instance as an argument."
msgstr ""

#: ../../ref/template-response.txt:340
msgid ""
"If the template has already been rendered, the callback will be invoked "
"immediately."
msgstr ""

#: ../../ref/template-response.txt:344
msgid "Using TemplateResponse and SimpleTemplateResponse"
msgstr ""

#: ../../ref/template-response.txt:346
msgid ""
"A :class:`TemplateResponse` object can be used anywhere that a normal "
":class:`django.http.HttpResponse` can be used. It can also be used as an "
"alternative to calling :func:`~django.shortcuts.render()` or "
":func:`~django.shortcuts.render_to_response()`."
msgstr ""

#: ../../ref/template-response.txt:351
msgid ""
"For example, the following simple view returns a :class:`TemplateResponse` "
"with a simple template and a context containing a queryset::"
msgstr ""

#: ../../ref/templates/api.txt:3
msgid "The Django template language: for Python programmers"
msgstr ""

#: ../../ref/templates/api.txt:7
msgid ""
"This document explains the Django template system from a technical "
"perspective -- how it works and how to extend it. If you're just looking for"
" reference on the language syntax, see :doc:`/ref/templates/language`."
msgstr ""

#: ../../ref/templates/api.txt:11
msgid ""
"It assumes an understanding of templates, contexts, variables, tags, and "
"rendering. Start with the :ref:`introduction to the Django template language"
" <template-language-intro>` if you aren't familiar with these concepts."
msgstr ""

#: ../../ref/templates/api.txt:18
msgid "Using the template system in Python is a three-step process:"
msgstr ""

#: ../../ref/templates/api.txt:20
msgid "You configure an :class:`Engine`."
msgstr ""

#: ../../ref/templates/api.txt:21
msgid "You compile template code into a :class:`Template`."
msgstr ""

#: ../../ref/templates/api.txt:22
msgid "You render the template with a :class:`Context`."
msgstr ""

#: ../../ref/templates/api.txt:24
msgid ""
"Django projects generally rely on the :ref:`high level, backend agnostic "
"APIs <template-engines>` for each of these steps instead of the template "
"system's lower level APIs:"
msgstr ""

#: ../../ref/templates/api.txt:28
msgid ""
"For each :class:`~django.template.backends.django.DjangoTemplates` backend "
"in the :setting:`TEMPLATES` setting, Django instantiates an :class:`Engine`."
" :class:`~django.template.backends.django.DjangoTemplates` wraps "
":class:`Engine` and adapts it to the common template backend API."
msgstr ""

#: ../../ref/templates/api.txt:32
msgid ""
"The :mod:`django.template.loader` module provides functions such as "
":func:`~django.template.loader.get_template` for loading templates. They "
"return a ``django.template.backends.django.Template`` which wraps the actual"
" :class:`django.template.Template`."
msgstr ""

#: ../../ref/templates/api.txt:36
msgid ""
"The ``Template`` obtained in the previous step has a "
":meth:`~django.template.backends.base.Template.render` method which marshals"
" a context and possibly a request into a :class:`Context` and delegates the "
"rendering to the underlying :class:`Template`."
msgstr ""

#: ../../ref/templates/api.txt:42
msgid "Configuring an engine"
msgstr ""

#: ../../ref/templates/api.txt:44
msgid ""
"If you are simply using the "
":class:`~django.template.backends.django.DjangoTemplates` backend, this "
"probably isn't the documentation you're looking for. An instance of the "
"``Engine`` class described below is accessible using the ``engine`` "
"attribute of that backend and any attribute defaults mentioned below are "
"overridden by what's passed by "
":class:`~django.template.backends.django.DjangoTemplates`."
msgstr ""

#: ../../ref/templates/api.txt:55
msgid ""
"When instantiating an ``Engine`` all arguments must be passed as keyword "
"arguments:"
msgstr ""

#: ../../ref/templates/api.txt:58
msgid ""
"``dirs`` is a list of directories where the engine should look for template "
"source files. It is used to configure :class:`filesystem.Loader "
"<django.template.loaders.filesystem.Loader>`."
msgstr ""

#: ../../ref/templates/api.txt:62 ../../ref/templates/api.txt:77
#: ../../ref/templates/api.txt:88
msgid "It defaults to an empty list."
msgstr ""

#: ../../ref/templates/api.txt:64
msgid "``app_dirs`` only affects the default value of ``loaders``. See below."
msgstr ""

#: ../../ref/templates/api.txt:66 ../../ref/templates/api.txt:97
msgid "It defaults to ``False``."
msgstr ""

#: ../../ref/templates/api.txt:68
msgid ""
"``allowed_include_roots`` is a list of strings representing allowed prefixes"
" for the ``{% ssi %}`` template tag. This is a security measure, so that "
"template authors can't access files that they shouldn't be accessing."
msgstr ""

#: ../../ref/templates/api.txt:73
msgid ""
"For example, if ``'allowed_include_roots'`` is ``['/home/html', "
"'/var/www']``, then ``{% ssi /home/html/foo.txt %}`` would work, but ``{% "
"ssi /etc/passwd %}`` wouldn't."
msgstr ""

#: ../../ref/templates/api.txt:81
msgid "``allowed_include_roots`` is deprecated."
msgstr ""

#: ../../ref/templates/api.txt:83
msgid ""
"``context_processors`` is a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request."
" These callables take a request object as their argument and return a "
":class:`dict` of items to be merged into the context."
msgstr ""

#: ../../ref/templates/api.txt:90
msgid "See :class:`~django.template.RequestContext` for more information."
msgstr ""

#: ../../ref/templates/api.txt:92
msgid ""
"``debug`` is a boolean that turns on/off template debug mode. If it is "
"``True``, the template engine will store additional debug information which "
"can be used to display a detailed report for any exception raised during "
"template rendering."
msgstr ""

#: ../../ref/templates/api.txt:99
msgid ""
"``loaders`` is a list of template loader classes, specified as strings. Each"
" ``Loader`` class knows how to import templates from a particular source. "
"Optionally, a tuple can be used instead of a string. The first item in the "
"tuple should be the ``Loader`` class name, subsequent items are passed to "
"the ``Loader`` during initialization."
msgstr ""

#: ../../ref/templates/api.txt:105
msgid "It defaults to a list containing:"
msgstr ""

#: ../../ref/templates/api.txt:107
msgid "``'django.template.loaders.filesystem.Loader'``"
msgstr ""

#: ../../ref/templates/api.txt:108
msgid ""
"``'django.template.loaders.app_directories.Loader'`` if and only if "
"``app_dirs`` is ``True``."
msgstr ""

#: ../../ref/templates/api.txt:111
msgid "See :ref:`template-loaders` for details."
msgstr ""

#: ../../ref/templates/api.txt:113
msgid ""
"``string_if_invalid`` is the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""

#: ../../ref/templates/api.txt:116
msgid "It defaults to the empty string."
msgstr ""

#: ../../ref/templates/api.txt:118
msgid "See :ref:`invalid-template-variables` for details."
msgstr ""

#: ../../ref/templates/api.txt:120
msgid "``file_charset`` is the charset used to read template files on disk."
msgstr ""

#: ../../ref/templates/api.txt:122
msgid "It defaults to ``'utf-8'``."
msgstr ""

#: ../../ref/templates/api.txt:126
msgid ""
"When a Django project configures one and only one "
":class:`~django.template.backends.django.DjangoTemplates` engine, this "
"method returns the underlying :class:`Engine`. In other circumstances it "
"will raise :exc:`~django.core.exceptions.ImproperlyConfigured`."
msgstr ""

#: ../../ref/templates/api.txt:131
msgid ""
"It's required for preserving APIs that rely on a globally available, "
"implicitly configured engine. Any other use is strongly discouraged."
msgstr ""

#: ../../ref/templates/api.txt:136
msgid ""
"Compiles the given template code and returns a :class:`Template` object."
msgstr ""

#: ../../ref/templates/api.txt:140
msgid ""
"Loads a template with the given name, compiles it and returns a "
":class:`Template` object."
msgstr ""

#: ../../ref/templates/api.txt:145
msgid ""
"Like :meth:`~Engine.get_template`, except it takes a list of names and "
"returns the first template that was found."
msgstr ""

#: ../../ref/templates/api.txt:149
msgid "Loading a template"
msgstr ""

#: ../../ref/templates/api.txt:151
msgid ""
"The recommended way to create a :class:`Template` is by calling the factory "
"methods of the :class:`Engine`: :meth:`~Engine.get_template`, "
":meth:`~Engine.select_template` and :meth:`~Engine.from_string`."
msgstr ""

#: ../../ref/templates/api.txt:155
msgid ""
"In a Django project where the :setting:`TEMPLATES` setting defines exactly "
"one :class:`~django.template.backends.django.DjangoTemplates` engine, it's "
"possible to instantiate a :class:`Template` directly."
msgstr ""

#: ../../ref/templates/api.txt:161
msgid ""
"This class lives at ``django.template.Template``. The constructor takes one "
"argument — the raw template code::"
msgstr ""

#: ../../ref/templates/api.txt:168 ../../ref/templates/language.txt:92
msgid "Behind the scenes"
msgstr ""

#: ../../ref/templates/api.txt:170
msgid ""
"The system only parses your raw template code once -- when you create the "
"``Template`` object. From then on, it's stored internally as a tree "
"structure for performance."
msgstr ""

#: ../../ref/templates/api.txt:174
msgid ""
"Even the parsing itself is quite fast. Most of the parsing happens via a "
"single call to a single, short, regular expression."
msgstr ""

#: ../../ref/templates/api.txt:178
msgid "Rendering a context"
msgstr ""

#: ../../ref/templates/api.txt:180
msgid ""
"Once you have a compiled :class:`Template` object, you can render a context "
"with it. You can reuse the same template to render it several times with "
"different contexts."
msgstr ""

#: ../../ref/templates/api.txt:186
msgid ""
"This class lives at ``django.template.Context``. The constructor takes two "
"optional arguments:"
msgstr ""

#: ../../ref/templates/api.txt:189
msgid "A dictionary mapping variable names to variable values."
msgstr ""

#: ../../ref/templates/api.txt:191
msgid ""
"The name of the current application. This application name is used to help "
":ref:`resolve namespaced URLs<topics-http-reversing-url-namespaces>`. If "
"you're not using namespaced URLs, you can ignore this argument."
msgstr ""

#: ../../ref/templates/api.txt:197
msgid ""
"The ``current_app`` argument is deprecated. If you need it, you must now use"
" a :class:`RequestContext` instead of a :class:`Context`."
msgstr ""

#: ../../ref/templates/api.txt:200
msgid "For details, see :ref:`playing-with-context` below."
msgstr ""

#: ../../ref/templates/api.txt:204
msgid ""
"Call the :class:`Template` object's ``render()`` method with a "
":class:`Context` to \"fill\" the template::"
msgstr ""

#: ../../ref/templates/api.txt:219
msgid "Variables and lookups"
msgstr ""

#: ../../ref/templates/api.txt:221
msgid ""
"Variable names must consist of any letter (A-Z), any digit (0-9), an "
"underscore (but they must not start with an underscore) or a dot."
msgstr ""

#: ../../ref/templates/api.txt:224
msgid ""
"Dots have a special meaning in template rendering. A dot in a variable name "
"signifies a **lookup**. Specifically, when the template system encounters a "
"dot in a variable name, it tries the following lookups, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:228
msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr ""

#: ../../ref/templates/api.txt:229
msgid "Attribute lookup. Example: ``foo.bar``"
msgstr ""

#: ../../ref/templates/api.txt:230
msgid "List-index lookup. Example: ``foo[bar]``"
msgstr ""

#: ../../ref/templates/api.txt:232 ../../ref/templates/language.txt:123
msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable "
"\"bar\", if one exists in the template context."
msgstr ""

#: ../../ref/templates/api.txt:236
msgid ""
"The template system uses the first lookup type that works. It's short-"
"circuit logic. Here are a few examples::"
msgstr ""

#: ../../ref/templates/api.txt:257
msgid ""
"If any part of the variable is callable, the template system will try "
"calling it. Example::"
msgstr ""

#: ../../ref/templates/api.txt:267
msgid ""
"Callable variables are slightly more complex than variables which only "
"require straight lookups. Here are some things to keep in mind:"
msgstr ""

#: ../../ref/templates/api.txt:270
msgid ""
"If the variable raises an exception when called, the exception will be "
"propagated, unless the exception has an attribute "
"``silent_variable_failure`` whose value is ``True``. If the exception *does*"
" have a ``silent_variable_failure`` attribute whose value is ``True``, the "
"variable will render as the value of the engine's ``string_if_invalid`` "
"configuration option (an empty string, by default). Example::"
msgstr ""

#: ../../ref/templates/api.txt:297
msgid ""
"Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the "
"base class for all Django database API ``DoesNotExist`` exceptions, has "
"``silent_variable_failure = True``. So if you're using Django templates with"
" Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""

#: ../../ref/templates/api.txt:303
msgid ""
"A variable can only be called if it has no required arguments. Otherwise, "
"the system will return the value of the engine's ``string_if_invalid`` "
"option."
msgstr ""

#: ../../ref/templates/api.txt:309
msgid ""
"Obviously, there can be side effects when calling some variables, and it'd "
"be either foolish or a security hole to allow the template system to access "
"them."
msgstr ""

#: ../../ref/templates/api.txt:313
msgid ""
"A good example is the :meth:`~django.db.models.Model.delete` method on each "
"Django model object. The template system shouldn't be allowed to do "
"something like this::"
msgstr ""

#: ../../ref/templates/api.txt:319
msgid ""
"To prevent this, set an ``alters_data`` attribute on the callable variable. "
"The template system won't call a variable if it has ``alters_data=True`` "
"set, and will instead replace the variable with ``string_if_invalid``, "
"unconditionally.  The dynamically-generated "
":meth:`~django.db.models.Model.delete` and "
":meth:`~django.db.models.Model.save` methods on Django model objects get "
"``alters_data=True`` automatically. Example::"
msgstr ""

#: ../../ref/templates/api.txt:331
msgid ""
"Occasionally you may want to turn off this feature for other reasons, and "
"tell the template system to leave a variable uncalled no matter what.  To do"
" so, set a ``do_not_call_in_templates`` attribute on the callable with the "
"value ``True``.  The template system then will act as if your variable is "
"not callable (allowing you to access attributes of the callable, for "
"example)."
msgstr ""

#: ../../ref/templates/api.txt:341
msgid "How invalid variables are handled"
msgstr ""

#: ../../ref/templates/api.txt:343
msgid ""
"Generally, if a variable doesn't exist, the template system inserts the "
"value of the engine's ``string_if_invalid`` configuration option, which is "
"set to ``''`` (the empty string) by default."
msgstr ""

#: ../../ref/templates/api.txt:347
msgid ""
"Filters that are applied to an invalid variable will only be applied if "
"``string_if_invalid`` is set to ``''`` (the empty string). If "
"``string_if_invalid`` is set to any other value, variable filters will be "
"ignored."
msgstr ""

#: ../../ref/templates/api.txt:352
msgid ""
"This behavior is slightly different for the ``if``, ``for`` and ``regroup`` "
"template tags. If an invalid variable is provided to one of these template "
"tags, the variable will be interpreted as ``None``. Filters are always "
"applied to invalid variables within these template tags."
msgstr ""

#: ../../ref/templates/api.txt:357
msgid ""
"If ``string_if_invalid`` contains a ``'%s'``, the format marker will be "
"replaced with the name of the invalid variable."
msgstr ""

#: ../../ref/templates/api.txt:360
msgid "For debug purposes only!"
msgstr ""

#: ../../ref/templates/api.txt:362
msgid ""
"While ``string_if_invalid`` can be a useful debugging tool, it is a bad idea"
" to turn it on as a 'development default'."
msgstr ""

#: ../../ref/templates/api.txt:365
msgid ""
"Many templates, including those in the Admin site, rely upon the silence of "
"the template system when a non-existent variable is encountered. If you "
"assign a value other than ``''`` to ``string_if_invalid``, you will "
"experience rendering problems with these templates and sites."
msgstr ""

#: ../../ref/templates/api.txt:370
msgid ""
"Generally, ``string_if_invalid`` should only be enabled in order to debug a "
"specific template problem, then cleared once debugging is complete."
msgstr ""

#: ../../ref/templates/api.txt:374
msgid "Built-in variables"
msgstr ""

#: ../../ref/templates/api.txt:376
msgid ""
"Every context contains ``True``, ``False`` and ``None``. As you would "
"expect, these variables resolve to the corresponding Python objects."
msgstr ""

#: ../../ref/templates/api.txt:380
msgid "Limitations with string literals"
msgstr ""

#: ../../ref/templates/api.txt:382
msgid ""
"Django's template language has no way to escape the characters used for its "
"own syntax. For example, the :ttag:`templatetag` tag is required if you need"
" to output character sequences like ``{%`` and ``%}``."
msgstr ""

#: ../../ref/templates/api.txt:386
msgid ""
"A similar issue exists if you want to include these sequences in template "
"filter or tag arguments. For example, when parsing a block tag, Django's "
"template parser looks for the first occurrence of ``%}`` after a ``{%``. "
"This prevents the use of ``\"%}\"`` as a string literal. For example, a "
"``TemplateSyntaxError`` will be raised for the following expressions::"
msgstr ""

#: ../../ref/templates/api.txt:396
msgid ""
"The same issue can be triggered by using a reserved sequence in filter "
"arguments::"
msgstr ""

#: ../../ref/templates/api.txt:401
msgid ""
"If you need to use strings with these sequences, store them in template "
"variables or use a custom template tag or filter to workaround the "
"limitation."
msgstr ""

#: ../../ref/templates/api.txt:407
msgid "Playing with Context objects"
msgstr ""

#: ../../ref/templates/api.txt:409
msgid ""
"Most of the time, you'll instantiate :class:`Context` objects by passing in "
"a fully-populated dictionary to ``Context()``. But you can add and delete "
"items from a ``Context`` object once it's been instantiated, too, using "
"standard dictionary syntax::"
msgstr ""

#: ../../ref/templates/api.txt:429
msgid ""
"Returns the value for ``key`` if ``key`` is in the context, else returns "
"``otherwise``."
msgstr ""

#: ../../ref/templates/api.txt:436
msgid ""
"A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` "
"it. If you ``pop()`` too much, it'll raise "
"``django.template.ContextPopException``::"
msgstr ""

#: ../../ref/templates/api.txt:461
msgid ""
"You can also use ``push()`` as a context manager to ensure a matching "
"``pop()`` is called."
msgstr ""

#: ../../ref/templates/api.txt:473
msgid ""
"All arguments passed to ``push()`` will be passed to the ``dict`` "
"constructor used to build the new context level."
msgstr ""

#: ../../ref/templates/api.txt:486
msgid ""
"In addition to ``push()`` and ``pop()``, the ``Context`` object also defines"
" an ``update()`` method. This works like ``push()`` but takes a dictionary "
"as an argument and pushes that dictionary onto the stack instead of an empty"
" one."
msgstr ""

#: ../../ref/templates/api.txt:502
msgid ""
"Using a ``Context`` as a stack comes in handy in :ref:`some custom template "
"tags <howto-writing-custom-template-tags>`."
msgstr ""

#: ../../ref/templates/api.txt:509
msgid ""
"Using ``flatten()`` method you can get whole ``Context`` stack as one "
"dictionary including builtin variables."
msgstr ""

#: ../../ref/templates/api.txt:519
msgid ""
"A ``flatten()`` method is also internally used to make ``Context`` objects "
"comparable."
msgstr ""

#: ../../ref/templates/api.txt:530
msgid ""
"Result from ``flatten()`` can be useful in unit tests to compare ``Context``"
" against ``dict``::"
msgstr ""

#: ../../ref/templates/api.txt:547
msgid "Subclassing Context: RequestContext"
msgstr ""

#: ../../ref/templates/api.txt:551
msgid ""
"Django comes with a special ``Context`` class, "
"``django.template.RequestContext``, that acts slightly differently from the "
"normal ``django.template.Context``. The first difference is that it takes an"
" :class:`~django.http.HttpRequest` as its first argument. For example::"
msgstr ""

#: ../../ref/templates/api.txt:560
msgid ""
"The second difference is that it automatically populates the context with a "
"few variables, according to the engine's ``context_processors`` "
"configuration option."
msgstr ""

#: ../../ref/templates/api.txt:564
msgid ""
"The ``context_processors`` option is a list of callables -- called **context"
" processors** -- that take a request object as their argument and return a "
"dictionary of items to be merged into the context. In the default generated "
"settings file, the default template engine contains the following context "
"processors::"
msgstr ""

#: ../../ref/templates/api.txt:583
msgid ""
"In addition to these, :class:`RequestContext` always enables "
"``'django.template.context_processors.csrf'``.  This is a security related "
"context processor required by the admin and other contrib apps, and, in case"
" of accidental misconfiguration, it is deliberately hardcoded in and cannot "
"be turned off in the ``context_processors`` option."
msgstr ""

#: ../../ref/templates/api.txt:589
msgid ""
"Each processor is applied in order. That means, if one processor adds a "
"variable to the context and a second processor adds a variable with the same"
" name, the second will override the first. The default processors are "
"explained below."
msgstr ""

#: ../../ref/templates/api.txt:594
msgid "When context processors are applied"
msgstr ""

#: ../../ref/templates/api.txt:596
msgid ""
"Context processors are applied on top of context data. This means that a "
"context processor may overwrite variables you've supplied to your "
":class:`Context` or :class:`RequestContext`, so take care to avoid variable "
"names that overlap with those supplied by your context processors."
msgstr ""

#: ../../ref/templates/api.txt:602
msgid ""
"If you want context data to take priority over context processors, use the "
"following pattern::"
msgstr ""

#: ../../ref/templates/api.txt:610
msgid ""
"Django does this to allow context data to override context processors in "
"APIs such as :func:`~django.shortcuts.render` and "
":class:`~django.template.response.TemplateResponse`."
msgstr ""

#: ../../ref/templates/api.txt:614
msgid ""
"Also, you can give :class:`RequestContext` a list of additional processors, "
"using the optional, third positional argument, ``processors``. In this "
"example, the :class:`RequestContext` instance gets a ``ip_address`` "
"variable::"
msgstr ""

#: ../../ref/templates/api.txt:634
msgid "Built-in template context processors"
msgstr ""

#: ../../ref/templates/api.txt:636
msgid "Here's what each of the built-in processors does:"
msgstr ""

#: ../../ref/templates/api.txt:641
msgid "django.contrib.auth.context_processors.auth"
msgstr ""

#: ../../ref/templates/api.txt:645
msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"variables:"
msgstr ""

#: ../../ref/templates/api.txt:648
msgid ""
"``user`` -- An ``auth.User`` instance representing the currently logged-in "
"user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""

#: ../../ref/templates/api.txt:652
msgid ""
"``perms`` -- An instance of "
"``django.contrib.auth.context_processors.PermWrapper``, representing the "
"permissions that the currently logged-in user has."
msgstr ""

#: ../../ref/templates/api.txt:659
msgid "django.template.context_processors.debug"
msgstr ""

#: ../../ref/templates/api.txt:663
msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"two variables -- but only if your :setting:`DEBUG` setting is set to "
"``True`` and the request's IP address (``request.META['REMOTE_ADDR']``) is "
"in the :setting:`INTERNAL_IPS` setting:"
msgstr ""

#: ../../ref/templates/api.txt:668
msgid ""
"``debug`` -- ``True``. You can use this in templates to test whether you're "
"in :setting:`DEBUG` mode."
msgstr ""

#: ../../ref/templates/api.txt:670
msgid ""
"``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, "
"representing every SQL query that has happened so far during the request and"
" how long it took. The list is in order by query and lazily generated on "
"access."
msgstr ""

#: ../../ref/templates/api.txt:676
msgid "django.template.context_processors.i18n"
msgstr ""

#: ../../ref/templates/api.txt:678 ../../ref/templates/api.txt:717
msgid ""
"If this processor is enabled, every ``RequestContext`` will contain these "
"two variables:"
msgstr ""

#: ../../ref/templates/api.txt:681
msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/templates/api.txt:682
msgid ""
"``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the"
" value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""

#: ../../ref/templates/api.txt:685
msgid "See :doc:`/topics/i18n/index` for more."
msgstr ""

#: ../../ref/templates/api.txt:688
msgid "django.template.context_processors.media"
msgstr ""

#: ../../ref/templates/api.txt:690
msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``MEDIA_URL``, providing the value of the :setting:`MEDIA_URL` "
"setting."
msgstr ""

#: ../../ref/templates/api.txt:694
msgid "django.template.context_processors.static"
msgstr ""

#: ../../ref/templates/api.txt:698
msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``STATIC_URL``, providing the value of the :setting:`STATIC_URL` "
"setting."
msgstr ""

#: ../../ref/templates/api.txt:702
msgid "django.template.context_processors.csrf"
msgstr ""

#: ../../ref/templates/api.txt:704
msgid ""
"This processor adds a token that is needed by the :ttag:`csrf_token` "
"template tag for protection against :doc:`Cross Site Request Forgeries "
"</ref/csrf>`."
msgstr ""

#: ../../ref/templates/api.txt:709
msgid "django.template.context_processors.request"
msgstr ""

#: ../../ref/templates/api.txt:711
msgid ""
"If this processor is enabled, every ``RequestContext`` will contain a "
"variable ``request``, which is the current "
":class:`~django.http.HttpRequest`."
msgstr ""

#: ../../ref/templates/api.txt:715
msgid "django.contrib.messages.context_processors.messages"
msgstr ""

#: ../../ref/templates/api.txt:720
msgid ""
"``messages`` -- A list of messages (as strings) that have been set via the "
":doc:`messages framework </ref/contrib/messages>`."
msgstr ""

#: ../../ref/templates/api.txt:722
msgid ""
"``DEFAULT_MESSAGE_LEVELS`` -- A mapping of the message level names to "
":ref:`their numeric value <message-level-constants>`."
msgstr ""

#: ../../ref/templates/api.txt:727
msgid "The ``DEFAULT_MESSAGE_LEVELS`` variable was added."
msgstr ""

#: ../../ref/templates/api.txt:730
msgid "Writing your own context processors"
msgstr ""

#: ../../ref/templates/api.txt:732
msgid ""
"A context processor has a very simple interface: It's just a Python function"
" that takes one argument, an :class:`~django.http.HttpRequest` object, and "
"returns a dictionary that gets added to the template context. Each context "
"processor *must* return a dictionary."
msgstr ""

#: ../../ref/templates/api.txt:737
msgid ""
"Custom context processors can live anywhere in your code base. All Django "
"cares about is that your custom context processors are pointed to by the "
"``'context_processors'`` option in your :setting:`TEMPLATES` setting — or "
"the ``context_processors`` argument of :class:`~django.template.Engine` if "
"you're using it directly."
msgstr ""

#: ../../ref/templates/api.txt:744
msgid "Loading templates"
msgstr ""

#: ../../ref/templates/api.txt:746
msgid ""
"Generally, you'll store templates in files on your filesystem rather than "
"using the low-level :class:`~django.template.Template` API yourself. Save "
"templates in a directory specified as a **template directory**."
msgstr ""

#: ../../ref/templates/api.txt:750
msgid ""
"Django searches for template directories in a number of places, depending on"
" your template loading settings (see \"Loader types\" below), but the most "
"basic way of specifying template directories is by using the :setting:`DIRS "
"<TEMPLATES-DIRS>` option."
msgstr ""

#: ../../ref/templates/api.txt:756
msgid "The :setting:`DIRS <TEMPLATES-DIRS>` option"
msgstr ""

#: ../../ref/templates/api.txt:760
msgid "This value used to be defined by the ``TEMPLATE_DIRS`` setting."
msgstr ""

#: ../../ref/templates/api.txt:762
msgid ""
"Tell Django what your template directories are by using the :setting:`DIRS "
"<TEMPLATES-DIRS>` option in the :setting:`TEMPLATES` setting in your "
"settings file — or the ``dirs`` argument of "
":class:`~django.template.Engine`. This should be set to a list of strings "
"that contain full paths to your template directories::"
msgstr ""

#: ../../ref/templates/api.txt:778
msgid ""
"Your templates can go anywhere you want, as long as the directories and "
"templates are readable by the Web server. They can have any extension you "
"want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""

#: ../../ref/templates/api.txt:787
msgid "Loader types"
msgstr ""

#: ../../ref/templates/api.txt:789
msgid ""
"By default, Django uses a filesystem-based template loader, but Django comes"
" with a few other template loaders, which know how to load templates from "
"other sources."
msgstr ""

#: ../../ref/templates/api.txt:793
msgid ""
"Some of these other loaders are disabled by default, but you can activate "
"them by adding a ``'loaders'`` option to your ``DjangoTemplates`` backend in"
" the :setting:`TEMPLATES` setting or passing a ``loaders`` argument to "
":class:`~django.template.Engine`. ``loaders`` should be a list of strings or"
" tuples, where each represents a template loader class. Here are the "
"template loaders that come with Django:"
msgstr ""

#: ../../ref/templates/api.txt:802
msgid "``django.template.loaders.filesystem.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:806
msgid ""
"Loads templates from the filesystem, according to :setting:`DIRS <TEMPLATES-"
"DIRS>`."
msgstr ""

#: ../../ref/templates/api.txt:809
msgid ""
"This loader is enabled by default. However it won't find any templates until"
" you set :setting:`DIRS <TEMPLATES-DIRS>` to a non-empty list::"
msgstr ""

#: ../../ref/templates/api.txt:817
msgid "``django.template.loaders.app_directories.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:821
msgid ""
"Loads templates from Django apps on the filesystem. For each app in "
":setting:`INSTALLED_APPS`, the loader looks for a ``templates`` "
"subdirectory. If the directory exists, Django looks for templates in there."
msgstr ""

#: ../../ref/templates/api.txt:825
msgid ""
"This means you can store templates with your individual apps. This also "
"makes it easy to distribute Django apps with default templates."
msgstr ""

#: ../../ref/templates/api.txt:828
msgid "For example, for this setting::"
msgstr ""

#: ../../ref/templates/api.txt:832
msgid ""
"...then ``get_template('foo.html')`` will look for ``foo.html`` in these "
"directories, in this order:"
msgstr ""

#: ../../ref/templates/api.txt:835
msgid "``/path/to/myproject/polls/templates/``"
msgstr ""

#: ../../ref/templates/api.txt:836
msgid "``/path/to/myproject/music/templates/``"
msgstr ""

#: ../../ref/templates/api.txt:838
msgid "... and will use the one it finds first."
msgstr ""

#: ../../ref/templates/api.txt:840
msgid ""
"The order of :setting:`INSTALLED_APPS` is significant! For example, if you "
"want to customize the Django admin, you might choose to override the "
"standard ``admin/base_site.html`` template, from ``django.contrib.admin``, "
"with your own ``admin/base_site.html`` in ``myproject.polls``. You must then"
" make sure that your ``myproject.polls`` comes *before* "
"``django.contrib.admin`` in :setting:`INSTALLED_APPS`, otherwise "
"``django.contrib.admin``’s will be loaded first and yours will be ignored."
msgstr ""

#: ../../ref/templates/api.txt:848
msgid ""
"Note that the loader performs an optimization when it first runs: it caches "
"a list of which :setting:`INSTALLED_APPS` packages have a ``templates`` "
"subdirectory."
msgstr ""

#: ../../ref/templates/api.txt:852
msgid ""
"You can enable this loader simply by setting :setting:`APP_DIRS <TEMPLATES-"
"APP_DIRS>` to ``True``::"
msgstr ""

#: ../../ref/templates/api.txt:860
msgid "``django.template.loaders.eggs.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:864
msgid ""
"Just like ``app_directories`` above, but it loads templates from Python eggs"
" rather than from the filesystem."
msgstr ""

#: ../../ref/templates/api.txt:867 ../../ref/templates/api.txt:908
#: ../../ref/templates/api.txt:931
msgid "This loader is disabled by default."
msgstr ""

#: ../../ref/templates/api.txt:869
msgid "``django.template.loaders.cached.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:873
msgid ""
"By default, the templating system will read and compile your templates every"
" time they need to be rendered. While the Django templating system is quite "
"fast, the overhead from reading and compiling templates can add up."
msgstr ""

#: ../../ref/templates/api.txt:877
msgid ""
"The cached template loader is a class-based loader that you configure with a"
" list of other loaders that it should wrap. The wrapped loaders are used to "
"locate unknown templates when they are first encountered. The cached loader "
"then stores the compiled ``Template`` in memory. The cached ``Template`` "
"instance is returned for subsequent requests to load the same template."
msgstr ""

#: ../../ref/templates/api.txt:883
msgid ""
"For example, to enable template caching with the ``filesystem`` and "
"``app_directories`` template loaders you might use the following settings::"
msgstr ""

#: ../../ref/templates/api.txt:901
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or that you wrote yourself, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see "
":ref:`template tag thread safety considerations "
"<template_tag_thread_safety>`."
msgstr ""

#: ../../ref/templates/api.txt:910
msgid "``django.template.loaders.locmem.Loader``"
msgstr ""

#: ../../ref/templates/api.txt:916
msgid "Loads templates from a Python dictionary. This is useful for testing."
msgstr ""

#: ../../ref/templates/api.txt:918
msgid "This loader takes a dictionary of templates as its first argument::"
msgstr ""

#: ../../ref/templates/api.txt:933
msgid ""
"Django uses the template loaders in order according to the ``'loaders'`` "
"option. It uses each loader until a loader finds a match."
msgstr ""

#: ../../ref/templates/api.txt:939
msgid "Custom loaders"
msgstr ""

#: ../../ref/templates/api.txt:941
msgid ""
"Custom ``Loader`` classes should inherit from "
"``django.template.loaders.base.Loader`` and override the "
"``load_template_source()`` method, which takes a ``template_name`` argument,"
" loads the template from disk (or elsewhere), and returns a tuple: "
"``(template_string, template_origin)``."
msgstr ""

#: ../../ref/templates/api.txt:949
msgid ""
"``django.template.loaders.base.Loader`` used to be defined at "
"``django.template.loader.BaseLoader``."
msgstr ""

#: ../../ref/templates/api.txt:952
msgid ""
"The ``load_template()`` method of the ``Loader`` class retrieves the "
"template string by calling ``load_template_source()``, instantiates a "
"``Template`` from the template source, and returns a tuple: ``(template, "
"template_origin)``."
msgstr ""

#: ../../ref/templates/api.txt:959
msgid "Template origin"
msgstr ""

#: ../../ref/templates/api.txt:963
msgid ""
"When an :class:`~django.template.Engine` is initialized with ``debug=True``,"
" its templates have an ``origin`` attribute depending on the source they are"
" loaded from. For engines initialized by Django, ``debug`` defaults to the "
"value of :setting:`DEBUG`."
msgstr ""

#: ../../ref/templates/api.txt:970
msgid ""
"Templates created from a template loader will use the "
"``django.template.loader.LoaderOrigin`` class."
msgstr ""

#: ../../ref/templates/api.txt:975
msgid ""
"The path to the template as returned by the template loader. For loaders "
"that read from the file system, this is the full path to the template."
msgstr ""

#: ../../ref/templates/api.txt:981
msgid "The relative path to the template as passed into the template loader."
msgstr ""

#: ../../ref/templates/api.txt:986
msgid ""
"Templates created from a ``Template`` class will use the "
"``django.template.StringOrigin`` class."
msgstr ""

#: ../../ref/templates/api.txt:991
msgid "The string used to create the template."
msgstr ""

#: ../../ref/templates/builtins.txt:3
msgid "Built-in template tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:5
msgid ""
"This document describes Django's built-in template tags and filters. It is "
"recommended that you use the :doc:`automatic documentation "
"</ref/contrib/admin/admindocs>`, if available, as this will also include "
"documentation for any custom tags or filters installed."
msgstr ""

#: ../../ref/templates/builtins.txt:13
msgid "Built-in tag reference"
msgstr ""

#: ../../ref/templates/builtins.txt:20
msgid "autoescape"
msgstr ""

#: ../../ref/templates/builtins.txt:22
msgid ""
"Controls the current auto-escaping behavior. This tag takes either ``on`` or"
" ``off`` as an argument and that determines whether auto-escaping is in "
"effect inside the block. The block is closed with an ``endautoescape`` "
"ending tag."
msgstr ""

#: ../../ref/templates/builtins.txt:26
msgid ""
"When auto-escaping is in effect, all variable content has HTML escaping "
"applied to it before placing the result into the output (but after any "
"filters have been applied). This is equivalent to manually applying the "
":tfilter:`escape` filter to each variable."
msgstr ""

#: ../../ref/templates/builtins.txt:31
msgid ""
"The only exceptions are variables that are already marked as \"safe\" from "
"escaping, either by the code that populated the variable, or because it has "
"had the :tfilter:`safe` or :tfilter:`escape` filters applied."
msgstr ""

#: ../../ref/templates/builtins.txt:35 ../../ref/templates/builtins.txt:58
#: ../../ref/templates/builtins.txt:239 ../../ref/templates/builtins.txt:259
#: ../../ref/templates/builtins.txt:1028 ../../ref/utils.txt:323
msgid "Sample usage::"
msgstr ""

#: ../../ref/templates/builtins.txt:44
msgid "block"
msgstr ""

#: ../../ref/templates/builtins.txt:46
msgid ""
"Defines a block that can be overridden by child templates. See "
":ref:`Template inheritance <template-inheritance>` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:52
msgid "comment"
msgstr ""

#: ../../ref/templates/builtins.txt:54
msgid ""
"Ignores everything between ``{% comment %}`` and ``{% endcomment %}``. An "
"optional note may be inserted in the first tag. For example, this is useful "
"when commenting out code for documenting why the code was disabled."
msgstr ""

#: ../../ref/templates/builtins.txt:65
msgid "``comment`` tags cannot be nested."
msgstr ""

#: ../../ref/templates/builtins.txt:70
msgid "csrf_token"
msgstr ""

#: ../../ref/templates/builtins.txt:72
msgid ""
"This tag is used for CSRF protection, as described in the documentation for "
":doc:`Cross Site Request Forgeries </ref/csrf>`."
msgstr ""

#: ../../ref/templates/builtins.txt:78
msgid "cycle"
msgstr ""

#: ../../ref/templates/builtins.txt:80
msgid ""
"Produces one of its arguments each time this tag is encountered. The first "
"argument is produced on the first encounter, the second argument on the "
"second encounter, and so forth. Once all arguments are exhausted, the tag "
"cycles to the first argument and produces it again."
msgstr ""

#: ../../ref/templates/builtins.txt:85
msgid "This tag is particularly useful in a loop::"
msgstr ""

#: ../../ref/templates/builtins.txt:93
msgid ""
"The first iteration produces HTML that refers to class ``row1``, the second "
"to ``row2``, the third to ``row1`` again, and so on for each iteration of "
"the loop."
msgstr ""

#: ../../ref/templates/builtins.txt:97
msgid ""
"You can use variables, too. For example, if you have two template variables,"
" ``rowvalue1`` and ``rowvalue2``, you can alternate between their values "
"like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:107
msgid ""
"Variables included in the cycle will be escaped.  You can disable auto-"
"escaping with::"
msgstr ""

#: ../../ref/templates/builtins.txt:116
msgid "You can mix variables and strings::"
msgstr ""

#: ../../ref/templates/builtins.txt:124
msgid ""
"In some cases you might want to refer to the current value of a cycle "
"without advancing to the next value. To do this, just give the ``{% cycle "
"%}`` tag a name, using \"as\", like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:130
msgid ""
"From then on, you can insert the current value of the cycle wherever you'd "
"like in your template by referencing the cycle name as a context variable. "
"If you want to move the cycle to the next value independently of the "
"original ``cycle`` tag, you can use another ``cycle`` tag and specify the "
"name of the variable. So, the following template::"
msgstr ""

#: ../../ref/templates/builtins.txt:145
msgid "would output::"
msgstr ""

#: ../../ref/templates/builtins.txt:156
msgid ""
"You can use any number of values in a ``cycle`` tag, separated by spaces. "
"Values enclosed in single quotes (``'``) or double quotes (``\"``) are "
"treated as string literals, while values without quotes are treated as "
"template variables."
msgstr ""

#: ../../ref/templates/builtins.txt:161
msgid ""
"By default, when you use the ``as`` keyword with the cycle tag, the usage of"
" ``{% cycle %}`` that initiates the cycle will itself produce the first "
"value in the cycle. This could be a problem if you want to use the value in "
"a nested loop or an included template. If you only want to declare the cycle"
" but not produce the first value, you can add a ``silent`` keyword as the "
"last keyword in the tag. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:173
msgid ""
"This will output a list of ``<tr>`` elements with ``class`` alternating "
"between ``row1`` and ``row2``. The subtemplate will have access to "
"``rowcolors`` in its context and the value will match the class of the "
"``<tr>`` that encloses it. If the ``silent`` keyword were to be omitted, "
"``row1`` and ``row2`` would be emitted as normal text, outside the ``<tr>`` "
"element."
msgstr ""

#: ../../ref/templates/builtins.txt:180
msgid ""
"When the silent keyword is used on a cycle definition, the silence "
"automatically applies to all subsequent uses of that specific cycle tag. The"
" following template would output *nothing*, even though the second call to "
"``{% cycle %}`` doesn't specify ``silent``::"
msgstr ""

#: ../../ref/templates/builtins.txt:188
msgid ""
"For backward compatibility, the ``{% cycle %}`` tag supports the much "
"inferior old syntax from previous Django versions. You shouldn't use this in"
" any new projects, but for the sake of the people who are still using it, "
"here's what it looks like::"
msgstr ""

#: ../../ref/templates/builtins.txt:195
msgid ""
"In this syntax, each value gets interpreted as a literal string, and there's"
" no way to specify variable values. Or literal commas. Or spaces. Did we "
"mention you shouldn't use this syntax in any new projects?"
msgstr ""

#: ../../ref/templates/builtins.txt:203
msgid "debug"
msgstr ""

#: ../../ref/templates/builtins.txt:205
msgid ""
"Outputs a whole load of debugging information, including the current context"
" and imported modules."
msgstr ""

#: ../../ref/templates/builtins.txt:211
msgid "extends"
msgstr ""

#: ../../ref/templates/builtins.txt:213
msgid "Signals that this template extends a parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:215
msgid "This tag can be used in two ways:"
msgstr ""

#: ../../ref/templates/builtins.txt:217
msgid ""
"``{% extends \"base.html\" %}`` (with quotes) uses the literal value "
"``\"base.html\"`` as the name of the parent template to extend."
msgstr ""

#: ../../ref/templates/builtins.txt:220
msgid ""
"``{% extends variable %}`` uses the value of ``variable``. If the variable "
"evaluates to a string, Django will use that string as the name of the parent"
" template. If the variable evaluates to a ``Template`` object, Django will "
"use that object as the parent template."
msgstr ""

#: ../../ref/templates/builtins.txt:225
msgid "See :ref:`template-inheritance` for more information."
msgstr ""

#: ../../ref/templates/builtins.txt:232
msgid ""
"Filters the contents of the block through one or more filters. Multiple "
"filters can be specified with pipes and filters can have arguments, just as "
"in variable syntax."
msgstr ""

#: ../../ref/templates/builtins.txt:236
msgid ""
"Note that the block includes *all* the text between the ``filter`` and "
"``endfilter`` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:247
msgid ""
"The :tfilter:`escape` and :tfilter:`safe` filters are not acceptable "
"arguments. Instead, use the :ttag:`autoescape` tag to manage autoescaping "
"for blocks of template code."
msgstr ""

#: ../../ref/templates/builtins.txt:254
msgid "firstof"
msgstr ""

#: ../../ref/templates/builtins.txt:256
msgid ""
"Outputs the first argument variable that is not ``False``. Outputs nothing "
"if all the passed variables are ``False``."
msgstr ""

#: ../../ref/templates/builtins.txt:263
msgid "This is equivalent to::"
msgstr ""

#: ../../ref/templates/builtins.txt:273
msgid ""
"You can also use a literal string as a fallback value in case all passed "
"variables are False::"
msgstr ""

#: ../../ref/templates/builtins.txt:278
msgid ""
"This tag auto-escapes variable values. You can disable auto-escaping with::"
msgstr ""

#: ../../ref/templates/builtins.txt:284
msgid "Or if only some variables should be escaped, you can use::"
msgstr ""

#: ../../ref/templates/builtins.txt:291
msgid "for"
msgstr ""

#: ../../ref/templates/builtins.txt:293
msgid ""
"Loops over each item in an array, making the item available in a context "
"variable. For example, to display a list of athletes provided in "
"``athlete_list``::"
msgstr ""

#: ../../ref/templates/builtins.txt:303
msgid ""
"You can loop over a list in reverse by using ``{% for obj in list reversed "
"%}``."
msgstr ""

#: ../../ref/templates/builtins.txt:306
msgid ""
"If you need to loop over a list of lists, you can unpack the values in each "
"sublist into individual variables. For example, if your context contains a "
"list of (x,y) coordinates called ``points``, you could use the following to "
"output the list of points::"
msgstr ""

#: ../../ref/templates/builtins.txt:315
msgid ""
"This can also be useful if you need to access the items in a dictionary. For"
" example, if your context contained a dictionary ``data``, the following "
"would display the keys and values of the dictionary::"
msgstr ""

#: ../../ref/templates/builtins.txt:323
msgid ""
"Keep in mind that for the dot operator, dictionary key lookup takes "
"precedence over method lookup. Therefore if the ``data`` dictionary contains"
" a key named ``'items'``, ``data.items`` will return ``data['items']`` "
"instead of ``data.items()``. Avoid adding keys that are named like "
"dictionary methods if you want to use those methods in a template "
"(``items``, ``values``, ``keys``, etc.). Read more about the lookup order of"
" the dot operator in the :ref:`documentation of template variables "
"<template-variables>`."
msgstr ""

#: ../../ref/templates/builtins.txt:331
msgid "The for loop sets a number of variables available within the loop:"
msgstr ""

#: ../../ref/templates/builtins.txt:334
msgid "Variable"
msgstr ""

#: ../../ref/templates/builtins.txt:336
msgid "``forloop.counter``"
msgstr ""

#: ../../ref/templates/builtins.txt:336
msgid "The current iteration of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:337
msgid "``forloop.counter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:337
msgid "The current iteration of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:338
msgid "``forloop.revcounter``"
msgstr ""

#: ../../ref/templates/builtins.txt:338
msgid "The number of iterations from the end of the loop (1-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:340
msgid "``forloop.revcounter0``"
msgstr ""

#: ../../ref/templates/builtins.txt:340
msgid "The number of iterations from the end of the loop (0-indexed)"
msgstr ""

#: ../../ref/templates/builtins.txt:342
msgid "``forloop.first``"
msgstr ""

#: ../../ref/templates/builtins.txt:342
msgid "True if this is the first time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:343
msgid "``forloop.last``"
msgstr ""

#: ../../ref/templates/builtins.txt:343
msgid "True if this is the last time through the loop"
msgstr ""

#: ../../ref/templates/builtins.txt:344
msgid "``forloop.parentloop``"
msgstr ""

#: ../../ref/templates/builtins.txt:344
msgid "For nested loops, this is the loop surrounding the current one"
msgstr ""

#: ../../ref/templates/builtins.txt:349
msgid "for ... empty"
msgstr ""

#: ../../ref/templates/builtins.txt:351
msgid ""
"The ``for`` tag can take an optional ``{% empty %}`` clause whose text is "
"displayed if the given array is empty or could not be found::"
msgstr ""

#: ../../ref/templates/builtins.txt:362
msgid ""
"The above is equivalent to -- but shorter, cleaner, and possibly faster than"
" -- the following::"
msgstr ""

#: ../../ref/templates/builtins.txt:378
msgid "if"
msgstr ""

#: ../../ref/templates/builtins.txt:380
msgid ""
"The ``{% if %}`` tag evaluates a variable, and if that variable is \"true\" "
"(i.e. exists, is not empty, and is not a false boolean value) the contents "
"of the block are output::"
msgstr ""

#: ../../ref/templates/builtins.txt:392
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

#: ../../ref/templates/builtins.txt:395
msgid ""
"As you can see, the ``if`` tag may take one or several ``{% elif %}`` "
"clauses, as well as an ``{% else %}`` clause that will be displayed if all "
"previous conditions fail. These clauses are optional."
msgstr ""

#: ../../ref/templates/builtins.txt:400
msgid "Boolean operators"
msgstr ""

#: ../../ref/templates/builtins.txt:402
msgid ""
":ttag:`if` tags may use ``and``, ``or`` or ``not`` to test a number of "
"variables or to negate a given variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:425
msgid ""
"Use of both ``and`` and ``or`` clauses within the same tag is allowed, with "
"``and`` having higher precedence than ``or`` e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:430
msgid "will be interpreted like:"
msgstr ""

#: ../../ref/templates/builtins.txt:436
msgid ""
"Use of actual parentheses in the :ttag:`if` tag is invalid syntax. If you "
"need them to indicate precedence, you should use nested :ttag:`if` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:439
msgid ""
":ttag:`if` tags may also use the operators ``==``, ``!=``, ``<``, ``>``, "
"``<=``, ``>=`` and ``in`` which work as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:443
msgid "``==`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:445
msgid "Equality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:452
msgid "``!=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:454
msgid "Inequality. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:462
msgid "``<`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:464
msgid "Less than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:471
msgid "``>`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:473
msgid "Greater than. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:480
msgid "``<=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:482
msgid "Less than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:489
msgid "``>=`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:491
msgid "Greater than or equal to. Example::"
msgstr ""

#: ../../ref/templates/builtins.txt:498
msgid "``in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:500
msgid ""
"Contained within. This operator is supported by many Python containers to "
"test whether the given value is in the container. The following are some "
"examples of how ``x in y`` will be interpreted::"
msgstr ""

#: ../../ref/templates/builtins.txt:519
msgid "``not in`` operator"
msgstr ""

#: ../../ref/templates/builtins.txt:521
msgid "Not contained within. This is the negation of the ``in`` operator."
msgstr ""

#: ../../ref/templates/builtins.txt:523
msgid ""
"The comparison operators cannot be 'chained' like in Python or in "
"mathematical notation. For example, instead of using::"
msgstr ""

#: ../../ref/templates/builtins.txt:528
msgid "you should use::"
msgstr ""

#: ../../ref/templates/builtins.txt:533 ../../ref/templates/language.txt:128
msgid "Filters"
msgstr ""

#: ../../ref/templates/builtins.txt:535
msgid "You can also use filters in the :ttag:`if` expression. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:542
msgid "Complex expressions"
msgstr ""

#: ../../ref/templates/builtins.txt:544
msgid ""
"All of the above can be combined to form complex expressions. For such "
"expressions, it can be important to know how the operators are grouped when "
"the expression is evaluated - that is, the precedence rules. The precedence "
"of the operators, from lowest to highest, is as follows:"
msgstr ""

#: ../../ref/templates/builtins.txt:549
msgid "``or``"
msgstr ""

#: ../../ref/templates/builtins.txt:550
msgid "``and``"
msgstr ""

#: ../../ref/templates/builtins.txt:551
msgid "``not``"
msgstr ""

#: ../../ref/templates/builtins.txt:552
msgid "``in``"
msgstr ""

#: ../../ref/templates/builtins.txt:553
msgid "``==``, ``!=``, ``<``, ``>``, ``<=``, ``>=``"
msgstr ""

#: ../../ref/templates/builtins.txt:555
msgid ""
"(This follows Python exactly). So, for example, the following complex "
":ttag:`if` tag:"
msgstr ""

#: ../../ref/templates/builtins.txt:562
msgid "...will be interpreted as:"
msgstr ""

#: ../../ref/templates/builtins.txt:568
msgid ""
"If you need different precedence, you will need to use nested :ttag:`if` "
"tags. Sometimes that is better for clarity anyway, for the sake of those who"
" do not know the precedence rules."
msgstr ""

#: ../../ref/templates/builtins.txt:573
msgid "``ifequal`` and ``ifnotequal``"
msgstr ""

#: ../../ref/templates/builtins.txt:575
msgid ""
"``{% ifequal a b %} ... {% endifequal %}`` is an obsolete way to write ``{% "
"if a == b %} ... {% endif %}``. Likewise, ``{% ifnotequal a b %} ... {% "
"endifnotequal %}`` is superseded by ``{% if a != b %} ... {% endif %}``. The"
" ``ifequal`` and ``ifnotequal`` tags will be deprecated in a future release."
msgstr ""

#: ../../ref/templates/builtins.txt:583
msgid "ifchanged"
msgstr ""

#: ../../ref/templates/builtins.txt:585
msgid "Check if a value has changed from the last iteration of a loop."
msgstr ""

#: ../../ref/templates/builtins.txt:587
msgid ""
"The ``{% ifchanged %}`` block tag is used within a loop. It has two possible"
" uses."
msgstr ""

#: ../../ref/templates/builtins.txt:590
msgid ""
"Checks its own rendered contents against its previous state and only "
"displays the content if it has changed. For example, this displays a list of"
" days, only displaying the month if it changes::"
msgstr ""

#: ../../ref/templates/builtins.txt:601
msgid ""
"If given one or more variables, check whether any variable has changed. For "
"example, the following shows the date every time it changes, while showing "
"the hour if either the hour or the date has changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:612
msgid ""
"The ``ifchanged`` tag can also take an optional ``{% else %}`` clause that "
"will be displayed if the value has not changed::"
msgstr ""

#: ../../ref/templates/builtins.txt:628
msgid "include"
msgstr ""

#: ../../ref/templates/builtins.txt:630
msgid ""
"Loads a template and renders it with the current context. This is a way of "
"\"including\" other templates within a template."
msgstr ""

#: ../../ref/templates/builtins.txt:633
msgid ""
"The template name can either be a variable or a hard-coded (quoted) string, "
"in either single or double quotes."
msgstr ""

#: ../../ref/templates/builtins.txt:636
msgid "This example includes the contents of the template ``\"foo/bar.html\"``::"
msgstr ""

#: ../../ref/templates/builtins.txt:640
msgid ""
"This example includes the contents of the template whose name is contained "
"in the variable ``template_name``::"
msgstr ""

#: ../../ref/templates/builtins.txt:647
msgid ""
"The variable may also be any object with a ``render()`` method that accepts "
"a context. This allows you to reference a compiled ``Template`` in your "
"context."
msgstr ""

#: ../../ref/templates/builtins.txt:651
msgid ""
"An included template is rendered within the context of the template that "
"includes it. This example produces the output ``\"Hello, John!\"``:"
msgstr ""

#: ../../ref/templates/builtins.txt:654
msgid ""
"Context: variable ``person`` is set to ``\"John\"`` and variable "
"``greeting`` is set to ``\"Hello\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:657
msgid "Template::"
msgstr ""

#: ../../ref/templates/builtins.txt:661
msgid "The ``name_snippet.html`` template::"
msgstr ""

#: ../../ref/templates/builtins.txt:665
msgid ""
"You can pass additional context to the template using keyword arguments::"
msgstr ""

#: ../../ref/templates/builtins.txt:669
msgid ""
"If you want to render the context only with the variables provided (or even "
"no variables at all), use the ``only`` option. No other variables are "
"available to the included template::"
msgstr ""

#: ../../ref/templates/builtins.txt:675
msgid ""
"If the included template causes an exception while it's rendered (including "
"if it's missing or has syntax errors), the behavior varies depending on the "
":class:`template engine's <django.template.Engine>` ``debug`` option (if not"
" set, this option defaults to the value of :setting:`DEBUG`). When debug "
"mode is turned on, an exception like "
":exc:`~django.template.TemplateDoesNotExist` or "
":exc:`~django.template.TemplateSyntaxError` will be raised; otherwise ``{% "
"include %}`` silences any exception that happens while rendering the "
"included template and returns an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:685
msgid ""
"The :ttag:`include` tag should be considered as an implementation of "
"\"render this subtemplate and include the HTML\", not as \"parse this "
"subtemplate and include its contents as if it were part of the parent\". "
"This means that there is no shared state between included templates -- each "
"include is a completely independent rendering process."
msgstr ""

#: ../../ref/templates/builtins.txt:691
msgid ""
"Blocks are evaluated *before* they are included. This means that a template "
"that includes blocks from another will contain blocks that have *already "
"been evaluated and rendered* - not blocks that can be overridden by, for "
"example, an extending template."
msgstr ""

#: ../../ref/templates/builtins.txt:699
msgid "load"
msgstr ""

#: ../../ref/templates/builtins.txt:701
msgid "Loads a custom template tag set."
msgstr ""

#: ../../ref/templates/builtins.txt:703
msgid ""
"For example, the following template would load all the tags and filters "
"registered in ``somelibrary`` and ``otherlibrary`` located in package "
"``package``::"
msgstr ""

#: ../../ref/templates/builtins.txt:709
msgid ""
"You can also selectively load individual filters or tags from a library, "
"using the ``from`` argument. In this example, the template tags/filters "
"named ``foo`` and ``bar`` will be loaded from ``somelibrary``::"
msgstr ""

#: ../../ref/templates/builtins.txt:715
msgid ""
"See :doc:`Custom tag and filter libraries </howto/custom-template-tags>` for"
" more information."
msgstr ""

#: ../../ref/templates/builtins.txt:721
msgid "lorem"
msgstr ""

#: ../../ref/templates/builtins.txt:725
msgid "The tag was previously located in :mod:`django.contrib.webdesign`."
msgstr ""

#: ../../ref/templates/builtins.txt:727
msgid ""
"Displays random \"lorem ipsum\" Latin text. This is useful for providing "
"sample data in templates."
msgstr ""

#: ../../ref/templates/builtins.txt:734
msgid ""
"The ``{% lorem %}`` tag can be used with zero, one, two or three arguments. "
"The arguments are:"
msgstr ""

#: ../../ref/templates/builtins.txt:740
msgid "``count``"
msgstr ""

#: ../../ref/templates/builtins.txt:740
msgid ""
"A number (or variable) containing the number of paragraphs or words to "
"generate (default is 1)."
msgstr ""

#: ../../ref/templates/builtins.txt:742
msgid "``method``"
msgstr ""

#: ../../ref/templates/builtins.txt:742
msgid ""
"Either ``w`` for words, ``p`` for HTML paragraphs or ``b`` for plain-text "
"paragraph blocks (default is ``b``)."
msgstr ""

#: ../../ref/templates/builtins.txt:744
msgid "``random``"
msgstr ""

#: ../../ref/templates/builtins.txt:744
msgid ""
"The word ``random``, which if given, does not use the common paragraph "
"(\"Lorem ipsum dolor sit amet...\") when generating text."
msgstr ""

#: ../../ref/templates/builtins.txt:751
msgid "``{% lorem %}`` will output the common \"lorem ipsum\" paragraph."
msgstr ""

#: ../../ref/templates/builtins.txt:752
msgid ""
"``{% lorem 3 p %}`` will output the common \"lorem ipsum\" paragraph and two"
" random paragraphs each wrapped in HTML ``<p>`` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:754
msgid "``{% lorem 2 w random %}`` will output two random Latin words."
msgstr ""

#: ../../ref/templates/builtins.txt:759
msgid "now"
msgstr ""

#: ../../ref/templates/builtins.txt:761
msgid ""
"Displays the current date and/or time, using a format according to the given"
" string. Such string can contain format specifiers characters as described "
"in the :tfilter:`date` filter section."
msgstr ""

#: ../../ref/templates/builtins.txt:769
msgid ""
"Note that you can backslash-escape a format string if you want to use the "
"\"raw\" value. In this example, both \"o\" and \"f\" are backslash-escaped, "
"because otherwise each is a format string that displays the year and the "
"time, respectively::"
msgstr ""

#: ../../ref/templates/builtins.txt:776
msgid "This would display as \"It is the 4th of September\"."
msgstr ""

#: ../../ref/templates/builtins.txt:780
msgid ""
"The format passed can also be one of the predefined ones "
":setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, "
":setting:`SHORT_DATE_FORMAT` or :setting:`SHORT_DATETIME_FORMAT`. The "
"predefined formats may vary depending on the current locale and if :ref"
":`format-localization` is enabled, e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:788
msgid ""
"You can also use the syntax ``{% now \"Y\" as current_year %}`` to store the"
" output (as a string) inside a variable. This is useful if you want to use "
"``{% now %}`` inside a template tag like :ttag:`blocktrans` for example::"
msgstr ""

#: ../../ref/templates/builtins.txt:797
msgid "The ability to use the \"as\" syntax was added."
msgstr ""

#: ../../ref/templates/builtins.txt:802
msgid "regroup"
msgstr ""

#: ../../ref/templates/builtins.txt:804
msgid "Regroups a list of alike objects by a common attribute."
msgstr ""

#: ../../ref/templates/builtins.txt:806
msgid ""
"This complex tag is best illustrated by way of an example: say that "
"\"places\" is a list of cities represented by dictionaries containing "
"``\"name\"``, ``\"population\"``, and ``\"country\"`` keys:"
msgstr ""

#: ../../ref/templates/builtins.txt:820
msgid ""
"...and you'd like to display a hierarchical list that is ordered by country,"
" like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:823 ../../ref/templates/builtins.txt:887
#: ../../ref/templates/builtins.txt:895
msgid "India"
msgstr ""

#: ../../ref/templates/builtins.txt:825 ../../ref/templates/builtins.txt:889
msgid "Mumbai: 19,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:826 ../../ref/templates/builtins.txt:897
msgid "Calcutta: 15,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:828 ../../ref/templates/builtins.txt:891
#: ../../ref/templates/builtins.txt:899
msgid "USA"
msgstr ""

#: ../../ref/templates/builtins.txt:830 ../../ref/templates/builtins.txt:893
msgid "New York: 20,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:831 ../../ref/templates/builtins.txt:901
msgid "Chicago: 7,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:833 ../../ref/templates/builtins.txt:903
msgid "Japan"
msgstr ""

#: ../../ref/templates/builtins.txt:835 ../../ref/templates/builtins.txt:905
msgid "Tokyo: 33,000,000"
msgstr ""

#: ../../ref/templates/builtins.txt:837
msgid ""
"You can use the ``{% regroup %}`` tag to group the list of cities by "
"country. The following snippet of template code would accomplish this::"
msgstr ""

#: ../../ref/templates/builtins.txt:854
msgid ""
"Let's walk through this example. ``{% regroup %}`` takes three arguments: "
"the list you want to regroup, the attribute to group by, and the name of the"
" resulting list. Here, we're regrouping the ``cities`` list by the "
"``country`` attribute and calling the result ``country_list``."
msgstr ""

#: ../../ref/templates/builtins.txt:859
msgid ""
"``{% regroup %}`` produces a list (in this case, ``country_list``) of "
"**group objects**. Each group object has two attributes:"
msgstr ""

#: ../../ref/templates/builtins.txt:862
msgid ""
"``grouper`` -- the item that was grouped by (e.g., the string \"India\" or "
"\"Japan\")."
msgstr ""

#: ../../ref/templates/builtins.txt:864
msgid ""
"``list`` -- a list of all items in this group (e.g., a list of all cities "
"with country='India')."
msgstr ""

#: ../../ref/templates/builtins.txt:867
msgid ""
"Note that ``{% regroup %}`` does not order its input! Our example relies on "
"the fact that the ``cities`` list was ordered by ``country`` in the first "
"place. If the ``cities`` list did *not* order its members by ``country``, "
"the regrouping would naively display more than one group for a single "
"country. For example, say the ``cities`` list was set to this (note that the"
" countries are not grouped together):"
msgstr ""

#: ../../ref/templates/builtins.txt:884
msgid ""
"With this input for ``cities``, the example ``{% regroup %}`` template code "
"above would result in the following output:"
msgstr ""

#: ../../ref/templates/builtins.txt:907
msgid ""
"The easiest solution to this gotcha is to make sure in your view code that "
"the data is ordered according to how you want to display it."
msgstr ""

#: ../../ref/templates/builtins.txt:910
msgid ""
"Another solution is to sort the data in the template using the "
":tfilter:`dictsort` filter, if your data is in a list of dictionaries::"
msgstr ""

#: ../../ref/templates/builtins.txt:916
msgid "Grouping on other properties"
msgstr ""

#: ../../ref/templates/builtins.txt:918
msgid ""
"Any valid template lookup is a legal grouping attribute for the regroup tag,"
" including methods, attributes, dictionary keys and list items. For example,"
" if the \"country\" field is a foreign key to a class with an attribute "
"\"description,\" you could use::"
msgstr ""

#: ../../ref/templates/builtins.txt:925
msgid ""
"Or, if ``country`` is a field with ``choices``, it will have a "
":meth:`~django.db.models.Model.get_FOO_display` method available as an "
"attribute, allowing  you to group on the display string rather than the "
"``choices`` key::"
msgstr ""

#: ../../ref/templates/builtins.txt:932
msgid ""
"``{{ country.grouper }}`` will now display the value fields from the "
"``choices`` set rather than the keys."
msgstr ""

#: ../../ref/templates/builtins.txt:938
msgid "spaceless"
msgstr ""

#: ../../ref/templates/builtins.txt:940
msgid ""
"Removes whitespace between HTML tags. This includes tab characters and "
"newlines."
msgstr ""

#: ../../ref/templates/builtins.txt:951
msgid "This example would return this HTML::"
msgstr ""

#: ../../ref/templates/builtins.txt:955
msgid ""
"Only space between *tags* is removed -- not space between tags and text. In "
"this example, the space around ``Hello`` won't be stripped::"
msgstr ""

#: ../../ref/templates/builtins.txt:967
msgid "ssi"
msgstr ""

#: ../../ref/templates/builtins.txt:971
msgid ""
"This tag has been deprecated and will be removed in Django 1.10. Use the "
":ttag:`include` tag instead."
msgstr ""

#: ../../ref/templates/builtins.txt:974
msgid "Outputs the contents of a given file into the page."
msgstr ""

#: ../../ref/templates/builtins.txt:976
msgid ""
"Like a simple :ttag:`include` tag, ``{% ssi %}`` includes the contents of "
"another file -- which must be specified using an absolute path -- in the "
"current page::"
msgstr ""

#: ../../ref/templates/builtins.txt:982
msgid ""
"The first parameter of ``ssi`` can be a quoted literal or any other context "
"variable."
msgstr ""

#: ../../ref/templates/builtins.txt:985
msgid ""
"If the optional ``parsed`` parameter is given, the contents of the included "
"file are evaluated as template code, within the current context::"
msgstr ""

#: ../../ref/templates/builtins.txt:990
msgid ""
"Note that if you use ``{% ssi %}``, you'll need to define "
"``'allowed_include_roots'`` in the :setting:`OPTIONS <TEMPLATES-OPTIONS>` of"
" your template engine, as a security measure."
msgstr ""

#: ../../ref/templates/builtins.txt:995
msgid ""
"With the :ttag:`ssi` tag and the ``parsed`` parameter there is no shared "
"state between files -- each include is a completely independent rendering "
"process. This means it's not possible for example to define blocks or alter "
"the context in the current page using the included file."
msgstr ""

#: ../../ref/templates/builtins.txt:1001
msgid "See also: :ttag:`{% include %}<include>`."
msgstr ""

#: ../../ref/templates/builtins.txt:1006
msgid "templatetag"
msgstr ""

#: ../../ref/templates/builtins.txt:1008
msgid "Outputs one of the syntax characters used to compose template tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1010
msgid ""
"Since the template system has no concept of \"escaping\", to display one of "
"the bits used in template tags, you must use the ``{% templatetag %}`` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:1013
msgid "The argument tells which template bit to output:"
msgstr ""

#: ../../ref/templates/builtins.txt:1016 ../../ref/templates/builtins.txt:2460
msgid "Outputs"
msgstr ""

#: ../../ref/templates/builtins.txt:1018
msgid "``openblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:1018
msgid "``{%``"
msgstr ""

#: ../../ref/templates/builtins.txt:1019
msgid "``closeblock``"
msgstr ""

#: ../../ref/templates/builtins.txt:1019
msgid "``%}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1020
msgid "``openvariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:1020
msgid "``{{``"
msgstr ""

#: ../../ref/templates/builtins.txt:1021
msgid "``closevariable``"
msgstr ""

#: ../../ref/templates/builtins.txt:1021
msgid "``}}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1022
msgid "``openbrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:1022
msgid "``{``"
msgstr ""

#: ../../ref/templates/builtins.txt:1023
msgid "``closebrace``"
msgstr ""

#: ../../ref/templates/builtins.txt:1023
msgid "``}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1024
msgid "``opencomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:1024
msgid "``{#``"
msgstr ""

#: ../../ref/templates/builtins.txt:1025
msgid "``closecomment``"
msgstr ""

#: ../../ref/templates/builtins.txt:1025
msgid "``#}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1035
msgid "url"
msgstr ""

#: ../../ref/templates/builtins.txt:1037
msgid ""
"Returns an absolute path reference (a URL without the domain name) matching "
"a given view and optional parameters. Any special characters in the "
"resulting path will be encoded using "
":func:`~django.utils.encoding.iri_to_uri`."
msgstr ""

#: ../../ref/templates/builtins.txt:1041
msgid ""
"This is a way to output links without violating the DRY principle by having "
"to hard-code URLs in your templates::"
msgstr ""

#: ../../ref/templates/builtins.txt:1046
msgid ""
"The first argument is a :func:`~django.conf.urls.url` ``name``. It can be a "
"quoted literal or any other context variable. Additional arguments are "
"optional and should be space-separated values that will be used as arguments"
" in the URL. The example above shows passing positional arguments. "
"Alternatively you may use keyword syntax::"
msgstr ""

#: ../../ref/templates/builtins.txt:1054
msgid ""
"Do not mix both positional and keyword syntax in a single call. All "
"arguments required by the URLconf should be present."
msgstr ""

#: ../../ref/templates/builtins.txt:1057
msgid ""
"For example, suppose you have a view, ``app_views.client``, whose URLconf "
"takes a client ID (here, ``client()`` is a method inside the views file "
"``app_views.py``). The URLconf line might look like this:"
msgstr ""

#: ../../ref/templates/builtins.txt:1065
msgid ""
"If this app's URLconf is included into the project's URLconf under a path "
"such as this:"
msgstr ""

#: ../../ref/templates/builtins.txt:1072
msgid "...then, in a template, you can create a link to this view like this::"
msgstr ""

#: ../../ref/templates/builtins.txt:1076
msgid "The template tag will output the string ``/clients/client/123/``."
msgstr ""

#: ../../ref/templates/builtins.txt:1078
msgid ""
"Note that if the URL you're reversing doesn't exist, you'll get an "
":exc:`~django.core.urlresolvers.NoReverseMatch` exception raised, which will"
" cause your site to display an error page."
msgstr ""

#: ../../ref/templates/builtins.txt:1082
msgid ""
"If you'd like to retrieve a URL without displaying it, you can use a "
"slightly different call::"
msgstr ""

#: ../../ref/templates/builtins.txt:1089
msgid ""
"The scope of the variable created by the  ``as var`` syntax is the ``{% "
"block %}`` in which the ``{% url %}`` tag appears."
msgstr ""

#: ../../ref/templates/builtins.txt:1092
msgid ""
"This ``{% url ... as var %}`` syntax will *not* cause an error if the view "
"is missing. In practice you'll use this to link to views that are optional::"
msgstr ""

#: ../../ref/templates/builtins.txt:1100
msgid ""
"If you'd like to retrieve a namespaced URL, specify the fully qualified "
"name::"
msgstr ""

#: ../../ref/templates/builtins.txt:1104
msgid ""
"This will follow the normal :ref:`namespaced URL resolution strategy "
"<topics-http-reversing-url-namespaces>`, including using any hints provided "
"by the context as to the current application."
msgstr ""

#: ../../ref/templates/builtins.txt:1110
msgid ""
"You can also pass a dotted Python path to a view function, but this syntax "
"is deprecated and will be removed in Django 1.10::"
msgstr ""

#: ../../ref/templates/builtins.txt:1117
msgid ""
"Don't forget to put quotes around the :func:`~django.conf.urls.url` "
"``name``, otherwise the value will be interpreted as a context variable!"
msgstr ""

#: ../../ref/templates/builtins.txt:1123
msgid "verbatim"
msgstr ""

#: ../../ref/templates/builtins.txt:1125
msgid ""
"Stops the template engine from rendering the contents of this block tag."
msgstr ""

#: ../../ref/templates/builtins.txt:1127
msgid ""
"A common use is to allow a JavaScript template layer that collides with "
"Django's syntax. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:1134
msgid ""
"You can also designate a specific closing tag, allowing the use of ``{% "
"endverbatim %}`` as part of the unrendered contents::"
msgstr ""

#: ../../ref/templates/builtins.txt:1144
msgid "widthratio"
msgstr ""

#: ../../ref/templates/builtins.txt:1146
msgid ""
"For creating bar charts and such, this tag calculates the ratio of a given "
"value to a maximum value, and then applies that ratio to a constant."
msgstr ""

#: ../../ref/templates/builtins.txt:1154
msgid ""
"If ``this_value`` is 175, ``max_value`` is 200, and ``max_width`` is 100, "
"the image in the above example will be 88 pixels wide (because 175/200 = "
".875; .875 * 100 = 87.5 which is rounded up to 88)."
msgstr ""

#: ../../ref/templates/builtins.txt:1158
msgid ""
"In some cases you might want to capture the result of ``widthratio`` in a "
"variable. It can be useful, for instance, in a :ttag:`blocktrans` like "
"this::"
msgstr ""

#: ../../ref/templates/builtins.txt:1166
msgid ""
"The ability to use \"as\" with this tag like in the example above was added."
msgstr ""

#: ../../ref/templates/builtins.txt:1171
msgid "with"
msgstr ""

#: ../../ref/templates/builtins.txt:1173
msgid ""
"Caches a complex variable under a simpler name. This is useful when "
"accessing an \"expensive\" method (e.g., one that hits the database) "
"multiple times."
msgstr ""

#: ../../ref/templates/builtins.txt:1182
msgid ""
"The populated variable (in the example above, ``total``) is only available "
"between the ``{% with %}`` and ``{% endwith %}`` tags."
msgstr ""

#: ../../ref/templates/builtins.txt:1185
msgid "You can assign more than one context variable::"
msgstr ""

#: ../../ref/templates/builtins.txt:1191
msgid ""
"The previous more verbose format is still supported: ``{% with "
"business.employees.count as total %}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1197
msgid "Built-in filter reference"
msgstr ""

#: ../../ref/templates/builtins.txt:1202
msgid "add"
msgstr ""

#: ../../ref/templates/builtins.txt:1204
msgid "Adds the argument to the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1210
msgid "If ``value`` is ``4``, then the output will be ``6``."
msgstr ""

#: ../../ref/templates/builtins.txt:1212
msgid ""
"This filter will first try to coerce both values to integers. If this fails,"
" it'll attempt to add the values together anyway. This will work on some "
"data types (strings, list, etc.) and fail on others. If it fails, the result"
" will be an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:1217
msgid "For example, if we have::"
msgstr ""

#: ../../ref/templates/builtins.txt:1221
msgid ""
"and ``first`` is ``[1, 2, 3]`` and ``second`` is ``[4, 5, 6]``, then the "
"output will be ``[1, 2, 3, 4, 5, 6]``."
msgstr ""

#: ../../ref/templates/builtins.txt:1226
msgid ""
"Strings that can be coerced to integers will be **summed**, not "
"concatenated, as in the first example above."
msgstr ""

#: ../../ref/templates/builtins.txt:1232
msgid "addslashes"
msgstr ""

#: ../../ref/templates/builtins.txt:1234
msgid ""
"Adds slashes before quotes. Useful for escaping strings in CSV, for example."
msgstr ""

#: ../../ref/templates/builtins.txt:1240
msgid ""
"If ``value`` is ``\"I'm using Django\"``, the output will be ``\"I\\'m using"
" Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1246
msgid "capfirst"
msgstr ""

#: ../../ref/templates/builtins.txt:1248
msgid ""
"Capitalizes the first character of the value. If the first character is not "
"a letter, this filter has no effect."
msgstr ""

#: ../../ref/templates/builtins.txt:1255
msgid "If ``value`` is ``\"django\"``, the output will be ``\"Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1260
msgid "center"
msgstr ""

#: ../../ref/templates/builtins.txt:1262
msgid "Centers the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1268
msgid "If ``value`` is ``\"Django\"``, the output will be ``\"     Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1273
msgid "cut"
msgstr ""

#: ../../ref/templates/builtins.txt:1275
msgid "Removes all values of arg from the given string."
msgstr ""

#: ../../ref/templates/builtins.txt:1281
msgid ""
"If ``value`` is ``\"String with spaces\"``, the output will be "
"``\"Stringwithspaces\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1287
msgid "date"
msgstr ""

#: ../../ref/templates/builtins.txt:1289
msgid "Formats a date according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:1291
msgid ""
"Uses a similar format as PHP's ``date()`` function (http://php.net/date) "
"with some differences."
msgstr ""

#: ../../ref/templates/builtins.txt:1295
msgid ""
"These format characters are not used in Django outside of templates. They "
"were designed to be compatible with PHP to ease transitioning for designers."
msgstr ""

#: ../../ref/templates/builtins.txt:1300
msgid "Available format strings:"
msgstr ""

#: ../../ref/templates/builtins.txt:1303
msgid "Format character"
msgstr ""

#: ../../ref/templates/builtins.txt:1303
msgid "Example output"
msgstr ""

#: ../../ref/templates/builtins.txt:1305
msgid "a"
msgstr ""

#: ../../ref/templates/builtins.txt:1305
msgid ""
"``'a.m.'`` or ``'p.m.'`` (Note that this is slightly different than PHP's "
"output, because this includes periods to match Associated Press style.)"
msgstr ""

#: ../../ref/templates/builtins.txt:1305
msgid "``'a.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1309
msgid "A"
msgstr ""

#: ../../ref/templates/builtins.txt:1309
msgid "``'AM'`` or ``'PM'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1309
msgid "``'AM'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1310
msgid "b"
msgstr ""

#: ../../ref/templates/builtins.txt:1310
msgid "Month, textual, 3 letters, lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1310
msgid "``'jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1311
msgid "B"
msgstr ""

#: ../../ref/templates/builtins.txt:1311
msgid "Not implemented."
msgstr ""

#: ../../ref/templates/builtins.txt:1312
msgid "c"
msgstr ""

#: ../../ref/templates/builtins.txt:1312
msgid ""
"ISO 8601 format. (Note: unlike others formatters, such as \"Z\", \"O\" or "
"\"r\", the \"c\" formatter will not add timezone offset if value is a naive "
"datetime (see :class:`datetime.tzinfo`)."
msgstr ""

#: ../../ref/templates/builtins.txt:1312
msgid ""
"``2008-01-02T10:30:00.000123+02:00``, or ``2008-01-02T10:30:00.000123`` if "
"the datetime is naive"
msgstr ""

#: ../../ref/templates/builtins.txt:1317
msgid "d"
msgstr ""

#: ../../ref/templates/builtins.txt:1317
msgid "Day of the month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1317
msgid "``'01'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1319
msgid "D"
msgstr ""

#: ../../ref/templates/builtins.txt:1319
msgid "Day of the week, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1319
msgid "``'Fri'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1320
msgid "e"
msgstr ""

#: ../../ref/templates/builtins.txt:1320
msgid ""
"Timezone name. Could be in any format, or might return an empty string, "
"depending on the datetime."
msgstr ""

#: ../../ref/templates/builtins.txt:1321
msgid "``''``, ``'GMT'``, ``'-500'``, ``'US/Eastern'``, etc."
msgstr ""

#: ../../ref/templates/builtins.txt:1323
msgid "E"
msgstr ""

#: ../../ref/templates/builtins.txt:1323
msgid ""
"Month, locale specific alternative representation usually used for long date"
" representation."
msgstr ""

#: ../../ref/templates/builtins.txt:1325
msgid "``'listopada'`` (for Polish locale, as opposed to ``'Listopad'``)"
msgstr ""

#: ../../ref/templates/builtins.txt:1326
msgid "f"
msgstr ""

#: ../../ref/templates/builtins.txt:1326
msgid ""
"Time, in 12-hour hours and minutes, with minutes left off if they're zero. "
"Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1326
msgid "``'1'``, ``'1:30'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1329
msgid "F"
msgstr ""

#: ../../ref/templates/builtins.txt:1329
msgid "Month, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1329
msgid "``'January'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1330
msgid "g"
msgstr ""

#: ../../ref/templates/builtins.txt:1330
msgid "Hour, 12-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1330 ../../ref/templates/builtins.txt:1345
msgid "``'1'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1332
msgid "G"
msgstr ""

#: ../../ref/templates/builtins.txt:1332
msgid "Hour, 24-hour format without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1332
msgid "``'0'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1334
msgid "h"
msgstr ""

#: ../../ref/templates/builtins.txt:1334
msgid "Hour, 12-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1334 ../../ref/templates/builtins.txt:1343
msgid "``'01'`` to ``'12'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1335
msgid "H"
msgstr ""

#: ../../ref/templates/builtins.txt:1335
msgid "Hour, 24-hour format."
msgstr ""

#: ../../ref/templates/builtins.txt:1335
msgid "``'00'`` to ``'23'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1336
msgid "i"
msgstr ""

#: ../../ref/templates/builtins.txt:1336
msgid "Minutes."
msgstr ""

#: ../../ref/templates/builtins.txt:1336 ../../ref/templates/builtins.txt:1358
msgid "``'00'`` to ``'59'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1337
msgid "I"
msgstr ""

#: ../../ref/templates/builtins.txt:1337
msgid "Daylight Savings Time, whether it's in effect or not."
msgstr ""

#: ../../ref/templates/builtins.txt:1337
msgid "``'1'`` or ``'0'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1339
msgid "j"
msgstr ""

#: ../../ref/templates/builtins.txt:1339
msgid "Day of the month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1339
msgid "``'1'`` to ``'31'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1341
msgid "l"
msgstr ""

#: ../../ref/templates/builtins.txt:1341
msgid "Day of the week, textual, long."
msgstr ""

#: ../../ref/templates/builtins.txt:1341
msgid "``'Friday'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1342
msgid "L"
msgstr ""

#: ../../ref/templates/builtins.txt:1342
msgid "Boolean for whether it's a leap year."
msgstr ""

#: ../../ref/templates/builtins.txt:1342
msgid "``True`` or ``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:1343
msgid "m"
msgstr ""

#: ../../ref/templates/builtins.txt:1343
msgid "Month, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1344
msgid "M"
msgstr ""

#: ../../ref/templates/builtins.txt:1344
msgid "Month, textual, 3 letters."
msgstr ""

#: ../../ref/templates/builtins.txt:1344
msgid "``'Jan'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1345
msgid "n"
msgstr ""

#: ../../ref/templates/builtins.txt:1345
msgid "Month without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1346
msgid "N"
msgstr ""

#: ../../ref/templates/builtins.txt:1346
msgid "Month abbreviation in Associated Press style. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1346
msgid "``'Jan.'``, ``'Feb.'``, ``'March'``, ``'May'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1348
msgid "o"
msgstr ""

#: ../../ref/templates/builtins.txt:1348
msgid ""
"ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W)"
msgstr ""

#: ../../ref/templates/builtins.txt:1348 ../../ref/templates/builtins.txt:1371
msgid "``'1999'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1351
msgid "O"
msgstr ""

#: ../../ref/templates/builtins.txt:1351
msgid "Difference to Greenwich time in hours."
msgstr ""

#: ../../ref/templates/builtins.txt:1351
msgid "``'+0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1352
msgid "P"
msgstr ""

#: ../../ref/templates/builtins.txt:1352
msgid ""
"Time, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off if "
"they're zero and the special-case strings 'midnight' and 'noon' if "
"appropriate. Proprietary extension."
msgstr ""

#: ../../ref/templates/builtins.txt:1352
msgid ""
"``'1 a.m.'``, ``'1:30 p.m.'``, ``'midnight'``, ``'noon'``, ``'12:30 p.m.'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1357
msgid "r"
msgstr ""

#: ../../ref/templates/builtins.txt:1357
msgid ":rfc:`2822` formatted date."
msgstr ""

#: ../../ref/templates/builtins.txt:1357
msgid "``'Thu, 21 Dec 2000 16:01:07 +0200'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1358
msgid "s"
msgstr ""

#: ../../ref/templates/builtins.txt:1358
msgid "Seconds, 2 digits with leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1359
msgid "S"
msgstr ""

#: ../../ref/templates/builtins.txt:1359
msgid "English ordinal suffix for day of the month, 2 characters."
msgstr ""

#: ../../ref/templates/builtins.txt:1359
msgid "``'st'``, ``'nd'``, ``'rd'`` or ``'th'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1361
msgid "t"
msgstr ""

#: ../../ref/templates/builtins.txt:1361
msgid "Number of days in the given month."
msgstr ""

#: ../../ref/templates/builtins.txt:1361
msgid "``28`` to ``31``"
msgstr ""

#: ../../ref/templates/builtins.txt:1362
msgid "T"
msgstr ""

#: ../../ref/templates/builtins.txt:1362
msgid "Time zone of this machine."
msgstr ""

#: ../../ref/templates/builtins.txt:1362
msgid "``'EST'``, ``'MDT'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1363
msgid "u"
msgstr ""

#: ../../ref/templates/builtins.txt:1363
msgid "Microseconds."
msgstr ""

#: ../../ref/templates/builtins.txt:1363
msgid "``000000`` to ``999999``"
msgstr ""

#: ../../ref/templates/builtins.txt:1364
msgid "U"
msgstr ""

#: ../../ref/templates/builtins.txt:1364
msgid "Seconds since the Unix Epoch (January 1 1970 00:00:00 UTC)."
msgstr ""

#: ../../ref/templates/builtins.txt:1366
msgid "w"
msgstr ""

#: ../../ref/templates/builtins.txt:1366
msgid "Day of the week, digits without leading zeros."
msgstr ""

#: ../../ref/templates/builtins.txt:1366
msgid "``'0'`` (Sunday) to ``'6'`` (Saturday)"
msgstr ""

#: ../../ref/templates/builtins.txt:1368
msgid "W"
msgstr ""

#: ../../ref/templates/builtins.txt:1368
msgid "ISO-8601 week number of year, with weeks starting on Monday."
msgstr ""

#: ../../ref/templates/builtins.txt:1368
msgid "``1``, ``53``"
msgstr ""

#: ../../ref/templates/builtins.txt:1370
msgid "y"
msgstr ""

#: ../../ref/templates/builtins.txt:1370
msgid "Year, 2 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1370
msgid "``'99'``"
msgstr ""

#: ../../ref/templates/builtins.txt:1371
msgid "Y"
msgstr ""

#: ../../ref/templates/builtins.txt:1371
msgid "Year, 4 digits."
msgstr ""

#: ../../ref/templates/builtins.txt:1372
msgid "z"
msgstr ""

#: ../../ref/templates/builtins.txt:1372
msgid "Day of the year."
msgstr ""

#: ../../ref/templates/builtins.txt:1372
msgid "``0`` to ``365``"
msgstr ""

#: ../../ref/templates/builtins.txt:1373
msgid "Z"
msgstr ""

#: ../../ref/templates/builtins.txt:1373
msgid ""
"Time zone offset in seconds. The offset for timezones west of UTC is always "
"negative, and for those east of UTC is always positive."
msgstr ""

#: ../../ref/templates/builtins.txt:1373
msgid "``-43200`` to ``43200``"
msgstr ""

#: ../../ref/templates/builtins.txt:1383
msgid ""
"If ``value`` is a :py:class:`~datetime.datetime` object (e.g., the result of"
" ``datetime.datetime.now()``), the output will be the string ``'Wed 09 Jan "
"2008'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1387
msgid ""
"The format passed can be one of the predefined ones :setting:`DATE_FORMAT`, "
":setting:`DATETIME_FORMAT`, :setting:`SHORT_DATE_FORMAT` or "
":setting:`SHORT_DATETIME_FORMAT`, or a custom format that uses the format "
"specifiers shown in the table above. Note that predefined formats may vary "
"depending on the current locale."
msgstr ""

#: ../../ref/templates/builtins.txt:1393
msgid ""
"Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` "
"is, for example, ``\"es\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:1398
msgid ""
"the output would be the string ``\"09/01/2008\"`` (the "
"``\"SHORT_DATE_FORMAT\"`` format specifier for the ``es`` locale as shipped "
"with Django is ``\"d/m/Y\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1401 ../../ref/templates/builtins.txt:2133
msgid "When used without a format string::"
msgstr ""

#: ../../ref/templates/builtins.txt:1405
msgid ""
"...the formatting string defined in the :setting:`DATE_FORMAT` setting will "
"be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:1408
msgid ""
"You can combine ``date`` with the :tfilter:`time` filter to render a full "
"representation of a ``datetime`` value. E.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:1416
msgid "default"
msgstr ""

#: ../../ref/templates/builtins.txt:1418
msgid ""
"If value evaluates to ``False``, uses the given default. Otherwise, uses the"
" value."
msgstr ""

#: ../../ref/templates/builtins.txt:1425
msgid ""
"If ``value`` is ``\"\"`` (the empty string), the output will be ``nothing``."
msgstr ""

#: ../../ref/templates/builtins.txt:1430
msgid "default_if_none"
msgstr ""

#: ../../ref/templates/builtins.txt:1432
msgid ""
"If (and only if) value is ``None``, uses the given default. Otherwise, uses "
"the value."
msgstr ""

#: ../../ref/templates/builtins.txt:1435
msgid ""
"Note that if an empty string is given, the default value will *not* be used."
" Use the :tfilter:`default` filter if you want to fallback for empty "
"strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1442
msgid "If ``value`` is ``None``, the output will be the string ``\"nothing\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1447
msgid "dictsort"
msgstr ""

#: ../../ref/templates/builtins.txt:1449
msgid ""
"Takes a list of dictionaries and returns that list sorted by the key given "
"in the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1456
msgid "If ``value`` is:"
msgstr ""

#: ../../ref/templates/builtins.txt:1466
msgid "then the output would be:"
msgstr ""

#: ../../ref/templates/builtins.txt:1476
msgid "You can also do more complicated things like::"
msgstr ""

#: ../../ref/templates/builtins.txt:1482
msgid "If ``books`` is:"
msgstr ""

#: ../../ref/templates/builtins.txt:1492
msgid "then the output would be::"
msgstr ""

#: ../../ref/templates/builtins.txt:1501
msgid "dictsortreversed"
msgstr ""

#: ../../ref/templates/builtins.txt:1503
msgid ""
"Takes a list of dictionaries and returns that list sorted in reverse order "
"by the key given in the argument. This works exactly the same as the above "
"filter, but the returned value will be in reverse order."
msgstr ""

#: ../../ref/templates/builtins.txt:1510
msgid "divisibleby"
msgstr ""

#: ../../ref/templates/builtins.txt:1512
msgid "Returns ``True`` if the value is divisible by the argument."
msgstr ""

#: ../../ref/templates/builtins.txt:1518
msgid "If ``value`` is ``21``, the output would be ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1523
msgid "escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1525
msgid "Escapes a string's HTML. Specifically, it makes these replacements:"
msgstr ""

#: ../../ref/templates/builtins.txt:1527 ../../ref/templates/language.txt:483
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1528 ../../ref/templates/language.txt:484
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1529 ../../ref/templates/language.txt:485
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1530 ../../ref/templates/language.txt:486
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1531 ../../ref/templates/language.txt:487
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../ref/templates/builtins.txt:1533
msgid ""
"The escaping is only applied when the string is output, so it does not "
"matter where in a chained sequence of filters you put ``escape``: it will "
"always be applied as though it were the last filter. If you want escaping to"
" be applied immediately, use the :tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1538
msgid ""
"Applying ``escape`` to a variable that would normally have auto-escaping "
"applied to the result will only result in one round of escaping being done. "
"So it is safe to use this function even in auto-escaping environments. If "
"you want multiple escaping passes to be applied, use the "
":tfilter:`force_escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1543
msgid ""
"For example, you can apply ``escape`` to fields when :ttag:`autoescape` is "
"off::"
msgstr ""

#: ../../ref/templates/builtins.txt:1552
msgid "escapejs"
msgstr ""

#: ../../ref/templates/builtins.txt:1554
msgid ""
"Escapes characters for use in JavaScript strings. This does *not* make the "
"string safe for use in HTML, but does protect you from syntax errors when "
"using templates to generate JavaScript/JSON."
msgstr ""

#: ../../ref/templates/builtins.txt:1562
msgid ""
"If ``value`` is ``\"testing\\r\\njavascript \\'string\" <b>escaping</b>\"``,"
" the output will be ``\"testing\\\\u000D\\\\u000Ajavascript "
"\\\\u0027string\\\\u0022 "
"\\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1568
msgid "filesizeformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1570
msgid ""
"Formats the value like a 'human-readable' file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc)."
msgstr ""

#: ../../ref/templates/builtins.txt:1577 ../../ref/templates/language.txt:175
msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr ""

#: ../../ref/templates/builtins.txt:1579
msgid "File sizes and SI units"
msgstr ""

#: ../../ref/templates/builtins.txt:1581
msgid ""
"Strictly speaking, ``filesizeformat`` does not conform to the International "
"System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes "
"are calculated in powers of 1024 (which is the case here). Instead, Django "
"uses traditional unit names (KB, MB, GB, etc.) corresponding to names that "
"are more commonly used."
msgstr ""

#: ../../ref/templates/builtins.txt:1592
msgid "Returns the first item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1598
msgid ""
"If ``value`` is the list ``['a', 'b', 'c']``, the output will be ``'a'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1603
msgid "floatformat"
msgstr ""

#: ../../ref/templates/builtins.txt:1605
msgid ""
"When used without an argument, rounds a floating-point number to one decimal"
" place -- but only if there's a decimal part to be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1609 ../../ref/templates/builtins.txt:1620
#: ../../ref/templates/builtins.txt:1631 ../../ref/templates/builtins.txt:1643
msgid "Template"
msgstr ""

#: ../../ref/templates/builtins.txt:1609 ../../ref/templates/builtins.txt:1620
#: ../../ref/templates/builtins.txt:1631 ../../ref/templates/builtins.txt:1643
msgid "Output"
msgstr ""

#: ../../ref/templates/builtins.txt:1611 ../../ref/templates/builtins.txt:1622
#: ../../ref/templates/builtins.txt:1633 ../../ref/templates/builtins.txt:1645
msgid "``34.23234``"
msgstr ""

#: ../../ref/templates/builtins.txt:1611 ../../ref/templates/builtins.txt:1612
#: ../../ref/templates/builtins.txt:1613
msgid "``{{ value|floatformat }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1611
msgid "``34.2``"
msgstr ""

#: ../../ref/templates/builtins.txt:1612 ../../ref/templates/builtins.txt:1623
#: ../../ref/templates/builtins.txt:1634 ../../ref/templates/builtins.txt:1646
msgid "``34.00000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1612 ../../ref/templates/builtins.txt:1633
#: ../../ref/templates/builtins.txt:1634 ../../ref/templates/builtins.txt:1646
msgid "``34``"
msgstr ""

#: ../../ref/templates/builtins.txt:1613 ../../ref/templates/builtins.txt:1624
#: ../../ref/templates/builtins.txt:1647
msgid "``34.26000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1613
msgid "``34.3``"
msgstr ""

#: ../../ref/templates/builtins.txt:1616
msgid ""
"If used with a numeric integer argument, ``floatformat`` rounds a number to "
"that many decimal places. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1622 ../../ref/templates/builtins.txt:1623
#: ../../ref/templates/builtins.txt:1624
msgid "``{{ value|floatformat:3 }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1622 ../../ref/templates/builtins.txt:1645
msgid "``34.232``"
msgstr ""

#: ../../ref/templates/builtins.txt:1623
msgid "``34.000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1624 ../../ref/templates/builtins.txt:1647
msgid "``34.260``"
msgstr ""

#: ../../ref/templates/builtins.txt:1627
msgid ""
"Particularly useful is passing 0 (zero) as the argument which will round the"
" float to the nearest integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1633 ../../ref/templates/builtins.txt:1634
#: ../../ref/templates/builtins.txt:1635
msgid "``{{ value|floatformat:\"0\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1635
msgid "``39.56000``"
msgstr ""

#: ../../ref/templates/builtins.txt:1635
msgid "``40``"
msgstr ""

#: ../../ref/templates/builtins.txt:1638
msgid ""
"If the argument passed to ``floatformat`` is negative, it will round a "
"number to that many decimal places -- but only if there's a decimal part to "
"be displayed. For example:"
msgstr ""

#: ../../ref/templates/builtins.txt:1645 ../../ref/templates/builtins.txt:1646
#: ../../ref/templates/builtins.txt:1647
msgid "``{{ value|floatformat:\"-3\" }}``"
msgstr ""

#: ../../ref/templates/builtins.txt:1650
msgid ""
"Using ``floatformat`` with no argument is equivalent to using "
"``floatformat`` with an argument of ``-1``."
msgstr ""

#: ../../ref/templates/builtins.txt:1656
msgid "force_escape"
msgstr ""

#: ../../ref/templates/builtins.txt:1658
msgid ""
"Applies HTML escaping to a string (see the :tfilter:`escape` filter for "
"details). This filter is applied *immediately* and returns a new, escaped "
"string. This is useful in the rare cases where you need multiple escaping or"
" want to apply other filters to the escaped results. Normally, you want to "
"use the :tfilter:`escape` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1664
msgid ""
"For example, if you want to catch the ``<p>`` HTML elements created by the "
":tfilter:`linebreaks` filter::"
msgstr ""

#: ../../ref/templates/builtins.txt:1674
msgid "get_digit"
msgstr ""

#: ../../ref/templates/builtins.txt:1676
msgid ""
"Given a whole number, returns the requested digit, where 1 is the right-most"
" digit, 2 is the second-right-most digit, etc. Returns the original value "
"for invalid input (if input or argument is not an integer, or if argument is"
" less than 1). Otherwise, output is always an integer."
msgstr ""

#: ../../ref/templates/builtins.txt:1685
msgid "If ``value`` is ``123456789``, the output will be ``8``."
msgstr ""

#: ../../ref/templates/builtins.txt:1690
msgid "iriencode"
msgstr ""

#: ../../ref/templates/builtins.txt:1692
msgid ""
"Converts an IRI (Internationalized Resource Identifier) to a string that is "
"suitable for including in a URL. This is necessary if you're trying to use "
"strings containing non-ASCII characters in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:1696
msgid ""
"It's safe to use this filter on a string that has already gone through the "
":tfilter:`urlencode` filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1703
msgid ""
"If ``value`` is ``\"?test=1&me=2\"``, the output will be "
"``\"?test=1&amp;me=2\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1708
msgid "join"
msgstr ""

#: ../../ref/templates/builtins.txt:1710
msgid "Joins a list with a string, like Python's ``str.join(list)``"
msgstr ""

#: ../../ref/templates/builtins.txt:1716
msgid ""
"If ``value`` is the list ``['a', 'b', 'c']``, the output will be the string "
"``\"a // b // c\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1724
msgid "Returns the last item in a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1730
msgid ""
"If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output will be the "
"string ``\"d\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1736
msgid "length"
msgstr ""

#: ../../ref/templates/builtins.txt:1738
msgid ""
"Returns the length of the value. This works for both strings and lists."
msgstr ""

#: ../../ref/templates/builtins.txt:1744
msgid ""
"If ``value`` is ``['a', 'b', 'c', 'd']`` or ``\"abcd\"``, the output will be"
" ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:1749
msgid ""
"The filter returns ``0`` for an undefined variable. Previously, it returned "
"an empty string."
msgstr ""

#: ../../ref/templates/builtins.txt:1755
msgid "length_is"
msgstr ""

#: ../../ref/templates/builtins.txt:1757
msgid ""
"Returns ``True`` if the value's length is the argument, or ``False`` "
"otherwise."
msgstr ""

#: ../../ref/templates/builtins.txt:1763
msgid ""
"If ``value`` is ``['a', 'b', 'c', 'd']`` or ``\"abcd\"``, the output will be"
" ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:1769
msgid "linebreaks"
msgstr ""

#: ../../ref/templates/builtins.txt:1771
msgid ""
"Replaces line breaks in plain text with appropriate HTML; a single newline "
"becomes an HTML line break (``<br />``) and a new line followed by a blank "
"line becomes a paragraph break (``</p>``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1779
msgid ""
"If ``value`` is ``Joel\\nis a slug``, the output will be ``<p>Joel<br />is a"
" slug</p>``."
msgstr ""

#: ../../ref/templates/builtins.txt:1785
msgid "linebreaksbr"
msgstr ""

#: ../../ref/templates/builtins.txt:1787
msgid ""
"Converts all newlines in a piece of plain text to HTML line breaks (``<br "
"/>``)."
msgstr ""

#: ../../ref/templates/builtins.txt:1794
msgid ""
"If ``value`` is ``Joel\\nis a slug``, the output will be ``Joel<br />is a "
"slug``."
msgstr ""

#: ../../ref/templates/builtins.txt:1800
msgid "linenumbers"
msgstr ""

#: ../../ref/templates/builtins.txt:1802
msgid "Displays text with line numbers."
msgstr ""

#: ../../ref/templates/builtins.txt:1808
msgid "If ``value`` is::"
msgstr ""

#: ../../ref/templates/builtins.txt:1814
msgid "the output will be::"
msgstr ""

#: ../../ref/templates/builtins.txt:1823
msgid "ljust"
msgstr ""

#: ../../ref/templates/builtins.txt:1825
msgid "Left-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1827 ../../ref/templates/builtins.txt:1979
msgid "**Argument:** field size"
msgstr ""

#: ../../ref/templates/builtins.txt:1833
msgid "If ``value`` is ``Django``, the output will be ``\"Django    \"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1838
msgid "lower"
msgstr ""

#: ../../ref/templates/builtins.txt:1840
msgid "Converts a string into all lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:1846
msgid ""
"If ``value`` is ``Totally LOVING this Album!``, the output will be ``totally"
" loving this album!``."
msgstr ""

#: ../../ref/templates/builtins.txt:1852
msgid "make_list"
msgstr ""

#: ../../ref/templates/builtins.txt:1854
msgid ""
"Returns the value turned into a list. For a string, it's a list of "
"characters. For an integer, the argument is cast into an unicode string "
"before creating a list."
msgstr ""

#: ../../ref/templates/builtins.txt:1862
msgid ""
"If ``value`` is the string ``\"Joel\"``, the output would be the list "
"``['J', 'o', 'e', 'l']``. If ``value`` is ``123``, the output will be the "
"list ``['1', '2', '3']``."
msgstr ""

#: ../../ref/templates/builtins.txt:1869
msgid "phone2numeric"
msgstr ""

#: ../../ref/templates/builtins.txt:1871
msgid ""
"Converts a phone number (possibly containing letters) to its numerical "
"equivalent."
msgstr ""

#: ../../ref/templates/builtins.txt:1874
msgid ""
"The input doesn't have to be a valid phone number. This will happily convert"
" any string."
msgstr ""

#: ../../ref/templates/builtins.txt:1881
msgid "If ``value`` is ``800-COLLECT``, the output will be ``800-2655328``."
msgstr ""

#: ../../ref/templates/builtins.txt:1886
msgid "pluralize"
msgstr ""

#: ../../ref/templates/builtins.txt:1888
msgid ""
"Returns a plural suffix if the value is not 1. By default, this suffix is "
"``'s'``."
msgstr ""

#: ../../ref/templates/builtins.txt:1895
msgid ""
"If ``num_messages`` is ``1``, the output will be ``You have 1 message.`` If "
"``num_messages`` is ``2``  the output will be ``You have 2 messages.``"
msgstr ""

#: ../../ref/templates/builtins.txt:1898
msgid ""
"For words that require a suffix other than ``'s'``, you can provide an "
"alternate suffix as a parameter to the filter."
msgstr ""

#: ../../ref/templates/builtins.txt:1905
msgid ""
"For words that don't pluralize by simple suffix, you can specify both a "
"singular and plural suffix, separated by a comma."
msgstr ""

#: ../../ref/templates/builtins.txt:1912
msgid "Use :ttag:`blocktrans` to pluralize translated strings."
msgstr ""

#: ../../ref/templates/builtins.txt:1917
msgid "pprint"
msgstr ""

#: ../../ref/templates/builtins.txt:1919
msgid "A wrapper around :func:`pprint.pprint` -- for debugging, really."
msgstr ""

#: ../../ref/templates/builtins.txt:1924
msgid "random"
msgstr ""

#: ../../ref/templates/builtins.txt:1926
msgid "Returns a random item from the given list."
msgstr ""

#: ../../ref/templates/builtins.txt:1932
msgid ""
"If ``value`` is the list ``['a', 'b', 'c', 'd']``, the output could be "
"``\"b\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1937
msgid "removetags"
msgstr ""

#: ../../ref/templates/builtins.txt:1941
msgid ""
"``removetags`` cannot guarantee HTML safe output and has been deprecated due"
" to security concerns. Consider using `bleach`_ instead."
msgstr ""

#: ../../ref/templates/builtins.txt:1946
msgid "Removes a space-separated list of [X]HTML tags from the output."
msgstr ""

#: ../../ref/templates/builtins.txt:1952
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` "
"the unescaped output will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1955 ../../ref/utils.txt:684
msgid "Note that this filter is case-sensitive."
msgstr ""

#: ../../ref/templates/builtins.txt:1957
msgid ""
"If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` "
"the unescaped output will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1960 ../../ref/templates/builtins.txt:2084
msgid "No safety guarantee"
msgstr ""

#: ../../ref/templates/builtins.txt:1962
msgid ""
"Note that ``removetags`` doesn't give any guarantee about its output being "
"HTML safe. In particular, it doesn't work recursively, so an input like "
"``\"<sc<script>ript>alert('XSS')</sc</script>ript>\"`` won't be safe even if"
" you apply ``|removetags:\"script\"``. So if the input is user provided, "
"**NEVER** apply the ``safe`` filter to a ``removetags`` output. If you are "
"looking for something more robust, you can use the ``bleach`` Python "
"library, notably its `clean`_ method."
msgstr ""

#: ../../ref/templates/builtins.txt:1975
msgid "rjust"
msgstr ""

#: ../../ref/templates/builtins.txt:1977
msgid "Right-aligns the value in a field of a given width."
msgstr ""

#: ../../ref/templates/builtins.txt:1985
msgid "If ``value`` is ``Django``, the output will be ``\"    Django\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:1990
msgid "safe"
msgstr ""

#: ../../ref/templates/builtins.txt:1992
msgid ""
"Marks a string as not requiring further HTML escaping prior to output. When "
"autoescaping is off, this filter has no effect."
msgstr ""

#: ../../ref/templates/builtins.txt:1997
msgid ""
"If you are chaining filters, a filter applied after ``safe`` can make the "
"contents unsafe again. For example, the following code prints the variable "
"as is, unescaped:"
msgstr ""

#: ../../ref/templates/builtins.txt:2008
msgid "safeseq"
msgstr ""

#: ../../ref/templates/builtins.txt:2010
msgid ""
"Applies the :tfilter:`safe` filter to each element of a sequence. Useful in "
"conjunction with other filters that operate on sequences, such as "
":tfilter:`join`. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:2016
msgid ""
"You couldn't use the :tfilter:`safe` filter directly in this case, as it "
"would first convert the variable into a string, rather than working with the"
" individual elements of the sequence."
msgstr ""

#: ../../ref/templates/builtins.txt:2023
msgid "slice"
msgstr ""

#: ../../ref/templates/builtins.txt:2025
msgid "Returns a slice of the list."
msgstr ""

#: ../../ref/templates/builtins.txt:2027
msgid ""
"Uses the same syntax as Python's list slicing. See "
"http://www.diveintopython3.net/native-datatypes.html#slicinglists for an "
"introduction."
msgstr ""

#: ../../ref/templates/builtins.txt:2035
msgid ""
"If ``some_list`` is ``['a', 'b', 'c']``, the output will be ``['a', 'b']``."
msgstr ""

#: ../../ref/templates/builtins.txt:2040
msgid "slugify"
msgstr ""

#: ../../ref/templates/builtins.txt:2042 ../../ref/utils.txt:877
msgid ""
"Converts to ASCII. Converts spaces to hyphens. Removes characters that "
"aren't alphanumerics, underscores, or hyphens. Converts to lowercase. Also "
"strips leading and trailing whitespace."
msgstr ""

#: ../../ref/templates/builtins.txt:2050 ../../ref/utils.txt:885
msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"joel-"
"is-a-slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2055
msgid "stringformat"
msgstr ""

#: ../../ref/templates/builtins.txt:2057
msgid ""
"Formats the variable according to the argument, a string formatting "
"specifier. This specifier uses Python string formatting syntax, with the "
"exception that the leading \"%\" is dropped."
msgstr ""

#: ../../ref/templates/builtins.txt:2061
msgid ""
"See https://docs.python.org/library/stdtypes.html#string-formatting-"
"operations for documentation of Python string formatting"
msgstr ""

#: ../../ref/templates/builtins.txt:2068
msgid "If ``value`` is ``10``, the output will be ``1.000000E+01``."
msgstr ""

#: ../../ref/templates/builtins.txt:2073
msgid "striptags"
msgstr ""

#: ../../ref/templates/builtins.txt:2075
msgid "Makes all possible efforts to strip all [X]HTML tags."
msgstr ""

#: ../../ref/templates/builtins.txt:2081
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``,"
" the output will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2086
msgid ""
"Note that ``striptags`` doesn't give any guarantee about its output being "
"HTML safe, particularly with non valid HTML input. So **NEVER** apply the "
"``safe`` filter to a ``striptags`` output. If you are looking for something "
"more robust, you can use the ``bleach`` Python library, notably its `clean`_"
" method."
msgstr ""

#: ../../ref/templates/builtins.txt:2097
msgid "time"
msgstr ""

#: ../../ref/templates/builtins.txt:2099
msgid "Formats a time according to the given format."
msgstr ""

#: ../../ref/templates/builtins.txt:2101
msgid ""
"Given format can be the predefined one :setting:`TIME_FORMAT`, or a custom "
"format, same as the :tfilter:`date` filter. Note that the predefined format "
"is locale-dependent."
msgstr ""

#: ../../ref/templates/builtins.txt:2109
msgid ""
"If ``value`` is equivalent to ``datetime.datetime.now()``, the output will "
"be the string ``\"01:23\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2112
msgid "Another example:"
msgstr ""

#: ../../ref/templates/builtins.txt:2114
msgid ""
"Assuming that :setting:`USE_L10N` is ``True`` and :setting:`LANGUAGE_CODE` "
"is, for example, ``\"de\"``, then for::"
msgstr ""

#: ../../ref/templates/builtins.txt:2119
msgid ""
"the output will be the string ``\"01:23:00\"`` (The ``\"TIME_FORMAT\"`` "
"format specifier for the ``de`` locale as shipped with Django is "
"``\"H:i:s\"``)."
msgstr ""

#: ../../ref/templates/builtins.txt:2122
msgid ""
"The ``time`` filter will only accept parameters in the format string that "
"relate to the time of day, not the date (for obvious reasons). If you need "
"to format a ``date`` value, use the :tfilter:`date` filter instead (or along"
" ``time`` if you need to render a full :py:class:`~datetime.datetime` "
"value)."
msgstr ""

#: ../../ref/templates/builtins.txt:2127
msgid ""
"There is one exception the above rule: When passed a ``datetime`` value with"
" attached timezone information (a :ref:`time-zone-aware "
"<naive_vs_aware_datetimes>` ``datetime`` instance) the ``time`` filter will "
"accept the timezone-related :ref:`format specifiers <date-and-time-"
"formatting-specifiers>` ``'e'``, ``'O'`` , ``'T'`` and ``'Z'``."
msgstr ""

#: ../../ref/templates/builtins.txt:2137
msgid ""
"...the formatting string defined in the :setting:`TIME_FORMAT` setting will "
"be used, without applying any localization."
msgstr ""

#: ../../ref/templates/builtins.txt:2142
msgid ""
"The ability to receive and act on values with attached timezone information "
"was added in Django 1.7."
msgstr ""

#: ../../ref/templates/builtins.txt:2148
msgid "timesince"
msgstr ""

#: ../../ref/templates/builtins.txt:2150
msgid "Formats a date as the time since that date (e.g., \"4 days, 6 hours\")."
msgstr ""

#: ../../ref/templates/builtins.txt:2152
msgid ""
"Takes an optional argument that is a variable containing the date to use as "
"the comparison point (without the argument, the comparison point is *now*). "
"For example, if ``blog_date`` is a date instance representing midnight on 1 "
"June 2006, and ``comment_date`` is a date instance for 08:00 on 1 June 2006,"
" then the following would return \"8 hours\"::"
msgstr ""

#: ../../ref/templates/builtins.txt:2160 ../../ref/templates/builtins.txt:2181
msgid ""
"Comparing offset-naive and offset-aware datetimes will return an empty "
"string."
msgstr ""

#: ../../ref/templates/builtins.txt:2162
msgid ""
"Minutes is the smallest unit used, and \"0 minutes\" will be returned for "
"any date that is in the future relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2168
msgid "timeuntil"
msgstr ""

#: ../../ref/templates/builtins.txt:2170
msgid ""
"Similar to ``timesince``, except that it measures the time from now until "
"the given date or datetime. For example, if today is 1 June 2006 and "
"``conference_date`` is a date instance holding 29 June 2006, then ``{{ "
"conference_date|timeuntil }}`` will return \"4 weeks\"."
msgstr ""

#: ../../ref/templates/builtins.txt:2175
msgid ""
"Takes an optional argument that is a variable containing the date to use as "
"the comparison point (instead of *now*). If ``from_date`` contains 22 June "
"2006, then the following will return \"1 week\"::"
msgstr ""

#: ../../ref/templates/builtins.txt:2183
msgid ""
"Minutes is the smallest unit used, and \"0 minutes\" will be returned for "
"any date that is in the past relative to the comparison point."
msgstr ""

#: ../../ref/templates/builtins.txt:2189
msgid "title"
msgstr ""

#: ../../ref/templates/builtins.txt:2191
msgid ""
"Converts a string into titlecase by making words start with an uppercase "
"character and the remaining characters lowercase. This tag makes no effort "
"to keep \"trivial words\" in lowercase."
msgstr ""

#: ../../ref/templates/builtins.txt:2199
msgid ""
"If ``value`` is ``\"my FIRST post\"``, the output will be ``\"My First "
"Post\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2204
msgid "truncatechars"
msgstr ""

#: ../../ref/templates/builtins.txt:2206
msgid ""
"Truncates a string if it is longer than the specified number of characters. "
"Truncated strings will end with a translatable ellipsis sequence (\"...\")."
msgstr ""

#: ../../ref/templates/builtins.txt:2209
msgid "**Argument:** Number of characters to truncate to"
msgstr ""

#: ../../ref/templates/builtins.txt:2215
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel i...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2220
msgid "truncatechars_html"
msgstr ""

#: ../../ref/templates/builtins.txt:2224
msgid ""
"Similar to :tfilter:`truncatechars`, except that it is aware of HTML tags. "
"Any tags that are opened in the string and not closed before the truncation "
"point are closed immediately after the truncation."
msgstr ""

#: ../../ref/templates/builtins.txt:2232
msgid ""
"If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be "
"``\"<p>Joel i...</p>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2235 ../../ref/templates/builtins.txt:2273
msgid "Newlines in the HTML content will be preserved."
msgstr ""

#: ../../ref/templates/builtins.txt:2240
msgid "truncatewords"
msgstr ""

#: ../../ref/templates/builtins.txt:2242
msgid "Truncates a string after a certain number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2244
msgid "**Argument:** Number of words to truncate after"
msgstr ""

#: ../../ref/templates/builtins.txt:2250
msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"Joel is "
"...\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2252
msgid "Newlines within the string will be removed."
msgstr ""

#: ../../ref/templates/builtins.txt:2257
msgid "truncatewords_html"
msgstr ""

#: ../../ref/templates/builtins.txt:2259
msgid ""
"Similar to :tfilter:`truncatewords`, except that it is aware of HTML tags. "
"Any tags that are opened in the string and not closed before the truncation "
"point, are closed immediately after the truncation."
msgstr ""

#: ../../ref/templates/builtins.txt:2263
msgid ""
"This is less efficient than :tfilter:`truncatewords`, so should only be used"
" when it is being passed HTML text."
msgstr ""

#: ../../ref/templates/builtins.txt:2270
msgid ""
"If ``value`` is ``\"<p>Joel is a slug</p>\"``, the output will be "
"``\"<p>Joel is ...</p>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2278
msgid "unordered_list"
msgstr ""

#: ../../ref/templates/builtins.txt:2280
msgid ""
"Recursively takes a self-nested list and returns an HTML unordered list -- "
"WITHOUT opening and closing <ul> tags."
msgstr ""

#: ../../ref/templates/builtins.txt:2283
msgid ""
"The list is assumed to be in the proper format. For example, if ``var`` "
"contains ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``, "
"then ``{{ var|unordered_list }}`` would return::"
msgstr ""

#: ../../ref/templates/builtins.txt:2301
msgid ""
"An older, more restrictive and verbose input format is also supported: "
"``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', "
"[]]]]``. Support for this syntax will be removed in Django 1.10."
msgstr ""

#: ../../ref/templates/builtins.txt:2308
msgid "upper"
msgstr ""

#: ../../ref/templates/builtins.txt:2310
msgid "Converts a string into all uppercase."
msgstr ""

#: ../../ref/templates/builtins.txt:2316
msgid ""
"If ``value`` is ``\"Joel is a slug\"``, the output will be ``\"JOEL IS A "
"SLUG\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2321
msgid "urlencode"
msgstr ""

#: ../../ref/templates/builtins.txt:2323
msgid "Escapes a value for use in a URL."
msgstr ""

#: ../../ref/templates/builtins.txt:2329
msgid ""
"If ``value`` is ``\"http://www.example.org/foo?a=b&c=d\"``, the output will "
"be ``\"http%3A//www.example.org/foo%3Fa%3Db%26c%3Dd\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2332
msgid ""
"An optional argument containing the characters which should not be escaped "
"can be provided."
msgstr ""

#: ../../ref/templates/builtins.txt:2335
msgid ""
"If not provided, the '/' character is assumed safe. An empty string can be "
"provided when *all* characters should be escaped. For example::"
msgstr ""

#: ../../ref/templates/builtins.txt:2340
msgid ""
"If ``value`` is ``\"http://www.example.org/\"``, the output will be "
"``\"http%3A%2F%2Fwww.example.org%2F\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2346
msgid "urlize"
msgstr ""

#: ../../ref/templates/builtins.txt:2348
msgid "Converts URLs and email addresses in text into clickable links."
msgstr ""

#: ../../ref/templates/builtins.txt:2350
msgid ""
"This template tag works on links prefixed with ``http://``, ``https://``, or"
" ``www.``. For example, ``http://goo.gl/aia1t`` will get converted but "
"``goo.gl/aia1t`` won't."
msgstr ""

#: ../../ref/templates/builtins.txt:2354
msgid ""
"It also supports domain-only links ending in one of the original top level "
"domains (``.com``, ``.edu``, ``.gov``, ``.int``, ``.mil``, ``.net``, and "
"``.org``). For example, ``djangoproject.com`` gets converted."
msgstr ""

#: ../../ref/templates/builtins.txt:2360
msgid ""
"Support for domain-only links that include characters after the top-level "
"domain (e.g. ``djangoproject.com/`` and ``djangoproject.com/download/``) was"
" added."
msgstr ""

#: ../../ref/templates/builtins.txt:2364
msgid ""
"Links can have trailing punctuation (periods, commas, close-parens) and "
"leading punctuation (opening parens), and ``urlize`` will still do the right"
" thing."
msgstr ""

#: ../../ref/templates/builtins.txt:2367
msgid ""
"Links generated by ``urlize`` have a ``rel=\"nofollow\"`` attribute added to"
" them."
msgstr ""

#: ../../ref/templates/builtins.txt:2374
msgid ""
"If ``value`` is ``\"Check out www.djangoproject.com\"``, the output will be "
"``\"Check out <a href=\"http://www.djangoproject.com\" "
"rel=\"nofollow\">www.djangoproject.com</a>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2378
msgid ""
"In addition to web links, ``urlize`` also converts email addresses into "
"``mailto:`` links. If ``value`` is ``\"Send questions to "
"foo@example.com\"``, the output will be ``\"Send questions to <a "
"href=\"mailto:foo@example.com\">foo@example.com</a>\"``."
msgstr ""

#: ../../ref/templates/builtins.txt:2383
msgid ""
"The ``urlize`` filter also takes an optional parameter ``autoescape``. If "
"``autoescape`` is ``True``, the link text and URLs will be escaped using "
"Django's built-in :tfilter:`escape` filter. The default value for "
"``autoescape`` is ``True``."
msgstr ""

#: ../../ref/templates/builtins.txt:2390
msgid ""
"If ``urlize`` is applied to text that already contains HTML markup, things "
"won't work as expected. Apply this filter only to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2396
msgid "urlizetrunc"
msgstr ""

#: ../../ref/templates/builtins.txt:2398
msgid ""
"Converts URLs and email addresses into clickable links just like urlize_, "
"but truncates URLs longer than the given character limit."
msgstr ""

#: ../../ref/templates/builtins.txt:2401
msgid ""
"**Argument:** Number of characters that link text should be truncated to, "
"including the ellipsis that's added if truncation is necessary."
msgstr ""

#: ../../ref/templates/builtins.txt:2408
msgid ""
"If ``value`` is ``\"Check out www.djangoproject.com\"``, the output would be"
" ``'Check out <a href=\"http://www.djangoproject.com\" "
"rel=\"nofollow\">www.djangopr...</a>'``."
msgstr ""

#: ../../ref/templates/builtins.txt:2412
msgid "As with urlize_, this filter should only be applied to plain text."
msgstr ""

#: ../../ref/templates/builtins.txt:2417
msgid "wordcount"
msgstr ""

#: ../../ref/templates/builtins.txt:2419
msgid "Returns the number of words."
msgstr ""

#: ../../ref/templates/builtins.txt:2425
msgid "If ``value`` is ``\"Joel is a slug\"``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/builtins.txt:2430
msgid "wordwrap"
msgstr ""

#: ../../ref/templates/builtins.txt:2432
msgid "Wraps words at specified line length."
msgstr ""

#: ../../ref/templates/builtins.txt:2434
msgid "**Argument:** number of characters at which to wrap the text"
msgstr ""

#: ../../ref/templates/builtins.txt:2440
msgid "If ``value`` is ``Joel is a slug``, the output would be::"
msgstr ""

#: ../../ref/templates/builtins.txt:2449
msgid "yesno"
msgstr ""

#: ../../ref/templates/builtins.txt:2451
msgid ""
"Maps values for ``True``, ``False``, and (optionally) ``None``, to the "
"strings \"yes\", \"no\", \"maybe\", or a custom mapping passed as a comma-"
"separated list, and returns one of those strings according to the value:"
msgstr ""

#: ../../ref/templates/builtins.txt:2462 ../../ref/templates/builtins.txt:2463
msgid "``True``"
msgstr ""

#: ../../ref/templates/builtins.txt:2462
msgid "``yes``"
msgstr ""

#: ../../ref/templates/builtins.txt:2463 ../../ref/templates/builtins.txt:2464
#: ../../ref/templates/builtins.txt:2465
msgid "``\"yeah,no,maybe\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2463
msgid "``yeah``"
msgstr ""

#: ../../ref/templates/builtins.txt:2464
msgid "``False``"
msgstr ""

#: ../../ref/templates/builtins.txt:2464
msgid "``no``"
msgstr ""

#: ../../ref/templates/builtins.txt:2465 ../../ref/templates/builtins.txt:2466
msgid "``None``"
msgstr ""

#: ../../ref/templates/builtins.txt:2465
msgid "``maybe``"
msgstr ""

#: ../../ref/templates/builtins.txt:2466
msgid "``\"yeah,no\"``"
msgstr ""

#: ../../ref/templates/builtins.txt:2466
msgid ""
"``no`` (converts ``None`` to ``False`` if no mapping for ``None`` is given)"
msgstr ""

#: ../../ref/templates/builtins.txt:2471
msgid "Internationalization tags and filters"
msgstr ""

#: ../../ref/templates/builtins.txt:2473
msgid ""
"Django provides template tags and filters to control each aspect of "
":doc:`internationalization </topics/i18n/index>` in templates. They allow "
"for granular control of translations, formatting, and time zone conversions."
msgstr ""

#: ../../ref/templates/builtins.txt:2478
msgid "i18n"
msgstr ""

#: ../../ref/templates/builtins.txt:2480
msgid ""
"This library allows specifying translatable text in templates. To enable it,"
" set :setting:`USE_I18N` to ``True``, then load it with ``{% load i18n %}``."
msgstr ""

#: ../../ref/templates/builtins.txt:2484
msgid "See :ref:`specifying-translation-strings-in-template-code`."
msgstr ""

#: ../../ref/templates/builtins.txt:2487
msgid "l10n"
msgstr ""

#: ../../ref/templates/builtins.txt:2489
msgid ""
"This library provides control over the localization of values in templates. "
"You only need to load the library using ``{% load l10n %}``, but you'll "
"often set :setting:`USE_L10N` to ``True`` so that localization is active by "
"default."
msgstr ""

#: ../../ref/templates/builtins.txt:2493
msgid "See :ref:`topic-l10n-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2496
msgid "tz"
msgstr ""

#: ../../ref/templates/builtins.txt:2498
msgid ""
"This library provides control over time zone conversions in templates. Like "
"``l10n``, you only need to load the library using ``{% load tz %}``, but "
"you'll usually also set :setting:`USE_TZ` to ``True`` so that conversion to "
"local time happens by default."
msgstr ""

#: ../../ref/templates/builtins.txt:2503
msgid "See :ref:`time-zones-in-templates`."
msgstr ""

#: ../../ref/templates/builtins.txt:2506
msgid "Other tags and filters libraries"
msgstr ""

#: ../../ref/templates/builtins.txt:2508
msgid ""
"Django comes with a couple of other template-tag libraries that you have to "
"enable explicitly in your :setting:`INSTALLED_APPS` setting and enable in "
"your template with the :ttag:`{% load %}<load>` tag."
msgstr ""

#: ../../ref/templates/builtins.txt:2515
msgid ""
"A set of Django template filters useful for adding a \"human touch\" to "
"data. See :doc:`/ref/contrib/humanize`."
msgstr ""

#: ../../ref/templates/builtins.txt:2528
msgid ""
"To link to static files that are saved in :setting:`STATIC_ROOT` Django "
"ships with a :ttag:`static` template tag. You can use this regardless if "
"you're using :class:`~django.template.RequestContext` or not."
msgstr ""

#: ../../ref/templates/builtins.txt:2537
msgid ""
"It is also able to consume standard context variables, e.g. assuming a "
"``user_stylesheet`` variable is passed to the template:"
msgstr ""

#: ../../ref/templates/builtins.txt:2556
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app also ships "
"with a :ttag:`static template tag<staticfiles-static>` which uses "
"``staticfiles'`` :setting:`STATICFILES_STORAGE` to build the URL of the "
"given path (rather than simply using :func:`urllib.parse.urljoin` with the "
":setting:`STATIC_URL` setting and the given path). Use that instead if you "
"have an advanced use case such as :ref:`using a cloud service to serve "
"static files<staticfiles-from-cdn>`::"
msgstr ""

#: ../../ref/templates/builtins.txt:2570
msgid "get_static_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2574
msgid ""
"You should prefer the :ttag:`static` template tag, but if you need more "
"control over exactly where and how :setting:`STATIC_URL` is injected into "
"the template, you can use the :ttag:`get_static_prefix` template tag::"
msgstr ""

#: ../../ref/templates/builtins.txt:2581
msgid ""
"There's also a second form you can use to avoid extra processing if you need"
" the value multiple times::"
msgstr ""

#: ../../ref/templates/builtins.txt:2593
msgid "get_media_prefix"
msgstr ""

#: ../../ref/templates/builtins.txt:2597
msgid ""
"Similar to the :ttag:`get_static_prefix`, ``get_media_prefix`` populates a "
"template variable with the media prefix :setting:`MEDIA_URL`, e.g.::"
msgstr ""

#: ../../ref/templates/builtins.txt:2603
msgid ""
"By storing the value in a data attribute, we ensure it's escaped "
"appropriately if we want to use it in a JavaScript context."
msgstr ""

#: ../../ref/templates/index.txt:5
msgid ""
"Django's template engine provides a powerful mini-language for defining the "
"user-facing layer of your application, encouraging a clean separation of "
"application and presentation logic. Templates can be maintained by anyone "
"with an understanding of HTML; no knowledge of Python is required. For "
"introductory material, see :doc:`/topics/templates` topic guide."
msgstr ""

#: ../../ref/templates/index.txt:21
msgid ""
"For information on writing your own custom tags and filters, see "
":doc:`/howto/custom-template-tags`."
msgstr ""

#: ../../ref/templates/language.txt:3
msgid "The Django template language"
msgstr ""

#: ../../ref/templates/language.txt:5
msgid ""
"This document explains the language syntax of the Django template system. If"
" you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""

#: ../../ref/templates/language.txt:9
msgid ""
"Django's template language is designed to strike a balance between power and"
" ease. It's designed to feel comfortable to those used to working with HTML."
" If you have any exposure to other text-based template languages, such as "
"Smarty_ or Jinja2_, you should feel right at home with Django's templates."
msgstr ""

#: ../../ref/templates/language.txt:14 ../../ref/templates/language.txt:67
msgid "Philosophy"
msgstr ""

#: ../../ref/templates/language.txt:16
msgid ""
"If you have a background in programming, or if you're used to languages "
"which mix programming code directly into HTML, you'll want to bear in mind "
"that the Django template system is not simply Python embedded into HTML. "
"This is by design: the template system is meant to express presentation, not"
" program logic."
msgstr ""

#: ../../ref/templates/language.txt:22
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for`"
" tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below"
" are supported by default (although you can add :doc:`your own extensions "
"</howto/custom-template-tags>` to the template language as needed)."
msgstr ""

#: ../../ref/templates/language.txt:39
msgid ""
"A template is simply a text file. It can generate any text-based format "
"(HTML, XML, CSV, etc.)."
msgstr ""

#: ../../ref/templates/language.txt:42
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the "
"template."
msgstr ""

#: ../../ref/templates/language.txt:45
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will"
" be explained later in this document."
msgstr ""

#: ../../ref/templates/language.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)?"
" We wanted Django's template language to be usable for more than just "
"XML/HTML templates. At World Online, we use it for emails, JavaScript and "
"CSV. You can use the template language for any text-based format."
msgstr ""

#: ../../ref/templates/language.txt:75
msgid "Oh, and one more thing: making humans edit XML is sadistic!"
msgstr ""

#: ../../ref/templates/language.txt:80
msgid "Variables"
msgstr ""

#: ../../ref/templates/language.txt:82
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters"
" and the underscore (``\"_\"``). The dot (``\".\"``) also appears in "
"variable sections, although that has a special meaning, as indicated below. "
"Importantly, *you cannot have spaces or punctuation characters in variable "
"names.*"
msgstr ""

#: ../../ref/templates/language.txt:90
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

#: ../../ref/templates/language.txt:94
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""

#: ../../ref/templates/language.txt:97
msgid "Dictionary lookup"
msgstr ""

#: ../../ref/templates/language.txt:98
msgid "Attribute or method lookup"
msgstr ""

#: ../../ref/templates/language.txt:99
msgid "Numeric index lookup"
msgstr ""

#: ../../ref/templates/language.txt:101
msgid ""
"If the resulting value is callable, it is called with no arguments. The "
"result of the call becomes the template value."
msgstr ""

#: ../../ref/templates/language.txt:104
msgid ""
"This lookup order can cause some unexpected behavior with objects that "
"override dictionary lookup. For example, consider the following code snippet"
" that attempts to loop over a ``collections.defaultdict``::"
msgstr ""

#: ../../ref/templates/language.txt:112
msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides"
" a default value instead of using the intended ``.iteritems()`` method. In "
"this case, consider converting to a dictionary first."
msgstr ""

#: ../../ref/templates/language.txt:116
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""

#: ../../ref/templates/language.txt:119
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the ``string_if_invalid`` option, which is set to ``''`` (the "
"empty string) by default."
msgstr ""

#: ../../ref/templates/language.txt:130
msgid "You can modify variables for display by using **filters**."
msgstr ""

#: ../../ref/templates/language.txt:132
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the"
" ``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""

#: ../../ref/templates/language.txt:136
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next."
" ``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""

#: ../../ref/templates/language.txt:140
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ "
"bio|truncatewords:30 }}``. This will display the first 30 words of the "
"``bio`` variable."
msgstr ""

#: ../../ref/templates/language.txt:144
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaces you'd use ``{{ list|join:\", \" }}``."
msgstr ""

#: ../../ref/templates/language.txt:147
msgid ""
"Django provides about sixty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""

#: ../../ref/templates/language.txt:159
msgid ":tfilter:`default`"
msgstr ""

#: ../../ref/templates/language.txt:153
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value"
" of the variable. For example::"
msgstr ""

#: ../../ref/templates/language.txt:158
msgid ""
"If ``value`` isn't provided or is empty, the above will display "
"\"``nothing``\"."
msgstr ""

#: ../../ref/templates/language.txt:167
msgid ":tfilter:`length`"
msgstr ""

#: ../../ref/templates/language.txt:162
msgid ""
"Returns the length of the value. This works for both strings and lists. For "
"example::"
msgstr ""

#: ../../ref/templates/language.txt:167
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/language.txt:175
msgid ":tfilter:`filesizeformat`"
msgstr ""

#: ../../ref/templates/language.txt:170
msgid ""
"Formats the value like a \"human-readable\" file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc). For example::"
msgstr ""

#: ../../ref/templates/language.txt:177
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

#: ../../ref/templates/language.txt:180
msgid ""
"You can also create your own custom template filters; see :doc:`/howto"
"/custom-template-tags`."
msgstr ""

#: ../../ref/templates/language.txt:185 ../../ref/templates/language.txt:256
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See "
":doc:`/ref/contrib/admin/admindocs`."
msgstr ""

#: ../../ref/templates/language.txt:190
msgid "Tags"
msgstr ""

#: ../../ref/templates/language.txt:192
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""

#: ../../ref/templates/language.txt:196
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""

#: ../../ref/templates/language.txt:199
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""

#: ../../ref/templates/language.txt:212
msgid ":ttag:`for`"
msgstr ""

#: ../../ref/templates/language.txt:205
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes"
" provided in ``athlete_list``::"
msgstr ""

#: ../../ref/templates/language.txt:242
msgid ":ttag:`if`, ``elif``, and ``else``"
msgstr ""

#: ../../ref/templates/language.txt:215
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""

#: ../../ref/templates/language.txt:226
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable. Otherwise, if "
"``athlete_in_locker_room_list`` is not empty, the message \"Athletes should "
"be out...\" will be displayed. If both lists are empty, \"No athletes.\" "
"will be displayed."
msgstr ""

#: ../../ref/templates/language.txt:232
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

#: ../../ref/templates/language.txt:240
msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""

#: ../../ref/templates/language.txt:246
msgid ":ttag:`block` and :ttag:`extends`"
msgstr ""

#: ../../ref/templates/language.txt:245
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""

#: ../../ref/templates/language.txt:248
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

#: ../../ref/templates/language.txt:251
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""

#: ../../ref/templates/language.txt:263
msgid "Comments"
msgstr ""

#: ../../ref/templates/language.txt:265
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# "
"#}``."
msgstr ""

#: ../../ref/templates/language.txt:267
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

#: ../../ref/templates/language.txt:271
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

#: ../../ref/templates/language.txt:275
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

#: ../../ref/templates/language.txt:282
msgid "Template inheritance"
msgstr ""

#: ../../ref/templates/language.txt:284
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""

#: ../../ref/templates/language.txt:289
msgid ""
"It's easiest to understand template inheritance by starting with an "
"example::"
msgstr ""

#: ../../ref/templates/language.txt:314
msgid ""
"This template, which we'll call ``base.html``, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the "
"job of \"child\" templates to fill the empty blocks with content."
msgstr ""

#: ../../ref/templates/language.txt:318
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""

#: ../../ref/templates/language.txt:322
msgid "A child template might look like this::"
msgstr ""

#: ../../ref/templates/language.txt:335
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, "
"\"base.html\"."
msgstr ""

#: ../../ref/templates/language.txt:339
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""

#: ../../ref/templates/language.txt:369
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""

#: ../../ref/templates/language.txt:373
msgid ""
"You can use as many levels of inheritance as needed. One common way of using"
" inheritance is the following three-level approach:"
msgstr ""

#: ../../ref/templates/language.txt:376
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""

#: ../../ref/templates/language.txt:378
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates"
" all extend ``base.html`` and include section-specific styles/design."
msgstr ""

#: ../../ref/templates/language.txt:382
msgid ""
"Create individual templates for each type of page, such as a news article or"
" blog entry. These templates extend the appropriate section template."
msgstr ""

#: ../../ref/templates/language.txt:386
msgid ""
"This approach maximizes code reuse and makes it easy to add items to shared "
"content areas, such as section-wide navigation."
msgstr ""

#: ../../ref/templates/language.txt:389
msgid "Here are some tips for working with inheritance:"
msgstr ""

#: ../../ref/templates/language.txt:391
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""

#: ../../ref/templates/language.txt:394
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can"
" fill in reasonable defaults in a number of blocks, then only define the "
"ones you need later. It's better to have more hooks than fewer hooks."
msgstr ""

#: ../../ref/templates/language.txt:399
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent"
" template."
msgstr ""

#: ../../ref/templates/language.txt:403
msgid ""
"If you need to get the content of the block from the parent template, the "
"``{{ block.super }}`` variable will do the trick. This is useful if you want"
" to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""

#: ../../ref/templates/language.txt:410
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""

#: ../../ref/templates/language.txt:417
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags"
" are being closed."
msgstr ""

#: ../../ref/templates/language.txt:420
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""

#: ../../ref/templates/language.txt:431
msgid "Automatic HTML escaping"
msgstr ""

#: ../../ref/templates/language.txt:433
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""

#: ../../ref/templates/language.txt:439
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered their name as this::"
msgstr ""

#: ../../ref/templates/language.txt:444
msgid "With this name value, the template would be rendered as::"
msgstr ""

#: ../../ref/templates/language.txt:448
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

#: ../../ref/templates/language.txt:450
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

#: ../../ref/templates/language.txt:456
msgid "That would result in a rendered template like this::"
msgstr ""

#: ../../ref/templates/language.txt:460
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""

#: ../../ref/templates/language.txt:462
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

#: ../../ref/templates/language.txt:467
msgid "To avoid this problem, you have two options:"
msgstr ""

#: ../../ref/templates/language.txt:469
msgid ""
"One, you can make sure to run each untrusted variable through the "
":tfilter:`escape` filter (documented below), which converts potentially "
"harmful HTML characters to unharmful ones. This was the default solution in "
"Django for its first few years, but the problem is that it puts the onus on "
"*you*, the developer / template author, to ensure you're escaping "
"everything. It's easy to forget to escape data."
msgstr ""

#: ../../ref/templates/language.txt:476
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""

#: ../../ref/templates/language.txt:479
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""

#: ../../ref/templates/language.txt:489
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""

#: ../../ref/templates/language.txt:495
msgid "How to turn it off"
msgstr ""

#: ../../ref/templates/language.txt:497
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level"
" or per-variable level, you can turn it off in several ways."
msgstr ""

#: ../../ref/templates/language.txt:500
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you"
" don't want their contents to be escaped. For example, you might store a "
"blob of HTML in your database and want to embed that directly into your "
"template. Or, you might be using Django's template system to produce text "
"that is *not* HTML -- like an email message, for instance."
msgstr ""

#: ../../ref/templates/language.txt:508
msgid "For individual variables"
msgstr ""

#: ../../ref/templates/language.txt:510
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe`"
" filter::"
msgstr ""

#: ../../ref/templates/language.txt:516
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""

#: ../../ref/templates/language.txt:524
msgid "For template blocks"
msgstr ""

#: ../../ref/templates/language.txt:526
msgid ""
"To control auto-escaping for a template, wrap the template (or just a "
"particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

#: ../../ref/templates/language.txt:533
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""

#: ../../ref/templates/language.txt:548
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example:"
msgstr ""

#: ../../ref/templates/language.txt:568
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

#: ../../ref/templates/language.txt:578
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""

#: ../../ref/templates/language.txt:583
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

#: ../../ref/templates/language.txt:592
msgid "String literals and automatic escaping"
msgstr ""

#: ../../ref/templates/language.txt:594
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

#: ../../ref/templates/language.txt:598
msgid ""
"All string literals are inserted **without** any automatic escaping into the"
" template -- they act as if they were all passed through the :tfilter:`safe`"
" filter. The reasoning behind this is that the template author is in control"
" of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""

#: ../../ref/templates/language.txt:604
msgid "This means you would write ::"
msgstr ""

#: ../../ref/templates/language.txt:608
msgid "...rather than::"
msgstr ""

#: ../../ref/templates/language.txt:612
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""

#: ../../ref/templates/language.txt:619
msgid "Accessing method calls"
msgstr ""

#: ../../ref/templates/language.txt:621
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""

#: ../../ref/templates/language.txt:633
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""

#: ../../ref/templates/language.txt:639
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models:"
msgstr ""

#: ../../ref/templates/language.txt:654
msgid ""
"Because Django intentionally limits the amount of logic processing available"
" in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""

#: ../../ref/templates/language.txt:662
msgid "Custom tag and filter libraries"
msgstr ""

#: ../../ref/templates/language.txt:664
msgid ""
"Certain applications provide custom tag and filter libraries. To access them"
" in a template, ensure the application is in :setting:`INSTALLED_APPS` (we'd"
" add ``'django.contrib.humanize'`` for this example), and then use the "
":ttag:`load` tag in a template::"
msgstr ""

#: ../../ref/templates/language.txt:673
msgid ""
"In the above, the :ttag:`load` tag loads the ``humanize`` tag library, which"
" then makes the ``intcomma`` filter available for use. If you've enabled "
":mod:`django.contrib.admindocs`, you can consult the documentation area in "
"your admin to find the list of custom libraries in your installation."
msgstr ""

#: ../../ref/templates/language.txt:678
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""

#: ../../ref/templates/language.txt:683
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""

#: ../../ref/templates/language.txt:687
msgid "Custom libraries and template inheritance"
msgstr ""

#: ../../ref/templates/language.txt:689
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made"
" available to the current template -- not any parent or child templates "
"along the template-inheritance path."
msgstr ""

#: ../../ref/templates/language.txt:693
msgid ""
"For example, if a template ``foo.html`` has ``{% load humanize %}``, a child"
" template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* "
"have access to the humanize template tags and filters. The child template is"
" responsible for its own ``{% load humanize %}``."
msgstr ""

#: ../../ref/templates/language.txt:698
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

#: ../../ref/templates/language.txt:703
msgid ":doc:`The Templates Reference </ref/templates/index>`"
msgstr ""

#: ../../ref/templates/language.txt:703
msgid ""
"Covers built-in tags, built-in filters, using an alternative template, "
"language, and more."
msgstr ""

#: ../../ref/templates/upgrading.txt:3
msgid "Upgrading templates to Django 1.8"
msgstr ""

#: ../../ref/templates/upgrading.txt:5
msgid ""
"Django's template system was overhauled in Django 1.8 when it gained support"
" for multiple template engines. This document complements the :doc:`release "
"notes </releases/1.8>` with detailed upgrade instructions on some topics."
msgstr ""

#: ../../ref/templates/upgrading.txt:10
msgid "The :setting:`TEMPLATES` settings"
msgstr ""

#: ../../ref/templates/upgrading.txt:12
msgid ""
"A new setting was introduced in Django 1.8: :setting:`TEMPLATES`. All "
"existing template-related settings were deprecated."
msgstr ""

#: ../../ref/templates/upgrading.txt:15
msgid ""
"During the deprecation period, Django will create a backwards-compatible "
":setting:`TEMPLATES` based on the ``TEMPLATE_*`` settings if you don't "
"define it yourself."
msgstr ""

#: ../../ref/templates/upgrading.txt:19
msgid "Here's how to define :setting:`TEMPLATES` in your settings module."
msgstr ""

#: ../../ref/templates/upgrading.txt:21
msgid ""
"If you're using the default value of ``TEMPLATE_LOADERS``, that is, if it "
"isn't defined in your settings file or if it's set to::"
msgstr ""

#: ../../ref/templates/upgrading.txt:27
msgid "then you should define :setting:`TEMPLATES` as follows::"
msgstr ""

#: ../../ref/templates/upgrading.txt:52
msgid ""
"If you aren't using the default value of ``TEMPLATE_LOADERS``, then you "
"should define :setting:`TEMPLATES` as follows::"
msgstr ""

#: ../../ref/templates/upgrading.txt:80
msgid ""
"Furthermore you should replace ``django.core.context_processors`` with "
"``django.template.context_processors`` in the names of context processors."
msgstr ""

#: ../../ref/templates/upgrading.txt:83
msgid ""
"If your settings module defines ``ALLOWED_INCLUDE_ROOTS`` or "
"``TEMPLATE_STRING_IF_INVALID``, include their values under the "
"``'allowed_include_roots'`` and ``'string_if_invalid'`` keys in the "
"``'OPTIONS'`` dictionary."
msgstr ""

#: ../../ref/templates/upgrading.txt:88
msgid ""
"If it sets ``TEMPLATE_DEBUG`` to a value that differs from :setting:`DEBUG`,"
" include that value under the ``'debug'`` key in ``'OPTIONS'``."
msgstr ""

#: ../../ref/templates/upgrading.txt:91
msgid ""
"Once you have defined :setting:`TEMPLATES`, you can safely remove "
"``ALLOWED_INCLUDE_ROOTS``, ``TEMPLATE_CONTEXT_PROCESSORS``, "
"``TEMPLATE_DEBUG``, ``TEMPLATE_DIRS``, ``TEMPLATE_LOADERS``, and "
"``TEMPLATE_STRING_IF_INVALID``."
msgstr ""

#: ../../ref/templates/upgrading.txt:96
msgid ""
"If you are overriding some of these settings in tests, you should override "
"the entire :setting:`TEMPLATES` setting instead."
msgstr ""

#: ../../ref/templates/upgrading.txt:100
msgid ":mod:`django.template.loader`"
msgstr ""

#: ../../ref/templates/upgrading.txt:105
msgid ""
":func:`~django.template.loader.get_template` and "
":func:`~django.template.loader.select_template`"
msgstr ""

#: ../../ref/templates/upgrading.txt:107
msgid ""
"In Django 1.8 :func:`~django.template.loader.get_template` and "
":func:`~django.template.loader.select_template` return a backend-dependent "
"``Template`` instead of a :class:`django.template.Template`."
msgstr ""

#: ../../ref/templates/upgrading.txt:111
msgid ""
"For example, if :func:`~django.template.loader.get_template` loads a "
"template with a :class:`~django.template.backends.django.DjangoTemplates` "
"backend, then it returns a ``django.template.backends.django.Template``."
msgstr ""

#: ../../ref/templates/upgrading.txt:115
msgid ""
"``Template`` objects must provide a "
":meth:`~django.template.backends.base.Template.render` method whose "
"signature differs slightly from the Django template language's "
":meth:`~django.template.Template.render`."
msgstr ""

#: ../../ref/templates/upgrading.txt:120
msgid "Instead of::"
msgstr ""

#: ../../ref/templates/upgrading.txt:128 ../../ref/templates/upgrading.txt:143
msgid "You should write::"
msgstr ""

#: ../../ref/templates/upgrading.txt:135
msgid "And instead of::"
msgstr ""

#: ../../ref/templates/upgrading.txt:150
msgid ""
"Passing a :class:`~django.template.Context` or a "
":class:`~django.template.RequestContext` is still possible when the template"
" is loaded by a :class:`~django.template.backends.django.DjangoTemplates` "
"backend but it's deprecated and won't be supported in Django 1.10."
msgstr ""

#: ../../ref/templates/upgrading.txt:155
msgid ""
"If you're loading a template while you're rendering another template with "
"the Django template language and you have access to the current context, for"
" instance in the ``render()`` method of a template tag, you can use the "
"current :class:`~django.template.Engine` directly. Instead of::"
msgstr ""

#: ../../ref/templates/upgrading.txt:163
msgid "You can write::"
msgstr ""

#: ../../ref/templates/upgrading.txt:167
msgid ""
"This will load the template with the current engine without triggering the "
"multiple template engines machinery, which is usually the desired behavior. "
"Unlike previous solutions, this returns a :class:`django.template.Template`,"
" like :func:`~django.template.loader.get_template` used to in Django 1.7 and"
" earlier, avoiding all backwards-compatibility problems."
msgstr ""

#: ../../ref/templates/upgrading.txt:174
msgid "``get_template_from_string()``"
msgstr ""

#: ../../ref/templates/upgrading.txt:176
msgid ""
"Private API ``get_template_from_string(template_code)`` was removed in "
"Django 1.8 because it had no way to choose an engine to compile the "
"template."
msgstr ""

#: ../../ref/templates/upgrading.txt:179
msgid "Three alternatives are available."
msgstr ""

#: ../../ref/templates/upgrading.txt:181
msgid ""
"If you control the project's setting, you can use one of the configured "
"engines::"
msgstr ""

#: ../../ref/templates/upgrading.txt:188
msgid "This returns a backend-dependent ``Template`` object."
msgstr ""

#: ../../ref/templates/upgrading.txt:190
msgid ""
"For trivial templates that don't need context processors nor anything else, "
"you can create a bare-bones engine and use its ``from_string()`` method::"
msgstr ""

#: ../../ref/templates/upgrading.txt:197
msgid ""
"This returns a :class:`django.template.Template` because "
":class:`~django.template.Engine` is part of the Django template language's "
"APIs. The multiple template engines machinery isn't involved here."
msgstr ""

#: ../../ref/templates/upgrading.txt:201
msgid ""
"Finally, if you have access to the current context, you can use the same "
"trick as above::"
msgstr ""

#: ../../ref/templates/upgrading.txt:207
msgid "``Template()``"
msgstr ""

#: ../../ref/templates/upgrading.txt:209
msgid ""
"To a lesser extent, instantiating a template with "
"``Template(template_code)`` suffers from the same issue as "
"``get_template_from_string()``."
msgstr ""

#: ../../ref/templates/upgrading.txt:212
msgid ""
"It still works when the :setting:`TEMPLATES` setting defines exactly one "
":class:`~django.template.backends.django.DjangoTemplates` backend, but "
"pluggable applications can't control this requirement."
msgstr ""

#: ../../ref/templates/upgrading.txt:216
msgid ""
"The last two solutions described in the previous section are recommended in "
"that case."
msgstr ""

#: ../../ref/unicode.txt:3
msgid "Unicode data"
msgstr ""

#: ../../ref/unicode.txt:5
msgid ""
"Django natively supports Unicode data everywhere. Providing your database "
"can somehow store the data, you can safely pass around Unicode strings to "
"templates, models and the database."
msgstr ""

#: ../../ref/unicode.txt:9
msgid ""
"This document tells you what you need to know if you're writing applications"
" that use data or templates that are encoded in something other than ASCII."
msgstr ""

#: ../../ref/unicode.txt:13
msgid "Creating the database"
msgstr ""

#: ../../ref/unicode.txt:15
msgid ""
"Make sure your database is configured to be able to store arbitrary string "
"data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you "
"use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you "
"won't be able to store certain characters in the database, and information "
"will be lost."
msgstr ""

#: ../../ref/unicode.txt:20
msgid ""
"MySQL users, refer to the `MySQL manual`_ for details on how to set or alter"
" the database character set encoding."
msgstr ""

#: ../../ref/unicode.txt:23
msgid ""
"PostgreSQL users, refer to the `PostgreSQL manual`_ (section 22.3.2 in "
"PostgreSQL 9) for details on creating databases with the correct encoding."
msgstr ""

#: ../../ref/unicode.txt:26
msgid ""
"Oracle users, refer to the `Oracle manual`_ for details on how to set "
"(`section 2`_) or alter (`section 11`_) the database character set encoding."
msgstr ""

#: ../../ref/unicode.txt:29
msgid ""
"SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for "
"internal encoding."
msgstr ""

#: ../../ref/unicode.txt:38
msgid ""
"All of Django's database backends automatically convert Unicode strings into"
" the appropriate encoding for talking to the database. They also "
"automatically convert strings retrieved from the database into Python "
"Unicode strings. You don't even need to tell Django what encoding your "
"database uses: that is handled transparently."
msgstr ""

#: ../../ref/unicode.txt:44
msgid "For more, see the section \"The database API\" below."
msgstr ""

#: ../../ref/unicode.txt:47
msgid "General string handling"
msgstr ""

#: ../../ref/unicode.txt:49
msgid ""
"Whenever you use strings with Django -- e.g., in database lookups, template "
"rendering or anywhere else -- you have two choices for encoding those "
"strings. You can use Unicode strings, or you can use normal strings "
"(sometimes called \"bytestrings\") that are encoded using UTF-8."
msgstr ""

#: ../../ref/unicode.txt:54
msgid ""
"In Python 3, the logic is reversed, that is normal strings are Unicode, and "
"when you want to specifically create a bytestring, you have to prefix the "
"string with a 'b'. As we are doing in Django code from version 1.5, we "
"recommend that you import ``unicode_literals`` from the __future__ library "
"in your code. Then, when you specifically want to create a bytestring "
"literal, prefix the string with 'b'."
msgstr ""

#: ../../ref/unicode.txt:61
msgid "Python 2 legacy::"
msgstr ""

#: ../../ref/unicode.txt:66
msgid "Python 2 with unicode literals or Python 3::"
msgstr ""

#: ../../ref/unicode.txt:73
msgid "See also :doc:`Python 3 compatibility </topics/python3>`."
msgstr ""

#: ../../ref/unicode.txt:77
msgid ""
"A bytestring does not carry any information with it about its encoding. For "
"that reason, we have to make an assumption, and Django assumes that all "
"bytestrings are in UTF-8."
msgstr ""

#: ../../ref/unicode.txt:81
msgid ""
"If you pass a string to Django that has been encoded in some other format, "
"things will go wrong in interesting ways. Usually, Django will raise a "
"``UnicodeDecodeError`` at some point."
msgstr ""

#: ../../ref/unicode.txt:85
msgid ""
"If your code only uses ASCII data, it's safe to use your normal strings, "
"passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""

#: ../../ref/unicode.txt:88
msgid ""
"Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` "
"setting is set to something other than ``'utf-8'`` you can use that other "
"encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the"
" strings generated as the result of template rendering (and email). Django "
"will always assume UTF-8 encoding for internal bytestrings. The reason for "
"this is that the :setting:`DEFAULT_CHARSET` setting is not actually under "
"your control (if you are the application developer). It's under the control "
"of the person installing and using your application -- and if that person "
"chooses a different setting, your code must still continue to work. Ergo, it"
" cannot rely on that setting."
msgstr ""

#: ../../ref/unicode.txt:98
msgid ""
"In most cases when Django is dealing with strings, it will convert them to "
"Unicode strings before doing anything else. So, as a general rule, if you "
"pass in a bytestring, be prepared to receive a Unicode string back in the "
"result."
msgstr ""

#: ../../ref/unicode.txt:103
msgid "Translated strings"
msgstr ""

#: ../../ref/unicode.txt:105
msgid ""
"Aside from Unicode strings and bytestrings, there's a third type of string-"
"like object you may encounter when using Django. The framework's "
"internationalization features introduce the concept of a \"lazy "
"translation\" -- a string that has been marked as translated but whose "
"actual translation result isn't determined until the object is used in a "
"string. This feature is useful in cases where the translation locale is "
"unknown until the string is used, even though the string might have "
"originally been created when the code was first imported."
msgstr ""

#: ../../ref/unicode.txt:114
msgid ""
"Normally, you won't have to worry about lazy translations. Just be aware "
"that if you examine an object and it claims to be a "
"``django.utils.functional.__proxy__`` object, it is a lazy translation. "
"Calling ``unicode()`` with the lazy translation as the argument will "
"generate a Unicode string in the current locale."
msgstr ""

#: ../../ref/unicode.txt:120
msgid ""
"For more details about lazy translation objects, refer to the "
":doc:`internationalization </topics/i18n/index>` documentation."
msgstr ""

#: ../../ref/unicode.txt:124
msgid "Useful utility functions"
msgstr ""

#: ../../ref/unicode.txt:126
msgid ""
"Because some string operations come up again and again, Django ships with a "
"few useful functions that should make working with Unicode and bytestring "
"objects a bit easier."
msgstr ""

#: ../../ref/unicode.txt:131
msgid "Conversion functions"
msgstr ""

#: ../../ref/unicode.txt:133
msgid ""
"The ``django.utils.encoding`` module contains a few functions that are handy"
" for converting back and forth between Unicode and bytestrings."
msgstr ""

#: ../../ref/unicode.txt:136
msgid ""
"``smart_text(s, encoding='utf-8', strings_only=False, errors='strict')`` "
"converts its input to a Unicode string. The ``encoding`` parameter specifies"
" the input encoding. (For example, Django uses this internally when "
"processing form input data, which might not be UTF-8 encoded.) The "
"``strings_only`` parameter, if set to True, will result in Python numbers, "
"booleans and ``None`` not being converted to a string (they keep their "
"original types). The ``errors`` parameter takes any of the values that are "
"accepted by Python's ``unicode()`` function for its error handling."
msgstr ""

#: ../../ref/unicode.txt:146
msgid ""
"If you pass ``smart_text()`` an object that has a ``__unicode__`` method, it"
" will use that method to do the conversion."
msgstr ""

#: ../../ref/unicode.txt:149
msgid ""
"``force_text(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"identical to ``smart_text()`` in almost all cases. The difference is when "
"the first argument is a :ref:`lazy translation <lazy-translations>` "
"instance. While ``smart_text()`` preserves lazy translations, "
"``force_text()`` forces those objects to a Unicode string (causing the "
"translation to occur). Normally, you'll want to use ``smart_text()``. "
"However, ``force_text()`` is useful in template tags and filters that "
"absolutely *must* have a string to work with, not just something that can be"
" converted to a string."
msgstr ""

#: ../../ref/unicode.txt:159
msgid ""
"``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` is"
" essentially the opposite of ``smart_text()``. It forces the first argument "
"to a bytestring. The ``strings_only`` parameter has the same behavior as for"
" ``smart_text()`` and ``force_text()``. This is slightly different semantics"
" from Python's builtin ``str()`` function, but the difference is needed in a"
" few places within Django's internals."
msgstr ""

#: ../../ref/unicode.txt:166
msgid ""
"Normally, you'll only need to use ``smart_text()``. Call it as early as "
"possible on any input data that might be either Unicode or a bytestring, and"
" from then on, you can treat the result as always being Unicode."
msgstr ""

#: ../../ref/unicode.txt:173
msgid "URI and IRI handling"
msgstr ""

#: ../../ref/unicode.txt:175
msgid ""
"Web frameworks have to deal with URLs (which are a type of IRI_). One "
"requirement of URLs is that they are encoded using only ASCII characters. "
"However, in an international environment, you might need to construct a URL "
"from an IRI_ -- very loosely speaking, a URI_ that can contain Unicode "
"characters. Quoting and converting an IRI to URI can be a little tricky, so "
"Django provides some assistance."
msgstr ""

#: ../../ref/unicode.txt:182
msgid ""
"The function :func:`django.utils.encoding.iri_to_uri()` implements the "
"conversion from IRI to URI as required by the specification "
"(:rfc:`3987#section-3.1`)."
msgstr ""

#: ../../ref/unicode.txt:185
msgid ""
"The functions :func:`django.utils.http.urlquote()` and "
":func:`django.utils.http.urlquote_plus()` are versions of Python's standard "
"``urllib.quote()`` and ``urllib.quote_plus()`` that work with non-ASCII "
"characters. (The data is converted to UTF-8 prior to encoding.)"
msgstr ""

#: ../../ref/unicode.txt:190
msgid ""
"These two groups of functions have slightly different purposes, and it's "
"important to keep them straight. Normally, you would use ``urlquote()`` on "
"the individual portions of the IRI or URI path so that any reserved "
"characters such as '&' or '%' are correctly encoded. Then, you apply "
"``iri_to_uri()`` to the full IRI and it converts any non-ASCII characters to"
" the correct encoded values."
msgstr ""

#: ../../ref/unicode.txt:198
msgid ""
"Technically, it isn't correct to say that ``iri_to_uri()`` implements the "
"full algorithm in the IRI specification. It doesn't (yet) perform the "
"international domain name encoding portion of the algorithm."
msgstr ""

#: ../../ref/unicode.txt:202
msgid ""
"The ``iri_to_uri()`` function will not change ASCII characters that are "
"otherwise permitted in a URL. So, for example, the character '%' is not "
"further encoded when passed to ``iri_to_uri()``. This means you can pass a "
"full URL to this function and it will not mess up the query string or "
"anything like that."
msgstr ""

#: ../../ref/unicode.txt:208
msgid "An example might clarify things here::"
msgstr ""

#: ../../ref/unicode.txt:215
msgid ""
"If you look carefully, you can see that the portion that was generated by "
"``urlquote()`` in the second example was not double-quoted when passed to "
"``iri_to_uri()``. This is a very important and useful feature. It means that"
" you can construct your IRI without worrying about whether it contains non-"
"ASCII characters and then, right at the end, call ``iri_to_uri()`` on the "
"result."
msgstr ""

#: ../../ref/unicode.txt:222
msgid ""
"Similarly, Django provides :func:`django.utils.encoding.uri_to_iri()` which "
"implements the conversion from URI to IRI as per :rfc:`3987#section-3.2`. It"
" decodes all percent-encodings except those that don't represent a valid "
"UTF-8 sequence."
msgstr ""

#: ../../ref/unicode.txt:227
msgid "An example to demonstrate::"
msgstr ""

#: ../../ref/unicode.txt:234
msgid ""
"In the first example, the UTF-8 characters and reserved characters are "
"unquoted. In the second, the percent-encoding remains unchanged because it "
"lies outside the valid UTF-8 range."
msgstr ""

#: ../../ref/unicode.txt:238
msgid ""
"Both ``iri_to_uri()`` and ``uri_to_iri()`` functions are idempotent, which "
"means the following is always true::"
msgstr ""

#: ../../ref/unicode.txt:244
msgid ""
"So you can safely call it multiple times on the same URI/IRI without risking"
" double-quoting problems."
msgstr ""

#: ../../ref/unicode.txt:253
msgid ""
"Because all strings are returned from the database as Unicode strings, model"
" fields that are character based (CharField, TextField, URLField, etc) will "
"contain Unicode values when Django retrieves data from the database. This is"
" *always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""

#: ../../ref/unicode.txt:258
msgid ""
"You can pass in bytestrings when creating a model or populating a field, and"
" Django will convert it to Unicode when it needs to."
msgstr ""

#: ../../ref/unicode.txt:262
msgid "Choosing between ``__str__()`` and ``__unicode__()``"
msgstr ""

#: ../../ref/unicode.txt:266
msgid ""
"If you are on Python 3, you can skip this section because you'll always "
"create ``__str__()`` rather than ``__unicode__()``. If you'd like "
"compatibility with Python 2, you can decorate your model class with "
":func:`~django.utils.encoding.python_2_unicode_compatible`."
msgstr ""

#: ../../ref/unicode.txt:271
msgid ""
"One consequence of using Unicode by default is that you have to take some "
"care when printing data from the model."
msgstr ""

#: ../../ref/unicode.txt:274
msgid ""
"In particular, rather than giving your model a ``__str__()`` method, we "
"recommended you implement a ``__unicode__()`` method. In the "
"``__unicode__()`` method, you can quite safely return the values of all your"
" fields without having to worry about whether they fit into a bytestring or "
"not. (The way Python works, the result of ``__str__()`` is *always* a "
"bytestring, even if you accidentally try to return a Unicode object)."
msgstr ""

#: ../../ref/unicode.txt:281
msgid ""
"You can still create a ``__str__()`` method on your models if you want, of "
"course, but you shouldn't need to do this unless you have a good reason. "
"Django's ``Model`` base class automatically provides a ``__str__()`` "
"implementation that calls ``__unicode__()`` and encodes the result into "
"UTF-8. This means you'll normally only need to implement a ``__unicode__()``"
" method and let Django handle the coercion to a bytestring when required."
msgstr ""

#: ../../ref/unicode.txt:289
msgid "Taking care in ``get_absolute_url()``"
msgstr ""

#: ../../ref/unicode.txt:291
msgid ""
"URLs can only contain ASCII characters. If you're constructing a URL from "
"pieces of data that might be non-ASCII, be careful to encode the results in "
"a way that is suitable for a URL. The "
":func:`~django.core.urlresolvers.reverse` function handles this for you "
"automatically."
msgstr ""

#: ../../ref/unicode.txt:296
msgid ""
"If you're constructing a URL manually (i.e., *not* using the ``reverse()`` "
"function), you'll need to take care of the encoding yourself. In this case, "
"use the ``iri_to_uri()`` and ``urlquote()`` functions that were documented "
"above_. For example::"
msgstr ""

#: ../../ref/unicode.txt:308
msgid ""
"This function returns a correctly encoded URL even if ``self.location`` is "
"something like \"Jack visited Paris & Orléans\". (In fact, the "
"``iri_to_uri()`` call isn't strictly necessary in the above example, because"
" all the non-ASCII characters would have been removed in quoting in the "
"first line.)"
msgstr ""

#: ../../ref/unicode.txt:316
msgid "The database API"
msgstr ""

#: ../../ref/unicode.txt:318
msgid ""
"You can pass either Unicode strings or UTF-8 bytestrings as arguments to "
"``filter()`` methods and the like in the database API. The following two "
"querysets are identical::"
msgstr ""

#: ../../ref/unicode.txt:330
msgid ""
"You can use either Unicode or bytestrings when creating templates manually::"
msgstr ""

#: ../../ref/unicode.txt:337
msgid ""
"But the common case is to read templates from the filesystem, and this "
"creates a slight complication: not all filesystems store their data encoded "
"as UTF-8. If your template files are not stored with a UTF-8 encoding, set "
"the :setting:`FILE_CHARSET` setting to the encoding of the files on disk. "
"When Django reads in a template file, it will convert the data from this "
"encoding to Unicode. (:setting:`FILE_CHARSET` is set to ``'utf-8'`` by "
"default.)"
msgstr ""

#: ../../ref/unicode.txt:344
msgid ""
"The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered "
"templates. This is set to UTF-8 by default."
msgstr ""

#: ../../ref/unicode.txt:348
msgid "Template tags and filters"
msgstr ""

#: ../../ref/unicode.txt:350
msgid ""
"A couple of tips to remember when writing your own template tags and "
"filters:"
msgstr ""

#: ../../ref/unicode.txt:352
msgid ""
"Always return Unicode strings from a template tag's ``render()`` method and "
"from template filters."
msgstr ""

#: ../../ref/unicode.txt:355
msgid ""
"Use ``force_text()`` in preference to ``smart_text()`` in these places. Tag "
"rendering and filter calls occur as the template is being rendered, so there"
" is no advantage to postponing the conversion of lazy translation objects "
"into strings. It's easier to work solely with Unicode strings at that point."
msgstr ""

#: ../../ref/unicode.txt:364
msgid "Files"
msgstr ""

#: ../../ref/unicode.txt:366
msgid ""
"If you intend to allow users to upload files, you must ensure that the "
"environment used to run Django is configured to work with non-ASCII file "
"names. If your environment isn't configured correctly, you'll encounter "
"``UnicodeEncodeError`` exceptions when saving files with file names that "
"contain non-ASCII characters."
msgstr ""

#: ../../ref/unicode.txt:372
msgid ""
"Filesystem support for UTF-8 file names varies and might depend on the "
"environment. Check your current configuration in an interactive Python shell"
" by running::"
msgstr ""

#: ../../ref/unicode.txt:379
msgid "This should output \"UTF-8\"."
msgstr ""

#: ../../ref/unicode.txt:381
msgid ""
"The ``LANG`` environment variable is responsible for setting the expected "
"encoding on Unix platforms. Consult the documentation for your operating "
"system and application server for the appropriate syntax and location to set"
" this variable."
msgstr ""

#: ../../ref/unicode.txt:386
msgid ""
"In your development environment, you might need to add a setting to your "
"``~.bashrc`` analogous to:::"
msgstr ""

#: ../../ref/unicode.txt:394
msgid ""
"Django's email framework (in ``django.core.mail``) supports Unicode "
"transparently. You can use Unicode data in the message bodies and any "
"headers. However, you're still obligated to respect the requirements of the "
"email specifications, so, for example, email addresses should use only ASCII"
" characters."
msgstr ""

#: ../../ref/unicode.txt:400
msgid ""
"The following code example demonstrates that everything except email "
"addresses can be non-ASCII::"
msgstr ""

#: ../../ref/unicode.txt:415
msgid "Form submission"
msgstr ""

#: ../../ref/unicode.txt:417
msgid ""
"HTML form submission is a tricky area. There's no guarantee that the "
"submission will include encoding information, which means the framework "
"might have to guess at the encoding of submitted data."
msgstr ""

#: ../../ref/unicode.txt:421
msgid ""
"Django adopts a \"lazy\" approach to decoding form data. The data in an "
"``HttpRequest`` object is only decoded when you access it. In fact, most of "
"the data is not decoded at all. Only the ``HttpRequest.GET`` and "
"``HttpRequest.POST`` data structures have any decoding applied to them. "
"Those two fields will return their members as Unicode data. All other "
"attributes and methods of ``HttpRequest`` return data exactly as it was "
"submitted by the client."
msgstr ""

#: ../../ref/unicode.txt:429
msgid ""
"By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed "
"encoding for form data. If you need to change this for a particular form, "
"you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For "
"example::"
msgstr ""

#: ../../ref/unicode.txt:438
msgid ""
"You can even change the encoding after having accessed ``request.GET`` or "
"``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""

#: ../../ref/unicode.txt:441
msgid ""
"Most developers won't need to worry about changing form encoding, but this "
"is a useful feature for applications that talk to legacy systems whose "
"encoding you cannot control."
msgstr ""

#: ../../ref/unicode.txt:445
msgid ""
"Django does not decode the data of file uploads, because that data is "
"normally treated as collections of bytes, rather than strings. Any automatic"
" decoding there would alter the meaning of the stream of bytes."
msgstr ""

#: ../../ref/urlresolvers.txt:3
msgid "``django.core.urlresolvers`` utility functions"
msgstr ""

#: ../../ref/urlresolvers.txt:8
msgid "reverse()"
msgstr ""

#: ../../ref/urlresolvers.txt:10
msgid ""
"If you need to use something similar to the :ttag:`url` template tag in your"
" code, Django provides the following function:"
msgstr ""

#: ../../ref/urlresolvers.txt:15
msgid ""
"``viewname`` can be a string containing the Python path to the view object, "
"a :ref:`URL pattern name <naming-url-patterns>`, or the callable view "
"object. For example, given the following ``url``::"
msgstr ""

#: ../../ref/urlresolvers.txt:23
msgid "you can use any of the following to reverse the URL::"
msgstr ""

#: ../../ref/urlresolvers.txt:33
msgid ""
"If the URL accepts arguments, you may pass them in ``args``. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:40
msgid "You can also pass ``kwargs`` instead of ``args``. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:45
msgid ""
"``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr ""

#: ../../ref/urlresolvers.txt:47
msgid ""
"If no match can be made, ``reverse()`` raises a "
":class:`~django.core.urlresolvers.NoReverseMatch` exception."
msgstr ""

#: ../../ref/urlresolvers.txt:50
msgid ""
"The ``reverse()`` function can reverse a large variety of regular expression"
" patterns for URLs, but not every possible one. The main restriction at the "
"moment is that the pattern cannot contain alternative choices using the "
"vertical bar (``\"|\"``) character. You can quite happily use such patterns "
"for matching against incoming URLs and sending them off to views, but you "
"cannot reverse such patterns."
msgstr ""

#: ../../ref/urlresolvers.txt:57
msgid ""
"The ``current_app`` argument allows you to provide a hint to the resolver "
"indicating the application to which the currently executing view belongs. "
"This ``current_app`` argument is used as a hint to resolve application "
"namespaces into URLs on specific application instances, according to the "
":ref:`namespaced URL resolution strategy <topics-http-reversing-url-"
"namespaces>`."
msgstr ""

#: ../../ref/urlresolvers.txt:63
msgid ""
"The ``urlconf`` argument is the URLconf module containing the url patterns "
"to use for reversing. By default, the root URLconf for the current thread is"
" used."
msgstr ""

#: ../../ref/urlresolvers.txt:68
msgid ""
"The ability to reverse using the Python path, e.g. "
"``reverse('news.views.archive')``, has been deprecated."
msgstr ""

#: ../../ref/urlresolvers.txt:71
msgid "Make sure your views are all correct."
msgstr ""

#: ../../ref/urlresolvers.txt:73
msgid ""
"As part of working out which URL names map to which patterns, the "
"``reverse()`` function has to import all of your URLconf files and examine "
"the name of each view. This involves importing each view function. If there "
"are *any* errors whilst importing any of your view functions, it will cause "
"``reverse()`` to raise an error, even if that view function is not the one "
"you are trying to reverse."
msgstr ""

#: ../../ref/urlresolvers.txt:80
msgid ""
"Make sure that any views you reference in your URLconf files exist and can "
"be imported correctly. Do not include lines that reference views you haven't"
" written yet, because those views will not be importable."
msgstr ""

#: ../../ref/urlresolvers.txt:86
msgid ""
"The string returned by ``reverse()`` is already :ref:`urlquoted <uri-and-"
"iri-handling>`. For example::"
msgstr ""

#: ../../ref/urlresolvers.txt:92
msgid ""
"Applying further encoding (such as :meth:`~django.utils.http.urlquote` or "
"``urllib.quote``) to the output of ``reverse()`` may produce undesirable "
"results."
msgstr ""

#: ../../ref/urlresolvers.txt:97
msgid "reverse_lazy()"
msgstr ""

#: ../../ref/urlresolvers.txt:99
msgid "A lazily evaluated version of `reverse()`_."
msgstr ""

#: ../../ref/urlresolvers.txt:103
msgid ""
"It is useful for when you need to use a URL reversal before your project's "
"URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""

#: ../../ref/urlresolvers.txt:106
msgid ""
"providing a reversed URL as the ``url`` attribute of a generic class-based "
"view."
msgstr ""

#: ../../ref/urlresolvers.txt:109
msgid ""
"providing a reversed URL to a decorator (such as the ``login_url`` argument "
"for the :func:`django.contrib.auth.decorators.permission_required` "
"decorator)."
msgstr ""

#: ../../ref/urlresolvers.txt:113
msgid ""
"providing a reversed URL as a default value for a parameter in a function's "
"signature."
msgstr ""

#: ../../ref/urlresolvers.txt:117
msgid "resolve()"
msgstr ""

#: ../../ref/urlresolvers.txt:119
msgid ""
"The ``resolve()`` function can be used for resolving URL paths to the "
"corresponding view functions. It has the following signature:"
msgstr ""

#: ../../ref/urlresolvers.txt:124
msgid ""
"``path`` is the URL path you want to resolve. As with "
":func:`~django.core.urlresolvers.reverse`, you don't need to worry about the"
" ``urlconf`` parameter. The function returns a :class:`ResolverMatch` object"
" that allows you to access various meta-data about the resolved URL."
msgstr ""

#: ../../ref/urlresolvers.txt:130
msgid ""
"If the URL does not resolve, the function raises a "
":exc:`~django.core.urlresolvers.Resolver404` exception (a subclass of "
":class:`~django.http.Http404`) ."
msgstr ""

#: ../../ref/urlresolvers.txt:138
msgid "The view function that would be used to serve the URL"
msgstr ""

#: ../../ref/urlresolvers.txt:142
msgid ""
"The arguments that would be passed to the view function, as parsed from the "
"URL."
msgstr ""

#: ../../ref/urlresolvers.txt:147
msgid ""
"The keyword arguments that would be passed to the view function, as parsed "
"from the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:152
msgid "The name of the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:156
msgid "The application namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:161
msgid "The instance namespace for the URL pattern that matches the URL."
msgstr ""

#: ../../ref/urlresolvers.txt:166
msgid ""
"The list of individual namespace components in the full instance namespace "
"for the URL pattern that matches the URL. i.e., if the namespace is "
"``foo:bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""

#: ../../ref/urlresolvers.txt:173
msgid ""
"The name of the view that matches the URL, including the namespace if there "
"is one."
msgstr ""

#: ../../ref/urlresolvers.txt:176
msgid ""
"A :class:`ResolverMatch` object can then be interrogated to provide "
"information about the URL pattern that matches a URL::"
msgstr ""

#: ../../ref/urlresolvers.txt:184
msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""

#: ../../ref/urlresolvers.txt:188
msgid ""
"One possible use of :func:`~django.core.urlresolvers.resolve` would be to "
"test whether a view would raise a ``Http404`` error before redirecting to "
"it::"
msgstr ""

#: ../../ref/urlresolvers.txt:211
msgid "get_script_prefix()"
msgstr ""

#: ../../ref/urlresolvers.txt:215
msgid ""
"Normally, you should always use :func:`~django.core.urlresolvers.reverse` to"
" define URLs within your application. However, if your application "
"constructs part of the URL hierarchy itself, you may occasionally need to "
"generate URLs. In that case, you need to be able to find the base URL of the"
" Django project within its Web server (normally, "
":func:`~django.core.urlresolvers.reverse` takes care of this for you). In "
"that case, you can call ``get_script_prefix()``, which will return the "
"script prefix portion of the URL for your Django project. If your Django "
"project is at the root of its web server, this is always ``\"/\"``."
msgstr ""

#: ../../ref/urls.txt:3
msgid "``django.conf.urls`` utility functions"
msgstr ""

#: ../../ref/urls.txt:8
msgid "patterns()"
msgstr ""

#: ../../ref/urls.txt:14
msgid ""
"``urlpatterns`` should be a plain list of :func:`django.conf.urls.url` "
"instances instead."
msgstr ""

#: ../../ref/urls.txt:17
msgid ""
"A function that takes a prefix, and an arbitrary number of URL patterns, and"
" returns a list of URL patterns in the format Django needs."
msgstr ""

#: ../../ref/urls.txt:20
msgid ""
"The first argument to ``patterns()`` is a string ``prefix``. Here's the "
"example URLconf from the :doc:`Django overview </intro/overview>`::"
msgstr ""

#: ../../ref/urls.txt:31
msgid ""
"In this example, each view has a common prefix -- ``'news.views'``. Instead "
"of typing that out for each entry in ``urlpatterns``, you can use the first "
"argument to the ``patterns()`` function to specify a prefix to apply to each"
" view function."
msgstr ""

#: ../../ref/urls.txt:36
msgid ""
"With this in mind, the above example can be written more concisely as::"
msgstr ""

#: ../../ref/urls.txt:46
msgid ""
"Note that you don't put a trailing dot (``\".\"``) in the prefix. Django "
"puts that in automatically."
msgstr ""

#: ../../ref/urls.txt:49
msgid "The remaining arguments should be tuples in this format::"
msgstr ""

#: ../../ref/urls.txt:53
msgid ""
"The ``optional_dictionary`` and ``optional_name`` parameters are described "
"in :ref:`Passing extra options to view functions <views-extra-options>`."
msgstr ""

#: ../../ref/urls.txt:57
msgid ""
"Because ``patterns()`` is a function call, it accepts a maximum of 255 "
"arguments (URL patterns, in this case). This is a limit for all Python "
"function calls. This is rarely a problem in practice, because you'll "
"typically structure your URL patterns modularly by using ``include()`` "
"sections. However, on the off-chance you do hit the 255-argument limit, "
"realize that ``patterns()`` returns a Python list, so you can split up the "
"construction of the list."
msgstr ""

#: ../../ref/urls.txt:74
msgid ""
"Python lists have unlimited size, so there's no limit to how many URL "
"patterns you can construct. The only limit is that you can only create 254 "
"at a time (the 255th argument is the initial prefix argument)."
msgstr ""

#: ../../ref/urls.txt:79
msgid "static()"
msgstr ""

#: ../../ref/urls.txt:83
msgid ""
"Helper function to return a URL pattern for serving files in debug mode::"
msgstr ""

#: ../../ref/urls.txt:94
msgid ""
"The ``view`` argument changed from a string "
"(``'django.views.static.serve'``) to the function."
msgstr ""

#: ../../ref/urls.txt:98
msgid "url()"
msgstr ""

#: ../../ref/urls.txt:102
msgid "``urlpatterns`` should be a list of ``url()`` instances. For example::"
msgstr ""

#: ../../ref/urls.txt:109
msgid "This function takes five arguments, most of which are optional::"
msgstr ""

#: ../../ref/urls.txt:113
msgid ""
"The ``kwargs`` parameter allows you to pass additional arguments to the view"
" function or method. See :ref:`views-extra-options` for an example."
msgstr ""

#: ../../ref/urls.txt:116
msgid ""
"See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` "
"parameter is useful."
msgstr ""

#: ../../ref/urls.txt:121
msgid ""
"Support for string ``view`` arguments is deprecated and will be removed in "
"Django 1.10. Pass the callable  instead."
msgstr ""

#: ../../ref/urls.txt:124
msgid ""
"The ``prefix`` parameter has the same meaning as the first argument to "
"``patterns()`` and is only relevant when you're passing a string as the "
"``view`` parameter."
msgstr ""

#: ../../ref/urls.txt:129
msgid "include()"
msgstr ""

#: ../../ref/urls.txt:135
msgid ""
"A function that takes a full Python import path to another URLconf module "
"that should be \"included\" in this place. Optionally, the "
":term:`application namespace` and :term:`instance namespace` where the "
"entries will be included into can also be specified."
msgstr ""

#: ../../ref/urls.txt:140
msgid ""
"``include()`` also accepts as an argument either an iterable that returns "
"URL patterns or a 3-tuple containing such iterable plus the names of the "
"application and instance namespaces."
msgstr ""

#: ../../ref/urls.txt:144
msgid "URLconf module (or module name)"
msgstr ""

#: ../../ref/urls.txt:145 ../../ref/urls.txt:152
msgid "Instance namespace for the URL entries being included"
msgstr ""

#: ../../ref/urls.txt:147 ../../ref/urls.txt:150
msgid "Application namespace for the URL entries being included"
msgstr ""

#: ../../ref/urls.txt:149
msgid "Iterable of :func:`django.conf.urls.url` instances"
msgstr ""

#: ../../ref/urls.txt:155
msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""

#: ../../ref/urls.txt:158
msgid "handler400"
msgstr ""

#: ../../ref/urls.txt:162
msgid ""
"A callable, or a string representing the full Python import path to the view"
" that should be called if the HTTP client has sent a request that caused an "
"error condition and a response with a status code of 400."
msgstr ""

#: ../../ref/urls.txt:166
msgid ""
"By default, this is ``'django.views.defaults.bad_request'``. That default "
"value should suffice."
msgstr ""

#: ../../ref/urls.txt:169
msgid ""
"See the documentation about :ref:`the 400 (bad request) view "
"<http_bad_request_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:173
msgid "handler403"
msgstr ""

#: ../../ref/urls.txt:177
msgid ""
"A callable, or a string representing the full Python import path to the view"
" that should be called if the user doesn't have the permissions required to "
"access a resource."
msgstr ""

#: ../../ref/urls.txt:181
msgid ""
"By default, this is ``'django.views.defaults.permission_denied'``. That "
"default value should suffice."
msgstr ""

#: ../../ref/urls.txt:184
msgid ""
"See the documentation about :ref:`the 403 (HTTP Forbidden) view "
"<http_forbidden_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:188
msgid "handler404"
msgstr ""

#: ../../ref/urls.txt:192
msgid ""
"A callable, or a string representing the full Python import path to the view"
" that should be called if none of the URL patterns match."
msgstr ""

#: ../../ref/urls.txt:195
msgid ""
"By default, this is ``'django.views.defaults.page_not_found'``. That default"
" value should suffice."
msgstr ""

#: ../../ref/urls.txt:198
msgid ""
"See the documentation about :ref:`the 404 (HTTP Not Found) view "
"<http_not_found_view>` for more information."
msgstr ""

#: ../../ref/urls.txt:202
msgid "handler500"
msgstr ""

#: ../../ref/urls.txt:206
msgid ""
"A callable, or a string representing the full Python import path to the view"
" that should be called in case of server errors. Server errors happen when "
"you have runtime errors in view code."
msgstr ""

#: ../../ref/urls.txt:210
msgid ""
"By default, this is ``'django.views.defaults.server_error'``. That default "
"value should suffice."
msgstr ""

#: ../../ref/urls.txt:213
msgid ""
"See the documentation about :ref:`the 500 (HTTP Internal Server Error) view "
"<http_internal_server_error_view>` for more information."
msgstr ""

#: ../../ref/utils.txt:3
msgid "Django Utils"
msgstr ""

#: ../../ref/utils.txt:8
msgid ""
"This document covers all stable modules in ``django.utils``. Most of the "
"modules in ``django.utils`` are designed for internal use and only the "
"following parts can be considered stable and thus backwards compatible as "
"per the :ref:`internal release deprecation policy <internal-release-"
"deprecation-policy>`."
msgstr ""

#: ../../ref/utils.txt:14
msgid "``django.utils.cache``"
msgstr ""

#: ../../ref/utils.txt:19
msgid ""
"This module contains helper functions for controlling caching. It does so by"
" managing the ``Vary`` header of responses. It includes functions to patch "
"the header of response objects directly and decorators that change functions"
" to do that header-patching themselves."
msgstr ""

#: ../../ref/utils.txt:24
msgid ""
"For information on the ``Vary`` header, see :rfc:`2616#section-14.44` "
"section 14.44."
msgstr ""

#: ../../ref/utils.txt:27
msgid ""
"Essentially, the ``Vary`` HTTP header defines which headers a cache should "
"take into account when building its cache key. Requests with the same path "
"but different header content for headers named in ``Vary`` need to get "
"different cache keys to prevent delivery of wrong content."
msgstr ""

#: ../../ref/utils.txt:32
msgid ""
"For example, :doc:`internationalization </topics/i18n/index>` middleware "
"would need to distinguish caches by the ``Accept-language`` header."
msgstr ""

#: ../../ref/utils.txt:37
msgid ""
"This function patches the ``Cache-Control`` header by adding all keyword "
"arguments to it. The transformation is as follows:"
msgstr ""

#: ../../ref/utils.txt:40
msgid ""
"All keyword parameter names are turned to lowercase, and underscores are "
"converted to hyphens."
msgstr ""

#: ../../ref/utils.txt:42
msgid ""
"If the value of a parameter is ``True`` (exactly ``True``, not just a true "
"value), only the parameter name is added to the header."
msgstr ""

#: ../../ref/utils.txt:44
msgid ""
"All other parameters are added with their value, after applying ``str()`` to"
" it."
msgstr ""

#: ../../ref/utils.txt:49
msgid ""
"Returns the max-age from the response Cache-Control header as an integer (or"
" ``None`` if it wasn't found or wasn't an integer)."
msgstr ""

#: ../../ref/utils.txt:54
msgid "Adds some useful headers to the given ``HttpResponse`` object:"
msgstr ""

#: ../../ref/utils.txt:56
msgid "``ETag``"
msgstr ""

#: ../../ref/utils.txt:57
msgid "``Last-Modified``"
msgstr ""

#: ../../ref/utils.txt:58
msgid "``Expires``"
msgstr ""

#: ../../ref/utils.txt:59
msgid "``Cache-Control``"
msgstr ""

#: ../../ref/utils.txt:61
msgid "Each header is only added if it isn't already set."
msgstr ""

#: ../../ref/utils.txt:63
msgid ""
"``cache_timeout`` is in seconds. The :setting:`CACHE_MIDDLEWARE_SECONDS` "
"setting is used by default."
msgstr ""

#: ../../ref/utils.txt:68
msgid ""
"Adds headers to a response to indicate that a page should never be cached."
msgstr ""

#: ../../ref/utils.txt:72
msgid ""
"Adds (or updates) the ``Vary`` header in the given ``HttpResponse`` object. "
"``newheaders`` is a list of header names that should be in ``Vary``. "
"Existing headers in ``Vary`` aren't removed."
msgstr ""

#: ../../ref/utils.txt:78
msgid ""
"Returns a cache key based on the request path. It can be used in the request"
" phase because it pulls the list of headers to take into account from the "
"global path registry and uses those to build a cache key to check against."
msgstr ""

#: ../../ref/utils.txt:83
msgid ""
"If there is no headerlist stored, the page needs to be rebuilt, so this "
"function returns ``None``."
msgstr ""

#: ../../ref/utils.txt:88
msgid ""
"Learns what headers to take into account for some request path from the "
"response object. It stores those headers in a global path registry so that "
"later access to that path will know what headers to take into account "
"without building the response object itself. The headers are named in the "
"``Vary`` header of the response, but we want to prevent response generation."
msgstr ""

#: ../../ref/utils.txt:95
msgid ""
"The list of headers to use for cache key generation is stored in the same "
"cache as the pages themselves. If the cache ages some data out of the cache,"
" this just means that we have to build the response once to get at the Vary "
"header and so at the list of headers to use for the cache key."
msgstr ""

#: ../../ref/utils.txt:101
msgid "``django.utils.datastructures``"
msgstr ""

#: ../../ref/utils.txt:108
msgid ""
"``SortedDict`` is deprecated and will be removed in Django 1.9. Use "
":class:`collections.OrderedDict` instead."
msgstr ""

#: ../../ref/utils.txt:112
msgid ""
"The :class:`django.utils.datastructures.SortedDict` class is a dictionary "
"that keeps its keys in the order in which they're inserted."
msgstr ""

#: ../../ref/utils.txt:116
msgid "Creating a new SortedDict"
msgstr ""

#: ../../ref/utils.txt:118
msgid ""
"Creating a new ``SortedDict`` must be done in a way where ordering is "
"guaranteed. For example::"
msgstr ""

#: ../../ref/utils.txt:123
msgid ""
"will not work. Passing in a basic Python ``dict`` could produce unreliable "
"results. Instead do::"
msgstr ""

#: ../../ref/utils.txt:129
msgid "``django.utils.dateparse``"
msgstr ""

#: ../../ref/utils.txt:134
msgid "The functions defined in this module share the following properties:"
msgstr ""

#: ../../ref/utils.txt:136
msgid ""
"They raise :exc:`ValueError` if their input is well formatted but isn't a "
"valid date or time."
msgstr ""

#: ../../ref/utils.txt:138
msgid "They return ``None`` if it isn't well formatted at all."
msgstr ""

#: ../../ref/utils.txt:139
msgid ""
"They accept up to picosecond resolution in input, but they truncate it to "
"microseconds, since that's what Python supports."
msgstr ""

#: ../../ref/utils.txt:144
msgid "Parses a string and returns a :class:`datetime.date`."
msgstr ""

#: ../../ref/utils.txt:148
msgid "Parses a string and returns a :class:`datetime.time`."
msgstr ""

#: ../../ref/utils.txt:150
msgid ""
"UTC offsets aren't supported; if ``value`` describes one, the result is "
"``None``."
msgstr ""

#: ../../ref/utils.txt:155
msgid "Parses a string and returns a :class:`datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:157
msgid ""
"UTC offsets are supported; if ``value`` describes one, the result's "
"``tzinfo`` attribute is a :class:`~django.utils.timezone.FixedOffset` "
"instance."
msgstr ""

#: ../../ref/utils.txt:165
msgid "Parses a string and returns a :class:`datetime.timedelta`."
msgstr ""

#: ../../ref/utils.txt:167
msgid ""
"Expects data in the format ``\"DD HH:MM:SS.uuuuuu\"`` or as specified by ISO"
" 8601 (e.g. ``P4DT1H15M20S`` which is equivalent to ``4 1:15:20``)."
msgstr ""

#: ../../ref/utils.txt:171
msgid "``django.utils.decorators``"
msgstr ""

#: ../../ref/utils.txt:178
msgid ""
"Converts a function decorator into a method decorator. See :ref:`decorating "
"class-based views<decorating-class-based-views>` for example usage."
msgstr ""

#: ../../ref/utils.txt:183
msgid ""
"Given a middleware class, returns a view decorator. This lets you use "
"middleware functionality on a per-view basis. The middleware is created with"
" no params passed."
msgstr ""

#: ../../ref/utils.txt:189
msgid ""
"Like ``decorator_from_middleware``, but returns a function that accepts the "
"arguments to be passed to the middleware_class. For example, the "
":func:`~django.views.decorators.cache.cache_page` decorator is created from "
"the ``CacheMiddleware`` like this::"
msgstr ""

#: ../../ref/utils.txt:201
msgid "``django.utils.encoding``"
msgstr ""

#: ../../ref/utils.txt:208
msgid ""
"A decorator that defines ``__unicode__`` and ``__str__`` methods under "
"Python 2. Under Python 3 it does nothing."
msgstr ""

#: ../../ref/utils.txt:211
msgid ""
"To support Python 2 and 3 with a single code base, define a ``__str__`` "
"method returning text and apply this decorator to the class."
msgstr ""

#: ../../ref/utils.txt:216
msgid ""
"Returns a text object representing ``s`` -- ``unicode`` on Python 2 and "
"``str`` on Python 3. Treats bytestrings using the ``encoding`` codec."
msgstr ""

#: ../../ref/utils.txt:219 ../../ref/utils.txt:238 ../../ref/utils.txt:250
#: ../../ref/utils.txt:258
msgid ""
"If ``strings_only`` is ``True``, don't convert (some) non-string-like "
"objects."
msgstr ""

#: ../../ref/utils.txt:224
msgid "Historical name of :func:`smart_text`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:228
msgid "Determine if the object instance is of a protected type."
msgstr ""

#: ../../ref/utils.txt:230
msgid ""
"Objects of protected types are preserved as-is when passed to "
"``force_text(strings_only=True)``."
msgstr ""

#: ../../ref/utils.txt:235
msgid ""
"Similar to ``smart_text``, except that lazy instances are resolved to "
"strings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:243
msgid "Historical name of :func:`force_text`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:247
msgid ""
"Returns a bytestring version of ``s``, encoded as specified in ``encoding``."
msgstr ""

#: ../../ref/utils.txt:255
msgid ""
"Similar to ``smart_bytes``, except that lazy instances are resolved to "
"bytestrings, rather than kept as lazy objects."
msgstr ""

#: ../../ref/utils.txt:263
msgid ""
"Alias of :func:`smart_bytes` on Python 2 and :func:`smart_text` on Python 3."
" This function returns a ``str`` or a lazy string."
msgstr ""

#: ../../ref/utils.txt:266
msgid ""
"For instance, this is  suitable for writing to :data:`sys.stdout` on Python "
"2 and 3."
msgstr ""

#: ../../ref/utils.txt:271
msgid ""
"Alias of :func:`force_bytes` on Python 2 and :func:`force_text` on Python 3."
" This function always returns a ``str``."
msgstr ""

#: ../../ref/utils.txt:276
msgid ""
"Convert an Internationalized Resource Identifier (IRI) portion to a URI "
"portion that is suitable for inclusion in a URL."
msgstr ""

#: ../../ref/utils.txt:279
msgid ""
"This is the algorithm from section 3.1 of :rfc:`3987#section-3.1`. However, "
"since we are assuming input is either UTF-8 or unicode already, we can "
"simplify things a little from the full method."
msgstr ""

#: ../../ref/utils.txt:283
msgid ""
"Takes an IRI in UTF-8 bytes and returns ASCII bytes containing the encoded "
"result."
msgstr ""

#: ../../ref/utils.txt:290
msgid ""
"Converts a Uniform Resource Identifier into an Internationalized Resource "
"Identifier."
msgstr ""

#: ../../ref/utils.txt:293
msgid "This is an algorithm from section 3.2 of :rfc:`3987#section-3.2`."
msgstr ""

#: ../../ref/utils.txt:295
msgid ""
"Takes a URI in ASCII bytes and returns a unicode string containing the "
"encoded result."
msgstr ""

#: ../../ref/utils.txt:300
msgid ""
"Convert a file system path to a URI portion that is suitable for inclusion "
"in a URL. The path is assumed to be either UTF-8 or unicode."
msgstr ""

#: ../../ref/utils.txt:303
msgid ""
"This method will encode certain characters that would normally be recognized"
" as special characters for URIs.  Note that this method does not encode the "
"' character, as it is a valid character within URIs. See "
"``encodeURIComponent()`` JavaScript function for more details."
msgstr ""

#: ../../ref/utils.txt:308
msgid "Returns an ASCII string containing the encoded result."
msgstr ""

#: ../../ref/utils.txt:314
msgid ""
"Escapes the unsafe characters from the path portion of a Uniform Resource "
"Identifier (URI)."
msgstr ""

#: ../../ref/utils.txt:318
msgid "``django.utils.feedgenerator``"
msgstr ""

#: ../../ref/utils.txt:340
msgid ""
"For simplifying the selection of a generator use "
"``feedgenerator.DefaultFeed`` which is currently ``Rss201rev2Feed``"
msgstr ""

#: ../../ref/utils.txt:343
msgid ""
"For definitions of the different versions of RSS, see: "
"http://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04"
"/incompatible-rss"
msgstr ""

#: ../../ref/utils.txt:348
msgid "Creates a TagURI."
msgstr ""

#: ../../ref/utils.txt:350
msgid ""
"See "
"http://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28"
"/howto-atom-id"
msgstr ""

#: ../../ref/utils.txt:353
msgid "SyndicationFeed"
msgstr ""

#: ../../ref/utils.txt:357
msgid ""
"Base class for all syndication feeds. Subclasses should provide write()."
msgstr ""

#: ../../ref/utils.txt:361
msgid ""
"Initialize the feed with the given dictionary of metadata, which applies to "
"the entire feed."
msgstr ""

#: ../../ref/utils.txt:364
msgid ""
"Any extra keyword arguments you pass to ``__init__`` will be stored in "
"``self.feed``."
msgstr ""

#: ../../ref/utils.txt:372
msgid ""
"Adds an item to the feed. All args are expected to be Python ``unicode`` "
"objects except ``pubdate`` and ``updateddate``, which are "
"``datetime.datetime`` objects, and ``enclosure``, which is an instance of "
"the ``Enclosure`` class."
msgstr ""

#: ../../ref/utils.txt:384
msgid ""
"Return extra attributes to place on the root (i.e. feed/channel) element. "
"Called from ``write()``."
msgstr ""

#: ../../ref/utils.txt:389
msgid ""
"Add elements in the root (i.e. feed/channel) element. Called from "
"``write()``."
msgstr ""

#: ../../ref/utils.txt:394
msgid ""
"Return extra attributes to place on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:399
msgid "Add elements on each item (i.e. item/entry) element."
msgstr ""

#: ../../ref/utils.txt:403
msgid ""
"Outputs the feed in the given encoding to ``outfile``, which is a file-like "
"object. Subclasses should override this."
msgstr ""

#: ../../ref/utils.txt:408
msgid "Returns the feed in the given encoding as a string."
msgstr ""

#: ../../ref/utils.txt:412
msgid ""
"Returns the latest ``pubdate`` or ``updateddate`` for all items in the feed."
" If no items have either of these attributes this returns the current "
"date/time."
msgstr ""

#: ../../ref/utils.txt:417
msgid "Enclosure"
msgstr ""

#: ../../ref/utils.txt:421
msgid "Represents an RSS enclosure"
msgstr ""

#: ../../ref/utils.txt:424
msgid "RssFeed"
msgstr ""

#: ../../ref/utils.txt:429
msgid "Rss201rev2Feed"
msgstr ""

#: ../../ref/utils.txt:433
msgid "Spec: http://cyber.law.harvard.edu/rss/rss.html"
msgstr ""

#: ../../ref/utils.txt:436
msgid "RssUserland091Feed"
msgstr ""

#: ../../ref/utils.txt:440
msgid "Spec: http://backend.userland.com/rss091"
msgstr ""

#: ../../ref/utils.txt:443
msgid "Atom1Feed"
msgstr ""

#: ../../ref/utils.txt:447
msgid "Spec: http://tools.ietf.org/html/rfc4287"
msgstr ""

#: ../../ref/utils.txt:450
msgid "``django.utils.functional``"
msgstr ""

#: ../../ref/utils.txt:457
msgid ""
"The ``@cached_property`` decorator caches the result of a method with a "
"single ``self`` argument as a property. The cached result will persist as "
"long as the instance does, so if the instance is passed around and the "
"function subsequently invoked, the cached result will be returned."
msgstr ""

#: ../../ref/utils.txt:462
msgid ""
"Consider a typical case, where a view might need to call a model's method to"
" perform some computation, before placing the model instance into the "
"context, where the template might invoke the method once more::"
msgstr ""

#: ../../ref/utils.txt:478
msgid "And in the template you would have:"
msgstr ""

#: ../../ref/utils.txt:484
msgid ""
"Here, ``friends()`` will be called twice. Since the instance ``person`` in "
"the view and the template are the same, ``@cached_property`` can avoid "
"that::"
msgstr ""

#: ../../ref/utils.txt:496
msgid ""
"Note that as the method is now a property, in Python code it will need to be"
" invoked appropriately::"
msgstr ""

#: ../../ref/utils.txt:503
msgid ""
"The cached value can be treated like an ordinary attribute of the instance::"
msgstr ""

#: ../../ref/utils.txt:511
msgid ""
"As well as offering potential performance advantages, ``@cached_property`` "
"can ensure that an attribute's value does not change unexpectedly over the "
"life of an instance. This could occur with a method whose computation is "
"based on ``datetime.now()``, or simply if a change were saved to the "
"database by some other process in the brief interval between subsequent "
"invocations of a method on the same instance."
msgstr ""

#: ../../ref/utils.txt:520
msgid ""
"You can use the ``name`` argument to make cached properties of other "
"methods. For example, if you had an expensive ``get_friends()`` method and "
"wanted to allow calling it without retrieving the cached value, you could "
"write::"
msgstr ""

#: ../../ref/utils.txt:527
msgid ""
"While ``person.get_friends()`` will recompute the friends on each call, the "
"value of the cached property will persist until you delete it as described "
"above::"
msgstr ""

#: ../../ref/utils.txt:538
msgid ""
"Django offers many utility functions (particularly in ``django.utils``) that"
" take a string as their first argument and do something to that string. "
"These functions are used by template filters as well as directly in other "
"code."
msgstr ""

#: ../../ref/utils.txt:543
msgid ""
"If you write your own similar functions and deal with translations, you'll "
"face the problem of what to do when the first argument is a lazy translation"
" object. You don't want to convert it to a string immediately, because you "
"might be using this function outside of a view (and hence the current "
"thread's locale setting will not be correct)."
msgstr ""

#: ../../ref/utils.txt:549
msgid ""
"For cases like this, use the ``django.utils.functional.allow_lazy()`` "
"decorator. It modifies the function so that *if* it's called with a lazy "
"translation as one of its arguments, the function evaluation is delayed "
"until it needs to be converted to a string."
msgstr ""

#: ../../ref/utils.txt:564
msgid ""
"The ``allow_lazy()`` decorator takes, in addition to the function to "
"decorate, a number of extra arguments (``*args``) specifying the type(s) "
"that the original function can return. Usually, it's enough to include "
"``unicode`` (or ``str`` on Python 3) here and ensure that your function "
"returns only Unicode strings."
msgstr ""

#: ../../ref/utils.txt:570
msgid ""
"Using this decorator means you can write your function and assume that the "
"input is a proper string, then add support for lazy translation objects at "
"the end."
msgstr ""

#: ../../ref/utils.txt:575
msgid "``django.utils.html``"
msgstr ""

#: ../../ref/utils.txt:580
msgid ""
"Usually you should build up HTML using Django's templates to make use of its"
" autoescape mechanism, using the utilities in :mod:`django.utils.safestring`"
" where appropriate. This module provides some additional low level utilities"
" for escaping HTML."
msgstr ""

#: ../../ref/utils.txt:587
msgid ""
"Returns the given text with ampersands, quotes and angle brackets encoded "
"for use in HTML. The input is first passed through "
":func:`~django.utils.encoding.force_text` and the output has "
":func:`~django.utils.safestring.mark_safe` applied."
msgstr ""

#: ../../ref/utils.txt:594
msgid ""
"Similar to ``escape()``, except that it doesn't operate on pre-escaped "
"strings, so it will not double escape."
msgstr ""

#: ../../ref/utils.txt:599
msgid ""
"This is similar to `str.format`_, except that it is appropriate for building"
" up HTML fragments. All args and kwargs are passed through "
":func:`conditional_escape` before being passed to ``str.format``."
msgstr ""

#: ../../ref/utils.txt:603
msgid ""
"For the case of building up small HTML fragments, this function is to be "
"preferred over string interpolation using ``%`` or ``str.format`` directly, "
"because it applies escaping to all arguments - just like the Template system"
" applies escaping by default."
msgstr ""

#: ../../ref/utils.txt:608
msgid "So, instead of writing::"
msgstr ""

#: ../../ref/utils.txt:615
msgid "You should instead use::"
msgstr ""

#: ../../ref/utils.txt:620
msgid ""
"This has the advantage that you don't need to apply :func:`escape` to each "
"argument and risk a bug and an XSS vulnerability if you forget one."
msgstr ""

#: ../../ref/utils.txt:623
msgid ""
"Note that although this function uses ``str.format`` to do the "
"interpolation, some of the formatting options provided by `str.format`_ "
"(e.g. number formatting) will not work, since all arguments are passed "
"through :func:`conditional_escape` which (ultimately) calls "
":func:`~django.utils.encoding.force_text` on the values."
msgstr ""

#: ../../ref/utils.txt:631
msgid ""
"A wrapper of :func:`format_html`, for the common case of a group of "
"arguments that need to be formatted using the same format string, and then "
"joined using ``sep``. ``sep`` is also passed through "
":func:`conditional_escape`."
msgstr ""

#: ../../ref/utils.txt:636
msgid ""
"``args_generator`` should be an iterator that returns the sequence of "
"``args`` that will be passed to :func:`format_html`. For example::"
msgstr ""

#: ../../ref/utils.txt:644
msgid ""
"Tries to remove anything that looks like an HTML tag from the string, that "
"is anything contained within ``<>``."
msgstr ""

#: ../../ref/utils.txt:647
msgid ""
"Absolutely NO guarantee is provided about the resulting string being HTML "
"safe. So NEVER mark safe the result of a ``strip_tag`` call without escaping"
" it first, for example with :func:`~django.utils.html.escape`."
msgstr ""

#: ../../ref/utils.txt:655
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` "
"the return value will be ``\"Joel is a slug\"``."
msgstr ""

#: ../../ref/utils.txt:658
msgid ""
"If you are looking for a more robust solution, take a look at the `bleach`_ "
"Python library."
msgstr ""

#: ../../ref/utils.txt:665
msgid ""
"``remove_tags()`` cannot guarantee HTML safe output and has been deprecated "
"due to security concerns. Consider using `bleach`_ instead."
msgstr ""

#: ../../ref/utils.txt:668
msgid "Removes a space-separated list of [X]HTML tag names from the output."
msgstr ""

#: ../../ref/utils.txt:670
msgid ""
"Absolutely NO guarantee is provided about the resulting string being HTML "
"safe. In particular, it doesn't work recursively, so the output of "
"``remove_tags(\"<sc<script>ript>alert('XSS')</sc</script>ript>\", "
"\"script\")`` won't remove the \"nested\" script tags. So if the ``value`` "
"is untrusted, NEVER mark safe the result of a ``remove_tags()`` call without"
" escaping it first, for example with :func:`~django.utils.html.escape`."
msgstr ""

#: ../../ref/utils.txt:681
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"`` "
"the return value will be ``\"Joel <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/utils.txt:686
msgid ""
"If ``value`` is ``\"<B>Joel</B> <button>is</button> a <span>slug</span>\"`` "
"the return value will be ``\"<B>Joel</B> <button>is</button> a slug\"``."
msgstr ""

#: ../../ref/utils.txt:696
msgid ""
"The ``__html__()`` method on a class helps non-Django templates detect "
"classes whose output doesn't require HTML escaping."
msgstr ""

#: ../../ref/utils.txt:699
msgid ""
"This decorator defines the ``__html__()`` method on the decorated class by "
"wrapping the ``__unicode__()`` (Python 2) or ``__str__()`` (Python 3) in "
":meth:`~django.utils.safestring.mark_safe`. Ensure the ``__unicode__()`` or "
"``__str__()`` method does indeed return text that doesn't require HTML "
"escaping."
msgstr ""

#: ../../ref/utils.txt:706
msgid "``django.utils.http``"
msgstr ""

#: ../../ref/utils.txt:713
msgid ""
"A version of Python's ``urllib.quote()`` function that can operate on "
"unicode strings. The url is first UTF-8 encoded before quoting. The returned"
" string can safely be used as part of an argument to a subsequent "
"``iri_to_uri()`` call without double-quoting occurring. Employs lazy "
"execution."
msgstr ""

#: ../../ref/utils.txt:721
msgid ""
"A version of Python's urllib.quote_plus() function that can operate on "
"unicode strings. The url is first UTF-8 encoded before quoting. The returned"
" string can safely be used as part of an argument to a subsequent "
"``iri_to_uri()`` call without double-quoting occurring. Employs lazy "
"execution."
msgstr ""

#: ../../ref/utils.txt:729
msgid ""
"A version of Python's urllib.urlencode() function that can operate on "
"unicode strings. The parameters are first cast to UTF-8 encoded strings and "
"then encoded as per normal."
msgstr ""

#: ../../ref/utils.txt:735
msgid ""
"Formats the time to ensure compatibility with Netscape's cookie standard."
msgstr ""

#: ../../ref/utils.txt:737 ../../ref/utils.txt:748
msgid ""
"Accepts a floating point number expressed in seconds since the epoch in UTC"
"--such as that outputted by ``time.time()``. If set to ``None``, defaults to"
" the current time."
msgstr ""

#: ../../ref/utils.txt:741
msgid "Outputs a string in the format ``Wdy, DD-Mon-YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:745
msgid ""
"Formats the time to match the :rfc:`1123` date format as specified by HTTP "
":rfc:`2616#section-3.3.1` section 3.3.1."
msgstr ""

#: ../../ref/utils.txt:752
msgid "Outputs a string in the format ``Wdy, DD Mon YYYY HH:MM:SS GMT``."
msgstr ""

#: ../../ref/utils.txt:756
msgid ""
"Converts a base 36 string to an integer. On Python 2 the output is "
"guaranteed to be an ``int`` and not a ``long``."
msgstr ""

#: ../../ref/utils.txt:761
msgid ""
"Converts a positive integer to a base 36 string. On Python 2 ``i`` must be "
"smaller than `sys.maxint`_."
msgstr ""

#: ../../ref/utils.txt:768
msgid ""
"Encodes a bytestring in base64 for use in URLs, stripping any trailing equal"
" signs."
msgstr ""

#: ../../ref/utils.txt:773
msgid ""
"Decodes a base64 encoded string, adding back any trailing equal signs that "
"might have been stripped."
msgstr ""

#: ../../ref/utils.txt:777
msgid "``django.utils.module_loading``"
msgstr ""

#: ../../ref/utils.txt:782
msgid "Functions for working with Python modules."
msgstr ""

#: ../../ref/utils.txt:788
msgid ""
"Imports a dotted module path and returns the attribute/class designated by "
"the last name in the path. Raises ``ImportError`` if the import failed. For "
"example::"
msgstr ""

#: ../../ref/utils.txt:801
msgid "Use :meth:`~django.utils.module_loading.import_string` instead."
msgstr ""

#: ../../ref/utils.txt:804
msgid ""
"Imports a dotted module path and returns the attribute/class designated by "
"the last name in the path. Raises "
":exc:`~django.core.exceptions.ImproperlyConfigured` if something goes wrong."
msgstr ""

#: ../../ref/utils.txt:809
msgid "``django.utils.safestring``"
msgstr ""

#: ../../ref/utils.txt:814
msgid ""
"Functions and classes for working with \"safe strings\": strings that can be"
" displayed safely without further escaping in HTML. Marking something as a "
"\"safe string\" means that the producer of the string has already turned "
"characters that should not be interpreted by the HTML engine (e.g. '<') into"
" the appropriate entities."
msgstr ""

#: ../../ref/utils.txt:822
msgid ""
"A ``bytes`` subclass that has been specifically marked as \"safe\" (requires"
" no further escaping) for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:827
msgid ""
"A ``str`` subclass that has been specifically marked as \"safe\" (requires "
"no further escaping) for HTML output purposes. This is :class:`SafeBytes` on"
" Python 2 and :class:`SafeText` on Python 3."
msgstr ""

#: ../../ref/utils.txt:833
msgid ""
"A ``str`` (in Python 3) or ``unicode`` (in Python 2) subclass that has been "
"specifically marked as \"safe\" for HTML output purposes."
msgstr ""

#: ../../ref/utils.txt:838
msgid "Historical name of :class:`SafeText`. Only available under Python 2."
msgstr ""

#: ../../ref/utils.txt:842
msgid ""
"Explicitly mark a string as safe for (HTML) output purposes. The returned "
"object can be used everywhere a string or unicode object is appropriate."
msgstr ""

#: ../../ref/utils.txt:845
msgid "Can be called multiple times on a single string."
msgstr ""

#: ../../ref/utils.txt:847
msgid ""
"For building up fragments of HTML, you should normally be using "
":func:`django.utils.html.format_html` instead."
msgstr ""

#: ../../ref/utils.txt:850
msgid "String marked safe will become unsafe again if modified. For example::"
msgstr ""

#: ../../ref/utils.txt:863
msgid ""
"Explicitly mark a string as requiring HTML escaping upon output. Has no "
"effect on ``SafeData`` subclasses."
msgstr ""

#: ../../ref/utils.txt:866
msgid ""
"Can be called multiple times on a single string (the resulting escaping is "
"only applied once)."
msgstr ""

#: ../../ref/utils.txt:870
msgid "``django.utils.text``"
msgstr ""

#: ../../ref/utils.txt:891
msgid "``django.utils.timezone``"
msgstr ""

#: ../../ref/utils.txt:898
msgid ":class:`~datetime.tzinfo` instance that represents UTC."
msgstr ""

#: ../../ref/utils.txt:904
msgid ""
"A :class:`~datetime.tzinfo` subclass modeling a fixed offset from UTC. "
"``offset`` is an integer number of minutes east of UTC."
msgstr ""

#: ../../ref/utils.txt:911
msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents a time zone "
"with a fixed offset from UTC."
msgstr ""

#: ../../ref/utils.txt:914
msgid ""
"``offset`` is a :class:`datetime.timedelta` or an integer number of minutes."
" Use positive values for time zones east of UTC and negative values for west"
" of UTC."
msgstr ""

#: ../../ref/utils.txt:920
msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents the "
":ref:`default time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:925
msgid ""
"Returns the name of the :ref:`default time zone <default-current-time-"
"zone>`."
msgstr ""

#: ../../ref/utils.txt:930
msgid ""
"Returns a :class:`~datetime.tzinfo` instance that represents the "
":ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:935
msgid ""
"Returns the name of the :ref:`current time zone <default-current-time-"
"zone>`."
msgstr ""

#: ../../ref/utils.txt:940
msgid ""
"Sets the :ref:`current time zone <default-current-time-zone>`. The "
"``timezone`` argument must be an instance of a :class:`~datetime.tzinfo` "
"subclass or, if pytz_ is available, a time zone name."
msgstr ""

#: ../../ref/utils.txt:946
msgid "Unsets the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:950
msgid ""
"This is a Python context manager that sets the :ref:`current time zone "
"<default-current-time-zone>` on entry with :func:`activate()`, and restores "
"the previously active time zone on exit. If the ``timezone`` argument is "
"``None``, the :ref:`current time zone <default-current-time-zone>` is unset "
"on entry with :func:`deactivate()` instead."
msgstr ""

#: ../../ref/utils.txt:958 ../../ref/utils.txt:1120
msgid "``override`` is now usable as a function decorator."
msgstr ""

#: ../../ref/utils.txt:962
msgid ""
"Converts an aware :class:`~datetime.datetime` to a different time zone, by "
"default the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:965
msgid ""
"This function doesn't work on naive datetimes; use :func:`make_aware` "
"instead."
msgstr ""

#: ../../ref/utils.txt:970
msgid ""
"Returns a :class:`~datetime.datetime` that represents the current point in "
"time. Exactly what's returned depends on the value of :setting:`USE_TZ`:"
msgstr ""

#: ../../ref/utils.txt:974
msgid ""
"If :setting:`USE_TZ` is ``False``, this will be a :ref:`naive "
"<naive_vs_aware_datetimes>` datetime (i.e. a datetime without an associated "
"timezone) that represents the current time in the system's local timezone."
msgstr ""

#: ../../ref/utils.txt:979
msgid ""
"If :setting:`USE_TZ` is ``True``, this will be an :ref:`aware "
"<naive_vs_aware_datetimes>` datetime representing the current time in UTC. "
"Note that :func:`now` will always return times in UTC regardless of the "
"value of :setting:`TIME_ZONE`; you can use :func:`localtime` to convert to a"
" time in the current time zone."
msgstr ""

#: ../../ref/utils.txt:988
msgid ""
"Returns ``True`` if ``value`` is aware, ``False`` if it is naive. This "
"function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:993
msgid ""
"Returns ``True`` if ``value`` is naive, ``False`` if it is aware. This "
"function assumes that ``value`` is a :class:`~datetime.datetime`."
msgstr ""

#: ../../ref/utils.txt:998
msgid ""
"Returns an aware :class:`~datetime.datetime` that represents the same point "
"in time as ``value`` in ``timezone``, ``value`` being a naive "
":class:`~datetime.datetime`. If ``timezone`` is set to ``None``, it defaults"
" to the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:1003
msgid ""
"This function can raise an exception if ``value`` doesn't exist or is "
"ambiguous because of DST transitions."
msgstr ""

#: ../../ref/utils.txt:1008 ../../ref/utils.txt:1019
msgid "In older versions of Django, ``timezone`` was a required argument."
msgstr ""

#: ../../ref/utils.txt:1012
msgid ""
"Returns an naive :class:`~datetime.datetime` that represents in ``timezone``"
"  the same point in time as ``value``, ``value`` being an aware "
":class:`~datetime.datetime`. If ``timezone`` is set to ``None``, it defaults"
" to the :ref:`current time zone <default-current-time-zone>`."
msgstr ""

#: ../../ref/utils.txt:1024
msgid "``django.utils.translation``"
msgstr ""

#: ../../ref/utils.txt:1029
msgid ""
"For a complete discussion on the usage of the following see the "
":doc:`translation documentation </topics/i18n/translation>`."
msgstr ""

#: ../../ref/utils.txt:1034
msgid "Translates ``message`` and returns it in a UTF-8 bytestring"
msgstr ""

#: ../../ref/utils.txt:1038
msgid "Translates ``message`` and returns it in a unicode string"
msgstr ""

#: ../../ref/utils.txt:1042
msgid ""
"Translates ``message`` given the ``context`` and returns it in a unicode "
"string."
msgstr ""

#: ../../ref/utils.txt:1045
msgid "For more information, see :ref:`contextual-markers`."
msgstr ""

#: ../../ref/utils.txt:1051 ../../ref/utils.txt:1082
msgid "Same as the non-lazy versions above, but using lazy execution."
msgstr ""

#: ../../ref/utils.txt:1053 ../../ref/utils.txt:1084
msgid "See :ref:`lazy translations documentation <lazy-translations>`."
msgstr ""

#: ../../ref/utils.txt:1058
msgid ""
"Marks strings for translation but doesn't translate them now. This can be "
"used to store strings in global variables that should stay in the base "
"language (because they might be used externally) and will be translated "
"later."
msgstr ""

#: ../../ref/utils.txt:1065
msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number`` in a UTF-8 bytestring."
msgstr ""

#: ../../ref/utils.txt:1070
msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:1075
msgid ""
"Translates ``singular`` and ``plural`` and returns the appropriate string "
"based on ``number`` and the ``context`` in a unicode string."
msgstr ""

#: ../../ref/utils.txt:1088
msgid ""
"Lazy variant of string concatenation, needed for translations that are "
"constructed from multiple parts."
msgstr ""

#: ../../ref/utils.txt:1093
msgid ""
"Fetches the translation object for a given language and activates it as the "
"current translation object for the current thread."
msgstr ""

#: ../../ref/utils.txt:1098
msgid ""
"Deactivates the currently active translation object so that further _ calls "
"will resolve against the default translation object, again."
msgstr ""

#: ../../ref/utils.txt:1103
msgid ""
"Makes the active translation object a ``NullTranslations()`` instance. This "
"is useful when we want delayed translations to appear as the original string"
" for some reason."
msgstr ""

#: ../../ref/utils.txt:1109
msgid ""
"A Python context manager that uses :func:`django.utils.translation.activate`"
" to fetch the translation object for a given language, activates it as the "
"translation object for the current thread and reactivates the previous "
"active language on exit. Optionally, it can simply deactivate the temporary "
"translation on exit with :func:`django.utils.translation.deactivate` if the "
"``deactivate`` argument is ``True``. If you pass ``None`` as the language "
"argument, a ``NullTranslations()`` instance is activated within the context."
msgstr ""

#: ../../ref/utils.txt:1124
msgid ""
"Returns the currently selected language code. Returns ``None`` if "
"translations are temporarily deactivated (by :func:`deactivate_all()` or "
"when ``None`` is passed to :func:`override()`)."
msgstr ""

#: ../../ref/utils.txt:1130
msgid ""
"Before Django 1.8, ``get_language()`` always returned "
":setting:`LANGUAGE_CODE` when translations were deactivated."
msgstr ""

#: ../../ref/utils.txt:1135
msgid "Returns selected language's BiDi layout:"
msgstr ""

#: ../../ref/utils.txt:1137
msgid "``False`` = left-to-right layout"
msgstr ""

#: ../../ref/utils.txt:1138
msgid "``True`` = right-to-left layout"
msgstr ""

#: ../../ref/utils.txt:1142
msgid ""
"Analyzes the request to find what language the user wants the system to "
"show. Only languages listed in settings.LANGUAGES are taken into account. If"
" the user requests a sublanguage where we have a main language, we send out "
"the main language."
msgstr ""

#: ../../ref/utils.txt:1147
msgid ""
"If ``check_path`` is ``True``, the function first checks the requested URL "
"for whether its path begins with a language code listed in the "
":setting:`LANGUAGES` setting."
msgstr ""

#: ../../ref/utils.txt:1153
msgid "Turns a language name (en-us) into a locale name (en_US)."
msgstr ""

#: ../../ref/utils.txt:1157
msgid ""
"Turns a Django template into something that is understood by ``xgettext``. "
"It does so by translating the Django translation tags into standard "
"``gettext`` function invocations."
msgstr ""

#: ../../ref/utils.txt:1163
msgid ""
"Session key under which the active language for the current session is "
"stored."
msgstr ""

#: ../../ref/utils.txt:1167
msgid "``django.utils.tzinfo``"
msgstr ""

#: ../../ref/utils.txt:1169
msgid "Use :mod:`~django.utils.timezone` instead."
msgstr ""

#: ../../ref/utils.txt:1177
msgid "Fixed offset in minutes east from UTC."
msgstr ""

#: ../../ref/utils.txt:1179
msgid "Use :func:`~django.utils.timezone.get_fixed_timezone` instead."
msgstr ""

#: ../../ref/utils.txt:1184
msgid "Proxy timezone information from time module."
msgstr ""

#: ../../ref/utils.txt:1186
msgid "Use :func:`~django.utils.timezone.get_default_timezone` instead."
msgstr ""

#: ../../ref/validators.txt:9
msgid "Writing validators"
msgstr ""

#: ../../ref/validators.txt:11
msgid ""
"A validator is a callable that takes a value and raises a "
":exc:`~django.core.exceptions.ValidationError` if it doesn't meet some "
"criteria. Validators can be useful for re-using validation logic between "
"different types of fields."
msgstr ""

#: ../../ref/validators.txt:16
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""

#: ../../ref/validators.txt:28
msgid ""
"You can add this to a model field via the field's "
":attr:`~django.db.models.Field.validators` argument::"
msgstr ""

#: ../../ref/validators.txt:36
msgid ""
"Because values are converted to Python before validators are run, you can "
"even use the same validator with forms::"
msgstr ""

#: ../../ref/validators.txt:44
msgid ""
"You can also use a class with a ``__call__()`` method for more complex or "
"configurable validators. :class:`RegexValidator`, for example, uses this "
"technique. If a class-based validator is used in the "
":attr:`~django.db.models.Field.validators` model field option, you should "
"make sure it is :ref:`serializable by the migration framework <migration-"
"serializing>` by adding :ref:`deconstruct() <custom-deconstruct-method>` and"
" ``__eq__()`` methods."
msgstr ""

#: ../../ref/validators.txt:53
msgid "How validators are run"
msgstr ""

#: ../../ref/validators.txt:55
msgid ""
"See the :doc:`form validation </ref/forms/validation>` for more information "
"on how validators are run in forms, and :ref:`Validating objects "
"<validating-objects>` for how they're run in models. Note that validators "
"will not be run automatically when you save a model, but if you are using a "
":class:`~django.forms.ModelForm`, it will run your validators on any fields "
"that are included in your form. See the :doc:`ModelForm documentation "
"</topics/forms/modelforms>` for information on how model validation "
"interacts with forms."
msgstr ""

#: ../../ref/validators.txt:65
msgid "Built-in validators"
msgstr ""

#: ../../ref/validators.txt:67
msgid ""
"The :mod:`django.core.validators` module contains a collection of callable "
"validators for use with model and form fields. They're used internally but "
"are available for use with your own fields, too. They can be used in "
"addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""

#: ../../ref/validators.txt:73
msgid "``RegexValidator``"
msgstr ""

#: ../../ref/validators.txt:77
msgid ""
"If not ``None``, overrides :attr:`regex`. Can be a regular expression string"
" or a pre-compiled regular expression."
msgstr ""

#: ../../ref/validators.txt:79 ../../ref/validators.txt:128
msgid "If not ``None``, overrides :attr:`.message`."
msgstr ""

#: ../../ref/validators.txt:80 ../../ref/validators.txt:129
msgid "If not ``None``, overrides :attr:`code`."
msgstr ""

#: ../../ref/validators.txt:81
msgid "If not ``None``, overrides :attr:`inverse_match`."
msgstr ""

#: ../../ref/validators.txt:82
msgid ""
"If not ``None``, overrides :attr:`flags`. In that case, :attr:`regex` must "
"be a regular expression string, or :exc:`TypeError` is raised."
msgstr ""

#: ../../ref/validators.txt:88
msgid ""
"The regular expression pattern to search for the provided ``value``, or a "
"pre-compiled regular expression. By default, raises a "
":exc:`~django.core.exceptions.ValidationError` with :attr:`message` and "
":attr:`code` if a match is not found. That standard behavior can be reversed"
" by setting :attr:`inverse_match` to ``True``, in which case the "
":exc:`~django.core.exceptions.ValidationError` is raised when a match **is**"
" found. By default, matches any string (including an empty string)."
msgstr ""

#: ../../ref/validators.txt:99
msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""

#: ../../ref/validators.txt:105 ../../ref/validators.txt:140
msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"invalid\"``."
msgstr ""

#: ../../ref/validators.txt:112
msgid "The match mode for :attr:`regex`. Defaults to ``False``."
msgstr ""

#: ../../ref/validators.txt:118
msgid ""
"The flags used when compiling the regular expression string :attr:`regex`. "
"If :attr:`regex` is a pre-compiled regular expression, and :attr:`flags` is "
"overridden, :exc:`TypeError` is raised. Defaults to `0`."
msgstr ""

#: ../../ref/validators.txt:124
msgid "``EmailValidator``"
msgstr ""

#: ../../ref/validators.txt:130
msgid "If not ``None``, overrides :attr:`whitelist`."
msgstr ""

#: ../../ref/validators.txt:134
msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid email address\"``."
msgstr ""

#: ../../ref/validators.txt:145
msgid ""
"Whitelist of email domains to allow. By default, a regular expression (the "
"``domain_regex`` attribute) is used to validate whatever appears after the @"
" sign. However, if that string appears in the whitelist, this validation is "
"bypassed. If not provided, the default whitelist is ``['localhost']``. Other"
" domains that don't contain a dot won't pass validation, so you'd need to "
"whitelist them as necessary."
msgstr ""

#: ../../ref/validators.txt:153
msgid "``URLValidator``"
msgstr ""

#: ../../ref/validators.txt:157
msgid ""
"A :class:`RegexValidator` that ensures a value looks like a URL, and raises "
"an error code of ``'invalid'`` if it doesn't."
msgstr ""

#: ../../ref/validators.txt:160
msgid ""
"Loopback addresses and reserved IP spaces are considered valid. Literal IPv6"
" addresses (:rfc:`2732`) and unicode domains are both supported."
msgstr ""

#: ../../ref/validators.txt:163
msgid ""
"In addition to the optional arguments of its parent :class:`RegexValidator` "
"class, ``URLValidator`` accepts an extra optional attribute:"
msgstr ""

#: ../../ref/validators.txt:168
msgid ""
"URL/URI scheme list to validate against. If not provided, the default list "
"is ``['http', 'https', 'ftp', 'ftps']``. As a reference, the IANA Web site "
"provides a full list of `valid URI schemes`_."
msgstr ""

#: ../../ref/validators.txt:176
msgid "The optional ``schemes`` attribute was added."
msgstr ""

#: ../../ref/validators.txt:180
msgid ""
"Support for IPv6 addresses, unicode domains, and URLs containing "
"authentication data was added."
msgstr ""

#: ../../ref/validators.txt:184
msgid "``validate_email``"
msgstr ""

#: ../../ref/validators.txt:188
msgid "An :class:`EmailValidator` instance without any customizations."
msgstr ""

#: ../../ref/validators.txt:191
msgid "``validate_slug``"
msgstr ""

#: ../../ref/validators.txt:195
msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"letters, numbers, underscores or hyphens."
msgstr ""

#: ../../ref/validators.txt:199
msgid "``validate_ipv4_address``"
msgstr ""

#: ../../ref/validators.txt:203
msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an IPv4 "
"address."
msgstr ""

#: ../../ref/validators.txt:207
msgid "``validate_ipv6_address``"
msgstr ""

#: ../../ref/validators.txt:211
msgid "Uses ``django.utils.ipv6`` to check the validity of an IPv6 address."
msgstr ""

#: ../../ref/validators.txt:214
msgid "``validate_ipv46_address``"
msgstr ""

#: ../../ref/validators.txt:218
msgid ""
"Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure "
"a value is either a valid IPv4 or IPv6 address."
msgstr ""

#: ../../ref/validators.txt:222
msgid "``validate_comma_separated_integer_list``"
msgstr ""

#: ../../ref/validators.txt:226
msgid ""
"A :class:`RegexValidator` instance that ensures a value is a comma-separated"
" list of integers."
msgstr ""

#: ../../ref/validators.txt:230
msgid "``MaxValueValidator``"
msgstr ""

#: ../../ref/validators.txt:234
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""

#: ../../ref/validators.txt:239 ../../ref/validators.txt:251
#: ../../ref/validators.txt:263 ../../ref/validators.txt:275
msgid "The ``message`` parameter was added."
msgstr ""

#: ../../ref/validators.txt:242
msgid "``MinValueValidator``"
msgstr ""

#: ../../ref/validators.txt:246
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""

#: ../../ref/validators.txt:254
msgid "``MaxLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:258
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""

#: ../../ref/validators.txt:266
msgid "``MinLengthValidator``"
msgstr ""

#: ../../ref/validators.txt:270
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""

#: ../../ref/views.txt:3
msgid "Built-in Views"
msgstr ""

#: ../../ref/views.txt:8
msgid ""
"Several of Django's built-in views are documented in "
":doc:`/topics/http/views` as well as elsewhere in the documentation."
msgstr ""

#: ../../ref/views.txt:12
msgid "Serving files in development"
msgstr ""

#: ../../ref/views.txt:16
msgid ""
"There may be files other than your project's static assets that, for "
"convenience, you'd like to have Django serve for you in local development. "
"The :func:`~django.views.static.serve` view can be used to serve any "
"directory you give it. (This view is **not** hardened for production use and"
" should be used only as a development aid; you should serve these files in "
"production using a real front-end web server)."
msgstr ""

#: ../../ref/views.txt:23
msgid ""
"The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. "
"``django.contrib.staticfiles`` is intended for static assets and has no "
"built-in handling for user-uploaded files, but you can have Django serve "
"your :setting:`MEDIA_ROOT` by appending something like this to your "
"URLconf::"
msgstr ""

#: ../../ref/views.txt:40
msgid ""
"Note, the snippet assumes your :setting:`MEDIA_URL` has a value of "
"``'/media/'``. This will call the :func:`~django.views.static.serve` view, "
"passing in the path from the URLconf and the (required) ``document_root`` "
"parameter."
msgstr ""

#: ../../ref/views.txt:45
msgid ""
"Since it can become a bit cumbersome to define this URL pattern, Django "
"ships with a small URL helper function "
":func:`~django.conf.urls.static.static` that takes as parameters the prefix "
"such as :setting:`MEDIA_URL` and a dotted path to a view, such as "
"``'django.views.static.serve'``. Any other function parameter will be "
"transparently passed to the view."
msgstr ""

#: ../../ref/views.txt:54
msgid "Error views"
msgstr ""

#: ../../ref/views.txt:56
msgid ""
"Django comes with a few views by default for handling HTTP errors. To "
"override these with your own custom views, see :ref:`customizing-error-"
"views`."
msgstr ""

#: ../../ref/views.txt:62
msgid "The 404 (page not found) view"
msgstr ""

#: ../../ref/views.txt:66
msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django loads "
"a special view devoted to handling 404 errors. By default, it's the view "
":func:`django.views.defaults.page_not_found`, which either produces a very "
"simple \"Not Found\" message or loads and renders the template ``404.html`` "
"if you created it in your root template directory."
msgstr ""

#: ../../ref/views.txt:72
msgid ""
"The default 404 view will pass one variable to the template: "
"``request_path``, which is the URL that resulted in the error."
msgstr ""

#: ../../ref/views.txt:75
msgid "Three things to note about 404 views:"
msgstr ""

#: ../../ref/views.txt:77
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

#: ../../ref/views.txt:80
msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your template context processors (e.g. "
"``MEDIA_URL``)."
msgstr ""

#: ../../ref/views.txt:84
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""

#: ../../ref/views.txt:91
msgid "The 500 (server error) view"
msgstr ""

#: ../../ref/views.txt:95
msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which either "
"produces a very simple \"Server Error\" message or loads and renders the "
"template ``500.html`` if you created it in your root template directory."
msgstr ""

#: ../../ref/views.txt:101
msgid ""
"The default 500 view passes no variables to the ``500.html`` template and is"
" rendered with an empty ``Context`` to lessen the chance of additional "
"errors."
msgstr ""

#: ../../ref/views.txt:104
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""

#: ../../ref/views.txt:111
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

#: ../../ref/views.txt:115
msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

#: ../../ref/views.txt:119
msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

#: ../../ref/views.txt:123
msgid ""
"``django.views.defaults.permission_denied`` is triggered by a "
":exc:`~django.core.exceptions.PermissionDenied` exception. To deny access in"
" a view you can use code like this::"
msgstr ""

#: ../../ref/views.txt:137
msgid "The 400 (bad request) view"
msgstr ""

#: ../../ref/views.txt:141
msgid ""
"When a :exc:`~django.core.exceptions.SuspiciousOperation` is raised in "
"Django, it may be handled by a component of Django (for example resetting "
"the session data). If not specifically handled, Django will consider the "
"current request a 'bad request' instead of a server error."
msgstr ""

#: ../../ref/views.txt:146
msgid ""
"``django.views.defaults.bad_request``, is otherwise very similar to the "
"``server_error`` view, but returns with the status code 400 indicating that "
"the error condition was the result of a client operation."
msgstr ""

#: ../../ref/views.txt:150
msgid ""
"``bad_request`` views are also only used when :setting:`DEBUG` is ``False``."
msgstr ""
